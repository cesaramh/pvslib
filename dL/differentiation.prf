(differentiation
 (IMP_derivatives_TCC1 0
  (IMP_derivatives_TCC1-1 nil 3903598511
   ("" (lemma "deriv_domain_real") (("" (propax) nil nil)) nil)
   ((deriv_domain_real formula-decl nil deriv_domain analysis)) nil
   (IMP_derivatives assuming "analysis@derivatives[real].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (IMP_derivatives_TCC2 0
  (IMP_derivatives_TCC2-1 nil 3903598511
   ("" (expand "not_one_element?")
    (("" (skeep) (("" (inst 1 "x+1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis))
   nil
   (IMP_derivatives assuming "analysis@derivatives[real].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (right_dd_i 0
  (right_dd_i-1 nil 3806746925
   ("" (skeep)
    (("" (expand "right?")
      (("" (expand "deriv_domain?")
        (("" (expand "deriv_domain?")
          (("" (skeep)
            (("" (inst -1 "e!1" "x")
              (("" (skeep) (("" (inst 1 "y") nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (proj const-decl "bool" differentiation nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (right_dd 0
  (right_dd-1 nil 3806745630
   ("" (skeep)
    (("" (expand "right?")
      (("" (expand "deriv_domain?")
        (("" (lemma "right_dd_i")
          (("" (inst?)
            (("" (skeep)
              (("" (inst?) (("" (assert) (("" (inst?) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((right_dd_i formula-decl nil differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (connection_proj 0
  (connection_proj-1 nil 3852744812
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "x" "y")
        (("" (expand "proj")
          (("" (skeep*)
            ((""
              (inst 1
               "LAMBDA(p:nat): IF p = i THEN z ELSE env(p) ENDIF")
              (("" (expand "connected?" -4)
                ((""
                  (inst -4 "env" "env!1"
                   "LAMBDA (p: nat): IF p = i THEN z ELSE env(p) ENDIF")
                  (("" (expand "between?" 1)
                    (("" (skeep)
                      (("" (assert)
                        (("" (case "i_1 = i")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (between? const-decl "bool" differentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (connected? const-decl "bool" differentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (proj const-decl "bool" differentiation nil)
    (> const-decl "bool" reals nil))
   shostak))
 (right_ne_i 0
  (right_ne_i-1 nil 3806747432
   ("" (skeep)
    (("" (expand "right?" -1)
      (("" (expand "not_one_element?" 1)
        (("" (expand "not_one_element?" 1)
          (("" (skeep)
            (("" (inst -1 "1" "x")
              (("" (skeep)
                (("" (inst 1 "x+y") (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (proj const-decl "bool" differentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil))
   shostak))
 (right_ne 0
  (right_ne-1 nil 3806747483
   ("" (skeep)
    (("" (expand "right?" -1)
      (("" (expand "not_one_element?" 1 1)
        (("" (skeep)
          (("" (inst -1 "i")
            (("" (lemma "right_ne_i")
              (("" (inst?) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((right_ne_i formula-decl nil differentiation nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (ddl_dom_upto 0
  (ddl_dom_upto-1 nil 3792406340
   ("" (skeep)
    (("" (expand "ddl_dom_upto?" -1)
      (("" (expand "ddl_dom?" 1)
        (("" (flatten) (("" (assert) (("" (inst -2 "i") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((ddl_dom_upto? const-decl "bool" differentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (ddl_dom_weak 0
  (ddl_dom_weak-1 nil 3792417566
   ("" (skeep*)
    (("" (split 1)
      (("1" (expand "ddl_dom?")
        (("1" (flatten)
          (("1" (inst -2 "i") (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (expand "ddl_dom_upto?" 1)
        (("2" (expand "ddl_dom?" -1)
          (("2" (flatten)
            (("2" (split 1)
              (("1" (propax) nil nil)
               ("2" (skeep) (("2" (inst -2 "i_1") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (ddl_dom_dd 0
  (ddl_dom_dd-2 nil 3792406122
   ("" (skeep)
    (("" (expand "deriv_domain?")
      (("" (expand "ddl_dom?")
        (("" (flatten)
          (("" (skeep)
            (("" (typepred "x")
              (("" (expand "not_one_element?")
                (("" (expand "proj")
                  (("" (expand "not_one_element?")
                    (("" (skeep)
                      (("" (inst -3 "x")
                        (("" (skeep)
                          (("" (typepred "y")
                            (("" (expand "proj" -1)
                              ((""
                                (skeep)
                                ((""
                                  (case "x<y")
                                  (("1"
                                    (inst 2 "min(e!1,y-x)/2")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (split 1)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (lemma "connection_proj")
                                        (("2"
                                          (inst -1 "P" "i" "x" "y")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -1
                                               "min(e!1, y - x) / 2 + x")
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "NOT y<x")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (inst 3 "-min(e!1,x-y)/2")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (split 1)
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (lemma "connection_proj")
                                          (("2"
                                            (inst -1 "P" "i" "y" "x")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -1
                                                 "(-min(e!1, x - y) / 2 + x)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (proj const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (connection_proj formula-decl nil differentiation nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (connected? const-decl "bool" differentiation nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis))
   nil)
  (ddl_dom_dd-1 nil 3792405655
   ("" (skeep)
    (("" (expand "ddl_dom" -1)
      (("" (expand "deriv_domain?" 1)
        (("" (flatten)
          (("" (expand "connected?" -1)
            (("" (skeep)
              (("" (expand "not_one_element?" -2)
                (("" (expand "not_one_element?" -2)
                  (("" (inst -2 "x")
                    (("" (skeep)
                      (("" (typepred "x" "y")
                        (("" (expand "proj")
                          (("" (skeep)
                            (("" (skeep)
                              ((""
                                (case "x<y")
                                (("1"
                                  (inst -4 "env" "env!1" _)
                                  (("1"
                                    (inst
                                     -4
                                     "env WITH [(i):= x+min(y-x,e!1)/2]")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst 2 " min(y - x, e!1) / 2")
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (split 1)
                                          (("1"
                                            (expand "min" 1)
                                            (("1"
                                              (lift-if 1)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "proj" 1)
                                            (("2"
                                              (inst
                                               1
                                               "env WITH [(i) := min(y - x, e!1) / 2 + x]")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "between?" 1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (case "i_1=i")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1 -3 rl)
                                                (("1"
                                                  (replace -3 1 rl)
                                                  (("1"
                                                    (replace -3 1 lr)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "y<x")
                                  (("1"
                                    (inst -4 "env" "env!1" _)
                                    (("1"
                                      (inst
                                       -4
                                       "env WITH [(i) := x- min(x-y,e!1)/2]")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst 3 "-min(x-y,e!1)/2")
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (split 1)
                                            (("1"
                                              (expand "min" 1 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lift-if -1)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "proj" 1)
                                              (("2"
                                                (inst
                                                 1
                                                 "env WITH [(i) := x - min(x - y, e!1) / 2]")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "between?" 1)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case "i_1=i")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis))
   shostak))
 (ddl_dom__upto_dd 0
  (ddl_dom__upto_dd-2 nil 3792406175
   ("" (skeep)
    (("" (skeep)
      (("" (expand "ddl_dom_upto?" -1)
        (("" (flatten)
          (("" (inst -2 "i")
            (("" (lemma "ddl_dom_dd")
              (("" (inst -1 "i" "P")
                (("" (assert)
                  (("" (expand "ddl_dom?" 1) (("" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ddl_dom_dd formula-decl nil differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil))
   nil)
  (ddl_dom__upto_dd-1 nil 3792405745
   ("" (skeep)
    (("" (skeep)
      (("" (expand "ddl_dom_upto" -1)
        (("" (flatten)
          (("" (inst -2 "i")
            (("" (lemma "ddl_dom_dd")
              (("" (inst -1 "i" "P")
                (("" (assert)
                  (("" (expand "ddl_dom" 1) (("" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil))
   shostak))
 (ddl_dom_noe 0
  (ddl_dom_noe-1 nil 3852745503
   ("" (skeep)
    (("" (typepred "P")
      (("" (expand "ddl_dom?")
        (("" (expand "not_one_element?" -1) (("" (flatten) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (dl_true_DDL 0
  (dl_true_DDL-1 nil 3871991668
   ("" (expand "ddl_dom?")
    (("" (split)
      (("1" (expand "connected?")
        (("1" (skeep) (("1" (assert) (("1" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "not_one_element?")
          (("2" (expand "not_one_element?")
            (("2" (skeep)
              (("2" (typepred "x")
                (("2" (expand "proj")
                  (("2" (skeep)
                    (("2" (inst 1 "x+1")
                      (("1" (assert) nil nil)
                       ("2" (expand "proj")
                        (("2" (inst 1 "LAMBDA(i:nat): x+1")
                          (("1" (assert) nil nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLBOOL const-decl "bool" bool_expr nil)
    (connected? const-decl "bool" differentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (proj const-decl "bool" differentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis))
   shostak))
 (dl_true_up_DDL 0
  (dl_true_up_DDL-1 nil 3871991670
   ("" (skeep)
    (("" (expand "ddl_dom_upto?")
      (("" (split)
        (("1" (grind) nil nil)
         ("2" (skeep)
          (("2" (expand "not_one_element?")
            (("2" (expand "not_one_element?")
              (("2" (skeep)
                (("2" (inst 1 "x+1")
                  (("1" (assert) nil nil)
                   ("2" (expand "proj")
                    (("2" (inst 1 "LAMBDA(i:nat): x+1")
                      (("1" (assert) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ddl_dom_upto? const-decl "bool" differentiation nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (proj const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (connected? const-decl "bool" differentiation nil)
    (DLBOOL const-decl "bool" bool_expr nil))
   shostak))
 (derivable?_TCC1 0
  (derivable?_TCC1-1 nil 3791729190 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (P!1 skolem-const-decl "(ddl_dom?(i!1))" differentiation nil)
    (i!1 skolem-const-decl "nat" differentiation nil)
    (not_one_element? const-decl "bool" differentiation nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (/= const-decl "boolean" notequal nil)
    (connected? const-decl "bool" differentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (proj const-decl "bool" differentiation nil)
    (between? const-decl "bool" differentiation nil))
   nil
   (derivable? subtype "differentiation.env(differentiation.i)"
    "(differentiation.proj(differentiation.i)(differentiation.P))")))
 (derivable?_TCC2 0
  (derivable?_TCC2-1 nil 3791729190
   ("" (skeep) (("" (rewrite "ddl_dom_dd") nil nil)) nil)
   ((ddl_dom_dd formula-decl nil differentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil))
   nil
   (derivable? assuming
    "analysis@derivatives_def[(differentiation.proj(differentiation.i)(differentiation.P))].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (derivable?_TCC3 0
  (derivable?_TCC3-1 nil 3791729190
   ("" (skeep)
    (("" (typepred "P")
      (("" (expand "ddl_dom?" -1)
        (("" (flatten)
          (("" (assert)
            (("" (expand "not_one_element?" -2) (("" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (not_one_element? const-decl "bool" differentiation nil))
   nil
   (derivable? assuming
    "analysis@derivatives_def[(differentiation.proj(differentiation.i)(differentiation.P))].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (derivable_up?_TCC1 0
  (derivable_up?_TCC1-1 nil 3792330962
   ("" (skeep)
    (("" (typepred "P")
      (("" (lemma "ddl_dom_upto")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((ddl_dom_upto? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (ddl_dom_upto formula-decl nil differentiation nil))
   nil
   (derivable_up? subtype "differentiation.P"
    "(differentiation.ddl_dom?(differentiation.i))")))
 (derivable?_TCC4 0
  (derivable?_TCC4-1 nil 3795290869 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (connected? const-decl "bool" differentiation nil)
    (/= const-decl "boolean" notequal nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" differentiation nil)
    (ddl_dom? const-decl "bool" differentiation nil))
   nil
   (derivable? subtype "differentiation.P"
    "(differentiation.ddl_dom?(differentiation.i))")))
 (hathat_diff_real_TCC1 0
  (hathat_diff_real_TCC1-1 nil 3792231840 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (hathat_diff_real subtype "differentiation.m"
    "{r: reals.real | booleans.OR(differentiation.a /= 0, r /= 0)}")))
 (hathat_diff_real_TCC2 0
  (hathat_diff_real_TCC2-1 nil 3792231840 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (ln const-decl "real" ln_exp lnexp)
    (^^ const-decl "nnreal" expt lnexp)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (hathat_diff_real subtype
    "expt.^^(differentiation.a, differentiation.n)" "nznum")))
 (hathat_diff_real_TCC3 0
  (hathat_diff_real_TCC3-1 nil 3792231840 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (hathat_diff_real subtype
    "((number_fields.-)(differentiation.m, differentiation.n))"
    "{r: reals.real | booleans.OR(differentiation.a /= 0, r /= 0)}")))
 (hathat_diff_real 0
  (hathat_diff_real-1 nil 3792232076
   ("" (skeep)
    (("" (expand "^^")
      (("" (lemma " exp_diff")
        (("" (inst -1 "(m * ln(a))" "n * ln(a)")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (^^ const-decl "nnreal" expt lnexp)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp lnexp)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (exp_diff formula-decl nil ln_exp lnexp))
   shostak))
 (expt_TCC1 0
  (expt_TCC1-1 nil 3791888166 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (expt subtype "differentiation.r(differentiation.env)" "nnreal")))
 (expt_TCC2 0
  (expt_TCC2-1 nil 3791888591 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (expt subtype "differentiation.x"
         "{r_1: reals.real | booleans.OR(differentiation.r(differentiation.env) /= 0, r_1 /= 0)}")))
 (sqrt_hathat_TCC1 0
  (sqrt_hathat_TCC1-1 nil 3792424317 ("" (subtype-tcc) nil nil) nil nil
   (sqrt_hathat subtype "(number_fields./(1, 2))"
    "{r: reals.real | booleans.OR(differentiation.a /= 0, r /= 0)}")))
 (sqrt_hathat 0
  (sqrt_hathat-1 nil 3792424317
   ("" (skeep)
    (("" (lemma "hathat_sum_posreal")
      (("" (inst -1 "a" "1/2" "1/2")
        (("" (assert)
          (("" (lemma "sqrt_def")
            (("" (inst -1 "a")
              (("" (case "FORALL(a,b:nnreal): a*a=b*b IMPLIES a=b")
                (("1" (inst -1 "sqrt(a)" "a^^(1/2)")
                  (("1" (assert) nil nil)) nil)
                 ("2" (hide 2)
                  (("2" (skeep)
                    (("2" (hide -2 -3)
                      (("2" (case "a!1=0")
                        (("1" (assert)
                          (("1" (case "b=0")
                            (("1" (assert) nil nil)
                             ("2" (div-by -2 "b")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case "NOT a!1*a!1-b*b=0")
                            (("1" (assert) nil nil)
                             ("2"
                              (case "NOT a!1*a!1-b*b = (a!1-b) * (a!1+b)")
                              (("1" (assert) nil nil)
                               ("2"
                                (replace -1 -2)
                                (("2"
                                  (div-by -2 "(a!1+b)")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((hathat_sum_posreal formula-decl nil expt lnexp)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (hathat_to_1 formula-decl nil expt lnexp)
    (real_times_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (^^ const-decl "nnreal" expt lnexp)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqrt_def formula-decl nil sqrt reals)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   shostak))
 (sqrt_hathat_neg_TCC1 0
  (sqrt_hathat_neg_TCC1-1 nil 3792424631 ("" (subtype-tcc) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil
   (sqrt_hathat_neg subtype
    "(number_fields./((number_fields.-)(1), 2))"
    "{r: reals.real | booleans.OR(differentiation.a /= 0, r /= 0)}")))
 (sqrt_hathat_neg 0
  (sqrt_hathat_neg-1 nil 3792424632
   ("" (lemma "sqrt_hathat")
    (("" (skeep)
      (("" (inst?)
        (("" (replace -1 1 rl)
          (("" (hide -1)
            (("" (lemma "hathat_to_1")
              (("" (inst -1 "a")
                (("" (lemma "hathat_diff_real")
                  (("" (lemma "hathat_to_0")
                    (("" (inst -2 "a" "1/2" "0")
                      (("" (inst -1 "a") (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sqrt_pos application-judgement "posreal" sqrt reals)
    (hathat_to_1 formula-decl nil expt lnexp)
    (hathat_diff_real formula-decl nil differentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (hathat_to_0 formula-decl nil expt lnexp)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sqrt_hathat formula-decl nil differentiation nil))
   shostak))
 (expt_exp_equiv 0
  (expt_exp_equiv-1 nil 3791888410
   ("" (skeep)
    (("" (lemma "hathat_nat")
      (("" (expand "^^" 1)
        (("" (expand "expt" 1)
          (("" (assert)
            (("" (inst -1 "r(env)" "N")
              (("" (expand "^" 1) (("" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((hathat_nat formula-decl nil expt lnexp)
    (expt const-decl "real" differentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^^ const-decl "RealExpr" differentiation nil))
   shostak))
 (partial_diff_TCC1 0
  (partial_diff_TCC1-1 nil 3783184822
   ("" (skeep)
    (("" (split 1)
      (("1" (expand "proj" 1) (("1" (inst 1 "env") nil nil)) nil)
       ("2" (typepred "re")
        (("2" (expand "derivable?" -1)
          (("2" (inst -1 "env")
            (("2" (assert)
              (("2" (expand "derivable?" -1) (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (env skolem-const-decl "Environment" differentiation nil)
    (P skolem-const-decl "(ddl_dom?(i))" differentiation nil)
    (i skolem-const-decl "nat" differentiation nil)
    (proj const-decl "bool" differentiation nil)
    (derivable? const-decl "bool" differentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (derivable? const-decl "bool" differentiation nil))
   nil
   (partial_diff subtype "differentiation.env(differentiation.i)"
    "{x_1 | derivatives_def[(differentiation.proj(differentiation.i)(differentiation.P))].derivable?(LAMBDA (x: (differentiation.proj(differentiation.i)(differentiation.P))): differentiation.re(differentiation.env WITH [(differentiation.i) := x]), x_1)}")))
 (dl_derivable_const 0
  (dl_derivable_const-1 nil 3791734567
   ("" (skeep)
    (("" (expand "derivable?" 1)
      (("" (skeep)
        (("" (expand "derivable?" 1)
          (("" (lemma "derivable_const[(proj(i)(P))]")
            (("1" (inst -1 "k")
              (("1" (expand "const_fun" -1)
                (("1" (expand "cnst" 1)
                  (("1" (assert)
                    (("1" (expand "derivable?" -1)
                      (("1" (inst -1 "env(i)") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "P")
              (("2" (expand "ddl_dom?" -1)
                (("2" (flatten)
                  (("2" (expand "not_one_element?" -2)
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (lemma "ddl_dom_dd")
              (("3" (inst -1 "i" "P") (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ddl_dom_dd formula-decl nil differentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cnst const-decl "real" hp_def nil)
    (derivable? const-decl "bool" derivatives analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (derivable_const judgement-tcc nil derivatives analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (proj const-decl "bool" differentiation nil))
   shostak))
 (dl_partial_const_TCC1 0
  (dl_partial_const_TCC1-1 nil 3791734555
   ("" (skeep)
    (("" (lemma "dl_derivable_const") (("" (inst?) nil nil)) nil)) nil)
   ((dl_derivable_const formula-decl nil differentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil))
   nil
   (dl_partial_const subtype "hp_def.cnst(differentiation.k)"
    "(differentiation.derivable?(differentiation.i, differentiation.P))")))
 (dl_partial_const 0
  (dl_partial_const-1 nil 3791735494
   ("" (skeep)
    (("" (expand "partial_diff")
      (("" (lemma "deriv_const_fun[(proj(i)(P))]")
        (("1" (inst -1 "k")
          (("1" (decompose-equality 1)
            (("1" (lift-if 1)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (expand "cnst" 1)
                    (("1" (assert)
                      (("1" (decompose-equality -2)
                        (("1" (inst -1 "x!1(i)")
                          (("1" (expand "deriv" -1)
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (typepred " P")
                            (("2" (lemma "ddl_dom_noe")
                              (("2" (inst -1 "i" "P") nil nil)) nil))
                            nil))
                          nil)
                         ("3" (lemma "ddl_dom_dd")
                          (("3" (inst?)
                            (("3" (inst -1 "P")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (lemma "derivable_const[(proj(i)(P))]")
                          (("4" (inst -1 "k")
                            (("4" (expand "const_fun" -1)
                              (("4" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (expand "cnst" 2) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (split 1)
                (("1" (expand "proj" 1 1)
                  (("1" (inst 1 "env") nil nil)) nil)
                 ("2" (lemma "dl_derivable_const")
                  (("2" (inst -1 "i" "k" "P")
                    (("2" (expand "derivable?" -1)
                      (("2" (inst -1 "env")
                        (("2" (expand "derivable?" -1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "ddl_dom_noe") (("2" (inst -1 "i" "P") nil nil))
          nil)
         ("3" (lemma "ddl_dom_dd")
          (("3" (inst -1 "i" "P") (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((partial_diff const-decl "RealExpr" differentiation nil)
    (dl_derivable_const formula-decl nil differentiation nil)
    (derivable_const judgement-tcc nil derivatives analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (ddl_dom_dd formula-decl nil differentiation nil)
    (ddl_dom_noe formula-decl nil differentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (cnst const-decl "real" hp_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (deriv_const_fun formula-decl nil derivatives analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (proj const-decl "bool" differentiation nil))
   shostak))
 (dl_derivable_up_cnst 0
  (dl_derivable_up_cnst-1 nil 3867499279
   ("" (skeep)
    (("" (expand "derivable_up?")
      (("" (skeep)
        (("" (lemma "dl_derivable_const") (("" (inst?) nil nil)) nil))
        nil))
      nil))
    nil)
   ((derivable_up? const-decl "bool" differentiation nil)
    (dl_derivable_const formula-decl nil differentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil))
   shostak))
 (dl_derivable_val 0
  (dl_derivable_val-1 nil 3791805820
   ("" (skeep)
    (("" (case "i=dlvar_index(v)")
      (("1" (replace -1)
        (("1" (replace -1 1 rl)
          (("1" (lemma "id_derivable_fun[(proj(i)(P))]")
            (("1" (expand "derivable?")
              (("1" (skeep 1)
                (("1" (expand "derivable?" 1)
                  (("1" (expand "val" 1 1)
                    (("1" (assert) (("1" (inst -1 "env(i)") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (lemma "ddl_dom_noe")
                (("2" (inst -1 "i" "P") nil nil)) nil))
              nil)
             ("3" (lemma "ddl_dom_dd")
              (("3" (inst -1 "i" "P") (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "derivable?" 2)
        (("2" (skeep)
          (("2" (expand "derivable?" 2)
            (("2" (expand "val" 2 1)
              (("2" (assert)
                (("2" (lemma "dl_derivable_const")
                  (("2" (inst -1 "i" "env(dlvar_index(v))" "P")
                    (("2" (expand "derivable?" -1)
                      (("2" (inst -1 "env")
                        (("2" (expand "cnst" -1)
                          (("2" (expand "derivable?" -1)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ddl_dom_dd formula-decl nil differentiation nil)
    (ddl_dom_noe formula-decl nil differentiation nil)
    (derivable? const-decl "bool" derivatives analysis)
    (val const-decl "real" hp_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (id_derivable_fun formula-decl nil derivatives analysis)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (proj const-decl "bool" differentiation nil)
    (dl_derivable_const formula-decl nil differentiation nil)
    (cnst const-decl "real" hp_def nil))
   shostak))
 (dl_derivable_up_val 0
  (dl_derivable_up_val-1 nil 3867499159
   ("" (skeep)
    (("" (expand "derivable_up?")
      (("" (skeep)
        (("" (lemma "dl_derivable_val") (("" (inst?) nil nil)) nil))
        nil))
      nil))
    nil)
   ((derivable_up? const-decl "bool" differentiation nil)
    (dl_derivable_val formula-decl nil differentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil))
   shostak))
 (dl_partial_val_TCC1 0
  (dl_partial_val_TCC1-1 nil 3791805802
   ("" (lemma "dl_derivable_val")
    (("" (skeep) (("" (inst -1 "i" "v" "P") nil nil)) nil)) nil)
   ((ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dl_derivable_val formula-decl nil differentiation nil))
   nil
   (dl_partial_val subtype "hp_def.val(differentiation.v)"
    "(differentiation.derivable?(differentiation.i, differentiation.P))")))
 (dl_partial_val 0
  (dl_partial_val-1 nil 3791806412
   ("" (skeep)
    (("" (lift-if 1)
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "partial_diff" 1)
            (("1" (lemma "deriv_id_fun[(proj(i)(P))]")
              (("1" (decompose-equality -1)
                (("1" (inst -1 "env(i)")
                  (("1" (expand "cnst" 1)
                    (("1" (expand "deriv" -1)
                      (("1" (assert)
                        (("1" (expand "val" 1) (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "right_ne_i")
                  (("2" (lemma "ddl_dom_noe")
                    (("2" (inst -1 "i" "P") nil nil)) nil))
                  nil)
                 ("3" (lemma "ddl_dom_dd")
                  (("3" (inst -1 "i" "P") (("3" (assert) nil nil))
                    nil))
                  nil)
                 ("4" (lemma "id_derivable_fun[(proj(i)(P))]")
                  (("4" (propax) nil nil)) nil))
                nil)
               ("2" (assert)
                (("2" (typepred "P")
                  (("2" (expand "ddl_dom?" -1)
                    (("2" (flatten)
                      (("2" (lemma "ddl_dom_noe")
                        (("2" (inst -1 "i" "P") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (lemma "ddl_dom_dd")
                (("3" (inst -1 "i" "P") (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (lemma "dl_partial_const")
            (("2" (expand "val" 2 1)
              (("2" (expand "cnst")
                (("2" (inst -1 "i" "env(dlvar_index(v))" "P")
                  (("2" (decompose-equality -1)
                    (("1" (inst -1 "env")
                      (("1" (assert)
                        (("1" (expand "partial_diff")
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (lemma "dl_derivable_const")
                      (("2" (inst -1 "i" "env(dlvar_index(v))" "P")
                        (("2" (expand "cnst" -1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dLVar type-decl nil hp_def nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (dl_derivable_const formula-decl nil differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dl_partial_const formula-decl nil differentiation nil)
    (proj const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_id_fun formula-decl nil derivatives analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (id_derivable_fun formula-decl nil derivatives analysis)
    (ddl_dom_dd formula-decl nil differentiation nil)
    (right_ne_i formula-decl nil differentiation nil)
    (ddl_dom_noe formula-decl nil differentiation nil)
    (val const-decl "real" hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (partial_diff const-decl "RealExpr" differentiation nil))
   shostak))
 (dl_derivable_plus 0
  (dl_derivable_plus-1 nil 3791825924
   ("" (skeep)
    (("" (expand "derivable?")
      (("" (lemma "sum_derivable[(proj(i)(P))]")
        (("" (skeep)
          (("" (inst? -2)
            (("" (inst? -3)
              (("" (expand "derivable?")
                ((""
                  (inst -1
                   " (LAMBDA (x: (proj(i)(P))): r1(env WITH [(i) := x]))"
                   _ "env(i)")
                  ((""
                    (inst -1
                     " (LAMBDA (x: (proj(i)(P))): r2(env WITH [(i) := x]))")
                    (("" (assert)
                      (("" (split -1)
                        (("1" (expand "derivable?")
                          (("1" (assert)
                            (("1" (expand "+" 1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "+" -1)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "derivable?")
                          (("2" (propax) nil nil)) nil)
                         ("3" (expand "derivable?")
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RealExpr type-eq-decl nil hp_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (sum_derivable formula-decl nil derivatives_def analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (proj const-decl "bool" differentiation nil))
   shostak))
 (dl_partial_plus_TCC1 0
  (dl_partial_plus_TCC1-1 nil 3791825814
   ("" (skeep)
    (("" (lemma "dl_derivable_plus")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((dl_derivable_plus formula-decl nil differentiation nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (dl_partial_plus subtype
    "(real_fun_ops[Environment].+)(differentiation.r1, differentiation.r2)"
    "(differentiation.derivable?(differentiation.i, differentiation.P))")))
 (dl_partial_plus 0
  (dl_partial_plus-1 nil 3791827350
   ("" (skeep)
    (("" (lemma "deriv_sum[(proj(i)(P))]")
      (("" (expand "partial_diff" 1)
        (("" (decompose-equality 1)
          (("1" (lift-if 1)
            (("1" (split 1)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (expand "+" 1)
                    (("1" (assert)
                      (("1"
                        (inst -2
                         "(LAMBDA (x: (proj(i)(P))): r1(x!1 WITH [(i) := x]))"
                         "(LAMBDA (x: (proj(i)(P))): r2(x!1 WITH [(i) := x]))"
                         "x!1(i)")
                        (("1" (split -2)
                          (("1" (assert)
                            (("1" (expand "+") (("1" (propax) nil nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "derivable?" -2)
                              (("2"
                                (inst -2 "x!1")
                                (("2"
                                  (expand "derivable?" -2)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (expand "derivable?" -3)
                              (("3"
                                (inst -3 "x!1")
                                (("3"
                                  (assert)
                                  (("3"
                                    (expand "derivable?" -3)
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "+" 2) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (expand "proj" 1)
              (("2" (split 1)
                (("1" (inst 1 "env") nil nil)
                 ("2" (expand "derivable?" -4)
                  (("2" (inst -4 "env")
                    (("2" (assert)
                      (("2" (expand "derivable?" -4)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (split 1)
              (("1" (expand "proj" 1) (("1" (inst 1 "env") nil nil))
                nil)
               ("2" (expand "derivable?" -3)
                (("2" (inst -3 "env")
                  (("2" (assert)
                    (("2" (expand "derivable?" -3)
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (skeep)
            (("4" (split)
              (("1" (expand "proj" 1) (("1" (inst 1 "env") nil nil))
                nil)
               ("2" (hide -2)
                (("2" (lemma "dl_derivable_plus")
                  (("2" (inst -1 "i" "r1" "r2" "P")
                    (("2" (assert)
                      (("2" (expand "derivable?" -1)
                        (("2" (inst -1 "env")
                          (("2" (expand "derivable?" -1)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((proj const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_sum formula-decl nil derivatives_def analysis)
    (RealExpr type-eq-decl nil hp_def nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (deriv const-decl "real" derivatives_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dl_derivable_plus formula-decl nil differentiation nil)
    (partial_diff const-decl "RealExpr" differentiation nil))
   shostak))
 (dl_derivable_up_sum 0
  (dl_derivable_up_sum-1 nil 3867499429
   ("" (skeep)
    (("" (expand "derivable_up?")
      (("" (skeep)
        (("" (lemma "dl_derivable_plus")
          (("" (inst?)
            (("" (typepred "re1")
              (("" (typepred "re2")
                (("" (expand "derivable_up?")
                  (("" (inst (-1 -2) "i_1")
                    (("" (inst -2 "i_1") (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_up? const-decl "bool" differentiation nil)
    (dl_derivable_plus formula-decl nil differentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_derivable_mult 0
  (dl_derivable_mult-1 nil 3791829218
   ("" (skeep)
    (("" (expand "derivable?")
      (("" (skeep)
        (("" (inst?)
          (("" (inst?)
            (("" (expand "derivable?")
              (("" (lemma "prod_derivable[(proj(i)(P))]")
                ((""
                  (inst -1
                   " (LAMBDA (x: (proj(i)(P))): r1(env WITH [(i) := x]))"
                   " (LAMBDA (x: (proj(i)(P))): r2(env WITH [(i) := x]))"
                   "env(i)")
                  (("" (assert)
                    (("" (expand "*" -1)
                      (("" (expand "*") (("" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (prod_derivable formula-decl nil derivatives_def analysis)
    (proj const-decl "bool" differentiation nil))
   shostak))
 (dl_partial_mult_TCC1 0
  (dl_partial_mult_TCC1-1 nil 3791829075
   ("" (lemma "dl_derivable_mult") (("" (propax) nil nil)) nil)
   ((dl_derivable_mult formula-decl nil differentiation nil)) nil
   (dl_partial_mult subtype
    "real_fun_ops[Environment].*(differentiation.r1, differentiation.r2)"
    "(differentiation.derivable?(differentiation.i, differentiation.P))")))
 (dl_partial_mult 0
  (dl_partial_mult-1 nil 3791829376
   ("" (skeep)
    (("" (expand "partial_diff")
      (("" (decompose-equality 1)
        (("1" (lift-if 1)
          (("1" (split 1)
            (("1" (flatten)
              (("1" (expand "+")
                (("1" (expand "*")
                  (("1" (assert)
                    (("1" (lemma "deriv_prod[(proj(i)(P))]")
                      (("1"
                        (inst -1
                         " (LAMBDA (x: (proj(i)(P))): r1(x!1 WITH [(i) := x]))"
                         " (LAMBDA (x: (proj(i)(P))): r2(x!1 WITH [(i) := x]))"
                         "x!1(i)")
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (expand "*")
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "x!1 WITH [(i) := x!1(i)] = x!1")
                                  (("1"
                                    (replace -1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (expand "derivable?" -2)
                                  (("2"
                                    (inst -2 "x!1")
                                    (("2"
                                      (expand "derivable?" -2)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2)
                              (("3"
                                (expand "derivable?" -3)
                                (("3"
                                  (inst -3 "x!1")
                                  (("3"
                                    (expand "derivable?" -3)
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "+")
                (("2" (expand "*") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (split 1)
            (("1" (expand "proj") (("1" (inst 1 "env") nil nil)) nil)
             ("2" (assert)
              (("2" (expand "derivable?" -3)
                (("2" (inst -3 "env")
                  (("2" (expand "derivable?" -3)
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (split 1)
            (("1" (expand "proj") (("1" (inst 1 "env") nil nil)) nil)
             ("2" (assert)
              (("2" (expand "derivable?" -2)
                (("2" (inst -2 "env")
                  (("2" (expand "derivable?" -2)
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (split 1)
            (("1" (expand "proj") (("1" (inst 1 "env") nil nil)) nil)
             ("2" (assert)
              (("2" (lemma "dl_derivable_mult")
                (("2" (inst -1 "i" "r1" "r2" "P")
                  (("2" (assert)
                    (("2" (expand "derivable?" -1)
                      (("2" (inst -1 "env")
                        (("2" (expand "*" 1)
                          (("2" (expand "derivable?" -1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((partial_diff const-decl "RealExpr" differentiation nil)
    (dl_derivable_mult formula-decl nil differentiation nil)
    (deriv_prod formula-decl nil derivatives_def analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (deriv const-decl "real" derivatives_def analysis)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (proj const-decl "bool" differentiation nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (RealExpr type-eq-decl nil hp_def nil))
   shostak))
 (dl_derivable_up_prod 0
  (dl_derivable_up_prod-1 nil 3867499671
   ("" (skeep)
    (("" (expand "derivable_up?")
      (("" (skeep)
        (("" (typepred "re1")
          (("" (typepred "re2")
            (("" (lemma "dl_derivable_mult")
              (("" (inst?)
                (("" (expand "derivable_up?")
                  (("" (inst -3 "i_1")
                    (("" (inst -2 "i_1") (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_up? const-decl "bool" differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dl_derivable_mult formula-decl nil differentiation nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil))
   shostak))
 (dl_derivable_minus 0
  (dl_derivable_minus-1 nil 3791828186
   ("" (skeep)
    (("" (lemma "diff_derivable[(proj(i)(P))]")
      (("" (expand "derivable?" -2)
        (("" (expand "derivable?" -3)
          (("" (expand "derivable?" 1)
            (("" (skeep)
              (("" (inst -2 "env")
                (("" (inst -3 "env")
                  (("" (expand "derivable?" 1)
                    (("" (expand "derivable?" -3)
                      (("" (expand "derivable?" -2)
                        ((""
                          (inst -1
                           " (LAMBDA (x: (proj(i)(P))): r1(env WITH [(i) := x]))"
                           "(LAMBDA (x: (proj(i)(P))): r2(env WITH [(i) := x]))"
                           "env(i)")
                          (("" (assert)
                            (("" (expand "-") (("" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((proj const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (diff_derivable formula-decl nil derivatives_def analysis)
    (RealExpr type-eq-decl nil hp_def nil))
   shostak))
 (dl_partial_minus_TCC1 0
  (dl_partial_minus_TCC1-1 nil 3791828044
   ("" (lemma "dl_derivable_minus") (("" (propax) nil nil)) nil)
   ((dl_derivable_minus formula-decl nil differentiation nil)) nil
   (dl_partial_minus subtype
    "(real_fun_ops[Environment].-)(differentiation.r1, differentiation.r2)"
    "(differentiation.derivable?(differentiation.i, differentiation.P))")))
 (dl_partial_minus 0
  (dl_partial_minus-1 nil 3791828293
   ("" (skeep)
    (("" (expand "partial_diff")
      (("" (decompose-equality 1)
        (("1" (lift-if 1)
          (("1" (split)
            (("1" (expand "-")
              (("1" (flatten)
                (("1" (assert)
                  (("1" (lemma "deriv_diff[(proj(i)(P))]")
                    (("1"
                      (inst -1
                       " (LAMBDA (x: (proj(i)(P))): r1(x!1 WITH [(i) := x]))"
                       "(LAMBDA (x: (proj(i)(P))): r2(x!1 WITH [(i) := x]))"
                       "x!1(i)")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (expand "-") (("1" (propax) nil nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "derivable?" -)
                              (("2"
                                (inst -2 "x!1")
                                (("2"
                                  (expand "derivable?" -2)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (expand "derivable?" -)
                              (("3"
                                (inst -3 "x!1")
                                (("3"
                                  (expand "derivable?" -3)
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "-") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (split 1)
            (("1" (expand "proj" 1) (("1" (inst 1 "env") nil nil)) nil)
             ("2" (expand "derivable?" -3)
              (("2" (inst -3 "env")
                (("2" (expand "derivable?" -3) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (split 1)
            (("1" (expand "proj") (("1" (inst 1 "env") nil nil)) nil)
             ("2" (expand "derivable?" -2)
              (("2" (inst -2 "env")
                (("2" (expand "derivable?" -2) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (split 1)
            (("1" (expand "proj") (("1" (inst 1 "env") nil nil)) nil)
             ("2" (assert)
              (("2" (lemma "dl_derivable_minus")
                (("2" (inst -1 "i" "r1" "r2" "P")
                  (("2" (assert)
                    (("2" (expand "-" 1)
                      (("2" (expand "-" -1)
                        (("2" (expand "derivable?" -1)
                          (("2" (inst -1 "env")
                            (("2" (expand "derivable?" -1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((partial_diff const-decl "RealExpr" differentiation nil)
    (dl_derivable_minus formula-decl nil differentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv_diff formula-decl nil derivatives_def analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (deriv const-decl "real" derivatives_def analysis)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (proj const-decl "bool" differentiation nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (RealExpr type-eq-decl nil hp_def nil))
   shostak))
 (dl_derivable_up_minus 0
  (dl_derivable_up_minus-1 nil 3872006378
   ("" (skeep)
    (("" (lemma "dl_derivable_up_sum")
      (("" (inst -1 "i" "P" "re1" "cnst(-1)*re2")
        (("1" (expand "cnst")
          (("1" (expand "-")
            (("1" (expand "+")
              (("1" (assert)
                (("1" (expand "*") (("1" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (typepred "re1")
          (("2" (typepred "re2")
            (("2" (lemma "dl_derivable_up_cnst")
              (("2" (lemma "dl_derivable_up_prod")
                (("2" (inst -2 "i" "-1" "P")
                  (("2" (inst -1 "i" "P" "cnst(-1)" "re2") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dl_derivable_up_sum formula-decl nil differentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dl_derivable_up_cnst formula-decl nil differentiation nil)
    (dl_derivable_up_prod formula-decl nil differentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (derivable_up? const-decl "bool" differentiation nil)
    (cnst const-decl "real" hp_def nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (dl_derivable_negative 0
  (dl_derivable_negative-1 nil 3791828526
   ("" (skeep)
    (("" (lemma "scal_derivable[(proj(i)(P))]")
      (("" (expand "derivable?" -2)
        (("" (expand "derivable?" 1)
          (("" (skeep)
            (("" (inst -2 "env")
              (("" (expand "derivable?" 1)
                (("" (expand "derivable?" -2)
                  ((""
                    (inst -1 "-1"
                     " (LAMBDA (x: (proj(i)(P))): r1(env WITH [(i) := x]))"
                     "env(i)")
                    (("" (assert)
                      (("" (expand "*")
                        (("" (assert)
                          (("" (expand "-" 1) (("" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((proj const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (scal_derivable formula-decl nil derivatives_def analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (dl_partial_negative_TCC1 0
  (dl_partial_negative_TCC1-1 nil 3791828044
   ("" (lemma "dl_derivable_negative") (("" (propax) nil nil)) nil)
   ((dl_derivable_negative formula-decl nil differentiation nil)) nil
   (dl_partial_negative subtype
    "(real_fun_ops[Environment].-)(differentiation.r1)"
    "(differentiation.derivable?(differentiation.i, differentiation.P))")))
 (dl_partial_negative 0
  (dl_partial_negative-1 nil 3791828636
   ("" (skeep)
    (("" (lemma "deriv_scal[(proj(i)(P))]")
      (("" (expand "partial_diff" 1)
        (("" (decompose-equality 1)
          (("1" (lift-if 1)
            (("1" (split 1)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (expand "-" 1)
                    (("1"
                      (inst -2 "-1"
                       " (LAMBDA (x: (proj(i)(P))): r1(x!1 WITH [(i) := x]))"
                       "x!1(i)")
                      (("1" (assert)
                        (("1" (split -2)
                          (("1" (expand "*" -1)
                            (("1" (assert) nil nil)) nil)
                           ("2" (hide 2)
                            (("2" (expand "derivable?" -2)
                              (("2"
                                (inst -2 "x!1")
                                (("2"
                                  (expand "derivable?" -2)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (expand "-") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -)
            (("2" (skeep)
              (("2" (split 1)
                (("1" (expand "proj") (("1" (inst 1 "env") nil nil))
                  nil)
                 ("2" (assert)
                  (("2" (reveal -)
                    (("2" (hide -3)
                      (("2" (expand "derivable?" -2)
                        (("2" (inst -2 "env")
                          (("2" (expand "derivable?" -2)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (split 1)
              (("1" (expand "proj") (("1" (inst 1 "env") nil nil)) nil)
               ("2" (assert)
                (("2" (lemma "dl_derivable_negative")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (expand "derivable?" -1)
                        (("2" (inst -1 "env")
                          (("2" (expand "derivable?" -1)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((proj const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_scal formula-decl nil derivatives_def analysis)
    (RealExpr type-eq-decl nil hp_def nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (deriv const-decl "real" derivatives_def analysis)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (dl_derivable_negative formula-decl nil differentiation nil)
    (partial_diff const-decl "RealExpr" differentiation nil))
   shostak))
 (dl_derivable_pow 0
  (dl_derivable_pow-1 nil 3872071792
   ("" (induct "p")
    (("1" (skeep)
      (("1" (expand "^")
        (("1" (expand "^")
          (("1" (expand "expt")
            (("1" (lemma "dl_derivable_const")
              (("1" (inst?)
                (("1" (inst -1 "1")
                  (("1" (assert)
                    (("1" (expand "cnst") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "^")
          (("2" (expand "^")
            (("2" (expand "expt" 1)
              (("2" (inst? -1)
                (("2" (assert)
                  (("2" (lemma "dl_derivable_mult")
                    (("2" (inst -1 "i" "r1" "r1^j" "P")
                      (("2" (assert)
                        (("2" (expand "^")
                          (("2" (expand "^")
                            (("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dl_derivable_mult formula-decl nil differentiation nil)
    (^ const-decl "real" exponentiation nil)
    (dl_derivable_const formula-decl nil differentiation nil)
    (cnst const-decl "real" hp_def nil)
    (expt def-decl "real" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_derivable_up_pow 0
  (dl_derivable_up_pow-1 nil 3872006405
   ("" (induct "p")
    (("1" (skeep)
      (("1" (expand "^")
        (("1" (expand "^")
          (("1" (lemma "dl_derivable_up_cnst")
            (("1" (expand "cnst")
              (("1" (inst?)
                (("1" (expand "expt") (("1" (inst -1 "1") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "^")
          (("2" (expand "^")
            (("2" (expand "expt" 1)
              (("2" (lemma "dl_derivable_up_prod")
                (("2" (inst? -2)
                  (("2" (typepred "re")
                    (("2" (inst -3 "re")
                      (("2" (inst? -2)
                        (("2" (inst -2 "re" "re^j")
                          (("1" (expand "^")
                            (("1" (expand "*")
                              (("1"
                                (expand "^")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "^")
                            (("2" (expand "^") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (dl_derivable_up_prod formula-decl nil differentiation nil)
    (^ const-decl "real" exponentiation nil)
    (cnst const-decl "real" hp_def nil)
    (expt def-decl "real" exponentiation nil)
    (dl_derivable_up_cnst formula-decl nil differentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (derivable_up? const-decl "bool" differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_derivable_div 0
  (dl_derivable_div-1 nil 3792343471
   ("" (skeep*)
    (("" (expand "derivable?" 1)
      (("" (skeep)
        (("" (expand "derivable?" 1)
          (("" (typepred "P")
            (("" (lemma "div_derivable[(proj(i)(P))]")
              (("" (expand "derivable?" -3)
                (("" (expand "derivable?" -4)
                  (("" (inst -3 "env")
                    (("" (inst -4 "env")
                      (("" (expand "derivable?" -3)
                        (("" (expand "derivable?" -4)
                          ((""
                            (inst -1
                             "LAMBDA (x: (proj(i)(P))): r1(env WITH [(i) := x])"
                             "LAMBDA (x: (proj(i)(P))): r2(env WITH [(i) := x])"
                             "env(i)")
                            (("1" (assert)
                              (("1"
                                (expand "div_safe" 1 1)
                                (("1"
                                  (expand "/" -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "(LAMBDA (x: (proj(i)(P))): IF r2(env WITH [(i) := x]) = 0 THEN 0 ELSE r1(env WITH [(i) := x]) / r2(env WITH [(i) := x]) ENDIF) = (LAMBDA (x_1: (proj(i)(P))) -> real: r1(env WITH [(i) := x_1]) / r2(env WITH [(i) := x_1]))")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (decompose-equality 1)
                                          (("1"
                                            (inst
                                             -5
                                             "env WITH [(i) := x!1]")
                                            (("1"
                                              (split -5)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (typepred
                                                   "env"
                                                   "x!1")
                                                  (("2"
                                                    (expand "proj" -2)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (typepred
                                                         "env!1")
                                                        (("2"
                                                          (expand
                                                           "ddl_dom?"
                                                           -5)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "connected?"
                                                               -5)
                                                              (("2"
                                                                (inst
                                                                 -5
                                                                 "env!1"
                                                                 "env"
                                                                 "env WITH [(i) := x!1]")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "between?"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skeep
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "i_1 =i")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (typepred "env")
                                              (("2"
                                                (typepred "x_1")
                                                (("2"
                                                  (inst
                                                   -8
                                                   "env WITH [(i) := x_1]")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "proj"
                                                       -1)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (expand
                                                           "ddl_dom?"
                                                           -5)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "connected?"
                                                               -5)
                                                              (("2"
                                                                (inst
                                                                 -5
                                                                 "env"
                                                                 "env!1"
                                                                 "env WITH [(i) := x_1]")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "between?"
                                                                     1)
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (case
                                                                         "i_1=i")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3" (skeep) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (assert)
                                        (("3"
                                          (hide 2)
                                          (("3"
                                            (hide -3 -4)
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (typepred "env" "x_1")
                                                (("3"
                                                  (inst
                                                   -6
                                                   "env WITH [(i) := x_1]")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (expand
                                                       "proj"
                                                       -2)
                                                      (("3"
                                                        (skeep)
                                                        (("3"
                                                          (expand
                                                           "ddl_dom?"
                                                           -5)
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (expand
                                                               "connected?"
                                                               -5)
                                                              (("3"
                                                                (inst
                                                                 -5
                                                                 "env"
                                                                 "env!1"
                                                                 "env WITH [(i) := x_1]")
                                                                (("3"
                                                                  (expand
                                                                   "between?"
                                                                   1)
                                                                  (("3"
                                                                    (skeep)
                                                                    (("3"
                                                                      (case
                                                                       "i_1=i")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (hide 2)
                                        (("4" (skeep) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst -5 "env WITH [(i) := x]")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "ddl_dom?" -2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "connected?" -2)
                                            (("2"
                                              (typepred "env" "x")
                                              (("2"
                                                (expand "proj" -2)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst
                                                     -4
                                                     "env"
                                                     "env!1"
                                                     "env WITH [(i) := x]")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "between?"
                                                         1)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (case
                                                             "i_1=i")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((div_derivable formula-decl nil derivatives_def analysis)
    (proj const-decl "bool" differentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (connected? const-decl "bool" differentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (between? const-decl "bool" differentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_safe const-decl "real" reals_safe_ops reals)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (dl_partial_div_TCC1 0
  (dl_partial_div_TCC1-1 nil 3792341867
   ("" (lemma "dl_derivable_div") (("" (propax) nil nil)) nil)
   ((dl_derivable_div formula-decl nil differentiation nil)) nil
   (dl_partial_div subtype
    "LAMBDA (s: hp_def.Environment): reals_safe_ops.div_safe(differentiation.r1(s), differentiation.r2(s))"
    "(differentiation.derivable?(differentiation.i, differentiation.P))")))
 (dl_partial_div 0
  (dl_partial_div-1 nil 3792409018
   ("" (skeep)
    (("" (decompose-equality 1)
      (("1" (expand "*" 1)
        (("1" (expand "-")
          (("1" (expand "partial_diff" 1)
            (("1" (assert)
              (("1" (case "NOT P(x!1)")
                (("1" (assert)
                  (("1" (assert)
                    (("1" (expand "div_safe" 2)
                      (("1" (lift-if 2)
                        (("1" (split 2)
                          (("1" (propax) nil nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (lemma "deriv_div[(proj(i)(P))]")
                    (("2"
                      (inst -1
                       " LAMBDA (x: (proj(i)(P))): r1(x!1 WITH [(i) := x])"
                       " LAMBDA (x: (proj(i)(P))): r2(x!1 WITH [(i) := x])"
                       "x!1(i)")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (expand "/" -1)
                            (("1" (assert)
                              (("1"
                                (case
                                 "r2(x!1) = r2(x!1 WITH [(i) := x!1(i)])")
                                (("1"
                                  (case
                                   "(LAMBDA (x: (proj(i)(P))): div_safe(r1(x!1 WITH [(i) := x]), r2(x!1 WITH [(i) := x]))) = (LAMBDA (x_1: (proj(i)(P))) -> real: r1(x!1 WITH [(i) := x_1]) / r2(x!1 WITH [(i) := x_1]))")
                                  (("1"
                                    (replace -1 -3 rl)
                                    (("1"
                                      (replace -3 1 lr)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "div_safe" 1 1)
                                          (("1"
                                            (lift-if 1)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -2 2 rl)
                                                      (("2"
                                                        (case
                                                         "NOT deriv(LAMBDA (x: (proj(i)(P))): r2(x!1 WITH [(i) := x]), x!1(i)) * r1(x!1 WITH [(i) := x!1(i)]) = r1(x!1) * deriv[(proj(i)(P))] (LAMBDA (x: (proj(i)(P))): r2(x!1 WITH [(i) := x]), x!1(i))")
                                                        (("1"
                                                          (hide 2 3)
                                                          (("1"
                                                            (expand
                                                             "deriv"
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 " lim(NQ(LAMBDA (x: (proj(i)(P))): r2(x!1 WITH [(i) := x]), x!1(i)), 0) =0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (div-by
                                                                   2
                                                                   " lim(NQ(LAMBDA (x: (proj(i)(P))): r2(x!1 WITH [(i) := x]), x!1(i)),0)")
                                                                  (("2"
                                                                    (case
                                                                     "(x!1 WITH [(i) := x!1(i)] = x!1)")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       2)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (decompose-equality 1)
                                      (("1"
                                        (expand "div_safe" 1)
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -7
                                                   "x!1 WITH [(i) := x!2]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (typepred "x!2")
                                                      (("1"
                                                        (expand
                                                         "proj"
                                                         -1)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (typepred
                                                             "P")
                                                            (("1"
                                                              (expand
                                                               "ddl_dom?"
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "connected?"
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "env"
                                                                     "x!1"
                                                                     "x!1 WITH [(i):=x!2]")
                                                                    (("1"
                                                                      (expand
                                                                       "between?"
                                                                       1)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (case
                                                                           "i_1=i")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (inst
                                           -7
                                           "x!1 WITH [(i) := x_1]")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "P")
                                              (("2"
                                                (expand "ddl_dom?" -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "connected?"
                                                     -1)
                                                    (("2"
                                                      (typepred "x_1")
                                                      (("2"
                                                        (expand
                                                         "proj"
                                                         -1)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -2
                                                             "env"
                                                             "x!1"
                                                             "x!1 WITH [(i) := x_1]")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "between?"
                                                                 1)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (case
                                                                     "i_1=i")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (skeep)
                                      (("3"
                                        (inst
                                         -7
                                         "x!1 WITH [(i) := x_1]")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (typepred "P")
                                            (("3"
                                              (expand "ddl_dom?" -1)
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (expand
                                                   "connected?"
                                                   -1)
                                                  (("3"
                                                    (typepred "x_1")
                                                    (("3"
                                                      (expand
                                                       "proj"
                                                       -1)
                                                      (("3"
                                                        (skeep)
                                                        (("3"
                                                          (inst
                                                           -2
                                                           "env"
                                                           "x!1"
                                                           "x!1 WITH [(i) := x_1]")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (expand
                                                               "between?"
                                                               1)
                                                              (("3"
                                                                (skeep)
                                                                (("3"
                                                                  (case
                                                                   "i_1=i")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (hide -)
                                    (("2"
                                      (case
                                       "x!1 = x!1 WITH [(i) := x!1(i)]")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1 1 rl)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (hide 2)
                              (("2"
                                (expand "derivable?" -2)
                                (("2"
                                  (inst -2 "x!1")
                                  (("2"
                                    (expand "derivable?" -2)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (expand "derivable?" -3)
                              (("3"
                                (inst -3 "x!1")
                                (("3"
                                  (expand "derivable?" -3)
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (skeep)
                          (("2" (inst -5 "x!1 WITH [(i) := x]")
                            (("2" (assert)
                              (("2"
                                (typepred "P")
                                (("2"
                                  (expand "ddl_dom?" -1)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "connected?" -1)
                                      (("2"
                                        (typepred "x")
                                        (("2"
                                          (expand "proj" -1)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 -2
                                                 "env"
                                                 "x!1"
                                                 "x!1 WITH [(i) := x]")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "between?"
                                                     1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (case "i_1=i")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "dl_derivable_div")
        (("2" (inst -1 "i" "r1" "r2" "P") (("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((RealExpr type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (div_safe const-decl "real" reals_safe_ops reals)
    (partial_diff const-decl "RealExpr" differentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (NQ const-decl "real" derivatives_def analysis)
    (lim const-decl "{l: real | convergence(f, x0, l)}"
     lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (deriv const-decl "real" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (connected? const-decl "bool" differentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (between? const-decl "bool" differentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (proj const-decl "bool" differentiation nil)
    (deriv_div formula-decl nil derivatives_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dl_derivable_div formula-decl nil differentiation nil))
   shostak))
 (dl_derivable_up_div 0
  (dl_derivable_up_div-1 nil 3872006427
   ("" (skeep)
    (("" (expand "derivable_up?")
      (("" (skeep)
        (("" (lemma "dl_derivable_div")
          (("" (inst? -1)
            (("" (typepred "re1")
              (("" (typepred "re2")
                (("" (expand "derivable_up?")
                  (("" (inst -1 "i_1")
                    (("" (inst -2 "i_1") (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_up? const-decl "bool" differentiation nil)
    (dl_derivable_div formula-decl nil differentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_derivable_comp_point_TCC1 0
  (dl_derivable_comp_point_TCC2-1 nil 3792161498
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (x!1 skolem-const-decl "(A(env!1(i!1)))" differentiation nil)
    (x!1 skolem-const-decl "(A(env!1(i!1)))" differentiation nil)
    (y!1 skolem-const-decl "{u: nzreal | D!1(u + i!1)}" differentiation
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (x!1 skolem-const-decl "(A(env!1(i!1)))" differentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (delta!1 skolem-const-decl "posreal" differentiation nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (delta!1 skolem-const-decl "posreal" differentiation nil)
    (setof type-eq-decl nil defined_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (x!1 skolem-const-decl "(A(env!1(i!1)))" differentiation nil)
    (env!1 skolem-const-decl "(P!1)" differentiation nil)
    (y!2 skolem-const-decl "{u: nzreal | D!1(u + i!1)}" differentiation
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (D!1 skolem-const-decl "{DD: [real -> bool] | deriv_domain?[(DD)]}"
     differentiation nil)
    (l!1 skolem-const-decl "real" differentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (P!1 skolem-const-decl "(ddl_dom?(i!1))" differentiation nil)
    (i!1 skolem-const-decl "nat" differentiation nil)
    (not_one_element? const-decl "bool" differentiation nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (/= const-decl "boolean" notequal nil)
    (connected? const-decl "bool" differentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" differentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (proj const-decl "bool" differentiation nil)
    (between? const-decl "bool" differentiation nil))
   nil
   (dl_derivable_comp_point subtype
    "differentiation.r1(differentiation.env)" "(differentiation.D)")))
 (dl_derivable_comp_point_TCC2 0
  (dl_derivable_comp_point_TCC2-1 nil 3792146404
   ("" (skeep) (("" (typepred "D") (("" (propax) nil nil)) nil)) nil)
   ((deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (dl_derivable_comp_point assuming
    "analysis@derivatives_def[(differentiation.D)].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (dl_derivable_comp_point_TCC3 0
  (dl_derivable_comp_point_TCC3-2 nil 3792146538
   ("" (skeep)
    (("" (typepred "D")
      (("" (hide -2 -3)
        (("" (expand "deriv_domain?" -1)
          (("" (expand "not_one_element?" 1)
            (("" (skeep)
              (("" (inst -1 "1" "x")
                (("" (skeep)
                  (("" (inst 1 "x+y") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis))
   nil
   (dl_derivable_comp_point assuming
    "analysis@derivatives_def[(differentiation.D)].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))
  (dl_derivable_comp_point_TCC3-1 nil 3792146404
   ("" (assuming-tcc) nil nil) nil nil
   (dl_derivable_comp_point assuming
    "analysis@derivatives_def[(differentiation.D)].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (dl_derivable_comp_point 0
  (no "no" 3792161495
   ("" (skeep)
    (("" (expand "derivable?" 1)
      (("" (lemma "composition_derivable[(proj(i)(P)),(D)]")
        (("1" (expand "restrict" -4)
          (("1"
            (inst -1
             "(LAMBDA (x: (proj(i)(P))): r1(env WITH [(i) := x]))"
             "(LAMBDA (s: (D)): f(s))" "env(i)")
            (("1" (split -1)
              (("1" (expand "o") (("1" (propax) nil nil)) nil)
               ("2" (hide 2)
                (("2" (expand "derivable?" -1) (("2" (propax) nil nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (case "env = env WITH [(i) := env(i)]")
                  (("1" (assert)
                    (("1" (replace -1 1 rl) (("1" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (hide 2) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skeep 1)
              (("2" (inst -2 "env WITH [(i) := x ]")
                (("2" (typepred "D")
                  (("2" (hide 2 3)
                    (("2" (typepred "env")
                      (("2" (typepred "P")
                        (("2" (typepred "x")
                          (("2" (expand "proj" -1)
                            (("2" (skeep)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "ddl_dom?" -2)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "connected?" -2)
                                      (("2"
                                        (inst
                                         -2
                                         "env!1"
                                         "env"
                                         "env WITH [(i) := x]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "between?" 1)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (case "i_1=i")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "D")
          (("2" (hide -2 -3 -4 2)
            (("2" (expand "deriv_domain?" -1)
              (("2" (expand "not_one_element?" 1)
                (("2" (skeep)
                  (("2" (inst -1 "1" "x")
                    (("2" (skeep)
                      (("2" (inst 1 "x+y") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (typepred "P")
          (("3" (expand "ddl_dom?" -1)
            (("3" (lemma "ddl_dom_noe")
              (("3" (inst -1 "i" "P") nil nil)) nil))
            nil))
          nil)
         ("4" (assert)
          (("4" (lemma "ddl_dom_dd")
            (("4" (inst -1 "i" "P") (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ddl_dom_dd formula-decl nil differentiation nil)
    (ddl_dom_noe formula-decl nil differentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (restrict const-decl "R" restrict nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (connected? const-decl "bool" differentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (between? const-decl "bool" differentiation nil)
    (O const-decl "T3" function_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (composition_derivable formula-decl nil chain_rule analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (proj const-decl "bool" differentiation nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis))
   shostak)
  (dl_derivable_comp_point-1 nil 3792146487
   ("" (skeep)
    (("" (expand "derivable?" 1)
      (("" (lemma "composition_derivable[(proj(i)(P)),(D)]")
        (("1" (expand "restrict" -4)
          (("1"
            (inst -1
             "(LAMBDA (x: (proj(i)(P))): r1(env WITH [(i) := x]))"
             "(LAMBDA (s: (D)): f(s))" "env(i)")
            (("1" (split -1)
              (("1" (expand "o") (("1" (propax) nil nil)) nil)
               ("2" (hide 2)
                (("2" (expand "derivable?" -1) (("2" (propax) nil nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (case "env = env WITH [(i) := env(i)]")
                  (("1" (assert)
                    (("1" (replace -1 1 rl) (("1" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (hide 2) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skeep)
                (("2" (inst -2 "(env WITH [(i) := x])") nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (typepred "D")
            (("2" (hide -2 -3 -4)
              (("2" (expand "not_one_element?" 1)
                (("2" (expand "deriv_domain?" -1)
                  (("2" (skeep)
                    (("2" (inst -1 "1" "x")
                      (("2" (skeep)
                        (("2" (inst 1 "x+y") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (lemma "not_one_dd")
            (("3" (inst?)
              (("3" (inst -1 "i") (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("4" (hide 2)
          (("4" (typepred "P")
            (("4" (expand "deriv_domain?" -1) (("4" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RealExpr type-eq-decl nil hp_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (composition_derivable formula-decl nil chain_rule analysis)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis))
   nil))
 (dl_derivable_comp_TCC1 0
  (dl_derivable_comp_TCC1-1 nil 3792145752 ("" (skeep*) nil nil) nil
   nil
   (dl_derivable_comp subtype
    "differentiation.r1(differentiation.env1)" "(differentiation.D)")))
 (dl_derivable_comp_TCC2 0
  (dl_derivable_comp_TCC1-1 nil 3792143557
   ("" (skeep*) (("" (typepred "D") (("" (propax) nil nil)) nil)) nil)
   ((deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (dl_derivable_comp assuming
    "analysis@derivatives_def[(differentiation.D)].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (dl_derivable_comp_TCC3 0
  (dl_derivable_comp_TCC2-1 nil 3792143557
   ("" (skeep*)
    (("" (typepred "D")
      (("" (expand "deriv_domain?" -1)
        (("" (expand "not_one_element?" 1)
          (("" (skeep)
            (("" (inst -1 "1" "x")
              (("" (skeep)
                (("" (inst 1 "x+y") (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (dl_derivable_comp assuming
    "analysis@derivatives_def[(differentiation.D)].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (dl_derivable_comp 0
  (dl_derivable_comp-1 nil 3792143944
   ("" (skeep)
    (("" (expand "derivable?" 1)
      (("" (expand "derivable?" -1)
        (("" (skeep)
          (("" (inst -1 "env")
            (("" (lemma "dl_derivable_comp_point")
              (("" (inst -1 "i" "r1" "P" "env!1" "D" "f")
                (("" (assert)
                  (("" (hide 2)
                    (("" (split 1)
                      (("1" (reveal -)
                        (("1" (inst -2 "env!1") nil nil)) nil)
                       ("2" (propax) nil nil)
                       ("3" (inst -3 "env!1") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dl_derivable_comp_point formula-decl nil differentiation nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (RealExpr type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_partial_chain_TCC1 0
  (dl_partial_chain_TCC1-1 nil 3792147234
   ("" (lemma "dl_derivable_comp") (("" (propax) nil nil)) nil)
   ((dl_derivable_comp formula-decl nil differentiation nil)) nil
   (dl_partial_chain subtype
    "function_props[Environment, real, real].o(differentiation.f, differentiation.r1)"
    "(differentiation.derivable?(differentiation.i, differentiation.P))")))
 (dl_partial_chain_TCC2 0
  (dl_partial_chain_TCC2-1 nil 3792147234
   ("" (skeep)
    (("" (skeep*)
      (("" (inst -2 "env1")
        (("" (assert) (("" (inst -3 "env1") nil nil)) nil)) nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (i skolem-const-decl "nat" differentiation nil)
    (P skolem-const-decl "(ddl_dom?(i))" differentiation nil)
    (env1 skolem-const-decl "Environment" differentiation nil))
   nil
   (dl_partial_chain subtype "differentiation.r1(differentiation.env)"
    "{x | derivatives_def[(differentiation.D)].derivable?(restrict[real, (differentiation.D), real].restrict(differentiation.f), x)}")))
 (dl_partial_chain_TCC3 0
  (dl_partial_chain_TCC3-1 nil 3792148015
   ("" (skeep)
    (("" (skeep) (("" (typepred "D") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis))
   nil
   (dl_partial_chain assuming
    "analysis@derivatives_def[(differentiation.D)].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (dl_partial_chain_TCC4 0
  (dl_partial_chain_TCC4-1 nil 3792148015
   ("" (skeep)
    (("" (skeep*)
      (("" (typepred "D")
        (("" (expand "deriv_domain?" -1)
          (("" (expand "not_one_element?" 1)
            (("" (skeep)
              (("" (inst -1 "1" "x")
                (("" (skeep)
                  (("" (inst 1 "x+y") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis))
   nil
   (dl_partial_chain assuming
    "analysis@derivatives_def[(differentiation.D)].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (dl_partial_chain 0
  (dl_partial_chain-1 nil 3792150334
   ("" (skeep)
    (("" (decompose-equality 1)
      (("1" (lift-if 1)
        (("1" (split 1)
          (("1" (flatten)
            (("1" (expand "partial_diff" 1)
              (("1" (assert)
                (("1" (expand "restrict")
                  (("1" (lemma "deriv_composition[(proj(i)(P)),(D)]")
                    (("1"
                      (inst -1
                       "LAMBDA (x: (proj(i)(P))): r1(x!1 WITH [(i) := x])"
                       "f" "x!1(i)")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (expand "restrict")
                            (("1"
                              (case "x!1 WITH [(i) := x!1(i)] = x!1")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "o ")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "deriv" -2 1)
                                      (("1"
                                        (expand "deriv" 1 1)
                                        (("1"
                                          (replace -2 1 lr)
                                          (("1"
                                            (replace -1 1 lr)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "derivable?" -2)
                              (("2"
                                (inst -2 "x!1")
                                (("2"
                                  (expand "derivable?" -2)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (expand "restrict")
                              (("3"
                                (inst -4 "x!1 WITH [(i) := x!1(i)]")
                                (("3"
                                  (assert)
                                  (("3"
                                    (case
                                     "x!1 WITH [(i) := x!1(i)] = x!1")
                                    (("1"
                                      (replace -1 1 lr)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (skeep)
                          (("2" (inst -3 "x!1 WITH [(i) := x]")
                            (("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (typepred "P" "x")
                                  (("2"
                                    (expand "ddl_dom?" -1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "connected?" -1)
                                        (("2"
                                          (expand "proj" -3)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst
                                               -1
                                               "env!1"
                                               "x!1"
                                               "x!1 WITH [(i) := x]")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "between?" 1)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (case "i_1=i")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (typepred "D")
                        (("2" (hide -2 -3 -4 -5)
                          (("2" (expand "not_one_element?" 1)
                            (("2" (expand "deriv_domain?" -1)
                              (("2"
                                (skeep)
                                (("2"
                                  (inst -1 "1" "x")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst 1 "x+y")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (lemma "ddl_dom_noe")
                        (("3" (inst -1 "i" "P") nil nil)) nil))
                      nil)
                     ("4" (assert)
                      (("4" (lemma "ddl_dom_dd")
                        (("4" (inst -1 "i" "P")
                          (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (expand "partial_diff" 2) (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (typepred "D")
          (("2" (expand "deriv_domain?" -1)
            (("2" (expand "not_one_element?" 1)
              (("2" (skeep)
                (("2" (inst -1 "1" "x")
                  (("2" (skeep)
                    (("2" (inst 1 "x+y") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (inst -3 "env!1")
          (("3" (assert) (("3" (inst -4 "env!1") nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (restrict const-decl "R" restrict nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (RealExpr type-eq-decl nil hp_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (partial_diff const-decl "RealExpr" differentiation nil)
    (O const-decl "T3" function_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (deriv const-decl "real" derivatives_def analysis)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ddl_dom_dd formula-decl nil differentiation nil)
    (ddl_dom_noe formula-decl nil differentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (between? const-decl "bool" differentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (connected? const-decl "bool" differentiation nil)
    (proj const-decl "bool" differentiation nil)
    (deriv_composition formula-decl nil chain_rule analysis))
   shostak))
 (dl_derivable_exp 0
  (dl_derivable_exp-1 nil 3791885479
   ("" (skeep)
    (("" (expand "derivable?")
      (("" (skeep)
        (("" (lemma "dl_derivable_comp_point")
          ((""
            (inst -1 "i" "r1" "P" "env" "LAMBDA(x:real): x>0"
             "LAMBDA(x:real): IF x<= 0 THEN 0 else x^^n ENDIF")
            (("1" (assert)
              (("1" (split -1)
                (("1" (expand "^^")
                  (("1" (assert)
                    (("1" (expand "o")
                      (("1" (expand "expt" 1)
                        (("1" (assert)
                          (("1" (expand "^^") (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) (("2" (inst -2 "env") nil nil)) nil)
                 ("3" (skeep)
                  (("3" (inst -1 "env1") (("3" (assert) nil nil)) nil))
                  nil)
                 ("4" (expand "restrict" 1)
                  (("4" (expand "^^")
                    (("4"
                      (lemma
                       "derivable_exp_ln[(LAMBDA (x: real): x > 0)]")
                      (("1" (inst -1 "n")
                        (("1" (split -1)
                          (("1" (expand "derivable?" -1)
                            (("1" (inst -1 "r1(env)") nil nil)) nil)
                           ("2" (skeep 1) nil nil))
                          nil)
                         ("2" (assert)
                          (("2" (case "NOT n=0")
                            (("1" (assert) nil nil)
                             ("2" (replace -1)
                              (("2"
                                (assert)
                                (("2"
                                  (lemma
                                   "derivable_const[(LAMBDA (x: real): x > 0)]")
                                  (("1"
                                    (inst -1 "1")
                                    (("1"
                                      (expand "const_fun" -1)
                                      (("1"
                                        (expand "derivable?" -1)
                                        (("1"
                                          (inst -1 "r1(env)")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (expand "deriv_domain?" 1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst 1 "min(x,e!1)/2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2 3)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2 3)
                                            (("2"
                                              (hide -3 -4)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2 3)
                        (("2" (expand "not_one_element?" 1)
                          (("2" (skeep)
                            (("2" (inst 1 "x+1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2 3)
                        (("3" (expand "connected?" 1)
                          (("3" (skeep) (("3" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (hide 2 3)
                        (("4" (expand "nonempty?" 1)
                          (("4" (expand "empty?" -1)
                            (("4" (inst -1 "1")
                              (("4"
                                (expand "member" 1)
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep) (("2" (assert) nil nil)) nil)
             ("3" (skeep) (("3" (assert) nil nil)) nil)
             ("4" (hide -)
              (("4" (hide 2)
                (("4" (expand "deriv_domain?" 1)
                  (("4" (skeep)
                    (("4" (typepred "x")
                      (("4" (inst 1 "min(x,e!1)/2")
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dl_derivable_comp_point formula-decl nil differentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (restrict const-decl "R" restrict nil)
    (derivable_exp_ln formula-decl nil exp_analysis ODEs)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (derivable_const judgement-tcc nil derivatives analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (fullset const-decl "set" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (exp_0 formula-decl nil ln_exp lnexp)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (derivable? const-decl "bool" derivatives analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^^ const-decl "RealExpr" differentiation nil)
    (O const-decl "T3" function_props nil)
    (expt const-decl "real" differentiation nil)
    (^^ const-decl "nnreal" expt lnexp)
    (nnreal type-eq-decl nil real_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis))
   shostak))
 (dl_partial_exp_TCC1 0
  (dl_partial_exp_TCC1-1 nil 3792174403
   ("" (lemma "dl_derivable_exp") (("" (propax) nil nil)) nil)
   ((dl_derivable_exp formula-decl nil differentiation nil)) nil
   (dl_partial_exp subtype
    "differentiation.^^(differentiation.r1, differentiation.n)"
    "(differentiation.derivable?(differentiation.i, differentiation.P))")))
 (dl_partial_exp 0
  (dl_partial_exp-1 nil 3792174458
   ("" (skeep)
    (("" (expand "partial_diff" 1)
      (("" (decompose-equality 1)
        (("1" (lift-if 1)
          (("1" (split 1)
            (("1" (flatten)
              (("1" (assert)
                (("1" (lemma "dl_partial_chain")
                  (("1" (expand "*")
                    (("1"
                      (inst -1 "i" "r1" "P" "x!1" "LAMBDA(x:real): x>0"
                       "LAMBDA(x:real): IF x<= 0 THEN 0 else x^^n ENDIF")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (expand "partial_diff" -1)
                            (("1" (decompose-equality -1)
                              (("1"
                                (inst -1 "x!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "o ")
                                    (("1"
                                      (expand "restrict")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "^^" -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "^^" 1 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "expt" 1 1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "^^" 1 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("1"
                                                            (case
                                                             "deriv[(proj(i)(P))] (LAMBDA (x: (proj(i)(P))): r1(x!1 WITH [(i) := x]), x!1(i)) =0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (div-by
                                                               2
                                                               "deriv[(proj(i)(P))] (LAMBDA (x: (proj(i)(P))): r1(x!1 WITH [(i) := x]), x!1(i))")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "NOT (r1 ^^ (n - 1))(x!1) * deriv[(proj(i)(P))] (LAMBDA (x: (proj(i)(P))): r1(x!1 WITH [(i) := x]), x!1(i)) * n / deriv[(proj(i)(P))] (LAMBDA (x: (proj(i)(P))): r1(x!1 WITH [(i) := x]), x!1(i)) = (r1 ^^ (n - 1))(x!1) * n")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -1
                                                                     2)
                                                                    (("2"
                                                                      (lemma
                                                                       "deriv_exp_ln[(LAMBDA (x: real): x > 0)]")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "n")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (decompose-equality
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "r1(x!1)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "deriv"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     2)
                                                                                    (("1"
                                                                                      (case
                                                                                       "n=0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case
                                                                                         "NOT n * exp(n * ln(r1(x!1))) / r1(x!1) / n = exp(n * ln(r1(x!1))) / r1(x!1)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (div-by
                                                                                           3
                                                                                           "n")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               3)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "hathat_to_1")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "r1(x!1)")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "hathat_diff_real")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "r1(x!1)"
                                                                                                         "1"
                                                                                                         "n")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "^^"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "^^"
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "^^"
                                                                                                                   3)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "NOT (exp(n * ln(r1(x!1))) / r1(x!1) = (exp(n * ln(r1(x!1))) / exp(1 * ln(r1(x!1)))))")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         3)
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "expt"
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "^^")
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (reveal
                                                                                                           -)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             "-17-"
                                                                                                             16
                                                                                                             -15)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -15
                                                                                                               -14
                                                                                                               -13)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -13
                                                                                                                 -12
                                                                                                                 -11
                                                                                                                 -10
                                                                                                                 -9)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -8
                                                                                                                   "x!1")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (reveal
                                                                                                       -)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -14
                                                                                                         -15)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -12
                                                                                                           -11
                                                                                                           -10
                                                                                                           -9
                                                                                                           -8)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -7
                                                                                                             "x!1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             -6
                                                                                             "x!1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("4"
                                                                                          (inst
                                                                                           -5
                                                                                           "x!1")
                                                                                          (("4"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -)
                                                                                (("2"
                                                                                  (hide
                                                                                   2
                                                                                   3)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "not_one_element?"
                                                                                     1)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst
                                                                                           1
                                                                                           "x+1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide
                                                                                 2
                                                                                 3)
                                                                                (("3"
                                                                                  (hide
                                                                                   -)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "deriv_domain?"
                                                                                     1)
                                                                                    (("3"
                                                                                      (skeep)
                                                                                      (("3"
                                                                                        (inst
                                                                                         1
                                                                                         "e!1/2")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (hide
                                                                                 2
                                                                                 3)
                                                                                (("4"
                                                                                  (hide
                                                                                   -)
                                                                                  (("4"
                                                                                    (lemma
                                                                                     "derivable_exp_ln[(LAMBDA (x: real): x > 0)]")
                                                                                    (("4"
                                                                                      (inst
                                                                                       -1
                                                                                       "n")
                                                                                      (("1"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (skeep)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case
                                                                                         "NOT n=0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "derivable_const[(LAMBDA (x: real): x > 0)]")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "const_fun"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 2
                                                                                                 3)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "deriv_domain?"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "e!1/2")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2
                                                                               3)
                                                                              (("2"
                                                                                (skeep)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case
                                                                             "NOT n=0")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   -)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "deriv_const[(LAMBDA (x: real): x > 0)]")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "1"
                                                                                       "r1(x!1)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "const_fun"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         2
                                                                                         3
                                                                                         4)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "deriv_domain?"
                                                                                           1)
                                                                                          (("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (inst
                                                                                               1
                                                                                               "e!1/2")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -)
                                                                        (("2"
                                                                          (hide
                                                                           2
                                                                           3)
                                                                          (("2"
                                                                            (expand
                                                                             "not_one_element?"
                                                                             1)
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "x+1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("3"
                                                                          (hide
                                                                           -)
                                                                          (("3"
                                                                            (expand
                                                                             "connected?"
                                                                             1)
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("4"
                                                                          (hide
                                                                           -)
                                                                          (("4"
                                                                            (expand
                                                                             "nonempty?"
                                                                             1)
                                                                            (("4"
                                                                              (expand
                                                                               "empty?"
                                                                               -1)
                                                                              (("4"
                                                                                (inst
                                                                                 -1
                                                                                 "1")
                                                                                (("4"
                                                                                  (expand
                                                                                   "member"
                                                                                   1)
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2
                                                                 3)
                                                                (("2"
                                                                  (hide
                                                                   -)
                                                                  (("2"
                                                                    (expand
                                                                     "not_one_element?"
                                                                     1)
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "x+1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide
                                                                 2
                                                                 3)
                                                                (("3"
                                                                  (hide
                                                                   -)
                                                                  (("3"
                                                                    (expand
                                                                     "deriv_domain?"
                                                                     1)
                                                                    (("3"
                                                                      (skeep)
                                                                      (("3"
                                                                        (inst
                                                                         1
                                                                         "e!1/2")
                                                                        (("3"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide
                                                                 2
                                                                 3)
                                                                (("4"
                                                                  (hide
                                                                   -)
                                                                  (("4"
                                                                    (expand
                                                                     "not_one_element?"
                                                                     1)
                                                                    (("4"
                                                                      (skeep)
                                                                      (("4"
                                                                        (inst
                                                                         1
                                                                         "x+1")
                                                                        (("4"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (hide
                                                                 2
                                                                 3)
                                                                (("5"
                                                                  (hide
                                                                   -)
                                                                  (("5"
                                                                    (expand
                                                                     "deriv_domain?"
                                                                     1)
                                                                    (("5"
                                                                      (skeep)
                                                                      (("5"
                                                                        (inst
                                                                         1
                                                                         "e!1/2")
                                                                        (("5"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "derivable?" -6)
                                (("2"
                                  (inst -6 "x1!1")
                                  (("2"
                                    (expand "derivable?" -6)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "proj" 1 1)
                                (("3" (inst 1 "x1!1") nil nil))
                                nil)
                               ("4"
                                (hide -)
                                (("4"
                                  (expand "not_one_element?" 1)
                                  (("4"
                                    (skeep)
                                    (("4"
                                      (inst 1 "x+1")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (hide 2 3)
                                (("5"
                                  (hide -)
                                  (("5"
                                    (expand "deriv_domain?" 1)
                                    (("5"
                                      (skeep)
                                      (("5"
                                        (inst 1 "e!1/2")
                                        (("5" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("6"
                                (expand "restrict" 1)
                                (("6"
                                  (hide 2)
                                  (("6"
                                    (expand "^^" 1)
                                    (("6"
                                      (hide -3)
                                      (("6"
                                        (lemma
                                         "derivable_exp_ln[(LAMBDA (x: real): x > 0)]")
                                        (("1"
                                          (inst -1 "n")
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "derivable?"
                                                 -1)
                                                (("1"
                                                  (inst -1 "r1(x1!1)")
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2" (skeep) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case "NOT n=0")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (replace -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "derivable_const[(LAMBDA (x: real): x > 0)]")
                                                    (("1"
                                                      (inst -1 "1")
                                                      (("1"
                                                        (expand
                                                         "derivable?"
                                                         -1)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "r1(x1!1)")
                                                          (("1"
                                                            (expand
                                                             "const_fun"
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2 3)
                                                      (("2"
                                                        (hide -)
                                                        (("2"
                                                          (expand
                                                           "deriv_domain?"
                                                           1)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst
                                                               1
                                                               "e!1/2")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 3)
                                          (("2"
                                            (hide -)
                                            (("2"
                                              (expand
                                               "not_one_element?"
                                               1)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst 1 "x+1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 2 3)
                                          (("3"
                                            (hide -)
                                            (("3"
                                              (expand "connected?" 1)
                                              (("3"
                                                (skeep)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (hide 2 3)
                                          (("4"
                                            (hide -)
                                            (("4"
                                              (expand "nonempty?" 1)
                                              (("4"
                                                (expand "empty?" -1)
                                                (("4"
                                                  (inst -1 "1")
                                                  (("4"
                                                    (expand "member" 1)
                                                    (("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("7"
                                (inst -5 "x1!1")
                                (("7" (assert) nil nil))
                                nil)
                               ("8"
                                (hide -)
                                (("8"
                                  (lemma "dl_derivable_exp")
                                  (("8"
                                    (inst?)
                                    (("8"
                                      (inst -1 "i" "P")
                                      (("8"
                                        (assert)
                                        (("8"
                                          (split -1)
                                          (("1"
                                            (expand "o")
                                            (("1"
                                              (expand "derivable?" -1)
                                              (("1"
                                                (inst -1 "x1!1")
                                                (("1"
                                                  (expand
                                                   "derivable?"
                                                   -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "(LAMBDA (x_1: (proj(i)(P))): IF r1(x1!1 WITH [(i) := x_1]) <= 0 THEN 0 ELSE r1(x1!1 WITH [(i) := x_1]) ^^ n ENDIF) = (LAMBDA (x: (proj(i)(P))): (r1 ^^ n)(x1!1 WITH [(i) := x]))")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide 2 3)
                                                        (("2"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (lift-if 1)
                                                            (("1"
                                                              (reveal
                                                               -)
                                                              (("1"
                                                                (hide
                                                                 -12
                                                                 -11
                                                                 -10)
                                                                (("1"
                                                                  (hide
                                                                   -3
                                                                   -4)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -3)
                                                                        (("1"
                                                                          (typepred
                                                                           "x!2")
                                                                          (("1"
                                                                            (expand
                                                                             "proj"
                                                                             -1)
                                                                            (("1"
                                                                              (typepred
                                                                               "P")
                                                                              (("1"
                                                                                (expand
                                                                                 "ddl_dom?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "connected?"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "x1!1"
                                                                                         "env"
                                                                                         "x1!1 WITH [(i) := x!2]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -7
                                                                                           "x1!1 WITH [(i) := x!2]")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "^^"
                                                                                               1
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "^^"
                                                                                                 1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "expt"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "^^"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "between?"
                                                                                               1)
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "i_1=i")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skeep)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide 2 3)
                                                        (("3"
                                                          (skeep)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (hide 2 3)
                                                        (("4"
                                                          (skeep)
                                                          (("4"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2 3)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (reveal -)
                                                  (("2"
                                                    (inst -7 "env")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("9"
                                (hide 2)
                                (("9"
                                  (expand "proj" 1)
                                  (("9" (inst 1 "x1!1") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (hide 2)
                              (("2"
                                (skeep)
                                (("2"
                                  (inst -2 "env1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "restrict" 1)
                            (("3" (hide 2)
                              (("3"
                                (skeep)
                                (("3"
                                  (expand "^^")
                                  (("3"
                                    (lemma
                                     "derivable_exp_ln[(LAMBDA (x: real): x > 0)]")
                                    (("1"
                                      (inst -1 "n")
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "derivable?" -1)
                                            (("1"
                                              (inst -1 "r1(env1)")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (skeep) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (case "NOT n=0")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (replace -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "derivable_const[(LAMBDA (x: real): x > 0)]")
                                                (("1"
                                                  (inst -1 "1")
                                                  (("1"
                                                    (expand
                                                     "derivable?"
                                                     -1)
                                                    (("1"
                                                      (expand
                                                       "const_fun"
                                                       -1)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "r1(env1)")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2 3)
                                                  (("2"
                                                    (hide -)
                                                    (("2"
                                                      (expand
                                                       "deriv_domain?"
                                                       1)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst
                                                           1
                                                           "e!1/2")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2 3)
                                      (("2"
                                        (hide -)
                                        (("2"
                                          (expand "not_one_element?" 1)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst 1 "x+1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2 3)
                                      (("3"
                                        (hide -)
                                        (("3"
                                          (expand "connected?" 1)
                                          (("3"
                                            (skeep)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (hide 2 3)
                                      (("4"
                                        (hide -)
                                        (("4"
                                          (expand "nonempty?" 1)
                                          (("4"
                                            (expand "empty?" -1)
                                            (("4"
                                              (inst -1 "1")
                                              (("4"
                                                (expand "member" 1)
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (skeep) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (skeep) (("3" (assert) nil nil)) nil))
                        nil)
                       ("4" (hide 2)
                        (("4" (expand "deriv_domain?" 1)
                          (("4" (skeep)
                            (("4" (inst 1 "e!1/2")
                              (("4" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (expand "*") (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (assert)
            (("2" (split 1)
              (("1" (expand "proj" 1) (("1" (inst 1 "env") nil nil))
                nil)
               ("2" (expand "derivable?" -3)
                (("2" (inst -3 "env")
                  (("2" (expand "derivable?" -3)
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (typepred "P")
            (("3" (expand "proj")
              (("3" (split 1)
                (("1" (inst 1 "env") nil nil)
                 ("2" (assert)
                  (("2" (lemma "dl_derivable_exp")
                    (("2" (inst -1 "i" "n" "r1" "P")
                      (("2" (assert)
                        (("2" (split -1)
                          (("1" (expand "derivable?" -1)
                            (("1" (inst -1 "env")
                              (("1"
                                (expand "derivable?" -1)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((partial_diff const-decl "RealExpr" differentiation nil)
    (dl_partial_chain formula-decl nil differentiation nil)
    (> const-decl "bool" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^^ const-decl "nnreal" expt lnexp)
    (nnreal type-eq-decl nil real_types nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (restrict const-decl "R" restrict nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (O const-decl "T3" function_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt const-decl "real" differentiation nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp lnexp)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (deriv_exp_ln formula-decl nil exp_analysis ODEs)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (deriv_const formula-decl nil derivatives_def analysis)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (hathat_to_1 formula-decl nil expt lnexp)
    (hathat_diff_real formula-decl nil differentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (derivable_const judgement-tcc nil derivatives analysis)
    (constant_seq2 application-judgement "(convergent_nz?)"
     convergence_ops analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (exp_0 formula-decl nil ln_exp lnexp)
    (derivable_exp_ln formula-decl nil exp_analysis ODEs)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (dl_derivable_exp formula-decl nil differentiation nil)
    (between? const-decl "bool" differentiation nil)
    (connected? const-decl "bool" differentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (deriv const-decl "real" derivatives_def analysis)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (proj const-decl "bool" differentiation nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (RealExpr type-eq-decl nil hp_def nil)
    (^^ const-decl "RealExpr" differentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (dl_derivable_sqrt 0
  (dl_derivable_sqrt-1 nil 3792425383
   ("" (lemma "dl_partial_exp")
    (("" (skeep)
      (("" (inst -1 "i" "1/2" "r1" "P")
        (("" (assert)
          (("" (split -1)
            (("1" (expand "derivable?")
              (("1" (skeep)
                (("1" (inst -3 "env")
                  (("1" (expand "derivable?" 1)
                    (("1" (expand "derivable?" -3)
                      (("1" (lemma "sqrt_hathat")
                        (("1"
                          (case "(LAMBDA (x: (proj(i)(P))): sqrt_safe_re(r1)(env WITH [(i) := x])) = (LAMBDA(x: (proj(i)(P))): sqrt(r1(env WITH [(i) := x])))")
                          (("1" (replace -1 1)
                            (("1" (lemma "dl_derivable_exp")
                              (("1"
                                (inst -1 "i" "1/2" "r1" "P")
                                (("1"
                                  (split -1)
                                  (("1"
                                    (expand "derivable?" -1)
                                    (("1"
                                      (inst -1 "env")
                                      (("1"
                                        (expand "derivable?" -1)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (case
                                             "(LAMBDA (x: (proj(i)(P))): (r1 ^^ (1/2))(env WITH [(i) := x])) = (LAMBDA (x: (proj(i)(P))): sqrt(r1(env WITH [(i) := x])))")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (decompose-equality 1)
                                              (("1"
                                                (expand "^^" 1)
                                                (("1"
                                                  (expand "expt" 1 1)
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (case
                                                       " r1(env WITH [(i) := x!1])>0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "sqrt_hathat")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "r1(env WITH [(i) := x!1])")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (inst
                                                           -4
                                                           "env WITH [(i) := x!1]")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide 1)
                                                              (("2"
                                                                (typepred
                                                                 "env"
                                                                 "x!1")
                                                                (("2"
                                                                  (expand
                                                                   "proj"
                                                                   -2)
                                                                  (("2"
                                                                    (skeep
                                                                     -2)
                                                                    (("2"
                                                                      (typepred
                                                                       "P")
                                                                      (("2"
                                                                        (expand
                                                                         "ddl_dom?"
                                                                         -1)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "connected?"
                                                                             -1)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "env"
                                                                               "env!1"
                                                                               "env WITH [(i) := x!1]")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "between?"
                                                                                   1)
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (case
                                                                                       "i_1=i")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep 1)
                                                (("2"
                                                  (hide -)
                                                  (("2"
                                                    (hide 2 3)
                                                    (("2"
                                                      (typepred
                                                       "env"
                                                       "x")
                                                      (("2"
                                                        (expand
                                                         "proj"
                                                         -2)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (typepred
                                                             "P")
                                                            (("2"
                                                              (expand
                                                               "ddl_dom?"
                                                               -1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "connected?"
                                                                   -1)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "env!1"
                                                                     "env"
                                                                     "env WITH [(i) := x]")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (reveal
                                                                         -)
                                                                        (("1"
                                                                          (hide
                                                                           -8
                                                                           -9
                                                                           -10
                                                                           -11
                                                                           -12)
                                                                          (("1"
                                                                            (inst
                                                                             -5
                                                                             "env WITH [(i) := x]")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "between?"
                                                                       1)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (case
                                                                           "i_1=i")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil)
                                   ("3"
                                    (expand "derivable?" 1)
                                    (("3"
                                      (skeep)
                                      (("3"
                                        (reveal -)
                                        (("3"
                                          (hide -3)
                                          (("3"
                                            (hide -1)
                                            (("3"
                                              (inst -1 "env!1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (decompose-equality 1)
                              (("1"
                                (expand "sqrt_safe_re" 1)
                                (("1"
                                  (expand "sqrt_safe" 1 1)
                                  (("1"
                                    (expand "max" 1 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (inst -3 "env WITH [(i) := x]")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "env" "x" "P")
                                      (("2"
                                        (expand "proj" -2)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand "ddl_dom?" -3)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand
                                                 "connected?"
                                                 -3)
                                                (("2"
                                                  (inst
                                                   -3
                                                   "env"
                                                   "env!1"
                                                   "env WITH [(i) := x]")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "between?"
                                                       1)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (case
                                                           "i_1=i")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (skeep)
                              (("3"
                                (typepred "env" "x" "P")
                                (("3"
                                  (expand "proj" -2)
                                  (("3"
                                    (expand "ddl_dom?" -3)
                                    (("3"
                                      (skeep)
                                      (("3"
                                        (expand "connected?" -3)
                                        (("3"
                                          (inst
                                           -3
                                           "env"
                                           "env!1"
                                           "env WITH [(i) := x]")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -7
                                               "env WITH [(i) := x]")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "between?" 1)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (case "i_1=i")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((proj const-decl "bool" differentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sqrt_safe_re const-decl "real" hp_def nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (dl_derivable_exp formula-decl nil differentiation nil)
    (expt const-decl "real" differentiation nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (between? const-decl "bool" differentiation nil)
    (connected? const-decl "bool" differentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (^^ const-decl "RealExpr" differentiation nil)
    (sqrt_safe const-decl "nnreal" reals_safe_ops reals)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sqrt_hathat formula-decl nil differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (dl_partial_exp formula-decl nil differentiation nil))
   shostak))
 (dl_partial_sqrt_TCC1 0
  (dl_partial_sqrt_TCC1-1 nil 3792425160
   ("" (skeep)
    (("" (lemma "dl_derivable_sqrt")
      (("" (inst -1 "i" "r1" "P") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((dl_derivable_sqrt formula-decl nil differentiation nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (dl_partial_sqrt subtype "hp_def.sqrt_safe_re(differentiation.r1)"
    "(differentiation.derivable?(differentiation.i, differentiation.P))")))
 (dl_partial_sqrt 0
  (dl_partial_sqrt-1 nil 3792426206
   ("" (skeep)
    (("" (lemma "dl_partial_exp")
      (("" (inst -1 "i" "1/2" "r1" "P")
        (("" (assert)
          (("" (decompose-equality 1)
            (("" (expand "*" 1)
              (("" (split -1)
                (("1" (case "NOT P(x!1)")
                  (("1" (expand "div_safe_re" 2)
                    (("1" (expand "div_safe" 2)
                      (("1" (assert)
                        (("1" (expand "partial_diff" 2 1)
                          (("1" (expand "partial_diff" 2)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst-cp -3 "x!1")
                    (("2" (assert)
                      (("2" (expand "div_safe_re" 1)
                        (("2" (expand "div_safe" 1)
                          (("2" (assert)
                            (("2" (expand "sqrt_safe_re" 1)
                              (("2"
                                (assert)
                                (("2"
                                  (lift-if 1)
                                  (("2"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "sqrt_safe" -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "cnst" 2 1)
                                          (("2"
                                            (expand "cnst" 2)
                                            (("2"
                                              (expand "partial_diff")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (decompose-equality
                                                   -2)
                                                  (("1"
                                                    (inst -1 "x!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "(LAMBDA(x: (proj(i)(P))): sqrt_safe(r1(x!1 WITH [(i) := x]))) = (LAMBDA (x: (proj(i)(P))): (r1 ^^ (1/2))(x!1 WITH [(i) := x]))")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "*"
                                                               2)
                                                              (("1"
                                                                (mult-by
                                                                 2
                                                                 "2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     " deriv[(proj(i)(P))] (LAMBDA (x: (proj(i)(P))): r1(x!1 WITH [(i) := x]), x!1(i)) = 0")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (div-by
                                                                       3
                                                                       " deriv[(proj(i)(P))] (LAMBDA (x: (proj(i)(P))): r1(x!1 WITH [(i) := x]), x!1(i))")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide
                                                                           -)
                                                                          (("2"
                                                                            (lemma
                                                                             "sqrt_hathat_neg")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "r1(x!1)")
                                                                              (("2"
                                                                                (expand
                                                                                 "^^"
                                                                                 3)
                                                                                (("2"
                                                                                  (expand
                                                                                   "expt"
                                                                                   3
                                                                                   1)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     3)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "sqrt_safe"
                                                                                       3)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "max"
                                                                                         3)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "sqrt_safe"
                                                               1
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "max"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (case
                                                                   " r1(x!1 WITH [(i) := x!2]) > 0")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "sqrt_hathat")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "r1(x!1 WITH [(i) := x!2])")
                                                                        (("1"
                                                                          (expand
                                                                           "^^"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "expt"
                                                                             1
                                                                             1)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (inst
                                                                         -3
                                                                         "x!1 WITH [(i) := x!2]")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "x!1"
                                                                             "x!2"
                                                                             "P")
                                                                            (("2"
                                                                              (expand
                                                                               "proj"
                                                                               -1)
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (expand
                                                                                   "ddl_dom?"
                                                                                   -2)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "connected?"
                                                                                       -2)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -2
                                                                                         "x!1"
                                                                                         "env"
                                                                                         "x!1 WITH [(i) := x!2]")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "between?"
                                                                                             1)
                                                                                            (("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "i_1=i")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "^^"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "expt"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lift-if
                                                                           1)
                                                                          (("2"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2 3)
                                                    (("2"
                                                      (expand
                                                       "derivable?"
                                                       -6)
                                                      (("2"
                                                        (inst
                                                         -6
                                                         "env!1")
                                                        (("2"
                                                          (expand
                                                           "derivable?"
                                                           -6)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide 3)
                                                    (("3"
                                                      (expand
                                                       "proj"
                                                       1
                                                       1)
                                                      (("3"
                                                        (inst
                                                         1
                                                         "env!1")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (hide 2)
                                                    (("4"
                                                      (hide -4)
                                                      (("4"
                                                        (hide 2)
                                                        (("4"
                                                          (lemma
                                                           "dl_derivable_exp")
                                                          (("4"
                                                            (inst
                                                             -1
                                                             "i"
                                                             "1/2"
                                                             "r1"
                                                             "P")
                                                            (("4"
                                                              (assert)
                                                              (("4"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "derivable?"
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "x1!1")
                                                                    (("1"
                                                                      (expand
                                                                       "derivable?"
                                                                       -1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("5"
                                                    (hide 3)
                                                    (("5"
                                                      (hide -)
                                                      (("5"
                                                        (expand
                                                         "proj"
                                                         1)
                                                        (("5"
                                                          (inst
                                                           1
                                                           "x1!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dl_partial_exp formula-decl nil differentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (div_safe const-decl "real" reals_safe_ops reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^^ const-decl "RealExpr" differentiation nil)
    (deriv const-decl "real" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (proj const-decl "bool" differentiation nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sqrt_hathat formula-decl nil differentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (connected? const-decl "bool" differentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (between? const-decl "bool" differentiation nil)
    (sqrt_0 formula-decl nil sqrt reals)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (expt const-decl "real" differentiation nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sqrt_hathat_neg formula-decl nil differentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (dl_derivable_exp formula-decl nil differentiation nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sqrt_safe const-decl "nnreal" reals_safe_ops reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_safe_re const-decl "real" hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (sqrt_safe_re const-decl "real" hp_def nil)
    (partial_diff const-decl "RealExpr" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   shostak))
 (DIFT_last_TCC1 0
  (DIFT_last_TCC1-1 nil 3792333496 ("" (subtype-tcc) nil nil) nil nil
   (DIFT_last subtype "(number_fields.-)(differentiation.M, 1)"
    "nat")))
 (DIFT_last_TCC2 0
  (DIFT_last_TCC2-1 nil 3792333496 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (connected? const-decl "bool" differentiation nil)
    (/= const-decl "boolean" notequal nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" differentiation nil)
    (ddl_dom? const-decl "bool" differentiation nil))
   nil
   (DIFT_last subtype "differentiation.P"
    "(differentiation.ddl_dom?(differentiation.M))")))
 (DIFT_last 0
  (DIFT_last-1 nil 3792333546
   ("" (skeep)
    (("" (expand "DIFT_Re")
      (("" (decompose-equality 1)
        (("1" (expand "sum_it" 1)
          (("1" (expand "+")
            (("1" (lemma "sum_it_sigma")
              (("1"
                (inst-cp -1
                 "LAMBDA (i_1: nat): IF derivable?(i_1, P)(re) THEN (partial_diff(i_1, P)(re) * ddtn(i_1))(x!1) ELSE cnst(0)(x!1) ENDIF"
                 "M" "0")
                (("1" (replace -2)
                  (("1" (hide -2)
                    (("1" (assert)
                      (("1"
                        (inst-cp -1
                         "LAMBDA (i_1: nat): IF derivable?(i_1, P)(re) THEN (partial_diff(i_1, P)(re) * ddtn(i_1))(x!1) ELSE cnst(0)(x!1) ENDIF"
                         "M-1" "0")
                        (("1" (replace -2)
                          (("1" (lemma "sigma_last")
                            (("1"
                              (inst -1
                               " LAMBDA (i_1: nat): IF derivable?(i_1, P)(re) THEN (partial_diff(i_1, P)(re) * ddtn(i_1))(x!1) ELSE cnst(0)(x!1) ENDIF"
                               "M" "0")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (hide -)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (typepred "P")
                                      (("2"
                                        (lemma "ddl_dom_weak")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (assert)
                                (("3"
                                  (hide 2)
                                  (("3"
                                    (hide -)
                                    (("3"
                                      (skeep)
                                      (("3"
                                        (typepred "P")
                                        (("3"
                                          (lemma "ddl_dom_weak")
                                          (("3"
                                            (inst?)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (hide 2)
                            (("2" (skeep)
                              (("2"
                                (typepred "P")
                                (("2"
                                  (lemma "ddl_dom_weak")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (assert)
                          (("3" (hide 2)
                            (("3" (skeep)
                              (("3"
                                (typepred "P")
                                (("3"
                                  (lemma "ddl_dom_weak")
                                  (("3"
                                    (inst?)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (hide 2)
                    (("2" (skeep)
                      (("2" (typepred "P")
                        (("2" (lemma "ddl_dom_weak")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert)
                  (("3" (hide 2)
                    (("3" (skeep)
                      (("3" (typepred "P")
                        (("3" (lemma "ddl_dom_weak")
                          (("3" (inst?) (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "P")
          (("2" (lemma "ddl_dom_weak")
            (("2" (inst?)
              (("2" (assert)
                (("2" (lemma "ddl_dom_weak")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (lemma "ddl_dom_weak")
                        (("2" (inst?)
                          (("2" (assert) (("2" (flatten) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (typepred "P")
          (("3" (lemma "ddl_dom_weak")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
          nil)
         ("4" (skeep)
          (("4" (typepred "P")
            (("4" (lemma "ddl_dom_weak")
              (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("5" (skeep)
          (("5" (typepred "P")
            (("5" (lemma "ddl_dom_weak")
              (("5" (inst?) (("5" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DIFT_Re const-decl "RealExpr" differentiation nil)
    (sum_it_sigma formula-decl nil sigma reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ddl_dom_weak formula-decl nil differentiation nil)
    (sigma_last formula-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cnst const-decl "real" hp_def nil)
    (partial_diff const-decl "RealExpr" differentiation nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sum_it const-decl "real" differentiation nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (dl_dift_val_zero 0
  (dl_dift_val_zero-2 nil 3792339504
   ("" (induct "M")
    (("1" (skeep)
      (("1" (expand "DIFT_Re" 1)
        (("1" (expand "sum_it" 1)
          (("1" (decompose-equality 1)
            (("1" (expand "cnst" 1)
              (("1" (expand "sum_it" 1)
                (("1" (expand "sum_it_def" 1 1)
                  (("1" (expand "sum_it_def" 1 1)
                    (("1" (typepred "v")
                      (("1" (lemma "dl_derivable_val")
                        (("1" (inst -1 "0" "v" "P")
                          (("1" (assert)
                            (("1" (lemma "dl_partial_val")
                              (("1"
                                (inst -1 "0" "v" "P" "x!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "cnst" -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "*" 1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "*" 2)
                                    (("2"
                                      (expand "partial_diff" 2 1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (typepred "P")
                              (("2"
                                (lemma "ddl_dom_weak")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (typepred "P")
                (("2" (lemma "ddl_dom_weak")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("3" (skeep)
              (("3" (typepred "P")
                (("3" (lemma "ddl_dom_weak")
                  (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (typepred "v")
            (("2" (inst -2 "ddtn" "v" "P")
              (("2" (lemma "DIFT_last")
                (("2" (inst -1 "ddtn" "1+j" "P" _)
                  (("2" (inst -1 "val(v)")
                    (("2" (replace -1)
                      (("2" (decompose-equality 1)
                        (("1" (expand "+" 1)
                          (("1" (decompose-equality -3)
                            (("1" (inst -1 "x!1")
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (expand "cnst")
                                  (("1"
                                    (hide -)
                                    (("1"
                                      (lift-if 1)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (lemma "dl_partial_val")
                                            (("1"
                                              (inst
                                               -1
                                               "1+j"
                                               "v"
                                               "P"
                                               "x!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "cnst" -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "*" 1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "*" 2)
                                                (("2"
                                                  (expand
                                                   "partial_diff"
                                                   2)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -)
                          (("2" (typepred "P")
                            (("2" (flatten)
                              (("2"
                                (lemma "ddl_dom_weak")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (typepred "P")
                          (("3" (lemma "ddl_dom_weak")
                            (("3" (inst?) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil) nil
    nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DIFT_last formula-decl nil differentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sum_it const-decl "real" differentiation nil)
    (sum_it_def def-decl "real" sigma reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dl_partial_val formula-decl nil differentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ddl_dom_weak formula-decl nil differentiation nil)
    (dl_derivable_val formula-decl nil differentiation nil)
    (partial_diff const-decl "RealExpr" differentiation nil) nil
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sum_it const-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (nat_induction formula-decl nil naturalnumbers nil)
    (cnst const-decl "real" hp_def nil)
    (val const-decl "real" hp_def nil)
    (DIFT_Re const-decl "RealExpr" differentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (BoolExpr type-eq-decl nil hp_def nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (> const-decl "bool" reals nil) (dLVar type-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (dl_dift_val_zero-1 nil 3792320128
   ("" (induct "M")
    (("1" (skeep)
      (("1" (expand "eq" 1)
        (("1" (decompose-equality 1)
          (("1" (expand "cnst" 1)
            (("1" (expand "DIFT_Re" 1)
              (("1" (expand "sum_it" 1)
                (("1" (expand "sum_it" 1)
                  (("1" (expand "sum_it_def" 1)
                    (("1" (expand "sum_it_def" 1)
                      (("1" (lemma "dl_derivable_val")
                        (("1" (inst -1 "0" "i" "P")
                          (("1" (assert)
                            (("1" (lemma "dl_partial_val")
                              (("1"
                                (inst -1 "0" "i" "P" "x!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (typepred "i")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "same_var" -2)
                                        (("1"
                                          (expand "cnst" -2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "*" 1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (typepred "P")
                              (("2"
                                (lemma "con_noe_dd")
                                (("2"
                                  (inst -1 "P" "0")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "deriv_domain?" -1)
                                      (("2" (inst -1 "0") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (typepred "i")
          (("2" (inst -2 "ddtn" "i" "P")
            (("2" (expand "eq")
              (("2" (decompose-equality 1)
                (("2" (decompose-equality -2)
                  (("2" (inst -1 "x!1")
                    (("2" (expand "DIFT_Re")
                      (("2" (expand "sum_it")
                        (("2" (lemma "sum_it_sigma")
                          (("2"
                            (inst-cp -1 "LAMBDA (i_1: nat):
               IF derivable?(i_1, P)(val(i))
                 THEN (partial_diff(i_1, P)(val(i)) * ddtn(i_1))(x!1)
               ELSE cnst(0)(x!1)
               ENDIF" "1+j" "0")
                            (("1"
                              (inst -1 "LAMBDA (i_1: nat):
               IF derivable?(i_1, P)(val(i))
                 THEN (partial_diff(i_1, P)(val(i)) * ddtn(i_1))(x!1)
               ELSE cnst(0)(x!1)
               ENDIF" "j" "0")
                              (("1"
                                (replace -1)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (hide -1 -2)
                                    (("1"
                                      (lemma "sigma_last")
                                      (("1"
                                        (inst
                                         -1
                                         " LAMBDA (i_1: nat):
              IF derivable?(i_1, P)(val(i))
                THEN (partial_diff(i_1, P)(val(i)) * ddtn(i_1))(x!1)
              ELSE cnst(0)(x!1)
              ENDIF"
                                         "1+j"
                                         "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (case
                                               "IF derivable?(1 + j, P)(val(i))
         THEN (partial_diff(1 + j, P)(val(i)) * ddtn(1 + j))(x!1)
       ELSE cnst(0)(x!1)
       ENDIF =0")
                                              (("1"
                                                (replace -1 1 lr)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "dl_derivable_val")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "1+j"
                                                       "i"
                                                       "P")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "*"
                                                           1)
                                                          (("1"
                                                            (lemma
                                                             "dl_partial_val")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "1+j"
                                                               "i"
                                                               "P"
                                                               "x!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "same_var"
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "cnst"
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -)
                                                        (("2"
                                                          (typepred
                                                           "P")
                                                          (("2"
                                                            (lemma
                                                             "con_noe_dd")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "P"
                                                               "1+j")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     "deriv_domain?"
                                                                     -1)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "1+j")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (hide -)
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (typepred "P")
                                                      (("3"
                                                        (lemma
                                                         "con_noe_dd")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "P"
                                                           "1+j")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (expand
                                                               "deriv_domain?"
                                                               -1)
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 "1+j")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (hide 2)
                                                (("4"
                                                  (hide -)
                                                  (("4"
                                                    (typepred "P")
                                                    (("4"
                                                      (lemma
                                                       "con_noe_dd")
                                                      (("4"
                                                        (inst
                                                         -1
                                                         "P"
                                                         "1+j")
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (expand
                                                             "deriv_domain?"
                                                             -1)
                                                            (("4"
                                                              (inst
                                                               -1
                                                               "1+j")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (hide -)
                                              (("2"
                                                (typepred "P")
                                                (("2"
                                                  (lemma "con_noe_dd")
                                                  (("2"
                                                    (inst -1 "P" "i_1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "deriv_domain?"
                                                         -1)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "i_1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -)
                                          (("3"
                                            (hide 2)
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (typepred "P")
                                                (("3"
                                                  (lemma "con_noe_dd")
                                                  (("3"
                                                    (inst -1 "P" "i_1")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (expand
                                                         "deriv_domain?"
                                                         -1)
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "i_1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (typepred "P")
                                      (("2"
                                        (lemma "con_noe_dd")
                                        (("2"
                                          (inst -1 "P" "i_1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand
                                               "deriv_domain?"
                                               -1)
                                              (("2"
                                                (inst -1 "i_1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide -)
                                (("3"
                                  (hide 2)
                                  (("3"
                                    (skeep)
                                    (("3"
                                      (typepred "P")
                                      (("3"
                                        (lemma "con_noe_dd")
                                        (("3"
                                          (inst -1 "P" "i_1")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (expand
                                               "deriv_domain?"
                                               -1)
                                              (("3"
                                                (inst -1 "i_1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (hide -1)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (typepred "P")
                                    (("2"
                                      (lemma "con_noe_dd")
                                      (("2"
                                        (inst -1 "P" "i_1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "deriv_domain?" -1)
                                            (("2"
                                              (inst -1 "i_1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2)
                              (("3"
                                (hide -)
                                (("3"
                                  (skeep)
                                  (("3"
                                    (typepred "P")
                                    (("3"
                                      (lemma "con_noe_dd")
                                      (("3"
                                        (inst -1 "P" "i_1")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (expand "deriv_domain?" -1)
                                            (("3"
                                              (inst -1 "i_1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sum_it_sigma formula-decl nil sigma reals)
    (sigma_last formula-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (sum_it const-decl "real" sigma reals)
    (same_var const-decl "bool" hp_def nil)
    (sum_it_def def-decl "real" sigma reals)
    (cnst const-decl "real" hp_def nil)
    (val const-decl "real" hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil))
   shostak))
 (dl_dift_val_P 0
  (dl_dift_val_P-1 nil 3861285928
   ("" (induct "M")
    (("1" (skeep)
      (("1" (expand "eq" 1)
        (("1" (decompose-equality 1)
          (("1" (expand "DIFT_Re" 1)
            (("1" (expand "sum_it" 1)
              (("1" (expand "sum_it" 1)
                (("1" (expand "sum_it_def" 1)
                  (("1" (expand "sum_it_def" 1 1)
                    (("1" (lift-if 1)
                      (("1" (lemma "dl_derivable_val")
                        (("1" (inst -1 "0" "v" "P")
                          (("1" (assert)
                            (("1" (typepred "v")
                              (("1"
                                (case "NOT dlvar_index(v)=0")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (replace -1)
                                  (("2"
                                    (lemma "dl_partial_val")
                                    (("2"
                                      (inst -1 "0" "v" "P" "x!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "*" 1)
                                          (("2"
                                            (replace -1 1)
                                            (("2"
                                              (expand "cnst" 1 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (typepred "P")
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "ddl_dom_weak")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (typepred "v")
          (("2" (case "dlvar_index(v) <= j")
            (("1" (inst -3 "ddtn" "v" "P")
              (("1" (expand "eq" -3)
                (("1" (expand "eq" 1)
                  (("1" (decompose-equality 1)
                    (("1" (decompose-equality -3)
                      (("1" (inst -1 "x!1")
                        (("1" (expand "DIFT_Re")
                          (("1" (lemma "sum_it_sigma")
                            (("1" (expand "sum_it")
                              (("1"
                                (inst
                                 -1
                                 "LAMBDA (i_1: nat): IF derivable?(i_1, P)(val(v)) THEN (partial_diff(i_1, P)(val(v)) * ddtn(i_1))(x!1) ELSE cnst(0)(x!1) ENDIF"
                                 "1+j"
                                 "0")
                                (("1"
                                  (expand "sum_it" 1 1)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (reveal -)
                                      (("1"
                                        (hide -2 -3 -4 -5)
                                        (("1"
                                          (inst
                                           -1
                                           "LAMBDA (i_1: nat): IF derivable?(i_1, P)(val(v)) THEN (partial_diff(i_1, P)(val(v)) * ddtn(i_1))(x!1) ELSE cnst(0)(x!1) ENDIF"
                                           "j"
                                           "0")
                                          (("1"
                                            (expand "sum_it" -3)
                                            (("1"
                                              (replace -1 -3)
                                              (("1"
                                                (lemma "sigma_last")
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "LAMBDA (i_1: nat): IF derivable?(i_1, P)(val(v)) THEN (partial_diff(i_1, P)(val(v)) * ddtn(i_1))(x!1) ELSE cnst(0)(x!1) ENDIF"
                                                     "j+1"
                                                     "0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (case
                                                           "IF derivable?(1 + j, P)(val(v)) THEN (partial_diff(1 + j, P)(val(v)) * ddtn(1 + j))(x!1) ELSE cnst(0)(x!1) ENDIF =0")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1
                                                             lr)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (hide -2)
                                                              (("2"
                                                                (lift-if
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "dl_derivable_val")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "1+j"
                                                                     "v"
                                                                     "P")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "dl_partial_val")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "1+j"
                                                                           "v"
                                                                           "P"
                                                                           "x!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "*"
                                                                               1)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "cnst"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -)
                                                                      (("2"
                                                                        (typepred
                                                                         "P")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "ddl_dom_weak")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (flatten)
                                                            (("3"
                                                              (hide -)
                                                              (("3"
                                                                (typepred
                                                                 "P")
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (lemma
                                                                     "ddl_dom_weak")
                                                                    (("3"
                                                                      (inst?)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (hide -)
                                                            (("4"
                                                              (typepred
                                                               "P")
                                                              (("4"
                                                                (assert)
                                                                (("4"
                                                                  (lemma
                                                                   "ddl_dom_weak")
                                                                  (("4"
                                                                    (inst?)
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (typepred
                                                           "P")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "ddl_dom_weak")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide 2)
                                                      (("3"
                                                        (hide -)
                                                        (("3"
                                                          (skeep)
                                                          (("3"
                                                            (typepred
                                                             "P")
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (lemma
                                                                 "ddl_dom_weak")
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (typepred "P")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "ddl_dom_weak")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide -)
                                            (("3"
                                              (hide 2)
                                              (("3"
                                                (skeep)
                                                (("3"
                                                  (typepred "P")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (lemma
                                                       "ddl_dom_weak")
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (hide -)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (typepred "P")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "ddl_dom_weak")
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide -)
                                  (("3"
                                    (skeep)
                                    (("3"
                                      (typepred "P")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (lemma "ddl_dom_weak")
                                          (("3"
                                            (inst?)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "NOT dlvar_index(v)=1+j")
              (("1" (assert) nil nil)
               ("2" (hide -3)
                (("2" (expand "eq" 2)
                  (("2" (decompose-equality 2)
                    (("2" (expand "DIFT_Re" 1)
                      (("2" (expand "sum_it")
                        (("2" (lemma "sum_it_sigma")
                          (("2"
                            (inst -1
                             " LAMBDA (i_1: nat): IF derivable?(i_1, P)(val(v)) THEN (partial_diff(i_1, P)(val(v)) * ddtn(i_1))(x!1) ELSE cnst(0)(x!1) ENDIF"
                             "j+1" "0")
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (lemma "sigma_last")
                                  (("1"
                                    (inst
                                     -1
                                     " LAMBDA (i_1: nat): IF derivable?(i_1, P)(val(v)) THEN (partial_diff(i_1, P)(val(v)) * ddtn(i_1))(x!1) ELSE cnst(0)(x!1) ENDIF"
                                     "j+1"
                                     "0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -)
                                          (("1"
                                            (lemma "dl_dift_val_zero")
                                            (("1"
                                              (inst
                                               -1
                                               "ddtn"
                                               "j"
                                               "v"
                                               "P")
                                              (("1"
                                                (decompose-equality -1)
                                                (("1"
                                                  (inst -1 "x!1")
                                                  (("1"
                                                    (expand
                                                     "DIFT_Re"
                                                     -1)
                                                    (("1"
                                                      (expand
                                                       "sum_it"
                                                       -1)
                                                      (("1"
                                                        (expand
                                                         "sum_it"
                                                         -1)
                                                        (("1"
                                                          (lemma
                                                           "sum_it_sigma")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             " LAMBDA (i_1: nat): IF derivable?(i_1, P)(val(v)) THEN (partial_diff(i_1, P)(val(v)) * ddtn(i_1))(x!1) ELSE cnst(0)(x!1) ENDIF"
                                                             "j"
                                                             "0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "sum_it"
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   -2)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "cnst"
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "cnst"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1
                                                                             lr)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "dl_derivable_val")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "1+j"
                                                                                     "v"
                                                                                     "P")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (reveal
                                                                                         -)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -10)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1
                                                                                             -2)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1
                                                                                               -2
                                                                                               -3
                                                                                               -4)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -3
                                                                                                 -4
                                                                                                 -5
                                                                                                 -6)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "dl_partial_val")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "1+j"
                                                                                                       "v"
                                                                                                       "P"
                                                                                                       "x!1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "*"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "cnst"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "P")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "ddl_dom_weak")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (hide
                                                                 -)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "P")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "ddl_dom_weak")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide 2)
                                                              (("3"
                                                                (hide
                                                                 -)
                                                                (("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (typepred
                                                                     "P")
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (lemma
                                                                         "ddl_dom_weak")
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (typepred "P")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "ddl_dom_weak")
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep)
                                      (("3"
                                        (typepred "P")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (lemma "ddl_dom_weak")
                                            (("3"
                                              (inst?)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (typepred "P")
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "ddl_dom_weak")
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (typepred "P")
                                (("3"
                                  (assert)
                                  (("3"
                                    (lemma "ddl_dom_weak")
                                    (("3"
                                      (inst?)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (dl_dift_val_zero formula-decl nil differentiation nil) nil nil
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma_last formula-decl nil sigma reals)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (partial_diff const-decl "RealExpr" differentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals) nil
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil
    (sum_it_sigma formula-decl nil sigma reals)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sum_it const-decl "real" differentiation nil)
    (sum_it_def def-decl "real" sigma reals) nil nil
    (NOT const-decl "[bool -> bool]" booleans nil) nil
    (cnst const-decl "real" hp_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dl_partial_val formula-decl nil differentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ddl_dom_weak formula-decl nil differentiation nil)
    (dl_derivable_val formula-decl nil differentiation nil)
    (sum_it const-decl "real" sigma reals)
    (nat_induction formula-decl nil naturalnumbers nil)
    (val const-decl "real" hp_def nil)
    (DIFT_Re const-decl "RealExpr" differentiation nil)
    (eq const-decl "bool" differentiation nil) nil
    (BoolExpr type-eq-decl nil hp_def nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (<= const-decl "bool" reals nil) (dLVar type-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (dl_dift_val_TCC1 0
  (dl_dift_val_TCC1-1 nil 3861286074
   ("" (skeep) (("" (lemma "dl_true_DDL") (("" (assert) nil nil)) nil))
    nil)
   ((dl_true_DDL formula-decl nil differentiation nil)) nil
   (dl_dift_val subtype "bool_expr.DLBOOL(booleans.TRUE)"
    "(differentiation.ddl_dom?)")))
 (dl_dift_val 0
  (dl_dift_val-1 nil 3792252865
   ("" (skeep)
    (("" (lemma "dl_dift_val_P")
      (("" (inst?)
        (("" (expand "eq" -1)
          (("" (assert)
            (("" (decompose-equality 1)
              (("" (decompose-equality -1)
                (("" (inst -1 "x!1")
                  (("" (expand "DLBOOL" 1) (("" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dl_dift_val_P formula-decl nil differentiation nil)
    (eq const-decl "bool" differentiation nil)
    (DIFT_Re const-decl "RealExpr" differentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (<= const-decl "bool" reals nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_dift_const 0
  (dl_dift_const-1 nil 3792322270
   ("" (induct "M")
    (("1" (skeep)
      (("1" (expand "DIFT_Re" 1)
        (("1" (expand "sum_it" 1)
          (("1" (decompose-equality 1)
            (("1" (expand "cnst" 1)
              (("1" (expand "sum_it" 1)
                (("1" (expand "sum_it_def" 1)
                  (("1" (expand "sum_it_def" 1)
                    (("1" (lemma "dl_derivable_const")
                      (("1" (inst -1 "0" "k" "P")
                        (("1" (expand "cnst" -1)
                          (("1" (assert)
                            (("1" (lemma "dl_partial_const")
                              (("1"
                                (inst -1 "0" "k" "P")
                                (("1"
                                  (decompose-equality -1)
                                  (("1"
                                    (inst -1 "x!1")
                                    (("1"
                                      (expand "cnst" -1)
                                      (("1"
                                        (expand "*" 1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (typepred "P")
                            (("2" (lemma "ddl_dom_weak")
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (typepred "P")
                (("2" (lemma "ddl_dom_weak")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("3" (skeep)
              (("3" (typepred "P")
                (("3" (lemma "ddl_dom_weak")
                  (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (inst -1 "ddtn" "k" "P")
            (("2" (expand "DIFT_Re" 1)
              (("2" (expand "DIFT_Re" -1)
                (("2" (decompose-equality 1)
                  (("1" (decompose-equality -1)
                    (("1" (inst -1 "x!1")
                      (("1" (expand "sum_it")
                        (("1" (lemma "sum_it_sigma")
                          (("1"
                            (inst -1
                             "LAMBDA (i_1: nat): IF derivable?(i_1, P)(cnst(k)) THEN (partial_diff(i_1, P)(cnst(k)) * ddtn(i_1))(x!1) ELSE cnst(0)(x!1) ENDIF"
                             "1+j" "0")
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (lemma "sum_it_sigma")
                                  (("1"
                                    (inst
                                     -1
                                     "LAMBDA (i_1: nat): IF derivable?(i_1, P)(cnst(k)) THEN (partial_diff(i_1, P)(cnst(k)) * ddtn(i_1))(x!1) ELSE cnst(0)(x!1) ENDIF"
                                     "j"
                                     "0")
                                    (("1"
                                      (replace -1 -2)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (lemma "sigma_last")
                                          (("1"
                                            (inst
                                             -1
                                             "LAMBDA (i_1: nat): IF derivable?(i_1, P)(cnst(k)) THEN (partial_diff(i_1, P)(cnst(k)) * ddtn(i_1))(x!1) ELSE cnst(0)(x!1) ENDIF"
                                             "1+j"
                                             "0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (case
                                                   " IF derivable?(1 + j, P)(cnst(k)) THEN (partial_diff(1 + j, P)(cnst(k)) * ddtn(1 + j))(x!1) ELSE cnst(0)(x!1) ENDIF=0")
                                                  (("1"
                                                    (replace -1 1 lr)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (lemma
                                                           "dl_derivable_const")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "1+j"
                                                             "k"
                                                             "P")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "dl_partial_const")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "1+j"
                                                                   "k"
                                                                   "P")
                                                                  (("1"
                                                                    (expand
                                                                     "*"
                                                                     1)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "x!1")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "cnst"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (typepred
                                                                 "P")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "ddl_dom_weak")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide -)
                                                    (("3"
                                                      (hide 2)
                                                      (("3"
                                                        (typepred "P")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (lemma
                                                             "ddl_dom_weak")
                                                            (("3"
                                                              (inst?)
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (flatten)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (typepred "P")
                                                    (("4"
                                                      (assert)
                                                      (("4"
                                                        (lemma
                                                         "ddl_dom_weak")
                                                        (("4"
                                                          (inst?)
                                                          (("4"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (typepred "P")
                                                (("2"
                                                  (lemma
                                                   "ddl_dom_weak")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep)
                                              (("3"
                                                (typepred "P")
                                                (("3"
                                                  (lemma
                                                   "ddl_dom_weak")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (typepred "P")
                                        (("2"
                                          (lemma "ddl_dom_weak")
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep)
                                      (("3"
                                        (typepred "P")
                                        (("3"
                                          (lemma "ddl_dom_weak")
                                          (("3"
                                            (inst?)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (typepred "P")
                                (("2"
                                  (lemma "ddl_dom_weak")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (typepred "P")
                                (("3"
                                  (lemma "ddl_dom_weak")
                                  (("3"
                                    (inst?)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "P")
                      (("2" (lemma "ddl_dom_weak")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (typepred "P")
                      (("3" (lemma "ddl_dom_weak")
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (typepred "P")
                      (("2" (lemma "ddl_dom_weak")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep)
                    (("3" (typepred "P")
                      (("3" (lemma "ddl_dom_weak")
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum_it_sigma formula-decl nil sigma reals)
    (sigma_last formula-decl nil sigma reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sum_it const-decl "real" differentiation nil)
    (sum_it_def def-decl "real" sigma reals)
    (dl_derivable_const formula-decl nil differentiation nil)
    (ddl_dom_weak formula-decl nil differentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dl_partial_const formula-decl nil differentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (partial_diff const-decl "RealExpr" differentiation nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sum_it const-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (cnst const-decl "real" hp_def nil)
    (DIFT_Re const-decl "RealExpr" differentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_dift_plus_TCC1 0
  (dl_dift_plus_TCC1-1 nil 3792406829
   ("" (skeep)
    (("" (lemma "ddl_dom_weak")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((ddl_dom_weak formula-decl nil differentiation nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (dl_dift_plus subtype "differentiation.P"
    "(differentiation.ddl_dom_upto?(differentiation.M))")))
 (dl_dift_plus 0
  (dl_dift_plus-1 nil 3792323751
   ("" (induct "M")
    (("1" (skeep)
      (("1" (expand "DIFT_Re" 1)
        (("1" (lemma "sum_it_sigma")
          (("1" (expand "sum_it" 1)
            (("1" (expand "sum_it")
              (("1" (expand "sum_it_def")
                (("1" (expand "sum_it_def")
                  (("1" (decompose-equality 1)
                    (("1" (expand "+" 1)
                      (("1" (hide -)
                        (("1" (lemma "dl_derivable_plus")
                          (("1" (inst -1 "0" "r1" "r2" "P")
                            (("1" (assert)
                              (("1"
                                (expand "+" -1)
                                (("1"
                                  (reveal -)
                                  (("1"
                                    (hide -5)
                                    (("1"
                                      (hide -1 -2)
                                      (("1"
                                        (expand "derivable_up?" -2)
                                        (("1"
                                          (expand "derivable_up?" -1)
                                          (("1"
                                            (inst -2 "0")
                                            (("1"
                                              (inst -1 "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "*" 1)
                                                  (("1"
                                                    (lemma
                                                     "dl_partial_plus")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "0"
                                                       "r1"
                                                       "r2"
                                                       "P")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "+"
                                                           -1
                                                           1)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "+")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (typepred "P")
                                (("2"
                                  (lemma "ddl_dom_weak")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "P")
                      (("2" (lemma "ddl_dom_weak")
                        (("2" (inst?)
                          (("2" (assert) (("2" (flatten) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (typepred "P")
                      (("3" (flatten)
                        (("3" (lemma "ddl_dom_weak")
                          (("3" (inst?) (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("4" (typepred "P")
                      (("4" (lemma "ddl_dom_weak")
                        (("4" (inst?)
                          (("4" (assert) (("4" (flatten) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (typepred "P")
                      (("5" (lemma "ddl_dom_weak")
                        (("5" (inst?) (("5" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (inst -1 "ddtn" "r1" "r2" "P")
            (("2" (assert)
              (("2" (split -1)
                (("1" (expand "DIFT_Re" 1)
                  (("1" (expand "sum_it")
                    (("1" (decompose-equality 1)
                      (("1" (expand "+")
                        (("1" (lemma "sum_it_sigma")
                          (("1"
                            (inst-cp -1
                             " LAMBDA (i_1: nat): IF derivable?(i_1, P)(r1) THEN (partial_diff(i_1, P)(r1) * ddtn(i_1))(x!1) ELSE cnst(0)(x!1) ENDIF"
                             "1+j" "0")
                            (("1"
                              (inst-cp -1
                               "LAMBDA (i_1: nat): IF derivable?(i_1, P)(r2) THEN (partial_diff(i_1, P)(r2) * ddtn(i_1))(x!1) ELSE cnst(0)(x!1) ENDIF"
                               "1+j" "0")
                              (("1"
                                (inst
                                 -1
                                 " LAMBDA (i_1: nat): IF derivable?(i_1, P) (LAMBDA (x: Environment) -> real: r1(x) + r2(x)) THEN (partial_diff(i_1, P) (LAMBDA (x: Environment) -> real: r1(x) + r2(x)) * ddtn(i_1)) (x!1) ELSE cnst(0)(x!1) ENDIF"
                                 "1+j"
                                 "0")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (hide -1 -2 -3)
                                        (("1"
                                          (decompose-equality -1)
                                          (("1"
                                            (inst -1 "x!1")
                                            (("1"
                                              (expand "DIFT_Re" -1)
                                              (("1"
                                                (expand "sum_it")
                                                (("1"
                                                  (lemma
                                                   "sum_it_sigma")
                                                  (("1"
                                                    (inst-cp
                                                     -1
                                                     "LAMBDA (i_1: nat): IF derivable?(i_1, P)(r2) THEN (partial_diff(i_1, P)(r2) * ddtn(i_1))(x!1) ELSE cnst(0)(x!1) ENDIF"
                                                     "j"
                                                     "0")
                                                    (("1"
                                                      (replace -2 -3)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "LAMBDA (i_1: nat): IF derivable?(i_1, P)(r1) THEN (partial_diff(i_1, P)(r1) * ddtn(i_1))(x!1) ELSE cnst(0)(x!1) ENDIF"
                                                           "j"
                                                           "0")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (lemma
                                                                 "sum_it_sigma")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "LAMBDA (i_1: nat): IF derivable?(i_1, P) (LAMBDA (x: Environment) -> real: r1(x) + r2(x)) THEN (partial_diff(i_1, P) (LAMBDA (x: Environment) -> real: r1(x) + r2(x)) * ddtn(i_1)) (x!1) ELSE cnst(0)(x!1) ENDIF"
                                                                   "j"
                                                                   "0")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "sigma_last")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           " LAMBDA (i_1: nat): IF derivable?(i_1, P)(r1) THEN (partial_diff(i_1, P)(r1) * ddtn(i_1))(x!1) ELSE cnst(0)(x!1) ENDIF"
                                                                           "j+1"
                                                                           "0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "sigma_last")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     " LAMBDA (i_1: nat): IF derivable?(i_1, P)(r2) THEN (partial_diff(i_1, P)(r2) * ddtn(i_1))(x!1) ELSE cnst(0)(x!1) ENDIF"
                                                                                     "1+j"
                                                                                     "0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "sigma_last")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               " LAMBDA (i_1: nat): IF derivable?(i_1, P) (LAMBDA (x: Environment) -> real: r1(x) + r2(x)) THEN (partial_diff(i_1, P) (LAMBDA (x: Environment) -> real: r1(x) + r2(x)) * ddtn(i_1)) (x!1) ELSE cnst(0)(x!1) ENDIF"
                                                                                               "1+j"
                                                                                               "0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "derivable_up?"
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "derivable_up?"
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -2
                                                                                                             "1+j")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -3
                                                                                                               "1+j")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "dl_derivable_plus")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "1+j"
                                                                                                                       "r1"
                                                                                                                       "r2"
                                                                                                                       "P")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "+"
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               " (partial_diff(1 + j, P) (LAMBDA (x: Environment) -> real: r1(x) + r2(x)) * ddtn(1 + j)) (x!1) = (partial_diff(1 + j, P)(r1) * ddtn(1 + j))(x!1) + (partial_diff(1 + j, P)(r2) * ddtn(1 + j))(x!1)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -2)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "dl_partial_plus")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "1+j"
                                                                                                                                       "r1"
                                                                                                                                       "r2"
                                                                                                                                       "P")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (decompose-equality
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "x!1")
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "*"
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "+"
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (replace
                                                                                                                                                   -1
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "P")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "P")
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "ddl_dom_weak")
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (hide
                                                                                                 -)
                                                                                                (("3"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("3"
                                                                                                    (skeep)
                                                                                                    (("3"
                                                                                                      (typepred
                                                                                                       "P")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (lemma
                                                                                                           "ddl_dom_weak")
                                                                                                          (("3"
                                                                                                            (inst?)
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "P")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "ddl_dom_weak")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (hide
                                                                                         2)
                                                                                        (("3"
                                                                                          (hide
                                                                                           -)
                                                                                          (("3"
                                                                                            (skeep)
                                                                                            (("3"
                                                                                              (typepred
                                                                                               "P")
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 "ddl_dom_weak")
                                                                                                (("3"
                                                                                                  (inst?)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (typepred
                                                                                 "P")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "ddl_dom_weak")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (typepred
                                                                                 "P")
                                                                                (("3"
                                                                                  (lemma
                                                                                   "ddl_dom_weak")
                                                                                  (("3"
                                                                                    (inst?)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (hide
                                                                         -)
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (typepred
                                                                             "P")
                                                                            (("2"
                                                                              (lemma
                                                                               "ddl_dom_weak")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (hide
                                                                       2)
                                                                      (("3"
                                                                        (hide
                                                                         -1)
                                                                        (("3"
                                                                          (skeep)
                                                                          (("3"
                                                                            (typepred
                                                                             "P")
                                                                            (("3"
                                                                              (lemma
                                                                               "ddl_dom_weak")
                                                                              (("3"
                                                                                (inst?)
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (hide
                                                                 -)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "P")
                                                                    (("2"
                                                                      (lemma
                                                                       "ddl_dom_weak")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            (("3"
                                                              (hide 2)
                                                              (("3"
                                                                (hide
                                                                 -1)
                                                                (("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (typepred
                                                                     "P")
                                                                    (("3"
                                                                      (lemma
                                                                       "ddl_dom_weak")
                                                                      (("3"
                                                                        (inst?)
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (hide -)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (typepred
                                                               "P")
                                                              (("2"
                                                                (lemma
                                                                 "ddl_dom_weak")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      (("3"
                                                        (hide 2)
                                                        (("3"
                                                          (hide -)
                                                          (("3"
                                                            (skeep)
                                                            (("3"
                                                              (typepred
                                                               "P")
                                                              (("3"
                                                                (lemma
                                                                 "ddl_dom_weak")
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (hide -)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (typepred "P")
                                          (("2"
                                            (lemma "ddl_dom_weak")
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (assert)
                                  (("3"
                                    (hide -)
                                    (("3"
                                      (hide 2)
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (typepred "P")
                                          (("3"
                                            (lemma "ddl_dom_weak")
                                            (("3"
                                              (inst?)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (hide -)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (typepred "P")
                                        (("2"
                                          (lemma "ddl_dom_weak")
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (assert)
                                (("3"
                                  (hide 2)
                                  (("3"
                                    (hide -)
                                    (("3"
                                      (skeep)
                                      (("3"
                                        (typepred "P")
                                        (("3"
                                          (lemma "ddl_dom_weak")
                                          (("3"
                                            (inst?)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (typepred "P")
                                    (("2"
                                      (lemma "ddl_dom_weak")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (assert)
                              (("3"
                                (hide 2)
                                (("3"
                                  (hide -)
                                  (("3"
                                    (skeep)
                                    (("3"
                                      (typepred "P")
                                      (("3"
                                        (lemma "ddl_dom_weak")
                                        (("3"
                                          (inst?)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (typepred "P")
                          (("2" (lemma "ddl_dom_weak")
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skeep)
                        (("3" (typepred "P")
                          (("3" (lemma "ddl_dom_weak")
                            (("3" (inst?) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (skeep)
                        (("4" (typepred "P")
                          (("4" (lemma "ddl_dom_weak")
                            (("4" (inst?) (("4" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (skeep)
                        (("5" (typepred "P")
                          (("5" (lemma "ddl_dom_weak")
                            (("5" (inst?) (("5" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (hide 2)
                    (("2" (expand "derivable_up?")
                      (("2" (skeep) (("2" (inst -1 "i") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (expand "derivable_up?")
                    (("3" (skeep) (("3" (inst -2 "i") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "ddl_dom_weak")
      (("3" (inst?)
        (("3" (assert)
          (("3" (hide -1)
            (("3" (hide 2)
              (("3" (skeep)
                (("3" (lemma "ddl_dom_weak")
                  (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (lemma "ddl_dom_weak")
        (("4" (skeep) (("4" (inst?) (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_last formula-decl nil sigma reals)
    (sum_it_sigma formula-decl nil sigma reals)
    (sum_it const-decl "real" sigma reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dl_derivable_plus formula-decl nil differentiation nil)
    (ddl_dom_weak formula-decl nil differentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (dl_partial_plus formula-decl nil differentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (partial_diff const-decl "RealExpr" differentiation nil)
    (cnst const-decl "real" hp_def nil)
    (sum_it_def def-decl "real" sigma reals)
    (sum_it const-decl "real" differentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (DIFT_Re const-decl "RealExpr" differentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (derivable_up? const-decl "bool" differentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil))
   shostak))
 (dl_dift_minus 0
  (dl_dift_minus-1 nil 3792333742
   ("" (induct "M")
    (("1" (skeep)
      (("1" (expand "DIFT_Re" 1)
        (("1" (decompose-equality 1)
          (("1" (expand "-")
            (("1" (expand "sum_it")
              (("1" (expand "sum_it")
                (("1" (expand "sum_it_def")
                  (("1" (expand "sum_it_def")
                    (("1" (expand "derivable_up?" -)
                      (("1" (inst -1 "0")
                        (("1" (inst -2 "0")
                          (("1" (assert)
                            (("1" (lemma "dl_derivable_minus")
                              (("1"
                                (inst -1 "0" "r1" "r2" "P")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "-" -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "dl_partial_minus")
                                        (("1"
                                          (inst -1 "0" "r1" "r2" "P")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "-" -1 1)
                                              (("1"
                                                (expand "*" 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (expand "-" 1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (typepred "P")
              (("2" (lemma "ddl_dom_weak")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (typepred "P")
              (("3" (lemma "ddl_dom_weak")
                (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("4" (skeep)
            (("4" (typepred "P")
              (("4" (lemma "ddl_dom_weak")
                (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("5" (skeep)
            (("5" (typepred "P")
              (("5" (lemma "ddl_dom_weak")
                (("5" (inst?) (("5" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (decompose-equality 1)
            (("2" (expand "-" 1 2)
              (("2" (inst -1 "ddtn" "r1" "r2" "P")
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (decompose-equality -1)
                      (("1" (inst -1 "x!1")
                        (("1" (lemma "DIFT_last")
                          (("1" (inst-cp -1 "ddtn" "1+j" "P" "r1-r2")
                            (("1" (replace -2 1)
                              (("1"
                                (inst-cp -1 "ddtn" "1+j" "P" "r1")
                                (("1"
                                  (inst-cp -1 "ddtn" "1+j" "P" "r2")
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "+" 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -2 -3)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (expand
                                                     "derivable_up?")
                                                    (("1"
                                                      (inst -2 "1+j")
                                                      (("1"
                                                        (inst -3 "1+j")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "dl_derivable_minus")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "1+j"
                                                               "r1"
                                                               "r2"
                                                               "P")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   " (partial_diff(1 + j, P)(r1 - r2) * ddtn(1 + j))(x!1) = (partial_diff(1 + j, P)(r1) * ddtn(1 + j))(x!1) -(partial_diff(1 + j, P)(r2) * ddtn(1 + j))(x!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "*")
                                                                      (("1"
                                                                        (expand
                                                                         "-")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "*"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "-"
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "dl_partial_minus")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "1+j"
                                                                                 "r1"
                                                                                 "r2"
                                                                                 "P")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     -1)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "-"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand "derivable_up?")
                        (("2" (skeep) (("2" (inst?) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (expand "derivable_up?")
                        (("3" (skeep)
                          (("3" (inst?)
                            (("3" (assert)
                              (("3" (inst -2 "i") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "ddl_dom_weak")
        (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
      nil)
     ("4" (skeep)
      (("4" (lemma "ddl_dom_weak")
        (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((DIFT_last formula-decl nil differentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (<= const-decl "bool" reals nil)
    (sum_it const-decl "real" differentiation nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (partial_diff const-decl "RealExpr" differentiation nil)
    (cnst const-decl "real" hp_def nil)
    (sum_it_def def-decl "real" sigma reals)
    (dl_derivable_minus formula-decl nil differentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (dl_partial_minus formula-decl nil differentiation nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (sum_it const-decl "real" sigma reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ddl_dom_weak formula-decl nil differentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (DIFT_Re const-decl "RealExpr" differentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (derivable_up? const-decl "bool" differentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil))
   shostak))
 (dl_dift_negative 0
  (dl_dift_negative-1 nil 3792334529
   ("" (induct "M")
    (("1" (skeep)
      (("1" (expand "DIFT_Re" 1)
        (("1" (expand "sum_it" 1)
          (("1" (decompose-equality 1)
            (("1" (expand "sum_it" 1)
              (("1" (expand "-")
                (("1" (expand "sum_it_def" 1)
                  (("1" (assert)
                    (("1" (expand "sum_it_def")
                      (("1"
                        (case "derivable?(0, P)(r1) IFF derivable?(0, P)(LAMBDA (x: Environment) -> real: -r1(x))")
                        (("1" (case "derivable?(0, P)(r1)")
                          (("1" (assert)
                            (("1" (lemma "dl_partial_negative")
                              (("1"
                                (inst -1 "0" "r1" "P")
                                (("1"
                                  (assert)
                                  (("1"
                                    (decompose-equality -1)
                                    (("1"
                                      (inst -1 "x!1")
                                      (("1"
                                        (expand "-" -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "*" 1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (expand "cnst" 3)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (split 1)
                            (("1" (flatten)
                              (("1"
                                (lemma "dl_derivable_negative")
                                (("1"
                                  (inst -1 "0" "r1" "P")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "-")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (lemma "dl_derivable_negative")
                                (("2"
                                  (inst -1 "0" "-r1" "P")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "-" -1 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case "--r1= r1")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (decompose-equality 1)
                                            (("2"
                                              (expand "-")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2)
                          (("3" (typepred "P")
                            (("3" (lemma "ddl_dom_weak")
                              (("3"
                                (inst?)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (typepred "P")
                (("2" (lemma "ddl_dom_weak")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("3" (skeep)
              (("3" (typepred "P")
                (("3" (lemma "ddl_dom_weak")
                  (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("4" (skeep)
              (("4" (typepred "P")
                (("4" (lemma "ddl_dom_weak")
                  (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (inst -1 "ddtn" "r1" "P")
            (("2" (lemma "DIFT_last")
              (("2" (inst-cp -1 "ddtn" "1+j" "P" "r1")
                (("2" (inst-cp -1 "ddtn" "1+j" "P" "-r1")
                  (("2" (replace -2)
                    (("2" (replace -3)
                      (("2" (hide -1)
                        (("2" (decompose-equality 1)
                          (("1" (hide -1 -2)
                            (("1" (expand "-")
                              (("1"
                                (expand "+")
                                (("1"
                                  (decompose-equality -1)
                                  (("1"
                                    (inst -1 "x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "NOT DIFT_Re(j, P, LAMBDA (x: Environment) -> real: -r1(x))(ddtn)(x!1) + DIFT_Re(j, P, r1)(ddtn)(x!1) =0")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "NOT -(DIFT_Re(j, P, r1)(ddtn)(x!1) + IF derivable?(1 + j, P)(r1) THEN (partial_diff(1 + j, P)(r1) * ddtn(1 + j))(x!1) ELSE cnst(0)(x!1) ENDIF) = -DIFT_Re(j, P, r1)(ddtn)(x!1) - IF derivable?(1 + j, P)(r1) THEN (partial_diff(1 + j, P)(r1) * ddtn(1 + j))(x!1) ELSE cnst(0)(x!1) ENDIF")
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (hide -)
                                                (("1"
                                                  (case
                                                   "FORALL(a,b:real): -(a+b) = -a - b")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "DIFT_Re(j, P, r1)(ddtn)(x!1)"
                                                     "IF derivable?(1 + j, P)(r1) THEN (partial_diff(1 + j, P)(r1) * ddtn(1 + j))(x!1) ELSE cnst(0)(x!1) ENDIF")
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (typepred "P")
                                                        (("1"
                                                          (lemma
                                                           "ddl_dom_weak")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "ddl_dom_weak")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "ddl_dom_weak")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (flatten)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "P")
                                                      (("2"
                                                        (lemma
                                                         "ddl_dom_weak")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1 1)
                                              (("2"
                                                (move-terms 1 L)
                                                (("1"
                                                  (case
                                                   "NOT DIFT_Re(j, P, LAMBDA (x: Environment) -> real: -r1(x))(ddtn)(x!1) + IF derivable?(1 + j, P)(LAMBDA (x: Environment) -> real: -r1(x)) THEN (partial_diff(1 + j, P) (LAMBDA (x: Environment) -> real: -r1(x)) * ddtn(1 + j)) (x!1) ELSE cnst(0)(x!1) ENDIF - -DIFT_Re(j, P, r1)(ddtn)(x!1) + IF derivable?(1 + j, P)(r1) THEN (partial_diff(1 + j, P)(r1) * ddtn(1 + j))(x!1) ELSE cnst(0)(x!1) ENDIF = DIFT_Re(j, P, LAMBDA (x: Environment) -> real: -r1(x))(ddtn)(x!1) + DIFT_Re(j, P, r1)(ddtn)(x!1) + IF derivable?(1 + j, P)(LAMBDA (x: Environment) -> real: -r1(x)) THEN (partial_diff(1 + j, P) (LAMBDA (x: Environment) -> real: -r1(x)) * ddtn(1 + j)) (x!1) ELSE cnst(0)(x!1) ENDIF + IF derivable?(1 + j, P)(r1) THEN (partial_diff(1 + j, P)(r1) * ddtn(1 + j))(x!1) ELSE cnst(0)(x!1) ENDIF")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (replace -1 1)
                                                    (("2"
                                                      (replace -3 1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (case
                                                           "derivable?(1+j, P)(r1) IFF derivable?(1+j, P)(LAMBDA (x: Environment) -> real: -r1(x))")
                                                          (("1"
                                                            (case
                                                             "derivable?(1+j,P)(r1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -5
                                                                   -6)
                                                                  (("1"
                                                                    (lemma
                                                                     "dl_partial_negative")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "1+j"
                                                                       "r1"
                                                                       "P")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (decompose-equality
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "x!1")
                                                                            (("1"
                                                                              (expand
                                                                               "-")
                                                                              (("1"
                                                                                (expand
                                                                                 "*")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "cnst"
                                                                 3)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (hide
                                                                 -)
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (lemma
                                                                       "dl_derivable_negative")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "1+j"
                                                                         "r1"
                                                                         "P")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "-"
                                                                             -1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (lemma
                                                                       "dl_derivable_negative")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "1+j"
                                                                         "-r1"
                                                                         "P")
                                                                        (("2"
                                                                          (case
                                                                           "--r1=r1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "-"
                                                                               1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (decompose-equality
                                                                             1)
                                                                            (("2"
                                                                              (hide
                                                                               -1
                                                                               -2)
                                                                              (("2"
                                                                                (expand
                                                                                 "-")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide 2)
                                                    (("3"
                                                      (hide -)
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (typepred
                                                           "P")
                                                          (("3"
                                                            (lemma
                                                             "ddl_dom_weak")
                                                            (("3"
                                                              (inst?)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "P")
                                                  (("2"
                                                    (lemma
                                                     "ddl_dom_weak")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "ddl_dom_weak")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "ddl_dom_weak")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "ddl_dom_weak")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "ddl_dom_weak")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (typepred "P")
                                              (("3"
                                                (lemma "ddl_dom_weak")
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (flatten)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (typepred "P")
                                              (("4"
                                                (lemma "ddl_dom_weak")
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "P")
                            (("2" (flatten)
                              (("2"
                                (lemma "ddl_dom_weak")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (typepred "P")
                            (("3" (flatten)
                              (("3"
                                (lemma "ddl_dom_weak")
                                (("3"
                                  (inst?)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (typepred "P")
                            (("4" (lemma "ddl_dom_weak")
                              (("4"
                                (inst?)
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DIFT_last formula-decl nil differentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sum_it const-decl "real" differentiation nil)
    (sum_it_def def-decl "real" sigma reals)
    (ddl_dom_weak formula-decl nil differentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dl_derivable_negative formula-decl nil differentiation nil)
    (dl_partial_negative formula-decl nil differentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cnst const-decl "real" hp_def nil)
    (partial_diff const-decl "RealExpr" differentiation nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sum_it const-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (DIFT_Re const-decl "RealExpr" differentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dl_dift_mult 0
  (dl_dift_mult-1 nil 3792337919
   ("" (induct "M")
    (("1" (skeep)
      (("1" (expand "DIFT_Re" 1)
        (("1" (expand "sum_it" 1)
          (("1" (decompose-equality 1)
            (("1" (expand "+")
              (("1" (expand "sum_it")
                (("1" (expand "sum_it_def")
                  (("1" (expand "*")
                    (("1" (expand "sum_it_def")
                      (("1" (lemma "dl_derivable_mult")
                        (("1" (assert)
                          (("1" (expand "derivable_up?" -)
                            (("1" (inst -2 "0")
                              (("1"
                                (inst -3 "0")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "dl_derivable_mult")
                                    (("1"
                                      (inst -1 "0" "r1" "r2" "P")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "*" -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "dl_partial_mult")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "0"
                                                   "r1"
                                                   "r2"
                                                   "P")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (decompose-equality
                                                       -1)
                                                      (("1"
                                                        (inst -1 "x!1")
                                                        (("1"
                                                          (expand "*")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "+")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (typepred "P")
                (("2" (lemma "ddl_dom_weak")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("3" (skeep)
              (("3" (typepred "P")
                (("3" (lemma "ddl_dom_weak")
                  (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("4" (skeep)
              (("4" (typepred "P")
                (("4" (lemma "ddl_dom_weak")
                  (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("5" (skeep)
              (("5" (typepred "P")
                (("5" (lemma "ddl_dom_weak")
                  (("5" (inst?) (("5" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (inst -1 "ddtn" "r1" "r2" "P")
            (("2" (assert)
              (("2" (split -1)
                (("1" (lemma "DIFT_last")
                  (("1" (inst -1 "ddtn" "1+j" "P" "r1*r2")
                    (("1" (assert)
                      (("1" (replace -1 1)
                        (("1" (hide -1)
                          (("1" (lemma "DIFT_last")
                            (("1" (inst -1 "ddtn" "1+j" "P" "r1")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "DIFT_last")
                                      (("1"
                                        (inst -1 "ddtn" "1+j" "P" "r2")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (decompose-equality 1)
                                            (("1"
                                              (expand "+" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "*")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -2 1)
                                                      (("1"
                                                        (expand
                                                         "derivable_up?"
                                                         -)
                                                        (("1"
                                                          (inst
                                                           -3
                                                           "1+j")
                                                          (("1"
                                                            (inst
                                                             -4
                                                             "1+j")
                                                            (("1"
                                                              (lemma
                                                               "dl_derivable_mult")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "1+j"
                                                                 "r1"
                                                                 "r2"
                                                                 "P")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "*"
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "+"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 " partial_diff(1 + j, P)(LAMBDA (x: Environment) -> real: r1(x) * r2(x)) (x!1) * ddtn(1 + j)(x!1) = r1(x!1) * (partial_diff(1 + j, P)(r2)(x!1) * ddtn(1 + j)(x!1)) + r2(x!1) * (partial_diff(1 + j, P)(r1)(x!1) * ddtn(1 + j)(x!1))")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -2
                                                                                     -3)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "dl_partial_mult")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "1+j"
                                                                                         "r1"
                                                                                         "r2"
                                                                                         "P")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "*"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (decompose-equality
                                                                                               -1)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "+")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (hide -)
                                                (("2"
                                                  (typepred "P")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (lemma
                                                       "ddl_dom_weak")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (typepred "P")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (lemma
                                                   "ddl_dom_weak")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (typepred "P")
                                              (("4"
                                                (flatten)
                                                (("4"
                                                  (lemma
                                                   "ddl_dom_weak")
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("5"
                                              (typepred "P")
                                              (("5"
                                                (lemma "ddl_dom_weak")
                                                (("5"
                                                  (inst?)
                                                  (("5"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (hide 2)
                    (("2" (expand "derivable_up?" -)
                      (("2" (expand "derivable_up?" 1)
                        (("2" (skeep) (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "derivable_up?")
                  (("3" (skeep)
                    (("3" (inst?) (("3" (inst?) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "ddl_dom_weak")
      (("3" (inst?)
        (("3" (assert)
          (("3" (skeep)
            (("3" (lemma "ddl_dom_weak")
              (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (lemma "ddl_dom_weak")
        (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (DIFT_last formula-decl nil differentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum_it const-decl "real" differentiation nil)
    (ddl_dom_weak formula-decl nil differentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sum_it_def def-decl "real" sigma reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (dl_partial_mult formula-decl nil differentiation nil)
    (dl_derivable_mult formula-decl nil differentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cnst const-decl "real" hp_def nil)
    (partial_diff const-decl "RealExpr" differentiation nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sum_it const-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (DIFT_Re const-decl "RealExpr" differentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (derivable_up? const-decl "bool" differentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil))
   shostak))
 (dl_dift_divsafe 0
  (dl_dift_divsafe-1 nil 3792418813
   ("" (induct "M")
    (("1" (skeep)
      (("1" (expand "DIFT_Re" 1)
        (("1" (decompose-equality 1)
          (("1" (expand "div_safe_re" 1)
            (("1" (expand "sum_it" 1)
              (("1" (expand "sum_it" 1)
                (("1" (expand "sum_it_def" 1)
                  (("1" (expand "sum_it_def" 1)
                    (("1" (assert)
                      (("1" (lemma "dl_derivable_div")
                        (("1" (inst -1 "0" "r1" "r2" "P")
                          (("1" (split -1)
                            (("1" (assert)
                              (("1"
                                (expand "*" 1)
                                (("1"
                                  (expand "-" 1)
                                  (("1"
                                    (case "NOT P(x!1)")
                                    (("1"
                                      (expand "partial_diff" 2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "div_safe" 2)
                                          (("1"
                                            (lift-if 2)
                                            (("1"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "derivable_up?"
                                                     -2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst -2 "0")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lift-if 2)
                                                            (("2"
                                                              (expand
                                                               "derivable_up?"
                                                               -3)
                                                              (("2"
                                                                (inst
                                                                 -3
                                                                 "0")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "partial_diff" 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "div_safe" 1 1)
                                          (("2"
                                            (expand "div_safe" 1)
                                            (("2"
                                              (inst -5 "x!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lift-if 1)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "r2(x!1)=0")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (div-by
                                                             -1
                                                             "r2(x!1)")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "derivable_up?"
                                                         -)
                                                        (("2"
                                                          (inst -3 "0")
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "0")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "dl_partial_div")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "0"
                                                                   "r1"
                                                                   "r2"
                                                                   "P")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "partial_diff"
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (decompose-equality
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "x!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "div_safe"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "*"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "-"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -1)
                                                                              (("2"
                                                                                (expand
                                                                                 "derivable?"
                                                                                 -)
                                                                                (("2"
                                                                                  (inst
                                                                                   -6
                                                                                   "env!1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "derivable?"
                                                                                     -)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide
                                                                               -)
                                                                              (("3"
                                                                                (expand
                                                                                 "proj"
                                                                                 1)
                                                                                (("3"
                                                                                  (inst
                                                                                   1
                                                                                   "env!1")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (hide
                                                                               -)
                                                                              (("4"
                                                                                (typepred
                                                                                 "P")
                                                                                (("4"
                                                                                  (lemma
                                                                                   "ddl_dom_noe")
                                                                                  (("4"
                                                                                    (inst
                                                                                     -1
                                                                                     "0"
                                                                                     "P")
                                                                                    (("4"
                                                                                      (assert)
                                                                                      (("4"
                                                                                        (expand
                                                                                         "ddl_dom?"
                                                                                         -1)
                                                                                        (("4"
                                                                                          (flatten)
                                                                                          (("4"
                                                                                            (inst
                                                                                             -2
                                                                                             "0")
                                                                                            (("4"
                                                                                              (expand
                                                                                               "ddl_dom?"
                                                                                               1)
                                                                                              (("4"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (hide
                                                                               -)
                                                                              (("5"
                                                                                (lemma
                                                                                 "ddl_dom_dd")
                                                                                (("5"
                                                                                  (inst
                                                                                   -1
                                                                                   "0"
                                                                                   "P")
                                                                                  (("5"
                                                                                    (assert)
                                                                                    (("5"
                                                                                      (lemma
                                                                                       "ddl_dom_weak")
                                                                                      (("5"
                                                                                        (assert)
                                                                                        (("5"
                                                                                          (inst
                                                                                           -1
                                                                                           "P"
                                                                                           "0")
                                                                                          (("5"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("6"
                                                                              (hide
                                                                               -3)
                                                                              (("6"
                                                                                (expand
                                                                                 "derivable?"
                                                                                 -5)
                                                                                (("6"
                                                                                  (inst
                                                                                   -5
                                                                                   "env!1")
                                                                                  (("6"
                                                                                    (expand
                                                                                     "derivable?"
                                                                                     -5)
                                                                                    (("6"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("7"
                                                                              (expand
                                                                               "proj"
                                                                               1)
                                                                              (("7"
                                                                                (inst
                                                                                 1
                                                                                 "env!1")
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("8"
                                                                              (hide
                                                                               -)
                                                                              (("8"
                                                                                (lemma
                                                                                 "ddl_dom_weak")
                                                                                (("8"
                                                                                  (lemma
                                                                                   "ddl_dom_noe")
                                                                                  (("8"
                                                                                    (inst
                                                                                     -2
                                                                                     "P"
                                                                                     "0")
                                                                                    (("8"
                                                                                      (inst
                                                                                       -1
                                                                                       "0"
                                                                                       "P")
                                                                                      (("8"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("9"
                                                                              (lemma
                                                                               "ddl_dom_dd")
                                                                              (("9"
                                                                                (lemma
                                                                                 "ddl_dom_weak")
                                                                                (("9"
                                                                                  (hide
                                                                                   -5)
                                                                                  (("9"
                                                                                    (inst
                                                                                     -2
                                                                                     "0"
                                                                                     "P")
                                                                                    (("9"
                                                                                      (inst
                                                                                       -1
                                                                                       "P"
                                                                                       "0")
                                                                                      (("9"
                                                                                        (assert)
                                                                                        (("9"
                                                                                          (flatten)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("10"
                                                                              (hide
                                                                               -3)
                                                                              (("10"
                                                                                (expand
                                                                                 "derivable?"
                                                                                 -4)
                                                                                (("10"
                                                                                  (inst
                                                                                   -4
                                                                                   "x1!1")
                                                                                  (("10"
                                                                                    (assert)
                                                                                    (("10"
                                                                                      (expand
                                                                                       "derivable?"
                                                                                       -4)
                                                                                      (("10"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("11"
                                                                              (hide
                                                                               -)
                                                                              (("11"
                                                                                (expand
                                                                                 "proj"
                                                                                 1)
                                                                                (("11"
                                                                                  (inst
                                                                                   1
                                                                                   "x1!1")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (reveal
                                                                         -)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (expand "derivable_up?" -1)
                                (("2" (inst -1 "0") nil nil))
                                nil))
                              nil)
                             ("3" (hide 2)
                              (("3"
                                (expand "derivable_up?" -2)
                                (("3" (inst -2 "0") nil nil))
                                nil))
                              nil)
                             ("4" (propax) nil nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (lemma "ddl_dom_weak")
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep 1)
            (("2" (lemma "ddl_dom_weak")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil)
           ("3" (skeep)
            (("3" (lemma "ddl_dom_weak")
              (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
            nil)
           ("4" (skeep)
            (("4" (lemma "ddl_dom_weak")
              (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
            nil)
           ("5" (skeep)
            (("5" (lemma "ddl_dom_weak")
              (("5" (inst?) (("5" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "ddtn" "r1" "r2" "P")
          (("2" (assert)
            (("2" (split -1)
              (("1" (decompose-equality 1)
                (("1" (decompose-equality -1)
                  (("1" (inst -1 "x!1")
                    (("1" (lemma "DIFT_last")
                      (("1"
                        (inst -1 "ddtn" "1+j" "P" "div_safe_re(r1,r2)")
                        (("1" (decompose-equality -1)
                          (("1" (inst -1 "x!1")
                            (("1" (replace -1)
                              (("1"
                                (lemma "DIFT_last")
                                (("1"
                                  (inst-cp -1 "ddtn" "1+j" "P" "r1")
                                  (("1"
                                    (inst -1 "ddtn" "1+j" "P" "r2")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (expand "+" 1)
                                          (("1"
                                            (expand "*" 1)
                                            (("1"
                                              (expand "-" 1)
                                              (("1"
                                                (expand "+")
                                                (("1"
                                                  (case "NOT P(x!1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "div_safe_re"
                                                       2)
                                                      (("1"
                                                        (expand
                                                         "div_safe"
                                                         2)
                                                        (("1"
                                                          (lift-if 2 2)
                                                          (("1"
                                                            (case
                                                             "r2(x!1)*r2(x!1)=0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "div_safe_re"
                                                                 -5
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "div_safe_re"
                                                                   -5)
                                                                  (("1"
                                                                    (expand
                                                                     "div_safe"
                                                                     -5)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "*"
                                                                         -5)
                                                                        (("1"
                                                                          (replace
                                                                           -5
                                                                           2)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "cnst"
                                                                               2)
                                                                              (("1"
                                                                                (split
                                                                                 2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "partial_diff"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lift-if)
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "partial_diff"
                                                                                           1
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "div_safe_re"
                                                                                               -8)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "div_safe"
                                                                                                 -8)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "*"
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "-")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "*")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -8
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "partial_diff"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "derivable_up?"
                                                                                         -9)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -9
                                                                                           "1+j")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "derivable_up?"
                                                                                   -7)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -7
                                                                                     "1+j")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (hide
                                                                               -2
                                                                               -3
                                                                               -4)
                                                                              (("2"
                                                                                (lemma
                                                                                 "dl_partial_div")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "1+j"
                                                                                   "r1"
                                                                                   "r2"
                                                                                   "P")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "x!1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "partial_diff"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "div_safe"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "*"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "-")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "div_safe_re"
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "div_safe"
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "derivable_up?"
                                                                                             -6)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -6
                                                                                               "1+j")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (expand
                                                                                           "derivable_up?"
                                                                                           -5)
                                                                                          (("3"
                                                                                            (inst
                                                                                             -5
                                                                                             "1+j")
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (hide
                                                                                           -3
                                                                                           -4
                                                                                           -5
                                                                                           -6)
                                                                                          (("4"
                                                                                            (hide
                                                                                             2)
                                                                                            (("4"
                                                                                              (expand
                                                                                               "div_safe_re"
                                                                                               -2)
                                                                                              (("4"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "derivable_up?"
                                                                                           -3)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -3
                                                                                             "1+j")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (expand
                                                                                         "derivable_up?"
                                                                                         -4)
                                                                                        (("3"
                                                                                          (inst
                                                                                           -4
                                                                                           "1+j")
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         4)
                                                                        (("2"
                                                                          (hide
                                                                           -2
                                                                           -3
                                                                           -4)
                                                                          (("2"
                                                                            (lemma
                                                                             "dl_derivable_div")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "1+j"
                                                                               "r1"
                                                                               "r2"
                                                                               "P")
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "div_safe_re"
                                                                                     1)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "derivable_up?"
                                                                                     -2)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -2
                                                                                       "1+j")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "derivable_up?"
                                                                                     -3)
                                                                                    (("3"
                                                                                      (inst
                                                                                       -3
                                                                                       "1+j")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (inst -8 "x!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "div_safe_re"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "div_safe"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "r2(x!1)*r2(x!1)=0")
                                                                (("1"
                                                                  (hide
                                                                   1)
                                                                  (("1"
                                                                    (div-by
                                                                     -1
                                                                     "r2(x!1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lift-if
                                                                     2)
                                                                    (("2"
                                                                      (split
                                                                       2)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (lift-if
                                                                           1)
                                                                          (("1"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (lift-if
                                                                                 1)
                                                                                (("1"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "div_safe_re"
                                                                                       -8)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "div_safe"
                                                                                         -8)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "*"
                                                                                             -8)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -8
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "-"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "dl_partial_div")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -7)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -7)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "1+j"
                                                                                                                 "r1"
                                                                                                                 "r2"
                                                                                                                 "P")
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (decompose-equality
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "x!1")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "div_safe"
                                                                                                                         -1
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "div_safe"
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "*"
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "-"
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "div_safe"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("4"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("4"
                                                                                                                      (reveal
                                                                                                                       -)
                                                                                                                      (("4"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "derivable_up?"
                                                                                           -9)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -9
                                                                                             "1+j")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "derivable_up?"
                                                                                   -7)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -7
                                                                                     "1+j")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (lemma
                                                                             "dl_derivable_div")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "1+j"
                                                                               "r1"
                                                                               "r2"
                                                                               "P")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "div_safe"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "derivable_up?"
                                                                                       -6)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -6
                                                                                         "1+j")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (expand
                                                                                     "derivable_up?"
                                                                                     -7)
                                                                                    (("3"
                                                                                      (inst
                                                                                       -7
                                                                                       "1+j")
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -)
                            (("2" (typepred "P")
                              (("2"
                                (lemma "ddl_dom_weak")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (lemma "ddl_dom_weak")
                            (("3" (inst?) (("3" (assert) nil nil))
                              nil))
                            nil)
                           ("4" (lemma "ddl_dom_weak")
                            (("4" (inst?) (("4" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "ddl_dom_weak")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (expand "derivable_up?")
                      (("2" (skeep)
                        (("2" (inst?) (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert)
                (("3" (expand "derivable_up?")
                  (("3" (skeep)
                    (("3" (inst?) (("3" (inst?) nil nil)) nil)) nil))
                  nil))
                nil)
               ("4" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (assert)
      (("3" (hide 2)
        (("3" (skeep)
          (("3" (lemma "ddl_dom_weak")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (lemma "ddl_dom_weak")
        (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (DIFT_last formula-decl nil differentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cnst const-decl "real" hp_def nil)
    (partial_diff const-decl "RealExpr" differentiation nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sum_it const-decl "real" differentiation nil)
    (<= const-decl "bool" reals nil)
    (sum_it_def def-decl "real" sigma reals)
    (ddl_dom_weak formula-decl nil differentiation nil)
    (ddl_dom_dd formula-decl nil differentiation nil)
    (ddl_dom_noe formula-decl nil differentiation nil)
    (proj const-decl "bool" differentiation nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (dl_partial_div formula-decl nil differentiation nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (div_safe const-decl "real" reals_safe_ops reals)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dl_derivable_div formula-decl nil differentiation nil)
    (sum_it const-decl "real" sigma reals)
    (nat_induction formula-decl nil naturalnumbers nil)
    (div_safe_re const-decl "real" hp_def nil)
    (DIFT_Re const-decl "RealExpr" differentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (derivable_up? const-decl "bool" differentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil))
   shostak))
 (dl_dift_exp 0
  (dl_dift_exp-1 nil 3792422435
   ("" (induct "M")
    (("1" (skeep)
      (("1" (expand "DIFT_Re" 1)
        (("1" (expand "sum_it" 1)
          (("1" (expand "sum_it" 1)
            (("1" (expand "sum_it_def" 1)
              (("1" (expand "sum_it_def" 1)
                (("1" (decompose-equality 1)
                  (("1" (expand "*")
                    (("1" (lemma "dl_derivable_exp")
                      (("1" (inst -1 "0" "n" "r1" "P")
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (assert)
                              (("1"
                                (lift-if 1)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "dl_partial_exp")
                                        (("1"
                                          (inst -1 "0" "n" "r1" "P")
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (expand "*" 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "derivable_up?" -2)
                                      (("2" (inst -2 "0") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil)
                             ("3" (expand "derivable_up?" -1)
                              (("3" (inst -1 "0") nil nil)) nil))
                            nil))
                          nil)
                         ("2" (lemma "ddl_dom_weak")
                          (("2" (inst -1 "P" "0")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (lemma "ddl_dom_weak")
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (flatten)
                    (("3" (lemma "ddl_dom_weak")
                      (("3" (inst?) (("3" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (lemma "ddl_dom_weak")
                    (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "ddtn" "n" "r1" "P")
          (("2" (assert)
            (("2" (split -1)
              (("1" (lemma "DIFT_last")
                (("1" (inst -1 "ddtn" "1+j" "P" "r1")
                  (("1" (replace -1 1)
                    (("1" (lemma "DIFT_last")
                      (("1" (inst -1 "ddtn" "1+j" "P" "r1^^n")
                        (("1" (assert)
                          (("1" (replace -1)
                            (("1" (lift-if 1)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lift-if 1)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lemma "dl_partial_exp")
                                          (("1"
                                            (inst
                                             -1
                                             "1+j"
                                             "n"
                                             "r1"
                                             "P")
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (decompose-equality
                                                     1)
                                                    (("1"
                                                      (expand "*" 1)
                                                      (("1"
                                                        (expand "+" 1)
                                                        (("1"
                                                          (decompose-equality
                                                           -6)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "x!1")
                                                            (("1"
                                                              (expand
                                                               "*"
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil)
                                               ("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "derivable_up?" -5)
                                          (("2"
                                            (inst -5 "1+j")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (hide -1 -2)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (lemma "dl_derivable_exp")
                                        (("2"
                                          (inst -1 "1+j" "n" "r1" "P")
                                          (("2"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2" (propax) nil nil)
                                             ("3"
                                              (assert)
                                              (("3"
                                                (expand
                                                 "derivable_up?"
                                                 -1)
                                                (("3"
                                                  (inst -1 "1+j")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "derivable_up?")
                  (("2" (assert)
                    (("2" (skeep) (("2" (inst?) nil nil)) nil)) nil))
                  nil))
                nil)
               ("3" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (assert)
      (("3" (hide 2)
        (("3" (skeep)
          (("3" (lemma "ddl_dom_weak")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DIFT_last formula-decl nil differentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sum_it const-decl "real" differentiation nil)
    (sum_it_def def-decl "real" sigma reals)
    (cnst const-decl "real" hp_def nil)
    (partial_diff const-decl "RealExpr" differentiation nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (dl_derivable_exp formula-decl nil differentiation nil)
    (ddl_dom_weak formula-decl nil differentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (dl_partial_exp formula-decl nil differentiation nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (sum_it const-decl "real" sigma reals)
    (nat_induction formula-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^^ const-decl "RealExpr" differentiation nil)
    (DIFT_Re const-decl "RealExpr" differentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (derivable_up? const-decl "bool" differentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (dl_dift_pow 0
  (dl_dift_pow-1 nil 3872006694
   ("" (induct "jj")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (case "j=0")
        (("1" (replace -1)
          (("1" (assert)
            (("1" (skeep)
              (("1" (expand "^" 1)
                (("1" (expand "^" 1)
                  (("1" (expand "expt")
                    (("1" (expand "expt")
                      (("1" (decompose-equality)
                        (("1" (expand "*")
                          (("1" (assert) (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (assert)
            (("2" (expand "^")
              (("2" (expand "^")
                (("2" (expand "expt" 2)
                  (("2" (lemma "dl_dift_mult")
                    (("2" (inst -1 "ddtn" "r1" "r1^j" "M" "P")
                      (("2" (assert)
                        (("2" (split)
                          (("1" (expand "^" -1)
                            (("1" (expand "^" -1)
                              (("1"
                                (expand "*" -1)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (inst -1 "ddtn" "r1" "M" "P")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (decompose-equality 2)
                                            (("1"
                                              (expand "*")
                                              (("1"
                                                (expand "+")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "expt" 1 1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "dl_derivable_pow")
                            (("2" (expand "derivable_up?" 1)
                              (("2"
                                (skeep)
                                (("2"
                                  (inst? -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "derivable_up?" -3)
                                      (("2" (inst -3 "i") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep*) (("4" (assert) nil nil)) nil)
     ("5" (skeep*)
      (("5" (typepred "M")
        (("5" (typepred "P")
          (("5" (expand "ddl_dom_upto?")
            (("5" (expand "ddl_dom?")
              (("5" (flatten)
                (("5" (assert)
                  (("5" (skeep) (("5" (inst -2 "i") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dl_derivable_pow formula-decl nil differentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (dl_dift_mult formula-decl nil differentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "real" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sum_it const-decl "real" differentiation nil)
    (sum_it const-decl "real" sigma reals)
    (sum_it_def def-decl "real" sigma reals)
    (cnst const-decl "real" hp_def nil)
    (partial_diff const-decl "RealExpr" differentiation nil)
    (deriv const-decl "real" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (DIFT_Re const-decl "RealExpr" differentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (derivable_up? const-decl "bool" differentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (dl_dift_sqrt 0
  (dl_dift_sqrt-1 nil 3792427502
   ("" (induct "M")
    (("1" (skeep)
      (("1" (assert)
        (("1" (expand "DIFT_Re" 1)
          (("1" (expand "sum_it" 1)
            (("1" (decompose-equality 1)
              (("1" (expand "sum_it" 1)
                (("1" (expand "sum_it_def" 1)
                  (("1" (assert)
                    (("1" (expand "*")
                      (("1" (expand "sum_it_def" 1)
                        (("1" (lemma "dl_derivable_sqrt")
                          (("1" (inst -1 "0" "r1" "P")
                            (("1" (assert)
                              (("1"
                                (split -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lift-if 1)
                                    (("1"
                                      (expand "derivable_up?" -2)
                                      (("1"
                                        (inst -2 "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "dl_partial_sqrt")
                                            (("1"
                                              (inst -1 "0" "r1" "P")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (expand "*" 1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil)
                                 ("3"
                                  (hide 2)
                                  (("3"
                                    (expand "derivable_up?" -1)
                                    (("3" (inst -1 "0") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (typepred "P")
                                  (("2"
                                    (lemma "ddl_dom_weak")
                                    (("2"
                                      (inst -1 "P" "0")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (typepred "P")
                  (("2" (lemma "ddl_dom_weak")
                    (("2" (inst -1 "P" "i_1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep)
                (("3" (lemma "ddl_dom_weak")
                  (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                nil)
               ("4" (skeep)
                (("4" (lemma "ddl_dom_weak")
                  (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (decompose-equality 1)
          (("2" (expand "*" 1)
            (("2" (inst -1 "ddtn" "r1" "P")
              (("2" (assert)
                (("2" (split -1)
                  (("1" (lemma "DIFT_last")
                    (("1" (inst -1 "ddtn" "1+j" "P" "r1")
                      (("1" (replace -1 1)
                        (("1" (lemma "DIFT_last")
                          (("1"
                            (inst -1 "ddtn" "1+j" "P"
                             "sqrt_safe_re(r1)")
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (lift-if 1)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (lift-if 1)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -5 1)
                                                (("1"
                                                  (decompose-equality
                                                   -5)
                                                  (("1"
                                                    (inst -1 "x!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "+" 1)
                                                        (("1"
                                                          (expand
                                                           "*"
                                                           1)
                                                          (("1"
                                                            (case
                                                             "ddtn(1 + j)(x!1)=0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (div-by
                                                               2
                                                               "ddtn(1 + j)(x!1)")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "NOT partial_diff(1 + j, P)(r1)(x!1) * cnst(1/2)(x!1) * ddtn(1 + j)(x!1) * div_safe_re(cnst(1), sqrt_safe_re(r1))(x!1) / ddtn(1 + j)(x!1) = partial_diff(1 + j, P)(r1)(x!1) * cnst(1/2)(x!1) * div_safe_re(cnst(1), sqrt_safe_re(r1))(x!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -1
                                                                     2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (lemma
                                                                             "dl_partial_sqrt")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "1+j"
                                                                               "r1"
                                                                               "P")
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (decompose-equality
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x!1")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "*"
                                                                                           2)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (expand
                                                 "derivable_up?"
                                                 -5)
                                                (("2"
                                                  (inst -5 "1+j")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (hide -1 -2)
                                          (("2"
                                            (lemma "dl_derivable_sqrt")
                                            (("2"
                                              (inst -1 "1+j" "r1" "P")
                                              (("2"
                                                (split -1)
                                                (("1" (propax) nil nil)
                                                 ("2" (propax) nil nil)
                                                 ("3"
                                                  (expand
                                                   "derivable_up?"
                                                   -2)
                                                  (("3"
                                                    (inst -2 "1+j")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (hide 2)
                      (("2" (expand "derivable_up?")
                        (("2" (skeep) (("2" (inst -1 "i") nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (assert)
        (("3" (skeep)
          (("3" (lemma "ddl_dom_weak")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DIFT_last formula-decl nil differentiation nil)
    (partial_diff const-decl "RealExpr" differentiation nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sum_it const-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sum_it_def def-decl "real" sigma reals)
    (dl_derivable_sqrt formula-decl nil differentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ddl_dom_weak formula-decl nil differentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (dl_partial_sqrt formula-decl nil differentiation nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (sum_it const-decl "real" differentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (div_safe_re const-decl "real" hp_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cnst const-decl "real" hp_def nil)
    (sqrt_safe_re const-decl "real" hp_def nil)
    (DIFT_Re const-decl "RealExpr" differentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (derivable_up? const-decl "bool" differentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   shostak))
 (ddt_TCC1 0
  (ddt_TCC1-1 nil 3792428068 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (ddt subtype "differentiation.ode" "(list_adt[MapExpr].cons?)")))
 (ddt_TCC2 0
  (ddt_TCC2-1 nil 3792428068
   ("" (skeep)
    (("" (assert)
      (("" (lemma " cdr_is_MapExprInj") (("" (inst?) nil nil)) nil))
      nil))
    nil)
   ((ODEs type-eq-decl nil hp_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dLVar type-decl nil hp_def nil)
    (cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (ddt subtype "list_adt[MapExpr].cdr(differentiation.ode)" "ODEs")))
 (ddt_TCC3 0
  (ddt_TCC3-1 nil 3792428068 ("" (termination-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (ddt termination
    "differentiation.ddt(list_adt[MapExpr].cdr(differentiation.ode))"
    "nil")))
 (ddt_not_in_map 0
  (ddt_not_in_map-1 nil 3853943778
   ("" (induct "ode")
    (("1" (assert) nil nil)
     ("2" (flatten) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (lemma "cdr_is_MapExprInj")
          (("3" (inst -1 "cons(cons1_var,cons2_var)")
            (("3" (assert)
              (("3" (expand "ddt" 1 1)
                (("3" (assert)
                  (("3" (lift-if 1)
                    (("3" (split 1)
                      (("1" (flatten)
                        (("1" (typepred "x")
                          (("1" (expand "not_in_map")
                            (("1" (inst -1 "0")
                              (("1"
                                (expand "nth" -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "same_var" -1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "length" 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (inst -2 "x")
                          (("2" (assert)
                            (("2" (typepred "x")
                              (("2"
                                (expand "not_in_map" -1)
                                (("2"
                                  (expand "not_in_map" 1)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst -1 "i+1")
                                      (("1"
                                        (expand "nth" -1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (expand "length" 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (list_induction formula-decl nil list_adt nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (ddt def-decl "RealExpr" differentiation nil)
    (ODEs type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (ddt_in_map_TCC1 0
  (ddt_in_map_TCC1-1 nil 3853943656 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (in_map const-decl "bool" hp_def nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (index_of const-decl "bool" hp_def nil)
    (ode!1 skolem-const-decl "ODEs" differentiation nil)
    (x!1 skolem-const-decl "(in_map(ode!1))" differentiation nil)
    (/= const-decl "boolean" notequal nil)
    (singleton_extend application-judgement "(singleton?[T])"
     extend_set_props nil)
    (index_of_j application-judgement
     "(singleton?[below(length[MapExpr](me))])" hp_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ddt_in_map subtype "differentiation.k"
    "below[length[MapExpr](ode)]")))
 (ddt_in_map 0
  (ddt_in_map-1 nil 3853949198
   ("" (induct "ode")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert)
      (("3" (skeep)
        (("3" (typepred "x")
          (("3" (expand "in_map" -1)
            (("3" (skeep)
              (("3" (typepred "i")
                (("3" (expand "length" -) (("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (lemma "cdr_is_MapExprInj")
        (("4" (inst -1 "cons(cons1_var,cons2_var)")
          (("4" (assert)
            (("4" (skeep)
              (("4" (lemma "in_map_cons")
                (("4" (inst -1 "cons1_var" "cons2_var" "x")
                  (("1" (assert)
                    (("1" (expand "ddt" 1 1)
                      (("1" (inst -3 "x")
                        (("1" (replace -3 1)
                          (("1"
                            (name "th1"
                                  " the(extend [nat, below(length[MapExpr](cons(cons1_var, cons2_var))), bool, FALSE] (index_of(cons(cons1_var, cons2_var), x)))")
                            (("1"
                              (name "th2"
                                    " the(extend[nat, below(length[MapExpr](cons2_var)), bool, FALSE] (index_of(cons2_var, x)))")
                              (("1"
                                (replace -1)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (typepred "th1")
                                    (("1"
                                      (expand "extend" -1)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "index_of" -2)
                                            (("1"
                                              (expand "nth" 2 2)
                                              (("1"
                                                (lift-if 2)
                                                (("1"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -3
                                                         1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "mapexpr_inj_eq")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "cons2_var")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "th2"
                                                               "th1-1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     -3
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -7
                                                                         2
                                                                         rl)
                                                                        (("2"
                                                                          (typepred
                                                                           "th1")
                                                                          (("2"
                                                                            (expand
                                                                             "extend"
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "index_of"
                                                                               -1)
                                                                              (("2"
                                                                                (typepred
                                                                                 "th2")
                                                                                (("2"
                                                                                  (expand
                                                                                   "extend"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "index_of"
                                                                                           -2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nth"
                                                                                             -3
                                                                                             1)
                                                                                            (("1"
                                                                                              (decompose-equality
                                                                                               1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (expand "in_map" 1)
                            (("2" (typepred "x")
                              (("2"
                                (expand "in_map" -1)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (case "i=0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nth" -2)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst 2 "i-1")
                                      (("1"
                                        (expand "nth" -1)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (typepred "i")
                                          (("2"
                                            (expand "length" -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "in_map_cons")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (hide -1)
                          (("2" (typepred "x")
                            (("2" (expand "in_map" -1)
                              (("2"
                                (skeep)
                                (("2"
                                  (case " NOT i=0")
                                  (("1"
                                    (expand "nth" -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "in_map" 2)
                                        (("1" (inst 2 "i-1") nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (expand "nth" -2 1)
                                      (("2"
                                        (expand "ddt" 2 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case
                                             " the(extend [nat, below(length[MapExpr](cons(cons1_var, cons2_var))), bool, FALSE] (index_of(cons(cons1_var, cons2_var), x))) = 0")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (expand "nth" 2)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (name
                                                 "th1"
                                                 " the(extend [nat, below(length[MapExpr](cons(cons1_var, cons2_var))), bool, FALSE] (index_of(cons(cons1_var, cons2_var), x)))")
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (typepred "th1")
                                                    (("2"
                                                      (expand
                                                       "extend"
                                                       -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "index_of"
                                                               -2)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   "in_map"
                                                                   2)
                                                                  (("1"
                                                                    (inst
                                                                     2
                                                                     "th1-1")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (skeep)
          (("5" (assert)
            (("5" (typepred "k")
              (("5" (expand "extend" -1) (("5" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (dLVar_dlvar_extensionality formula-decl nil hp_def nil)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def nil)
    (mapexpr_inj_eq formula-decl nil hp_def nil)
    (index_of_j application-judgement
     "(singleton?[below(length[MapExpr](me))])" hp_def nil)
    (in_map_cons formula-decl nil hp_def nil)
    (cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (list_induction formula-decl nil list_adt nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (ddt def-decl "RealExpr" differentiation nil)
    (ODEs type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (in_map const-decl "bool" hp_def nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (index_of const-decl "bool" hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (singleton? const-decl "bool" sets nil)
    (the const-decl "(p)" sets nil)
    (singleton_extend application-judgement "(singleton?[T])"
     extend_set_props nil))
   shostak))
 (re_plus_cnst0 0
  (re_plus_cnst0-1 nil 3792332679
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (expand "+")
        (("" (expand "cnst") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (cnst0_plus_re 0
  (cnst0_plus_re-1 nil 3792332704
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (expand "+")
        (("" (expand "cnst") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (re_minus_cnst0 0
  (re_minus_cnst0-1 nil 3792332711
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (expand "-")
        (("" (expand "cnst") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (cnst0_minus_re 0
  (cnst0_minus_re-1 nil 3792332722
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (expand "-")
        (("" (expand "cnst") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (re_prod_cnst0 0
  (re_prod_cnst0-1 nil 3792332730
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (expand "*")
        (("" (expand "cnst") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (cnst0_prod_re 0
  (cnst0_prod_re-1 nil 3792332740
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (expand "*")
        (("" (expand "cnst") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (sqrt_safe_sq 0
  (sqrt_safe_sq-1 nil 3878420397
   ("" (skeep)
    (("" (expand "sqrt_safe" 1)
      (("" (case "max(y,0)=y")
        (("1" (replace -1) (("1" (assert) nil nil)) nil)
         ("2" (hide 2) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((sqrt_safe const-decl "nnreal" reals_safe_ops reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (ODEs_P?_TCC1 0
  (ODEs_P?_TCC1-1 nil 3806745536 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (dLVar type-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (connected? const-decl "bool" differentiation nil)
    (/= const-decl "boolean" notequal nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" differentiation nil)
    (hp const-decl "bool" interval_def ODEs)
    (x!1 skolem-const-decl "real" differentiation nil)
    (x!1 skolem-const-decl "real" differentiation nil)
    (t!1 skolem-const-decl "(D!1)" differentiation nil)
    (D!1 skolem-const-decl "(dd?)" differentiation nil)
    (x!1 skolem-const-decl "real" differentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (P!1 skolem-const-decl "(ddl_dom?)" differentiation nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "real" differentiation nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (x!1 skolem-const-decl "real" differentiation nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (odes!1 skolem-const-decl "ODEs" differentiation nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (b!1 skolem-const-decl "posreal" differentiation nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (b!1 skolem-const-decl "posreal" differentiation nil)
    (x!1 skolem-const-decl "real" differentiation nil)
    (x!1 skolem-const-decl "real" differentiation nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (deriv const-decl "real" derivatives_def analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (proj const-decl "bool" differentiation nil)
    (between? const-decl "bool" differentiation nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   nil
   (ODEs_P? subtype "differentiation.odes"
    "(ODEs_equiv.ODEs_s?(differentiation.D, differentiation.env))")))
 (DIFT_TCC1 0
  (DIFT_TCC1-1 nil 3792428449
   ("" (lemma "NQBool_well_founded")
    (("" (expand "well_founded?" 1)
      (("" (expand "strict_well_founded?" -1)
        (("" (flatten)
          (("" (expand "well_founded?" -2)
            (("" (skeep)
              ((""
                (inst -2
                 "LAMBDA(xx:NQBool):(nqb_normal?(xx) AND p(xx))")
                (("" (skeep)
                  (("" (split -2)
                    (("1" (skeep)
                      (("1" (inst 1 "y!1")
                        (("1" (skeep) (("1" (inst?) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst 1 "y") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (NormNQBool type-eq-decl nil bool_expr nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (NQBool type-decl nil NQBool_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (NQBool_well_founded formula-decl nil NQBool_adt nil))
   nil
   (DIFT well-founded
    "LAMBDA (nnQ1, nnQ2: bool_expr.NormNQBool): NQBool_adt.<<(nnQ1, nnQ2)"
    "nil")))
 (DIFT_TCC2 0
  (DIFT_TCC2-1 nil 3792428449
   ("" (skeep)
    (("" (typepred "nnQ")
      (("" (expand "nqb_normal?")
        (("" (flatten)
          (("" (assert)
            (("" (flatten)
              (("" (grind)
                (("1" (expand "nqb_normal?") (("1" (propax) nil nil))
                  nil)
                 ("2" (expand "nqb_normal?") (("2" (propax) nil nil))
                  nil)
                 ("3" (expand "nqb_normal?") (("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NormNQBool type-eq-decl nil bool_expr nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (NQBool type-decl nil NQBool_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (DIFT subtype "differentiation.nqb1" "NormNQBool")))
 (DIFT_TCC3 0
  (DIFT_TCC3-1 nil 3792428449 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (NQBool type-decl nil NQBool_adt nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (NormNQBool type-eq-decl nil bool_expr nil)
    (<< adt-def-decl "(strict_well_founded?[NQBool])" NQBool_adt nil)
    (not_one_element? const-decl "bool" differentiation nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (/= const-decl "boolean" notequal nil)
    (connected? const-decl "bool" differentiation nil))
   nil
   (DIFT termination
    "differentiation.DIFT(differentiation.M, differentiation.P, differentiation.nqb1)"
    "nil")))
 (DIFT_TCC4 0
  (DIFT_TCC4-1 nil 3792428449
   ("" (skeep)
    (("" (typepred "nnQ")
      (("" (expand "nqb_normal?" -1)
        (("" (assert)
          (("" (expand "nqb_normal?" 1)
            (("" (flatten)
              (("" (expand "nqb_normal?" -) (("" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NormNQBool type-eq-decl nil bool_expr nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (NQBool type-decl nil NQBool_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (DIFT subtype "differentiation.nqb2" "NormNQBool")))
 (DIFT_TCC5 0
  (DIFT_TCC5-1 nil 3792428449 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (NQBool type-decl nil NQBool_adt nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (NormNQBool type-eq-decl nil bool_expr nil)
    (<< adt-def-decl "(strict_well_founded?[NQBool])" NQBool_adt nil)
    (not_one_element? const-decl "bool" differentiation nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (/= const-decl "boolean" notequal nil)
    (connected? const-decl "bool" differentiation nil))
   nil
   (DIFT termination
    "differentiation.DIFT(differentiation.M, differentiation.P, differentiation.nqb2)"
    "nil")))
 (DIFT_TCC6 0
  (DIFT_TCC6-1 nil 3792428449
   ("" (skeep)
    (("" (typepred "nnQ")
      (("" (expand "nqb_normal?" -1)
        (("" (assert)
          (("" (flatten)
            (("" (assert)
              (("" (expand "nqb_normal?")
                (("" (flatten)
                  (("" (assert) (("" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NormNQBool type-eq-decl nil bool_expr nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (NQBool type-decl nil NQBool_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (DIFT subtype "differentiation.nqb1" "NormNQBool")))
 (DIFT_TCC7 0
  (DIFT_TCC7-1 nil 3792428449 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (NQBool type-decl nil NQBool_adt nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (NormNQBool type-eq-decl nil bool_expr nil)
    (<< adt-def-decl "(strict_well_founded?[NQBool])" NQBool_adt nil)
    (not_one_element? const-decl "bool" differentiation nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (/= const-decl "boolean" notequal nil)
    (connected? const-decl "bool" differentiation nil))
   nil
   (DIFT termination
    "differentiation.DIFT(differentiation.M, differentiation.P, differentiation.nqb1)"
    "nil")))
 (DIFT_TCC8 0
  (DIFT_TCC8-1 nil 3792428449
   ("" (skeep)
    (("" (typepred "nnQ")
      (("" (expand "nqb_normal?")
        (("" (flatten)
          (("" (grind)
            (("1" (expand "nqb_normal?") (("1" (propax) nil nil)) nil)
             ("2" (expand "nqb_normal?") (("2" (propax) nil nil)) nil)
             ("3" (expand "nqb_normal?") (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NormNQBool type-eq-decl nil bool_expr nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (NQBool type-decl nil NQBool_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (DIFT subtype "differentiation.nqb2" "NormNQBool")))
 (DIFT_TCC9 0
  (DIFT_TCC9-1 nil 3792428449 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (NQBool type-decl nil NQBool_adt nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (NormNQBool type-eq-decl nil bool_expr nil)
    (<< adt-def-decl "(strict_well_founded?[NQBool])" NQBool_adt nil)
    (not_one_element? const-decl "bool" differentiation nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (/= const-decl "boolean" notequal nil)
    (connected? const-decl "bool" differentiation nil))
   nil
   (DIFT termination
    "differentiation.DIFT(differentiation.M, differentiation.P, differentiation.nqb2)"
    "nil")))
 (DIFT_TCC10 0
  (DIFT_TCC10-1 nil 3792428449
   ("" (skeep)
    (("" (typepred "nnQ")
      (("" (grind)
        (("" (expand "nqb_normal?" -1) (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((NormNQBool type-eq-decl nil bool_expr nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (NQBool type-decl nil NQBool_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (DIFT cases "differentiation.nnQ" "NQBool: DATATYPE
 BEGIN
  IMPORTING hp_def

  NQB_rel(rel: NQB_REL, r1, r2: RealExpr): nqb_rel?
  NQB_AND(nqb1, nqb2: NQBool): nqb_and?
  NQB_OR(nqb1, nqb2: NQBool): nqb_or?
  NQB_NOT(nqb: NQBool): nqb_not?
 END NQBool"))))