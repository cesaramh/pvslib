(solution_odes_props
 (diff_odes_shift_TCC1 0
  (diff_odes_shift_TCC1-1 nil 3901087100 ("" (subtype-tcc) nil nil)
   ((dd? const-decl "bool" hp_expr nil)) nil
   (diff_odes_shift subtype "interval_def.hp(0)" "(hp_expr.dd?)")))
 (diff_odes_shift 0
  (diff_odes_shift-1 nil 3901087104
   ("" (skeep)
    (("" (skoletin)
      (("" (expand "derivable_odes?")
        (("" (flatten)
          (("" (skeep)
            (("" (inst -1 "k")
              (("" (expand "fsh")
                (("" (lemma "derivable_shift")
                  (("" (inst -1 "hp(0)" "T" "fs(k)" _)
                    (("" (expand "derivable?" 1)
                      (("" (expand "derivable?" -2)
                        (("" (skeep)
                          (("" (inst -2 "x+T")
                            (("1" (expand "restrict" 1)
                              (("1"
                                (inst -1 "x+T")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "hp_dd")
                                    (("1"
                                      (inst -1 "0")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "shft" -2)
                                          (("1"
                                            (expand "restrict" -2)
                                            (("1"
                                              (hide -3 -4 -1)
                                              (("1"
                                                (name
                                                 "SH"
                                                 "shft(hp(0),T)")
                                                (("1"
                                                  (expand "shft" -1)
                                                  (("1"
                                                    (expand
                                                     "derivable?"
                                                     (-2 1))
                                                    (("1"
                                                      (expand
                                                       "convergent?"
                                                       (-2 1))
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst 1 "l")
                                                          (("1"
                                                            (expand
                                                             "convergence"
                                                             (-2 1))
                                                            (("1"
                                                              (expand
                                                               "convergence"
                                                               (-2 1))
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "adh"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "adh"
                                                                       -2)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           -2
                                                                           "e!1")
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (copy
                                                                               1)
                                                                              (("1"
                                                                                (inst
                                                                                 1
                                                                                 "x2")
                                                                                (("1"
                                                                                  (expand
                                                                                   "fullset")
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "x2")
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "x")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "A")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "shft"
                                                                                         -3)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "hp")
                                                                                          (("2"
                                                                                            (inst
                                                                                             2
                                                                                             "e!1/2")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "fullset"
                                                                                               2)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "A"
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "hp"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (inst
                                                                       -3
                                                                       "epsilon")
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "delta")
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (inst
                                                                               -5
                                                                               "x2")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "NQ")
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "x2")
                                                                                (("2"
                                                                                  (expand
                                                                                   "A")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "shft")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "hp")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "T")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "hp")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "T" "x")
                              (("2"
                                (hide -3 -4 2)
                                (("2"
                                  (expand "hp")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (hp const-decl "bool" interval_def ODEs)
    (dd? const-decl "bool" hp_expr nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (derivable_shift formula-decl nil derivatives_shift analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (shft const-decl "real" derivatives_shift analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_is_complete name-judgement "metric_complete" real_topology
     metric_space)
    (fullset_is_clopen name-judgement "clopen" real_topology
     metric_space)
    (e!1 skolem-const-decl "posreal" solution_odes_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (fullset const-decl "set" sets nil)
    (x2 skolem-const-decl "(A(x))" solution_odes_props nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (x2 skolem-const-decl "(A(x))" solution_odes_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (shft const-decl "bool" derivatives_shift analysis)
    (hp_dd formula-decl nil interval_def ODEs)
    (x skolem-const-decl "(hp(0))" solution_odes_props nil)
    (T skolem-const-decl "(hp(0))" solution_odes_props nil)
    (restrict const-decl "R" restrict nil)
    (fsh skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     solution_odes_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (env_at_t_shift 0
  (env_at_t_shift-1 nil 3901089402
   ("" (skeep)
    (("" (skoletin)
      ((""
        (typepred " env_at_t(ode, fs, env)(T + t)"
         " env_at_t(ode, fsh, env_at_t(ode, fs, env)(T))(t)"
         "env_at_t(ode, fs, env)(T)")
        (("" (decompose-equality 1)
          (("" (expand "env_at_t?")
            (("" (flatten)
              (("" (case "not_in_map(ode)(x!1)")
                (("1" (inst -2 "x!1")
                  (("1" (replace -2 1 rl)
                    (("1" (inst -5 "x!1")
                      (("1" (replace -5 1 rl)
                        (("1" (inst -8 "x!1") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "not_in_map" 1)
                    (("2" (skeep)
                      (("2" (inst -3 "i")
                        (("2" (inst -6 "i")
                          (("2" (inst -9 "i")
                            (("2" (hide -2 -5 -4 -7 -8 -10)
                              (("2"
                                (replace -1 -2 lr)
                                (("2"
                                  (replace -2 1 rl)
                                  (("2"
                                    (replace -1 -3 lr)
                                    (("2"
                                      (replace -3 1 rl)
                                      (("2"
                                        (expand "fsh" 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (hp const-decl "bool" interval_def ODEs)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (fsh skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     solution_odes_props nil)
    (ode skolem-const-decl "ODEs" solution_odes_props nil)
    (x!1 skolem-const-decl "nat" solution_odes_props nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (solution_odes_shift 0
  (solution_odes_shift-1 nil 3901088586
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (expand "solution_odes?")
          (("" (case "NOT derivable_odes?(hp(0), length(ode))(fsh)")
            (("1" (flatten)
              (("1" (lemma "diff_odes_shift")
                (("1" (inst -1 "ode" "fs" "T")
                  (("1" (beta)
                    (("1" (replace -5) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (split 1)
                (("1" (flatten)
                  (("1" (expand "env_at_t?")
                    (("1" (skeep)
                      (("1" (expand "fsh" 1)
                        (("1" (typepred "env_at_t(ode, fs, env)(T)")
                          (("1" (expand "env_at_t?" -1)
                            (("1" (flatten)
                              (("1" (inst -2 "k") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (typepred "env_1")
                    (("2" (assert)
                      (("2" (inst -5 "t+T" "env_at_t(ode,fs,env)(t+T)")
                        (("1" (expand "sol_at_t?")
                          (("1" (skeep)
                            (("1" (inst -5 "k")
                              (("1"
                                (expand "fsh" 1)
                                (("1"
                                  (expand "restrict")
                                  (("1"
                                    (hide -6)
                                    (("1"
                                      (typepred "t")
                                      (("1"
                                        (with-tccs
                                         (case
                                          "deriv[(hp(0))](LAMBDA (s: (hp(0))): fs(k)(s))(T + t) = deriv[(hp(0))](LAMBDA (s: (hp(0))): fs(k)(s + T))(t)"))
                                        (("1"
                                          (replace -1 1 rl)
                                          (("1"
                                            (replace -7 1 lr)
                                            (("1"
                                              (case
                                               "env_at_t(ode, fs, env)(T + t) = env_1")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (typepred "env_1")
                                                  (("2"
                                                    (lemma
                                                     "env_at_t_shift")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (beta)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           1
                                                           lr)
                                                          (("2"
                                                            (typepred
                                                             "env_at_t(ode,
               LAMBDA (i: below(length(ode))):
                 LAMBDA (t: real): fs(i)(t + T),
               env_at_t(ode, fs, env)(T))(t)")
                                                            (("2"
                                                              (inst
                                                               -2
                                                               "env_1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma "deriv_shift")
                                            (("2"
                                              (inst
                                               -1
                                               "hp(0)"
                                               "-T"
                                               "LAMBDA(s:(hp(0))): fs(k)(s)"
                                               "T+t")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (expand "deriv" 1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (lemma
                                                         "deriv_def[(hp(0))]")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (with-tccs
                                                             (inst
                                                              -1
                                                              "(LAMBDA (s: (hp(0))): fs(k)(s+T))"
                                                              " deriv(LAMBDA (s: (hp(0))): fs(k)(s), T+t)"
                                                              "t"))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (with-tccs
                                                                   (name
                                                                    "dF"
                                                                    "deriv(LAMBDA (s: (hp(0))): fs(k)(s),T+t)"))
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "deriv"
                                                                       -1)
                                                                      (("1"
                                                                        (with-tccs
                                                                         (typepred
                                                                          " lim(NQ(LAMBDA (s: (hp(0))): fs(k)(s), T + t), 0)"))
                                                                        (("1"
                                                                          (replace
                                                                           -2
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (expand
                                                                               "convergence")
                                                                              (("1"
                                                                                (expand
                                                                                 "convergence")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "adh")
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "e")
                                                                                          (("1"
                                                                                            (inst
                                                                                             1
                                                                                             "e!1/2")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "fullset")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "A"
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "hp"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "t")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "hp"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -2
                                                                                         "epsilon")
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (inst
                                                                                             1
                                                                                             "delta")
                                                                                            (("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -4
                                                                                                 "x")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "NQ")
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (typepred
                                                                                                   "x")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "A")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "hp")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "T"
                                                                                                           "t")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "hp")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "hp_noe")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "0")
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (lemma
                                                           "hp_dd")
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "0")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "derivable_odes?"
                                                     -4)
                                                    (("2"
                                                      (inst -4 "k")
                                                      (("2"
                                                        (expand
                                                         "restrict"
                                                         -4)
                                                        (("2"
                                                          (expand
                                                           "derivable?"
                                                           -4)
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "T+t")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (lemma "hp_dd")
                                                    (("3"
                                                      (inst -1 "0")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "hp")
                          (("2" (typepred "T" "t")
                            (("2" (expand "hp")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (hp const-decl "bool" interval_def ODEs)
    (dd? const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (restrict const-decl "R" restrict nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (hp_dd formula-decl nil interval_def ODEs)
    (hp_noe formula-decl nil interval_def ODEs)
    (fullset_is_clopen name-judgement "clopen" real_topology
     metric_space)
    (real_is_complete name-judgement "metric_complete" real_topology
     metric_space)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "(A(t))" solution_odes_props nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (e const-decl "posreal" ln_exp lnexp)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fullset const-decl "set" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (e!1 skolem-const-decl "posreal" solution_odes_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (lim const-decl "{l: real | convergence(f, x0, l)}"
     lim_of_functions analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (deriv_def formula-decl nil derivatives_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv_shift formula-decl nil derivatives_shift analysis)
    (env_at_t_shift formula-decl nil solution_odes_props nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (t skolem-const-decl "(hp(0))" solution_odes_props nil)
    (T skolem-const-decl "(hp(0))" solution_odes_props nil)
    (fsh skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     solution_odes_props nil)
    (diff_odes_shift formula-decl nil solution_odes_props nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (diff_odes_cat_hp_TCC1 0
  (diff_odes_cat_hp_TCC1-1 nil 3901525796 ("" (subtype-tcc) nil nil)
   ((dd? const-decl "bool" hp_expr nil)) nil
   (diff_odes_cat_hp subtype "interval_def.hp(0)" "(hp_expr.dd?)")))
 (diff_odes_cat_hp_TCC2 0
  (diff_odes_cat_hp_TCC2-1 nil 3901528647 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (hp const-decl "bool" interval_def ODEs)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (diff_odes_cat_hp subtype "solution_odes_props.T"
    "{x | derivatives_def[(interval_def.hp(0))].derivable?(restrict[real, (interval_def.hp(0)), real].restrict(solution_odes_props.fs1(solution_odes_props.k)), x)}")))
 (diff_odes_cat_hp_TCC3 0
  (diff_odes_cat_hp_TCC3-1 nil 3901528647
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "hp_dd") (("" (inst -1 "0") nil nil)) nil)) nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (hp_dd formula-decl nil interval_def ODEs)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (diff_odes_cat_hp assuming
    "analysis@derivatives_def[(interval_def.hp(0))].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (diff_odes_cat_hp_TCC4 0
  (diff_odes_cat_hp_TCC4-1 nil 3901528647
   ("" (skeep*)
    (("" (lemma "hp_noe") (("" (inst -1 "0") nil nil)) nil)) nil)
   ((hp_noe formula-decl nil interval_def ODEs)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (diff_odes_cat_hp assuming
    "analysis@derivatives_def[(interval_def.hp(0))].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (diff_odes_cat_hp_TCC5 0
  (diff_odes_cat_hp_TCC5-1 nil 3901528647
   ("" (skeep*)
    (("" (split 1)
      (("1" (grind) nil nil)
       ("2" (expand "derivable_odes?" -3)
        (("2" (inst -3 "k")
          (("2" (expand "derivable?" -3) (("2" (inst -3 "0") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (hp const-decl "bool" interval_def ODEs)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (diff_odes_cat_hp subtype "0"
    "{x | derivatives_def[(interval_def.hp(0))].derivable?(restrict[real, (interval_def.hp(0)), real].restrict(solution_odes_props.fs2(solution_odes_props.k)), x)}")))
 (diff_odes_cat_hp 0
  (diff_odes_cat_hp-1 nil 3901526126
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (label "cont" -3)
          (("" (hide "cont")
            (("" (expand "derivable_odes?")
              (("" (skeep)
                (("" (inst -1 "k")
                  (("" (inst -2 "k")
                    (("" (expand "derivable?")
                      (("" (skeep)
                        (("" (expand "restrict" 1)
                          (("" (expand "fcat" 1)
                            (("" (inst -1 "x")
                              ((""
                                (case "x < T")
                                (("1"
                                  (hide -3)
                                  (("1"
                                    (expand "derivable?")
                                    (("1"
                                      (expand "convergent?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "l")
                                          (("1"
                                            (expand "convergence")
                                            (("1"
                                              (expand "convergence")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "epsilon")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst
                                                           1
                                                           "min(delta,T-x)/2")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "x2")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "NQ")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict"
                                                                     -5)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             -3
                                                             -4)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "x > T")
                                  (("1"
                                    (expand "derivable?")
                                    (("1"
                                      (expand "convergent?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (inst -2 "x-T")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst 2 "l!1")
                                                (("1"
                                                  (expand
                                                   "convergence")
                                                  (("1"
                                                    (expand
                                                     "convergence")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (split 2)
                                                        (("1"
                                                          (expand
                                                           "adh"
                                                           1)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "e!1/2")
                                                              (("1"
                                                                (expand
                                                                 "fullset"
                                                                 1)
                                                                (("1"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "A")
                                                                (("2"
                                                                  (hide
                                                                   -3
                                                                   -4)
                                                                  (("2"
                                                                    (typepred
                                                                     "x")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "epsilon")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "min(delta,x-T)/2")
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst
                                                                     -5
                                                                     "x2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "NQ")
                                                                        (("1"
                                                                          (expand
                                                                           "restrict")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "x2")
                                                                      (("2"
                                                                        (hide
                                                                         -7
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "A")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -3
                                                                   -4)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "x" "T")
                                              (("2"
                                                (hide -4 3)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "NOT x = T")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide -4)
                                      (("2"
                                        (reveal "cont")
                                        (("2"
                                          (lemma
                                           "derivable_continuous[(hp(0))]")
                                          (("1"
                                            (inst-cp -1 "fs1(k)" "T")
                                            (("1"
                                              (inst -1 "fs2(k)" "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -6 "0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "continuous?")
                                                      (("1"
                                                        (expand
                                                         "derivable?")
                                                        (("1"
                                                          (expand
                                                           "convergent?")
                                                          (("1"
                                                            (skeep*)
                                                            (("1"
                                                              (case
                                                               "l = l!1")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   3
                                                                   "l!1")
                                                                  (("1"
                                                                    (expand
                                                                     "convergence")
                                                                    (("1"
                                                                      (expand
                                                                       "convergence")
                                                                      (("1"
                                                                        (split
                                                                         3)
                                                                        (("1"
                                                                          (expand
                                                                           "adh"
                                                                           1)
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "e!1/2")
                                                                              (("1"
                                                                                (expand
                                                                                 "fullset"
                                                                                 1)
                                                                                (("1"
                                                                                  (hide
                                                                                   -)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "A")
                                                                                (("2"
                                                                                  (hide
                                                                                   -7
                                                                                   -8)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -7)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "x")
                                                                                      (("2"
                                                                                        (hide
                                                                                         -3
                                                                                         -4)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (inst
                                                                               -9
                                                                               "epsilon/4")
                                                                              (("2"
                                                                                (inst
                                                                                 -7
                                                                                 "epsilon/4")
                                                                                (("2"
                                                                                  (inst
                                                                                   -2
                                                                                   "epsilon/4")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -3
                                                                                     "epsilon/4")
                                                                                    (("2"
                                                                                      (skeep*)
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "min(min(delta,delta!1),min(delta!2,delta!3))")
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -9
                                                                                             "x2")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -11
                                                                                               "x2")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -4
                                                                                                 "x2")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -5
                                                                                                   "x2+T")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "restrict")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "NQ"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "x2+x <= T")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "NQ")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "NQ")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (case
                                                                                                                   "x2 - T + x = x2")
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -7
                                                                                                                       "k")
                                                                                                                      (("1"
                                                                                                                        (assert
                                                                                                                         :flush?
                                                                                                                         t)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     -4
                                                                                                     -7
                                                                                                     -8
                                                                                                     -10)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "x2")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "A"
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "NQ"
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "hp"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -4
                                                                                                           "x2+T")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "restrict")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "NQ")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (typepred
                                                                                                             "x2")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "A")
                                                                                                              (("2"
                                                                                                                (hide-all-but
                                                                                                                 (-2
                                                                                                                  1
                                                                                                                  -7))
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "A"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x2")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "A"
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "hp"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "NQ"
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "NQ")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "restrict")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 -2)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "k")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (lemma
                                                                       "deriv_def[(hp(0))]")
                                                                      (("2"
                                                                        (inst-cp
                                                                         -1
                                                                         "fs1(k)"
                                                                         "l"
                                                                         "T")
                                                                        (("2"
                                                                          (inst-cp
                                                                           -1
                                                                           "fs2(k)"
                                                                           "l!1"
                                                                           "0")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               -7)
                                                                              (("2"
                                                                                (replace
                                                                                 -5
                                                                                 1
                                                                                 rl)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   2
                                                                                   3
                                                                                   4
                                                                                   5)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "convergence")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "convergence")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "adh")
                                                                                                (("1"
                                                                                                  (skeep)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -2
                                                                                                     "e!1")
                                                                                                    (("1"
                                                                                                      (skeep)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "x2")
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -3
                                                                                                   "epsilon")
                                                                                                  (("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "delta")
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -5
                                                                                                           "x_1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "hp_noe")
                                            (("2"
                                              (inst -1 "0")
                                              nil
                                              nil))
                                            nil)
                                           ("3"
                                            (assert)
                                            (("3"
                                              (lemma "hp_dd")
                                              (("3"
                                                (inst -1 "0")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dd? const-decl "bool" hp_expr nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (x2 skolem-const-decl "(A(x))" solution_odes_props nil)
    (delta skolem-const-decl "posreal" solution_odes_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (e!1 skolem-const-decl "posreal" solution_odes_props nil)
    (derivable_continuous formula-decl nil derivatives_def analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (x2 skolem-const-decl "(A(x))" solution_odes_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (e!1 skolem-const-decl "posreal" solution_odes_props nil)
    (deriv_def formula-decl nil derivatives_def analysis)
    (hp_noe formula-decl nil interval_def ODEs)
    (hp_dd formula-decl nil interval_def ODEs)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (delta skolem-const-decl "posreal" solution_odes_props nil)
    (T skolem-const-decl "(hp(0))" solution_odes_props nil)
    (x skolem-const-decl "(hp(0))" solution_odes_props nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (NQ const-decl "real" derivatives_def analysis)
    (real_is_complete name-judgement "metric_complete" real_topology
     metric_space)
    (fullset_is_clopen name-judgement "clopen" real_topology
     metric_space)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (fcat skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     solution_odes_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (diff_odes_cat_ci_TCC1 0
  (diff_odes_cat_ci_TCC1-1 nil 3901525796
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (diff_odes_cat_ci subtype "solution_odes_props.b"
    "{b: reals.real | reals.<(0, b)}")))
 (diff_odes_cat_ci_TCC2 0
  (diff_odes_cat_ci_TCC2-1 nil 3901525796
   ("" (skeep)
    (("" (expand "dd?" 1)
      (("" (flatten) (("" (inst 1 "b") nil nil)) nil)) nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (hp const-decl "bool" interval_def ODEs)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (diff_odes_cat_ci subtype
    "interval_def.closed_interval(0, solution_odes_props.b)"
    "(hp_expr.dd?)")))
 (diff_odes_cat_ci_TCC3 0
  (diff_odes_cat_ci_TCC3-1 nil 3901529463
   ("" (skeep*)
    (("" (expand "derivable_odes?")
      (("" (inst -2 "k")
        (("" (expand "derivable?")
          (("" (inst -2 "T")
            (("" (expand "derivable?" -2) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_odes? const-decl "bool" hp_expr nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (hp const-decl "bool" interval_def ODEs)
    (below type-eq-decl nil naturalnumbers nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (diff_odes_cat_ci subtype "solution_odes_props.T"
    "{x | derivatives_def[(interval_def.hp(0))].derivable?(restrict[real, (interval_def.hp(0)), real].restrict(solution_odes_props.fs1(solution_odes_props.k)), x)}")))
 (diff_odes_cat_ci_TCC4 0
  (diff_odes_cat_ci_TCC4-1 nil 3901529463
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "hp_dd") (("" (inst -1 "0") nil nil)) nil)) nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (hp_dd formula-decl nil interval_def ODEs)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (diff_odes_cat_ci assuming
    "analysis@derivatives_def[(interval_def.hp(0))].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (diff_odes_cat_ci_TCC5 0
  (diff_odes_cat_ci_TCC5-1 nil 3901529463
   ("" (skeep*)
    (("" (lemma "hp_noe") (("" (inst -1 "0") nil nil)) nil)) nil)
   ((hp_noe formula-decl nil interval_def ODEs)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (diff_odes_cat_ci assuming
    "analysis@derivatives_def[(interval_def.hp(0))].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (diff_odes_cat_ci_TCC6 0
  (diff_odes_cat_ci_TCC6-1 nil 3901529463
   ("" (skeep*)
    (("" (expand "closed_interval" 1)
      (("" (assert)
        (("" (expand "derivable_odes?" -3)
          (("" (inst -3 "k")
            (("" (expand "derivable?" -3) (("" (inst -3 "0") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (derivable? const-decl "bool" derivatives analysis)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (hp const-decl "bool" interval_def ODEs)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (diff_odes_cat_ci subtype "0"
    "{x | derivatives_def[(interval_def.closed_interval(0, solution_odes_props.b))].derivable?(restrict[real, (interval_def.closed_interval(0, solution_odes_props.b)), real].restrict(solution_odes_props.fs2(solution_odes_props.k)), x)}")))
 (diff_odes_cat_ci_TCC7 0
  (diff_odes_cat_ci_TCC7-1 nil 3901529463
   ("" (skeep*)
    (("" (lemma "ci_deriv_domain")
      (("" (inst -1 "closed_interval(0,b)")
        (("" (expand "closed_interval?" 1)
          (("" (inst 1 "0" "b") (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((ci_deriv_domain formula-decl nil interval_def ODEs)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (b skolem-const-decl "{b: (hp(0)) | b > 0}" solution_odes_props
     nil)
    (> const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (diff_odes_cat_ci assuming
    "analysis@derivatives_def[(interval_def.closed_interval(0, solution_odes_props.b))].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (diff_odes_cat_ci_TCC8 0
  (diff_odes_cat_ci_TCC8-1 nil 3901529463
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "dd_noe")
        (("" (inst -1 "(closed_interval(0,b))") nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (dd? const-decl "bool" hp_expr nil) (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (hp const-decl "bool" interval_def ODEs)
    (> const-decl "bool" reals nil)
    (dd_noe formula-decl nil hp_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (diff_odes_cat_ci assuming
    "analysis@derivatives_def[(interval_def.closed_interval(0, solution_odes_props.b))].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (diff_odes_cat_ci_TCC9 0
  (diff_odes_cat_ci_TCC3-1 nil 3901525796
   ("" (skeep)
    (("" (typepred "b" "T")
      (("" (hide -4 -5 -6 -7) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((> const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (diff_odes_cat_ci subtype
    "(number_fields.+)(solution_odes_props.b, solution_odes_props.T)"
    "{b: reals.real | reals.<(0, b)}")))
 (diff_odes_cat_ci_TCC10 0
  (diff_odes_cat_ci_TCC4-1 nil 3901525796
   ("" (skeep)
    (("" (expand "dd?" 1)
      (("" (flatten)
        (("" (inst 1 "T+b")
          (("" (assert)
            (("" (typepred "T" "b")
              (("" (hide -5 -6 -7) (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (hp const-decl "bool" interval_def ODEs)
    (b skolem-const-decl "{b: (hp(0)) | b > 0}" solution_odes_props
     nil)
    (T skolem-const-decl "(hp(0))" solution_odes_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (diff_odes_cat_ci subtype
    "interval_def.closed_interval(0, (number_fields.+)(solution_odes_props.b, solution_odes_props.T))"
    "(hp_expr.dd?)")))
 (diff_odes_cat_ci 0
  (diff_odes_cat_ci-1 nil 3901526851
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (label "cont" -3)
          (("" (hide "cont")
            (("" (expand "derivable_odes?")
              (("" (skeep)
                (("" (inst -1 "k")
                  (("" (inst -2 "k")
                    (("" (expand "derivable?")
                      (("" (skeep)
                        (("" (expand "restrict" 1)
                          (("" (expand "fcat" 1)
                            (("" (inst -1 "x")
                              (("1"
                                (case "x < T")
                                (("1"
                                  (hide -3)
                                  (("1"
                                    (expand "derivable?")
                                    (("1"
                                      (expand "convergent?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "l")
                                          (("1"
                                            (expand "convergence")
                                            (("1"
                                              (expand "convergence")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (expand "adh" 1)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst
                                                         1
                                                         "min(e!1,T-x)/2")
                                                        (("1"
                                                          (expand
                                                           "fullset"
                                                           1)
                                                          (("1"
                                                            (hide
                                                             -2
                                                             -3
                                                             -4)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (split 1)
                                                          (("1"
                                                            (hide
                                                             -3
                                                             -4)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "A"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "closed_interval"
                                                               1)
                                                              (("2"
                                                                (hide
                                                                 -3
                                                                 -4)
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (typepred
                                                                     "x")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "x"
                                                                     "b")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "epsilon")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst
                                                           1
                                                           "min(delta,T-x)/2")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "x2")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "NQ")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict"
                                                                     -5)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -4
                                                                 -5
                                                                 2)
                                                                (("2"
                                                                  (typepred
                                                                   "x2")
                                                                  (("2"
                                                                    (typepred
                                                                     "x")
                                                                    (("2"
                                                                      (typepred
                                                                       "b")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (split 1)
                                                            (("1"
                                                              (typepred
                                                               "delta"
                                                               "x"
                                                               "T"
                                                               "b")
                                                              (("1"
                                                                (hide
                                                                 -9
                                                                 -10)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "delta"
                                                               "x"
                                                               "T"
                                                               "b")
                                                              (("2"
                                                                (hide
                                                                 -9
                                                                 -10)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "x > T")
                                  (("1"
                                    (expand "derivable?")
                                    (("1"
                                      (expand "convergent?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (inst -2 "x-T")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst 2 "l!1")
                                                (("1"
                                                  (expand
                                                   "convergence")
                                                  (("1"
                                                    (expand
                                                     "convergence")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (split 2)
                                                        (("1"
                                                          (expand
                                                           "adh"
                                                           1)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (typepred
                                                               "x"
                                                               "T")
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "-min(x-T,abs(e!1))/2")
                                                                (("1"
                                                                  (expand
                                                                   "fullset"
                                                                   1)
                                                                  (("1"
                                                                    (hide
                                                                     -5
                                                                     -6)
                                                                    (("1"
                                                                      (typepred
                                                                       "T"
                                                                       "x")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (hide
                                                                     -5
                                                                     -6)
                                                                    (("1"
                                                                      (typepred
                                                                       "e!1"
                                                                       "T"
                                                                       "x"
                                                                       "b")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "A"
                                                                     1)
                                                                    (("2"
                                                                      (hide
                                                                       -5
                                                                       -6)
                                                                      (("2"
                                                                        (typepred
                                                                         "b"
                                                                         "T"
                                                                         "x")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "epsilon")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "min(delta,x-T)/2")
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst
                                                                     -5
                                                                     "x2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "NQ")
                                                                        (("1"
                                                                          (expand
                                                                           "restrict")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "x2")
                                                                      (("2"
                                                                        (hide
                                                                         -7
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "A")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -3
                                                                   -4)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "x" "T")
                                              (("2"
                                                (hide -4 3)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "NOT x = T")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide -4)
                                      (("2"
                                        (reveal "cont")
                                        (("2"
                                          (lemma
                                           "derivable_continuous[(hp(0))]")
                                          (("1"
                                            (inst -1 "fs1(k)" "T")
                                            (("1"
                                              (lemma
                                               "derivable_continuous[(closed_interval(0,b))]")
                                              (("1"
                                                (inst -1 "fs2(k)" "0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -6 "0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "continuous?")
                                                        (("1"
                                                          (expand
                                                           "derivable?")
                                                          (("1"
                                                            (expand
                                                             "convergent?")
                                                            (("1"
                                                              (skeep*)
                                                              (("1"
                                                                (case
                                                                 "l = l!1")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     3
                                                                     "l!1")
                                                                    (("1"
                                                                      (expand
                                                                       "convergence")
                                                                      (("1"
                                                                        (expand
                                                                         "convergence")
                                                                        (("1"
                                                                          (split
                                                                           3)
                                                                          (("1"
                                                                            (expand
                                                                             "adh"
                                                                             1)
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (typepred
                                                                                 "x")
                                                                                (("1"
                                                                                  (inst
                                                                                   1
                                                                                   "min(b,e!1)/2")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "fullset"
                                                                                     1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -8
                                                                                       -10)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -3
                                                                                         -4
                                                                                         -5)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -10
                                                                                     -8)
                                                                                    (("2"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "A")
                                                                                        (("2"
                                                                                          (hide
                                                                                           -3
                                                                                           -4
                                                                                           -5)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "b"
                                                                                             "T")
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (inst
                                                                               -9
                                                                               "epsilon/4")
                                                                              (("2"
                                                                                (inst
                                                                                 -7
                                                                                 "epsilon/4")
                                                                                (("2"
                                                                                  (inst
                                                                                   -2
                                                                                   "epsilon/4")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -3
                                                                                     "epsilon/4")
                                                                                    (("2"
                                                                                      (skeep*)
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "min(min(delta,delta!1),min(delta!2,delta!3))")
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -9
                                                                                             "x2")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -11
                                                                                               "x2")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -4
                                                                                                 "x2")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -5
                                                                                                   "x2+T")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "restrict")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "NQ"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "x2+x <= T")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "NQ")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "NQ")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (case
                                                                                                                   "x2 - T + x = x2")
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -7
                                                                                                                       "k")
                                                                                                                      (("1"
                                                                                                                        (assert
                                                                                                                         :flush?
                                                                                                                         t)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     -4
                                                                                                     -7
                                                                                                     -8
                                                                                                     -10)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "x2")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "A"
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "hp"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "closed_interval"
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "NQ"
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "closed_interval"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -4
                                                                                                           "x2+T")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "restrict")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "NQ")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "x2")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "A"
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "closed_interval"
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "x2 + x <= T")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "hp"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "T"
                                                                                                                 "x2")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "hp"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "A"
                                                                                                                       -3)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "closed_interval"
                                                                                                                         -3)
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x2")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "A")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "closed_interval")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "NQ")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "restrict")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               "x2")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "A")
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -6
                                                                                                   -7
                                                                                                   -8
                                                                                                   -12)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "b"
                                                                                                     "T")
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -1
                                                                   -2)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "k")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "deriv_def[(hp(0))]")
                                                                        (("2"
                                                                          (inst-cp
                                                                           -1
                                                                           "fs1(k)"
                                                                           "l"
                                                                           "T")
                                                                          (("2"
                                                                            (lemma
                                                                             "deriv_def[(closed_interval(0,b))]")
                                                                            (("2"
                                                                              (inst-cp
                                                                               -1
                                                                               "fs2(k)"
                                                                               "l!1"
                                                                               "0")
                                                                              (("2"
                                                                                (hide
                                                                                 -1
                                                                                 -3)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (hide
                                                                                     5)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -6)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "convergence")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "convergence")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "adh"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (skeep)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "e!1/2")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "fullset"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -6)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (typepred
                                                                                                       "e!1")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "A"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "hp"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "T")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -5
                                                                                                                 -6
                                                                                                                 -9)
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -6
                                                                                                   "epsilon")
                                                                                                  (("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "delta")
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -8
                                                                                                           "x!1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -3)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (lemma "dd_noe")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "closed_interval(0,b)")
                                                  (("2"
                                                    (expand "dd?" 1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst 1 "b")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma
                                                 "ci_deriv_domain")
                                                (("3"
                                                  (inst
                                                   -1
                                                   "closed_interval(0,b)")
                                                  (("3"
                                                    (expand
                                                     "closed_interval"
                                                     1)
                                                    (("3"
                                                      (expand
                                                       "closed_interval?"
                                                       1)
                                                      (("3"
                                                        (inst
                                                         1
                                                         "0"
                                                         "b")
                                                        (("3"
                                                          (hide -2 -5)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "hp_noe")
                                            (("2"
                                              (inst -1 "0")
                                              nil
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma "hp_dd")
                                            (("3"
                                              (inst -1 "0")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "x")
                                (("2"
                                  (hide -2 -3 -2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dd? const-decl "bool" hp_expr nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (derivable? const-decl "bool" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (T skolem-const-decl "(hp(0))" solution_odes_props nil)
    (b skolem-const-decl "{b: (hp(0)) | b > 0}" solution_odes_props
     nil)
    (x skolem-const-decl "(closed_interval(0, b + T))"
     solution_odes_props nil)
    (x2 skolem-const-decl "(A(x))" solution_odes_props nil)
    (delta skolem-const-decl "posreal" solution_odes_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (e!1 skolem-const-decl "posreal" solution_odes_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (derivable_continuous formula-decl nil derivatives_def analysis)
    (e!1 skolem-const-decl "posreal" solution_odes_props nil)
    (deriv_def formula-decl nil derivatives_def analysis)
    (e!1 skolem-const-decl "posreal" solution_odes_props nil)
    (x2 skolem-const-decl "(A(x))" solution_odes_props nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (dd_noe formula-decl nil hp_expr nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (ci_deriv_domain formula-decl nil interval_def ODEs)
    (hp_noe formula-decl nil interval_def ODEs)
    (hp_dd formula-decl nil interval_def ODEs)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (fullset_is_clopen name-judgement "clopen" real_topology
     metric_space)
    (real_is_complete name-judgement "metric_complete" real_topology
     metric_space)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (fullset const-decl "set" sets nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (e!1 skolem-const-decl "posreal" solution_odes_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (delta skolem-const-decl "posreal" solution_odes_props nil)
    (x2 skolem-const-decl "(A(x))" solution_odes_props nil)
    (NQ const-decl "real" derivatives_def analysis)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (fcat skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     solution_odes_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (der_odes_cat_hp_TCC1 0
  (der_odes_cat_hp_TCC1-1 nil 3901534063
   ("" (skeep*)
    (("" (lemma "diff_odes_cat_hp")
      (("" (inst?)
        (("" (beta)
          (("" (assert)
            (("" (replace -2 -1 rl)
              (("" (split -1)
                (("1" (expand "derivable_odes?" -1)
                  (("1" (inst -1 "k")
                    (("1" (expand "restrict") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2"
                    (case "fs1 = (LAMBDA (k: below(length(ode))): fs1(k))")
                    (("1" (assert) nil nil)
                     ("2" (decompose-equality 1) nil nil))
                    nil))
                  nil)
                 ("3"
                  (case "fs2 = (LAMBDA (k: below(length(ode))): fs2(k))")
                  (("1" (assert) nil nil)
                   ("2" (decompose-equality 1) nil nil))
                  nil)
                 ("4" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_odes_cat_hp formula-decl nil solution_odes_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (restrict const-decl "R" restrict nil)
    (hp const-decl "bool" interval_def ODEs)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (der_odes_cat_hp subtype
    "LAMBDA (s: (interval_def.hp(0))): solution_odes_props.fcat(solution_odes_props.k)(s)"
    "deriv_fun[(hp(0))]")))
 (der_odes_cat_hp_TCC2 0
  (der_odes_cat_hp_TCC2-1 nil 3901534063
   ("" (skeep*) (("" (lemma "hp_dd") (("" (inst -1 "0") nil nil)) nil))
    nil)
   ((hp_dd formula-decl nil interval_def ODEs)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (der_odes_cat_hp assuming
    "analysis@derivatives[(interval_def.hp(0))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (der_odes_cat_hp_TCC3 0
  (der_odes_cat_hp_TCC3-1 nil 3901534063
   ("" (skeep*)
    (("" (lemma "hp_noe") (("" (inst -1 "0") nil nil)) nil)) nil)
   ((hp_noe formula-decl nil interval_def ODEs)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (der_odes_cat_hp assuming
    "analysis@derivatives[(interval_def.hp(0))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (der_odes_cat_hp_TCC4 0
  (der_odes_cat_hp_TCC4-1 nil 3901534063
   ("" (skeep*)
    (("" (expand "derivable_odes?" -2)
      (("" (inst -2 "k")
        (("" (expand "derivable?" -2) (("" (inst -2 "t") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_odes? const-decl "bool" hp_expr nil)
    (derivable? const-decl "bool" derivatives analysis)
    (hp const-decl "bool" interval_def ODEs)
    (below type-eq-decl nil naturalnumbers nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (der_odes_cat_hp subtype "solution_odes_props.t"
    "{x | derivatives_def[(interval_def.hp(0))].derivable?(restrict[real, (interval_def.hp(0)), real].restrict(solution_odes_props.fs1(solution_odes_props.k)), x)}")))
 (der_odes_cat_hp_TCC5 0
  (der_odes_cat_hp_TCC5-1 nil 3901534063
   ("" (skeep*)
    (("" (split 2)
      (("1" (typepred "t" "T")
        (("1" (hide "--4" -5 -6) (("1" (grind) nil nil)) nil)) nil)
       ("2" (expand "derivable_odes?" -3)
        (("2" (inst -3 "k")
          (("2" (expand "derivable?" -3)
            (("2" (inst -3 "t-T") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (der_odes_cat_hp subtype
    "(number_fields.-)(solution_odes_props.t, solution_odes_props.T)"
    "{x | derivatives_def[(interval_def.hp(0))].derivable?(restrict[real, (interval_def.hp(0)), real].restrict(solution_odes_props.fs2(solution_odes_props.k)), x)}")))
 (der_odes_cat_hp 0
  (der_odes_cat_hp-1 nil 3901606863
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (label "cont" -3)
          (("" (hide "cont")
            (("" (skeep)
              (("" (expand "restrict" 1)
                (("" (expand "deriv" 1 1)
                  ((""
                    (with-tccs
                     (name "dfcat"
                           "(deriv(LAMBDA (s: (hp(0))): fcat(k)(s), t))"))
                    (("" (replace -1)
                      (("" (lemma "deriv_def[(hp(0))]")
                        (("1" (case "t < T")
                          (("1" (assert)
                            (("1"
                              (inst -2
                               "(LAMBDA (s: (hp(0))): fs1(k)(s))"
                               "dfcat" "t")
                              (("1"
                                (assert)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (expand "deriv" -2)
                                    (("1"
                                      (with-tccs
                                       (typepred
                                        " lim(NQ(LAMBDA (s: (hp(0))): fcat(k)(s), t), 0)"))
                                      (("1"
                                        (replace -3 -1)
                                        (("1"
                                          (hide -3)
                                          (("1"
                                            (expand "convergence")
                                            (("1"
                                              (expand "convergence")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst
                                                       -2
                                                       "epsilon")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst
                                                           1
                                                           "min(delta,T-t)")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               -4
                                                               "x")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "NQ")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "fcat"
                                                                       -4)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             -4
                                                             -5
                                                             -6
                                                             -2)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "t>T")
                            (("1" (assert)
                              (("1"
                                (inst
                                 -2
                                 "(LAMBDA (s: (hp(0))): fs2(k)(s))"
                                 "dfcat"
                                 "t-T")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide 3)
                                    (("1"
                                      (expand "deriv" -2)
                                      (("1"
                                        (with-tccs
                                         (typepred
                                          " lim(NQ(LAMBDA (s: (hp(0))): fcat(k)(s), t), 0)"))
                                        (("1"
                                          (replace -3 -1)
                                          (("1"
                                            (expand "convergence")
                                            (("1"
                                              (hide -3 -4 -5)
                                              (("1"
                                                (expand "convergence")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (split 2)
                                                    (("1"
                                                      (expand "adh" 1)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "e!1/2")
                                                          (("1"
                                                            (hide -)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "A"
                                                             1)
                                                            (("2"
                                                              (hide
                                                               -2
                                                               -4)
                                                              (("2"
                                                                (typepred
                                                                 "T")
                                                                (("2"
                                                                  (hide
                                                                   -2)
                                                                  (("2"
                                                                    (expand
                                                                     "hp")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst
                                                         -2
                                                         "epsilon")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "min(delta,t-T)/2")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "x")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "NQ")
                                                                    (("1"
                                                                      (expand
                                                                       "fcat"
                                                                       -4)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "x")
                                                                  (("2"
                                                                    (expand
                                                                     "A")
                                                                    (("2"
                                                                      (expand
                                                                       "hp")
                                                                      (("2"
                                                                        (typepred
                                                                         "T")
                                                                        (("2"
                                                                          (hide
                                                                           -8
                                                                           2)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -2
                                                               -4)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "NOT t = T")
                              (("1" (assert) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (inst
                                   -2
                                   "(LAMBDA (s: (hp(0))): fs1(k)(s))"
                                   "dfcat"
                                   "t")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide 4)
                                      (("2"
                                        (expand "deriv" -2)
                                        (("2"
                                          (with-tccs
                                           (typepred
                                            " lim(NQ(LAMBDA (s: (hp(0))): fcat(k)(s), t), 0)"))
                                          (("2"
                                            (replace -3 -1)
                                            (("2"
                                              (hide -3)
                                              (("2"
                                                (lemma "dd_noe")
                                                (("2"
                                                  (lemma
                                                   "derivable_continuous[(hp(0))]")
                                                  (("2"
                                                    (inst-cp
                                                     -1
                                                     "fs1(k)"
                                                     "t")
                                                    (("2"
                                                      (reveal "cont")
                                                      (("2"
                                                        (inst -1 "k")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (with-tccs
                                                             (name
                                                              "dfs1"
                                                              "deriv[(hp(0))](restrict[real, (hp(0)), real](fs1(k)), T)"))
                                                            (("2"
                                                              (with-tccs
                                                               (name
                                                                "dfs2"
                                                                "deriv[(hp(0))](restrict[real, (hp(0)), real](fs2(k)), 0)"))
                                                              (("2"
                                                                (lemma
                                                                 "deriv_def[(hp(0))]")
                                                                (("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "deriv"
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "deriv"
                                                                       -2)
                                                                      (("2"
                                                                        (with-tccs
                                                                         (typepred
                                                                          " lim(NQ(restrict[real, (hp(0)), real](fs2(k)), 0), 0)"))
                                                                        (("2"
                                                                          (with-tccs
                                                                           (typepred
                                                                            "lim(NQ(restrict[real, (hp(0)), real](fs1(k)), T), 0)"))
                                                                          (("2"
                                                                            (replace
                                                                             -3
                                                                             -2)
                                                                            (("2"
                                                                              (replace
                                                                               -4
                                                                               -1)
                                                                              (("2"
                                                                                (expand
                                                                                 "deriv"
                                                                                 -6)
                                                                                (("2"
                                                                                  (replace
                                                                                   -3
                                                                                   -6)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -4
                                                                                     -6)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -3
                                                                                       -4)
                                                                                      (("2"
                                                                                        (inst-cp
                                                                                         -5
                                                                                         "fs2(k)"
                                                                                         "t-T")
                                                                                        (("1"
                                                                                          (hide
                                                                                           -5)
                                                                                          (("1"
                                                                                            (split
                                                                                             -5)
                                                                                            (("1"
                                                                                              (split
                                                                                               -6)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -7)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -9
                                                                                                     -10)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "convergence")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "convergence")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "continuous?")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               3)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -10
                                                                                                                   "epsilon/4")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -6
                                                                                                                     "epsilon/4")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -4
                                                                                                                       "epsilon/4")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -2
                                                                                                                         "epsilon/4")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "epsilon/4")
                                                                                                                          (("2"
                                                                                                                            (skeep*)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "min(min(delta,delta!1),min(delta!2,min(delta!3,delta!4)))")
                                                                                                                              (("2"
                                                                                                                                (skeep)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -8
                                                                                                                                   "x")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -6
                                                                                                                                     "x")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -4
                                                                                                                                       "x")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -3
                                                                                                                                         "x+t")
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -12
                                                                                                                                           "x")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               -14)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "NQ")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "fcat")
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     " t+x <= T")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "restrict")
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "NOT t-T=0")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert
                                                                                                                                                                 :flush?
                                                                                                                                                                 t)
                                                                                                                                                                (("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   -3)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (grind)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           -)
                                                                                                                                          (("2"
                                                                                                                                            (typepred
                                                                                                                                             "t"
                                                                                                                                             "x")
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "hp"
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "A"
                                                                                                                                                 -3)
                                                                                                                                                (("2"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (typepred
                                                                                                                                         "x")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "A"
                                                                                                                                           -2)
                                                                                                                                          (("2"
                                                                                                                                            (typepred
                                                                                                                                             "t")
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "hp")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "NQ")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "restrict")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -14
                                                                                                                                                       "x")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (hide
                                                                                                                                                           -16)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "fcat"
                                                                                                                                                             -14)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (expand
                                                                                                                                     "A"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "hp"
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -3
                                                                                                                                         -4)
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -4
                                                                                                                                           "x")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -9
                                                                                                                                             "x")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "NQ")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "restrict")
                                                                                                                                                  (("2"
                                                                                                                                                    (hide
                                                                                                                                                     -11)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "fcat")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (-9
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "derivable_odes?"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "k")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "derivable?"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "t")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (-10
                                                                                                1))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "derivable_odes?"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "k")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "derivable?"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "t-T")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "hp"
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "hp_noe")
                          (("2" (inst -1 "0") nil nil)) nil)
                         ("3" (lemma "hp_dd")
                          (("3" (inst -1 "0") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dd? const-decl "bool" hp_expr nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (hp_dd formula-decl nil interval_def ODEs)
    (hp_noe formula-decl nil interval_def ODEs)
    (lim const-decl "{l: real | convergence(f, x0, l)}"
     lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (delta skolem-const-decl "posreal" solution_odes_props nil)
    (T skolem-const-decl "(hp(0))" solution_odes_props nil)
    (t skolem-const-decl "(hp(0))" solution_odes_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (fcat skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     solution_odes_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_is_complete name-judgement "metric_complete" real_topology
     metric_space)
    (fullset_is_clopen name-judgement "clopen" real_topology
     metric_space)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (derivable_continuous formula-decl nil derivatives_def analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (x skolem-const-decl "(A(t))" solution_odes_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dd_noe formula-decl nil hp_expr nil)
    (x skolem-const-decl "(A(t - T))" solution_odes_props nil)
    (delta skolem-const-decl "posreal" solution_odes_props nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (e!1 skolem-const-decl "posreal" solution_odes_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (deriv_def formula-decl nil derivatives_def analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (der_odes_cat_ci_TCC1 0
  (der_odes_cat_ci_TCC1-1 nil 3901534184 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (> const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (der_odes_cat_ci subtype
    "(number_fields.+)(solution_odes_props.b, solution_odes_props.T)"
    "{b: reals.real | reals.<(0, b)}")))
 (der_odes_cat_ci_TCC2 0
  (der_odes_cat_ci_TCC2-1 nil 3901534184
   ("" (skeep) (("" (typepred "T" "b") (("" (grind) nil nil)) nil))
    nil)
   ((> const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (der_odes_cat_ci subtype
    "(number_fields.+)(solution_odes_props.T, solution_odes_props.b)"
    "{b: reals.real | reals.<(0, b)}")))
 (der_odes_cat_ci_TCC3 0
  (der_odes_cat_ci_TCC3-1 nil 3901534184
   ("" (skeep*)
    (("" (lemma "diff_odes_cat_ci")
      (("" (inst?)
        (("" (beta)
          (("" (split -1)
            (("1" (expand "derivable_odes?" -1)
              (("1" (inst -1 "k")
                (("1"
                  (case "(restrict[real, (closed_interval(0, b + T)), real]
               (LAMBDA (t: real):
                  IF t <= T THEN fs1(k)(t) ELSE fs2(k)(t - T) ENDIF)) = (restrict[real, (closed_interval(0, T + b)), real](fcat(k)))")
                  (("1" (assert) nil nil)
                   ("2" (hide 2)
                    (("2" (decompose-equality 1)
                      (("1" (expand "restrict" 1)
                        (("1" (assert)
                          (("1" (replace -2 1) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -)
                        (("2" (typepred "T" "b")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -)
                    (("3" (hide 2)
                      (("3" (typepred "T" "b") (("3" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide -)
                    (("4" (hide 2)
                      (("4" (typepred "T" "b") (("4" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2"
              (case "fs1 = (LAMBDA (k: below(length(ode))): fs1(k))")
              (("1" (assert) nil nil)
               ("2" (decompose-equality 1) nil nil))
              nil)
             ("3"
              (case "fs2 = (LAMBDA (k: below(length(ode))): fs2(k))")
              (("1" (assert) nil nil)
               ("2" (decompose-equality 1) nil nil))
              nil)
             ("4" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_odes_cat_ci formula-decl nil solution_odes_props nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (restrict const-decl "R" restrict nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T skolem-const-decl "(hp(0))" solution_odes_props nil)
    (b skolem-const-decl "{b: (hp(0)) | b > 0}" solution_odes_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (der_odes_cat_ci subtype
    "restrict[real, (interval_def.closed_interval(0, (number_fields.+)(solution_odes_props.T, solution_odes_props.b))), real].restrict(solution_odes_props.fcat(solution_odes_props.k))"
    "deriv_fun[(closed_interval(0, T + b))]")))
 (der_odes_cat_ci_TCC4 0
  (der_odes_cat_ci_TCC4-1 nil 3901534184
   ("" (skeep*)
    (("" (lemma "dd_deriv_domain")
      (("" (inst -1 "closed_interval(0,T+b)")
        (("1" (expand "dd?" 1)
          (("1" (flatten)
            (("1" (inst 1 "T+b")
              (("1" (assert)
                (("1" (hide -)
                  (("1" (hide 2 3)
                    (("1" (typepred "T" "b") (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide -)
          (("2" (hide 2)
            (("2" (typepred "T" "b") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd_deriv_domain formula-decl nil hp_expr nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T skolem-const-decl "(hp(0))" solution_odes_props nil)
    (b skolem-const-decl "{b: (hp(0)) | b > 0}" solution_odes_props
     nil)
    (> const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil) (dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (der_odes_cat_ci assuming
    "analysis@derivatives[(interval_def.closed_interval(0, (number_fields.+)(solution_odes_props.T, solution_odes_props.b)))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (der_odes_cat_ci_TCC5 0
  (der_odes_cat_ci_TCC5-1 nil 3901534184
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "dd_noe")
        (("" (inst -1 "closed_interval(0,T+b)")
          (("1" (expand "dd?" 1)
            (("1" (flatten)
              (("1" (inst 1 "T+b")
                (("1" (hide-all-but 1)
                  (("1" (typepred "T" "b") (("1" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (typepred "T" "b") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (dd? const-decl "bool" hp_expr nil) (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (hp const-decl "bool" interval_def ODEs)
    (> const-decl "bool" reals nil)
    (b skolem-const-decl "{b: (hp(0)) | b > 0}" solution_odes_props
     nil)
    (T skolem-const-decl "(hp(0))" solution_odes_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dd_noe formula-decl nil hp_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (der_odes_cat_ci assuming
    "analysis@derivatives[(interval_def.closed_interval(0, (number_fields.+)(solution_odes_props.T, solution_odes_props.b)))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (der_odes_cat_ci_TCC6 0
  (der_odes_cat_ci_TCC6-1 nil 3901534184
   ("" (skeep*)
    (("" (split 1)
      (("1" (typepred "t")
        (("1" (hide -2 -3 -4 -5) (("1" (grind) nil nil)) nil)) nil)
       ("2" (expand "derivable_odes?" -2)
        (("2" (inst -2 "k")
          (("2" (expand "derivable?" -2) (("2" (inst -2 "t") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (hp const-decl "bool" interval_def ODEs)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (der_odes_cat_ci subtype "solution_odes_props.t"
    "{x | derivatives_def[(interval_def.hp(0))].derivable?(restrict[real, (interval_def.hp(0)), real].restrict(solution_odes_props.fs1(solution_odes_props.k)), x)}")))
 (der_odes_cat_ci_TCC7 0
  (der_odes_cat_ci_TCC7-1 nil 3901534184
   ("" (skeep*) (("" (lemma "hp_dd") (("" (inst -1 "0") nil nil)) nil))
    nil)
   ((hp_dd formula-decl nil interval_def ODEs)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (der_odes_cat_ci assuming
    "analysis@derivatives_def[(interval_def.hp(0))].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (der_odes_cat_ci_TCC8 0
  (der_odes_cat_ci_TCC8-1 nil 3901534184
   ("" (skeep*)
    (("" (lemma "hp_noe") (("" (inst -1 "0") nil nil)) nil)) nil)
   ((hp_noe formula-decl nil interval_def ODEs)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (der_odes_cat_ci assuming
    "analysis@derivatives_def[(interval_def.hp(0))].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (der_odes_cat_ci_TCC9 0
  (der_odes_cat_ci_TCC9-1 nil 3901534184
   ("" (skeep*)
    (("" (split 2)
      (("1" (hide -1 -2 -3 -4)
        (("1" (typepred "t" "T") (("1" (grind) nil nil)) nil)) nil)
       ("2" (expand "derivable_odes?" -3)
        (("2" (inst -3 "k")
          (("2" (expand "derivable?" -3)
            (("2" (inst -3 "t-T") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (der_odes_cat_ci subtype
    "(number_fields.-)(solution_odes_props.t, solution_odes_props.T)"
    "{x | derivatives_def[(interval_def.closed_interval(0, solution_odes_props.b))].derivable?(restrict[real, (interval_def.closed_interval(0, solution_odes_props.b)), real].restrict(solution_odes_props.fs2(solution_odes_props.k)), x)}")))
 (der_odes_cat_ci_TCC10 0
  (der_odes_cat_ci_TCC10-1 nil 3901534184
   ("" (skeep*)
    (("" (lemma "dd_deriv_domain")
      (("" (inst -1 "closed_interval(0,b)") nil nil)) nil))
    nil)
   ((dd_deriv_domain formula-decl nil hp_expr nil)
    (> const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil) (dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (der_odes_cat_ci assuming
    "analysis@derivatives_def[(interval_def.closed_interval(0, solution_odes_props.b))].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (der_odes_cat_ci_TCC11 0
  (der_odes_cat_ci_TCC11-1 nil 3901534184
   ("" (skeep*)
    (("" (lemma "dd_noe")
      (("" (inst -1 "closed_interval(0,b)") nil nil)) nil))
    nil)
   ((dd_noe formula-decl nil hp_expr nil)
    (> const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil) (dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (der_odes_cat_ci assuming
    "analysis@derivatives_def[(interval_def.closed_interval(0, solution_odes_props.b))].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (der_odes_cat_ci 0
  (der_odes_cat_ci-1 nil 3901610618
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (label "cont" -3)
          (("" (hide "cont")
            (("" (skeep)
              (("" (expand "restrict" 1)
                (("" (expand "deriv" 1 1)
                  ((""
                    (with-tccs
                     (name "dfcat"
                           "(deriv(LAMBDA (s: (closed_interval(0,T+b))): fcat(k)(s), t))"))
                    (("" (replace -1)
                      (("" (lemma "deriv_def[(hp(0))]")
                        (("1" (case "t < T")
                          (("1" (assert)
                            (("1"
                              (inst -2
                               "(LAMBDA (s: (hp(0))): fs1(k)(s))"
                               "dfcat" "t")
                              (("1"
                                (assert)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (expand "deriv" -2)
                                    (("1"
                                      (with-tccs
                                       (typepred
                                        "lim(NQ(LAMBDA (s: (closed_interval(0, T + b))): fcat(k)(s), t), 0)"))
                                      (("1"
                                        (replace -3 -1)
                                        (("1"
                                          (hide -3)
                                          (("1"
                                            (expand "convergence")
                                            (("1"
                                              (expand "convergence")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (expand "adh" 1)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst
                                                         1
                                                         "e!1/2")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "A"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "hp"
                                                             1)
                                                            (("2"
                                                              (hide -)
                                                              (("2"
                                                                (grind)
                                                                (("2"
                                                                  (typepred
                                                                   "t")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst
                                                       -2
                                                       "epsilon")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst
                                                           1
                                                           "min(delta,T-t)")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               -4
                                                               "x")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "NQ")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "fcat"
                                                                       -4)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "A"
                                                                 1)
                                                                (("2"
                                                                  (typepred
                                                                   "t"
                                                                   "x")
                                                                  (("2"
                                                                    (expand
                                                                     "A"
                                                                     -3)
                                                                    (("2"
                                                                      (hide
                                                                       -10
                                                                       -9
                                                                       -8
                                                                       2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             -4
                                                             -5
                                                             -6
                                                             -2)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "t>T")
                            (("1" (assert)
                              (("1"
                                (hide -2)
                                (("1"
                                  (lemma
                                   "deriv_def[(closed_interval(0,b))]")
                                  (("1"
                                    (inst
                                     -1
                                     "(LAMBDA (s: (closed_interval(0,b))): fs2(k)(s))"
                                     "dfcat"
                                     "t-T")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 3)
                                        (("1"
                                          (expand "deriv" -2)
                                          (("1"
                                            (with-tccs
                                             (typepred
                                              "lim(NQ(LAMBDA (s: (closed_interval(0, T + b))): fcat(k)(s), t), 0)"))
                                            (("1"
                                              (replace -3 -1)
                                              (("1"
                                                (expand "convergence")
                                                (("1"
                                                  (hide -3 -4 -5)
                                                  (("1"
                                                    (expand
                                                     "convergence")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (expand
                                                           "adh"
                                                           1)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "-min(abs(e!1),t-T)/2")
                                                              (("1"
                                                                (hide
                                                                 -2
                                                                 -4)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -2
                                                                   -4)
                                                                  (("2"
                                                                    (expand
                                                                     "A"
                                                                     1)
                                                                    (("2"
                                                                      (typepred
                                                                       "T"
                                                                       "t")
                                                                      (("2"
                                                                        (hide
                                                                         -3)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -2
                                                             "epsilon")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (typepred
                                                                 "t")
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "min(delta,t-T)/2")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst
                                                                       -5
                                                                       "x")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "NQ")
                                                                          (("1"
                                                                            (expand
                                                                             "fcat"
                                                                             -5)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "x")
                                                                        (("2"
                                                                          (expand
                                                                           "A")
                                                                          (("2"
                                                                            (typepred
                                                                             "T")
                                                                            (("2"
                                                                              (hide
                                                                               -9
                                                                               2)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -3
                                                                     -5)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "dd_noe")
                                    (("2"
                                      (inst -1 "closed_interval(0,b)")
                                      nil
                                      nil))
                                    nil)
                                   ("3"
                                    (lemma "dd_deriv_domain")
                                    (("3"
                                      (inst -1 "closed_interval(0,b)")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "NOT t = T")
                              (("1" (assert) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (inst
                                   -2
                                   "(LAMBDA (s: (hp(0))): fs1(k)(s))"
                                   "dfcat"
                                   "t")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide 4)
                                      (("2"
                                        (expand "deriv" -2)
                                        (("2"
                                          (with-tccs
                                           (typepred
                                            " lim(NQ(LAMBDA (s: (closed_interval(0, T + b))): fcat(k)(s), t), 0)"))
                                          (("2"
                                            (replace -3 -1)
                                            (("2"
                                              (hide -3)
                                              (("2"
                                                (lemma
                                                 "derivable_continuous[(hp(0))]")
                                                (("2"
                                                  (inst-cp
                                                   -1
                                                   "fs1(k)"
                                                   "t")
                                                  (("2"
                                                    (reveal "cont")
                                                    (("2"
                                                      (inst -1 "k")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (with-tccs
                                                           (name
                                                            "dfs1"
                                                            "deriv[(hp(0))](restrict[real, (hp(0)), real](fs1(k)), T)"))
                                                          (("2"
                                                            (with-tccs
                                                             (name
                                                              "dfs2"
                                                              "deriv[(closed_interval(0, b))]
           (restrict[real, (closed_interval(0, b)), real](fs2(k)), 0)"))
                                                            (("2"
                                                              (lemma
                                                               "deriv_def[(hp(0))]")
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "deriv"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "deriv"
                                                                     -2)
                                                                    (("2"
                                                                      (with-tccs
                                                                       (typepred
                                                                        "lim(NQ(restrict[real, (closed_interval(0, b)), real](fs2(k)), 0), 0)"))
                                                                      (("2"
                                                                        (with-tccs
                                                                         (typepred
                                                                          "lim(NQ(restrict[real, (hp(0)), real](fs1(k)), T), 0)"))
                                                                        (("2"
                                                                          (replace
                                                                           -3
                                                                           -2)
                                                                          (("2"
                                                                            (replace
                                                                             -4
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "deriv"
                                                                               -6)
                                                                              (("2"
                                                                                (replace
                                                                                 -3
                                                                                 -6)
                                                                                (("2"
                                                                                  (replace
                                                                                   -4
                                                                                   -6)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -3
                                                                                     -4)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -5)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "derivable_continuous[(closed_interval(0, b))]")
                                                                                        (("1"
                                                                                          (inst-cp
                                                                                           -1
                                                                                           "fs2(k)"
                                                                                           "t-T")
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -6)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -9
                                                                                                     -10
                                                                                                     -11)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "convergence")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "convergence")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "continuous?")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               3)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "adh"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (skeep)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "e!1/2")
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -)
                                                                                                                      (("1"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "A"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "t")
                                                                                                                          (("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -10
                                                                                                                   "epsilon/4")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -6
                                                                                                                     "epsilon/4")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -4
                                                                                                                       "epsilon/4")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -2
                                                                                                                         "epsilon/4")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "epsilon/4")
                                                                                                                          (("2"
                                                                                                                            (skeep*)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "b")
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "t")
                                                                                                                                (("2"
                                                                                                                                  (case
                                                                                                                                   "t = T+b")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (expand
                                                                                                                                     "closed_interval"
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (case
                                                                                                                                       "NOT t < T +b")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (inst
                                                                                                                                         2
                                                                                                                                         "min(b,min(min(delta,delta!1),min(delta!2,min(delta!3,delta!4))))")
                                                                                                                                        (("1"
                                                                                                                                          (skeep)
                                                                                                                                          (("1"
                                                                                                                                            (typepred
                                                                                                                                             "x")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "A"
                                                                                                                                               -2)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "hp"
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -18
                                                                                                                                                   "x")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -14
                                                                                                                                                     "x")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -12
                                                                                                                                                       "x")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -10
                                                                                                                                                         "x")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -9
                                                                                                                                                           "x+t")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "NQ")
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "fcat")
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   " t+x <= T")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "restrict")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (case
                                                                                                                                                                           "NOT t-T=0")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (replace
                                                                                                                                                                             -1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert
                                                                                                                                                                               :flush?
                                                                                                                                                                               t)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -3)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (grind)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (expand
                                                                                                                                                             "hp"
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (expand
                                                                                                                                                           "closed_interval"
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "NQ")
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "restrict")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "fcat")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (expand
                                                                                                                                                       "A"
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "closed_interval"
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "hp"
                                                                                                                                                             -5)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "restrict")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "NQ")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "fcat")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (expand
                                                                                                                                                     "A"
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "closed_interval"
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "NQ")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "restrict")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           -)
                                                                                                                                          (("2"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "derivable_odes?"
                                                                                                   -8)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -8
                                                                                                     "k")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "derivable?"
                                                                                                       -8)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -8
                                                                                                         "t")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "derivable_odes?"
                                                                                                 -9)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -9
                                                                                                   "k")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "derivable?"
                                                                                                     -9)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -9
                                                                                                       "t-T")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (-7
                                                                                              +))
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "dd_noe")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "closed_interval(0,b)")
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (lemma
                                                                                           "dd_deriv_domain")
                                                                                          (("3"
                                                                                            (inst
                                                                                             -1
                                                                                             "closed_interval(0,b)")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "hp_noe")
                          (("2" (inst -1 "0") nil nil)) nil)
                         ("3" (lemma "hp_dd")
                          (("3" (inst -1 "0") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dd? const-decl "bool" hp_expr nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (derivable? const-decl "bool" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (hp_dd formula-decl nil interval_def ODEs)
    (hp_noe formula-decl nil interval_def ODEs)
    (lim const-decl "{l: real | convergence(f, x0, l)}"
     lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_is_complete name-judgement "metric_complete" real_topology
     metric_space)
    (fullset_is_clopen name-judgement "clopen" real_topology
     metric_space)
    (fullset const-decl "set" sets nil)
    (e!1 skolem-const-decl "posreal" solution_odes_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (t skolem-const-decl "(closed_interval(0, T + b))"
     solution_odes_props nil)
    (b skolem-const-decl "{b: (hp(0)) | b > 0}" solution_odes_props
     nil)
    (T skolem-const-decl "(hp(0))" solution_odes_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (delta skolem-const-decl "posreal" solution_odes_props nil)
    (x skolem-const-decl "(A(t))" solution_odes_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (fcat skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     solution_odes_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (e!1 skolem-const-decl "posreal" solution_odes_props nil)
    (x skolem-const-decl "(A(t))" solution_odes_props nil)
    (delta!4 skolem-const-decl "posreal" solution_odes_props nil)
    (delta!3 skolem-const-decl "posreal" solution_odes_props nil)
    (delta!2 skolem-const-decl "posreal" solution_odes_props nil)
    (delta!1 skolem-const-decl "posreal" solution_odes_props nil)
    (delta skolem-const-decl "posreal" solution_odes_props nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (derivable_continuous formula-decl nil derivatives_def analysis)
    (delta skolem-const-decl "posreal" solution_odes_props nil)
    (x skolem-const-decl "(A(t - T))" solution_odes_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (e!1 skolem-const-decl "posreal" solution_odes_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (dd_noe formula-decl nil hp_expr nil)
    (dd_deriv_domain formula-decl nil hp_expr nil)
    (deriv_def formula-decl nil derivatives_def analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (solution_odes_deriv_at_T_hp_TCC1 0
  (solution_odes_deriv_at_T_hp_TCC1-1 nil 3901610295
   ("" (subtype-tcc) nil nil) ((dd? const-decl "bool" hp_expr nil)) nil
   (solution_odes_deriv_at_T_hp subtype "interval_def.hp(0)"
    "(hp_expr.dd?)")))
 (solution_odes_deriv_at_T_hp_TCC2 0
  (solution_odes_deriv_at_T_hp_TCC1-1 nil 3901610244
   ("" (skeep*)
    (("" (expand "solution_odes?" -1)
      (("" (flatten)
        (("" (expand "derivable_odes?" -1)
          (("" (inst -1 "k")
            (("" (expand "derivable?" -1) (("" (inst -1 "T") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((solution_odes? const-decl "bool" hp_expr nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (derivable? const-decl "bool" derivatives analysis)
    (hp const-decl "bool" interval_def ODEs)
    (below type-eq-decl nil naturalnumbers nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (solution_odes_deriv_at_T_hp subtype "solution_odes_props.T"
    "{x | derivatives_def[(interval_def.hp(0))].derivable?(restrict[real, (interval_def.hp(0)), real].restrict(solution_odes_props.fs1(solution_odes_props.k)), x)}")))
 (solution_odes_deriv_at_T_hp_TCC3 0
  (solution_odes_deriv_at_T_hp_TCC2-1 nil 3901610244
   ("" (skeep*) (("" (lemma "hp_dd") (("" (inst -1 "0") nil nil)) nil))
    nil)
   ((hp_dd formula-decl nil interval_def ODEs)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (solution_odes_deriv_at_T_hp assuming
    "analysis@derivatives_def[(interval_def.hp(0))].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (solution_odes_deriv_at_T_hp_TCC4 0
  (solution_odes_deriv_at_T_hp_TCC3-1 nil 3901610244
   ("" (skeep*)
    (("" (lemma "hp_noe") (("" (inst -1 "0") nil nil)) nil)) nil)
   ((hp_noe formula-decl nil interval_def ODEs)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (solution_odes_deriv_at_T_hp assuming
    "analysis@derivatives_def[(interval_def.hp(0))].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (solution_odes_deriv_at_T_hp_TCC5 0
  (solution_odes_deriv_at_T_hp_TCC4-1 nil 3901610244
   ("" (skeep*)
    (("" (split 1)
      (("1" (grind) nil nil)
       ("2" (expand "solution_odes?" -2)
        (("2" (flatten)
          (("2" (expand "derivable_odes?" -2)
            (("2" (inst -2 "k")
              (("2" (expand "derivable?" -2)
                (("2" (inst -2 "0") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (hp const-decl "bool" interval_def ODEs)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (solution_odes_deriv_at_T_hp subtype "0"
    "{x | derivatives_def[(interval_def.hp(0))].derivable?(restrict[real, (interval_def.hp(0)), real].restrict(solution_odes_props.fs2(solution_odes_props.k)), x)}")))
 (solution_odes_deriv_at_T_hp 0
  (solution_odes_deriv_at_T_hp-1 nil 3901610248
   ("" (skeep*)
    (("" (case " fs2(k)(0) = fs1(k)(T)")
      (("1" (assert)
        (("1" (expand "solution_odes?" -)
          (("1" (flatten)
            (("1" (inst -7 "0" "env_at_t(ode,fs1,env)(T)")
              (("1" (expand "sol_at_t?" -7)
                (("1" (inst -7 "k")
                  (("1" (inst -4 "T" "env_at_t(ode,fs1,env)(T)")
                    (("1" (expand "sol_at_t?" -4)
                      (("1" (inst -4 "k")
                        (("1" (assert)
                          (("1" (expand "deriv" -)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "solution_odes?")
          (("2" (flatten)
            (("2" (expand "env_at_t?" -5)
              (("2" (inst -5 "k")
                (("2" (replace -5 1)
                  (("2" (typepred "   env_at_t(ode, fs1, env)(T)")
                    (("2" (expand "env_at_t?" -1)
                      (("2" (flatten)
                        (("2" (inst -2 "k") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((hp const-decl "bool" interval_def ODEs)
    (below type-eq-decl nil naturalnumbers nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (T skolem-const-decl "(hp(0))" solution_odes_props nil)
    (env skolem-const-decl "Environment" solution_odes_props nil)
    (fs1 skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     solution_odes_props nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (fs2 skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     solution_odes_props nil)
    (ode skolem-const-decl "ODEs" solution_odes_props nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (solution_odes_deriv_at_T_ci_TCC1 0
  (solution_odes_deriv_at_T_ci_TCC1-1 nil 3901619467
   ("" (skeep*)
    (("" (expand "dd?" 1)
      (("" (flatten) (("" (inst 1 "b") nil nil)) nil)) nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (hp const-decl "bool" interval_def ODEs)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (solution_odes_deriv_at_T_ci subtype
    "interval_def.closed_interval(0, solution_odes_props.b)"
    "(hp_expr.dd?)")))
 (solution_odes_deriv_at_T_ci_TCC2 0
  (solution_odes_deriv_at_T_ci_TCC2-1 nil 3901619467
   ("" (skeep*)
    (("" (expand "solution_odes?")
      (("" (flatten)
        (("" (expand "derivable_odes?")
          (("" (inst -1 "k")
            (("" (expand "derivable?" -1) (("" (inst -1 "T") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((solution_odes? const-decl "bool" hp_expr nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (derivable? const-decl "bool" derivatives analysis)
    (hp const-decl "bool" interval_def ODEs)
    (below type-eq-decl nil naturalnumbers nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (solution_odes_deriv_at_T_ci subtype "solution_odes_props.T"
    "{x | derivatives_def[(interval_def.hp(0))].derivable?(restrict[real, (interval_def.hp(0)), real].restrict(solution_odes_props.fs1(solution_odes_props.k)), x)}")))
 (solution_odes_deriv_at_T_ci_TCC3 0
  (solution_odes_deriv_at_T_ci_TCC3-1 nil 3901619467
   ("" (skeep*) (("" (lemma "hp_dd") (("" (inst -1 "0") nil nil)) nil))
    nil)
   ((hp_dd formula-decl nil interval_def ODEs)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (solution_odes_deriv_at_T_ci assuming
    "analysis@derivatives_def[(interval_def.hp(0))].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (solution_odes_deriv_at_T_ci_TCC4 0
  (solution_odes_deriv_at_T_ci_TCC4-1 nil 3901619467
   ("" (skeep*)
    (("" (lemma "hp_noe") (("" (inst -1 "0") nil nil)) nil)) nil)
   ((hp_noe formula-decl nil interval_def ODEs)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (solution_odes_deriv_at_T_ci assuming
    "analysis@derivatives_def[(interval_def.hp(0))].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (solution_odes_deriv_at_T_ci_TCC5 0
  (solution_odes_deriv_at_T_ci_TCC5-1 nil 3901619467
   ("" (skeep*)
    (("" (split 1)
      (("1" (grind) nil nil)
       ("2" (expand "solution_odes?" -2)
        (("2" (flatten)
          (("2" (expand "derivable_odes?" -2)
            (("2" (inst -2 "k")
              (("2" (expand "derivable?" -2)
                (("2" (inst -2 "0") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (solution_odes_deriv_at_T_ci subtype "0"
    "{x | derivatives_def[(interval_def.closed_interval(0, solution_odes_props.b))].derivable?(restrict[real, (interval_def.closed_interval(0, solution_odes_props.b)), real].restrict(solution_odes_props.fs2(solution_odes_props.k)), x)}")))
 (solution_odes_deriv_at_T_ci_TCC6 0
  (solution_odes_deriv_at_T_ci_TCC6-1 nil 3901619467
   ("" (skeep*)
    (("" (lemma "dd_deriv_domain")
      (("" (inst -1 "closed_interval(0,b)") nil nil)) nil))
    nil)
   ((dd_deriv_domain formula-decl nil hp_expr nil)
    (> const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil) (dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (solution_odes_deriv_at_T_ci assuming
    "analysis@derivatives_def[(interval_def.closed_interval(0, solution_odes_props.b))].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (solution_odes_deriv_at_T_ci_TCC7 0
  (solution_odes_deriv_at_T_ci_TCC7-1 nil 3901619467
   ("" (skeep*)
    (("" (lemma "dd_noe")
      (("" (inst -1 "(closed_interval(0,b))") nil nil)) nil))
    nil)
   ((dd_noe formula-decl nil hp_expr nil)
    (> const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil) (dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (solution_odes_deriv_at_T_ci assuming
    "analysis@derivatives_def[(interval_def.closed_interval(0, solution_odes_props.b))].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (solution_odes_deriv_at_T_ci 0
  (solution_odes_deriv_at_T_ci-1 nil 3901619915
   ("" (skeep*)
    (("" (case " fs2(k)(0) = fs1(k)(T)")
      (("1" (assert)
        (("1" (expand "solution_odes?" -)
          (("1" (flatten)
            (("1" (inst -7 "0" "env_at_t(ode,fs1,env)(T)")
              (("1" (expand "sol_at_t?" -7)
                (("1" (inst -7 "k")
                  (("1" (inst -4 "T" "env_at_t(ode,fs1,env)(T)")
                    (("1" (expand "sol_at_t?" -4)
                      (("1" (inst -4 "k")
                        (("1" (assert)
                          (("1" (expand "deriv" -)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "solution_odes?")
          (("2" (flatten)
            (("2" (expand "env_at_t?" -5)
              (("2" (inst -5 "k")
                (("2" (replace -5 1)
                  (("2" (typepred "   env_at_t(ode, fs1, env)(T)")
                    (("2" (expand "env_at_t?" -1)
                      (("2" (flatten)
                        (("2" (inst -2 "k") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((hp const-decl "bool" interval_def ODEs)
    (below type-eq-decl nil naturalnumbers nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (T skolem-const-decl "(hp(0))" solution_odes_props nil)
    (env skolem-const-decl "Environment" solution_odes_props nil)
    (fs1 skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     solution_odes_props nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (fs2 skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     solution_odes_props nil)
    (ode skolem-const-decl "ODEs" solution_odes_props nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (> const-decl "bool" reals nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (solution_odes_hp_conc 0
  (j "j" 3901108211
   ("" (skeep*)
    (("" (skoletin)
      (("" (flatten)
        (("" (expand "solution_odes?" 1)
          (("" (lemma "solution_odes_deriv_at_T_hp")
            (("" (inst?)
              (("" (assert)
                ((""
                  (case "NOT derivable_odes?(hp(0), length(ode))(fcat)")
                  (("1" (hide 2)
                    (("1" (lemma "diff_odes_cat_hp")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (assert)
                            (("1" (expand "solution_odes?" -2)
                              (("1"
                                (expand "solution_odes?" -3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "fs1 = (LAMBDA (k: below(length(ode))): fs1(k))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "fs2 =  (LAMBDA (k: below(length(ode))): fs2(k))")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (decompose-equality 1)
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (decompose-equality 1)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2"
                      (case "NOT env_at_t?(ode, fcat, env, 0)(env)")
                      (("1" (hide 2)
                        (("1" (expand "env_at_t?")
                          (("1" (skeep)
                            (("1" (expand "fcat" 1)
                              (("1"
                                (typepred "T")
                                (("1"
                                  (expand "hp" -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "solution_odes?" -4)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "env_at_t?" -5)
                                          (("1" (inst -5 "k") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (skeep)
                          (("2" (expand "sol_at_t?" 1)
                            (("2" (skeep)
                              (("2"
                                (lemma "der_odes_cat_hp")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "t")
                                      (("2"
                                        (inst -2 "t")
                                        (("2"
                                          (expand "solution_odes?" -)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (case
                                               "fs2 =  (LAMBDA (k: below(length(ode))): fs2(k))")
                                              (("1"
                                                (case
                                                 "fs1 = (LAMBDA (k: below(length(ode))): fs1(k))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -4)
                                                    (("1"
                                                      (inst -1 "k")
                                                      (("1"
                                                        (expand
                                                         "restrict"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "fcat"
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (typepred
                                                                 "t")
                                                                (("1"
                                                                  (case
                                                                   "t <=T")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (typepred
                                                                       "env_1")
                                                                      (("1"
                                                                        (inst
                                                                         -13
                                                                         "t"
                                                                         "env_1")
                                                                        (("1"
                                                                          (expand
                                                                           "sol_at_t?"
                                                                           -13)
                                                                          (("1"
                                                                            (inst
                                                                             -13
                                                                             "k")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -13
                                                                                 1
                                                                                 rl)
                                                                                (("1"
                                                                                  (expand
                                                                                   "deriv"
                                                                                   1
                                                                                   2)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "env_at_t?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -2
                                                                                     "k!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "fcat"
                                                                                       -2)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "env_1")
                                                                      (("2"
                                                                        (lemma
                                                                         "env_at_t_shift")
                                                                        (("2"
                                                                          (inst
                                                                           -16
                                                                           "t-T"
                                                                           "env_1")
                                                                          (("1"
                                                                            (expand
                                                                             "sol_at_t?"
                                                                             -16)
                                                                            (("1"
                                                                              (inst
                                                                               -16
                                                                               "k")
                                                                              (("1"
                                                                                (replace
                                                                                 -16
                                                                                 2
                                                                                 rl)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "deriv"
                                                                                     2
                                                                                     2)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "env_at_t?"
                                                                             1)
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "env_at_t?"
                                                                                 -2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "env_at_t(ode, fs1, env)(T)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "env_at_t?"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "i")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -5
                                                                                               "i")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "env_at_t?"
                                                                                 -2)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -3
                                                                                     "k!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "fcat"
                                                                                         -3)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (decompose-equality
                                                   1)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (decompose-equality 1)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dd? const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (diff_odes_cat_hp formula-decl nil solution_odes_props nil)
    (fcat skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     solution_odes_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (env_1 skolem-const-decl "(env_at_t?(ode, fcat, env, t))"
     solution_odes_props nil)
    (t skolem-const-decl "(hp(0))" solution_odes_props nil)
    (env skolem-const-decl "Environment" solution_odes_props nil)
    (fs1 skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     solution_odes_props nil)
    (ode skolem-const-decl "ODEs" solution_odes_props nil)
    (T skolem-const-decl "(hp(0))" solution_odes_props nil)
    (fs2 skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     solution_odes_props nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (env_at_t_shift formula-decl nil solution_odes_props nil)
    (restrict const-decl "R" restrict nil)
    (der_odes_cat_hp formula-decl nil solution_odes_props nil)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (solution_odes_deriv_at_T_hp formula-decl nil solution_odes_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak)
  (solution_odes_hp_conc-1 nil 3901105165
   ("" (skeep)
    (("" (skoletin) (("" (flatten) (("" (postpone) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (solution_odes_ci_conc_TCC1 0
  (solution_odes_ci_conc_TCC4-1 nil 3901093487
   ("" (skeep)
    (("" (expand "dd?" 1)
      (("" (flatten)
        (("" (inst 1 "T+b")
          (("" (assert)
            (("" (typepred "T" "b")
              (("" (expand "hp") (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (hp const-decl "bool" interval_def ODEs)
    (b skolem-const-decl "{b: (hp(0)) | b > 0}" solution_odes_props
     nil)
    (T skolem-const-decl "(hp(0))" solution_odes_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (solution_odes_ci_conc subtype
    "interval_def.closed_interval(0, (number_fields.+)(solution_odes_props.b, solution_odes_props.T))"
    "(hp_expr.dd?)")))
 (solution_odes_ci_conc 0
  (solution_odes_ci_conc-1 nil 3901621089
   ("" (skeep*)
    (("" (skoletin)
      (("" (flatten)
        (("" (expand "solution_odes?" 1)
          (("" (lemma "solution_odes_deriv_at_T_ci")
            (("" (inst?)
              (("" (assert)
                ((""
                  (case "NOT derivable_odes?(closed_interval(0, T + b), length(ode))(fcat)")
                  (("1" (hide 2)
                    (("1" (lemma "diff_odes_cat_ci")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (assert)
                            (("1" (expand "solution_odes?" -2)
                              (("1"
                                (expand "solution_odes?" -3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "fs1 = (LAMBDA (k: below(length(ode))): fs1(k))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "fs2 =  (LAMBDA (k: below(length(ode))): fs2(k))")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (decompose-equality 1)
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (decompose-equality 1)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2"
                      (case "NOT env_at_t?(ode, fcat, env, 0)(env)")
                      (("1" (hide 2)
                        (("1" (expand "env_at_t?")
                          (("1" (skeep)
                            (("1" (expand "fcat" 1)
                              (("1"
                                (typepred "T")
                                (("1"
                                  (expand "hp" -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "solution_odes?" -4)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "env_at_t?" -5)
                                          (("1" (inst -5 "k") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (skeep)
                          (("2" (expand "sol_at_t?" 1)
                            (("2" (skeep)
                              (("2"
                                (lemma "der_odes_cat_ci")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "t")
                                      (("2"
                                        (inst -2 "t")
                                        (("2"
                                          (expand "solution_odes?" -)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (case
                                               "fs2 =  (LAMBDA (k: below(length(ode))): fs2(k))")
                                              (("1"
                                                (case
                                                 "fs1 = (LAMBDA (k: below(length(ode))): fs1(k))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -4)
                                                    (("1"
                                                      (inst -1 "k")
                                                      (("1"
                                                        (expand
                                                         "restrict"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "fcat"
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "t")
                                                              (("1"
                                                                (case
                                                                 "t <=T")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (typepred
                                                                     "env_1")
                                                                    (("1"
                                                                      (inst
                                                                       -13
                                                                       "t"
                                                                       "env_1")
                                                                      (("1"
                                                                        (expand
                                                                         "sol_at_t?"
                                                                         -13)
                                                                        (("1"
                                                                          (inst
                                                                           -13
                                                                           "k")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -13
                                                                               1
                                                                               rl)
                                                                              (("1"
                                                                                (expand
                                                                                 "deriv"
                                                                                 1
                                                                                 2)
                                                                                (("1"
                                                                                  (expand
                                                                                   "restrict"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "restrict"
                                                                                       -4)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "env_at_t?")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (inst
                                                                                   -2
                                                                                   "k!1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "fcat"
                                                                                     -2)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "env_1")
                                                                    (("2"
                                                                      (lemma
                                                                       "env_at_t_shift")
                                                                      (("2"
                                                                        (inst
                                                                         -16
                                                                         "t-T"
                                                                         "env_1")
                                                                        (("1"
                                                                          (expand
                                                                           "sol_at_t?"
                                                                           -16)
                                                                          (("1"
                                                                            (inst
                                                                             -16
                                                                             "k")
                                                                            (("1"
                                                                              (replace
                                                                               -16
                                                                               2
                                                                               rl)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "deriv"
                                                                                   2
                                                                                   2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "restrict")
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "env_at_t?"
                                                                             1)
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "env_at_t?"
                                                                                 -2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "env_at_t(ode, fs1, env)(T)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "env_at_t?"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "i")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -5
                                                                                               "i")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "env_at_t?"
                                                                                 -2)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -3
                                                                                     "k!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "fcat"
                                                                                         -3)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (decompose-equality
                                                   1)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (decompose-equality 1)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "dd?" 1)
                    (("3" (flatten)
                      (("3" (inst 1 "T+b")
                        (("3" (assert)
                          (("3" (typepred "T" "b")
                            (("3" (hide-all-but (-1 -2 1))
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (typepred "T" "b")
                    (("4" (hide-all-but (-1 -2 1))
                      (("4" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dd? const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (> const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (env_at_t? const-decl "bool" hp_expr nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (diff_odes_cat_ci formula-decl nil solution_odes_props nil)
    (fcat skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     solution_odes_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (env_at_t_shift formula-decl nil solution_odes_props nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (fs2 skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     solution_odes_props nil)
    (ode skolem-const-decl "ODEs" solution_odes_props nil)
    (fs1 skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     solution_odes_props nil)
    (env skolem-const-decl "Environment" solution_odes_props nil)
    (T skolem-const-decl "(hp(0))" solution_odes_props nil)
    (b skolem-const-decl "{b: (hp(0)) | b > 0}" solution_odes_props
     nil)
    (t skolem-const-decl "(closed_interval(0, b + T))"
     solution_odes_props nil)
    (env_1 skolem-const-decl "(env_at_t?(ode, fcat, env, t))"
     solution_odes_props nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (restrict const-decl "R" restrict nil)
    (der_odes_cat_ci formula-decl nil solution_odes_props nil)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (solution_odes_deriv_at_T_ci formula-decl nil solution_odes_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (solution_odes_u_shift 0
  (solution_odes_u_shift-1 nil 3901035914
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (expand "solution_odes_u?")
          (("" (flatten)
            (("" (lemma "solution_odes_shift")
              (("" (inst?)
                (("" (assert)
                  (("" (assert)
                    (("" (skeep)
                      (("" (typepred "S")
                        (("" (expand "dd?")
                          (("" (split -1)
                            (("1" (skeep)
                              (("1"
                                (lemma "solution_odes_ci_conc")
                                (("1"
                                  (lemma "solution_odes_sub")
                                  (("1"
                                    (skeep -3)
                                    (("1"
                                      (inst
                                       -2
                                       "ode"
                                       "fs"
                                       "ff"
                                       "env"
                                       "T"
                                       "b")
                                      (("1"
                                        (skoletin)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst
                                             -8
                                             "fcat"
                                             "closed_interval(0,T+b)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred "t_1")
                                                (("1"
                                                  (inst
                                                   -9
                                                   "i_1"
                                                   "T+t_1")
                                                  (("1"
                                                    (expand "fcat" -9)
                                                    (("1"
                                                      (case "T+t_1<=T")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (typepred
                                                           "t_1")
                                                          (("1"
                                                            (typepred
                                                             "T")
                                                            (("1"
                                                              (typepred
                                                               "S")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "t_1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "hp")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "NOT t_1=0")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "solution_odes?"
                                                                           -16)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "env_at_t?"
                                                                               -17)
                                                                              (("2"
                                                                                (inst
                                                                                 -17
                                                                                 "i_1")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "env_at_t(ode, fs, env)(T)")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "env_at_t?"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -2
                                                                                         "i_1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "t_1")
                                                    (("2"
                                                      (replace -6)
                                                      (("2"
                                                        (expand
                                                         "closed_interval")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "T"
                                                                 "t_1"
                                                                 "S")
                                                                (("2"
                                                                  (inst
                                                                   -4
                                                                   "t_1")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "hp")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (expand
                                                 "closed_interval")
                                                (("2"
                                                  (expand "hp" 1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "b")
                                        (("2"
                                          (expand "hp")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "solution_odes_hp_conc")
                              (("2"
                                (inst -1 "ode" "fs" "ff" "env" "T")
                                (("2"
                                  (beta)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -6
                                       "(LAMBDA (i: below(length(ode))):
                       LAMBDA (t: real):
                         IF t <= T THEN fs(i)(t) ELSE ff(i)(t - T) ENDIF)"
                                       "hp(0)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst -6 "i_1" _)
                                            (("1"
                                              (inst -6 "t_1+T")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "NOT  T + t_1 <= T")
                                                  (("1"
                                                    (typepred
                                                     "T"
                                                     "t_1")
                                                    (("1"
                                                      (typepred "S")
                                                      (("1"
                                                        (inst -2 "t_1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred
                                                       "t_1"
                                                       "T"
                                                       "S")
                                                      (("2"
                                                        (inst -4 "t_1")
                                                        (("2"
                                                          (expand "hp")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "NOT t_1=0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "solution_odes?"
                                                                 -13)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (expand
                                                                     "env_at_t?"
                                                                     -14)
                                                                    (("2"
                                                                      (inst
                                                                       -14
                                                                       "i_1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "env_at_t(ode, fs, env)(T)")
                                                                          (("2"
                                                                            (expand
                                                                             "env_at_t?"
                                                                             -1)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst
                                                                                 -2
                                                                                 "i_1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "T" "t_1")
                                                (("2"
                                                  (typepred "S")
                                                  (("2"
                                                    (inst -2 "t_1")
                                                    (("2"
                                                      (expand "hp")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (assert)
                                          (("2" (skeep) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((solution_odes_u? const-decl "bool" hp_expr nil)
    (solution_odes_shift formula-decl nil solution_odes_props nil)
    (solution_odes_hp_conc formula-decl nil solution_odes_props nil)
    (t_1 skolem-const-decl "(S)" solution_odes_props nil)
    (solution_odes_sub formula-decl nil ODEs_equiv nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (b skolem-const-decl "posreal" solution_odes_props nil)
    (S skolem-const-decl
     "{SS: (dd?) | FORALL (x: real): SS(x) IMPLIES hp(0)(x)}"
     solution_odes_props nil)
    (t_1 skolem-const-decl "(S)" solution_odes_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fcat skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     solution_odes_props nil)
    (T skolem-const-decl "(hp(0))" solution_odes_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (env_at_t? const-decl "bool" hp_expr nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (solution_odes_ci_conc formula-decl nil solution_odes_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (hp const-decl "bool" interval_def ODEs)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (solution_odes_u_init 0
  (solution_odes_u_init-1 nil 3900679235
   ("" (skeep)
    (("" (lemma "solution_odes_u_shift")
      (("" (inst -1 "ode" "fs1" "env" "T")
        (("" (skoletin)
          (("" (assert)
            (("" (lemma " solution_odes_subset")
              ((""
                (inst -1 "hp(0)" "ode" "env_at_t(ode,fs1,env)(T)" "fsh"
                 "D")
                (("1" (assert)
                  (("1" (hide -2)
                    (("1" (expand "solution_odes_u?")
                      (("1" (flatten)
                        (("1" (inst -2 "fs2" "D")
                          (("1" (assert)
                            (("1" (lemma "env_at_t_shift")
                              (("1"
                                (inst -1 "ode" "fs1" "env" "T" "b")
                                (("1"
                                  (beta)
                                  (("1"
                                    (replace -4 -1 rl)
                                    (("1"
                                      (replace -1 1 lr)
                                      (("1"
                                        (typepred
                                         "env_at_t(ode, fs2, env_at_t(ode, fs1, env)(T))(b)")
                                        (("1"
                                          (typepred
                                           "env_at_t(ode, (fsh), env_at_t(ode, fs1, env)(T))(b)")
                                          (("1"
                                            (expand "env_at_t?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (decompose-equality 1)
                                                (("1"
                                                  (case
                                                   "not_in_map(ode)(x!1)")
                                                  (("1"
                                                    (inst -2 "x!1")
                                                    (("1"
                                                      (inst -5 "x!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "not_in_map"
                                                     1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst -3 "i")
                                                        (("2"
                                                          (inst -6 "i")
                                                          (("2"
                                                            (replace
                                                             -1
                                                             -3
                                                             lr)
                                                            (("2"
                                                              (replace
                                                               -1
                                                               -6
                                                               lr)
                                                              (("2"
                                                                (replace
                                                                 -3
                                                                 1
                                                                 rl)
                                                                (("2"
                                                                  (replace
                                                                   -6
                                                                   1
                                                                   rl)
                                                                  (("2"
                                                                    (inst
                                                                     -10
                                                                     "i"
                                                                     "b")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "b")
                                  (("2"
                                    (typepred "D")
                                    (("2"
                                      (hide-all-but (-1 -2 1))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (hide-all-but 1)
                    (("2" (skeep)
                      (("2" (typepred "D") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((solution_odes_u_shift formula-decl nil solution_odes_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (solution_odes_subset formula-decl nil ODEs_equiv nil)
    (env_at_t_shift formula-decl nil solution_odes_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (x!1 skolem-const-decl "nat" solution_odes_props nil)
    (ode skolem-const-decl "ODEs" solution_odes_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (b skolem-const-decl "(D)" solution_odes_props nil)
    (D skolem-const-decl "(dd?)" solution_odes_props nil)
    (hp const-decl "bool" interval_def ODEs)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (solution_odes_init 0
  (solution_odes_init-1 nil 3900682103
   ("" (skeep)
    ((""
      (inst 1
       "LAMBDA(i:below(length(f))): LAMBDA(r:real): fs(i)(r)-env(nth(f, i)`1)+env_at_t(f, fs, env)(T)(nth(f, i)`1)")
      (("" (expand "solution_odes_u?")
        (("" (expand "solution_odes?")
          (("" (flatten)
            (("" (split)
              (("1" (expand "derivable_odes?")
                (("1" (skeep)
                  (("1" (inst -1 "k")
                    (("1" (lemma "dl_derivable_minus")
                      (("1" (expand "restrict")
                        (("1" (lemma "diff_derivable_fun[(D)]")
                          (("1"
                            (inst -1 "LAMBDA (s: (D)):
             env_at_t(f, fs, env)(T)(nth(f, k)`1) + fs(k)(s)"
                             "LAMBDA (s: (D)):env(nth(f, k)`1)")
                            (("1" (assert)
                              (("1"
                                (expand "-")
                                (("1"
                                  (lemma "const_derivable_fun[(D)]")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma
                                         "sum_derivable_fun[(D)]")
                                        (("1"
                                          (inst
                                           -1
                                           "LAMBDA (s: (D)):
                   env_at_t(f, fs, env)(T)(nth(f, k)`1)"
                                           "LAMBDA (s: (D)):fs(k)(s)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "+")
                                              (("1"
                                                (hide 2 3)
                                                (("1"
                                                  (lemma
                                                   "const_derivable_fun[(D)]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide-all-but
                                                         (1 -4))
                                                        (("1"
                                                          (typepred
                                                           "D")
                                                          (("1"
                                                            (expand
                                                             "derivable?")
                                                            (("1"
                                                              (expand
                                                               "derivable?")
                                                              (("1"
                                                                (expand
                                                                 "convergent?")
                                                                (("1"
                                                                  (expand
                                                                   "convergence")
                                                                  (("1"
                                                                    (expand
                                                                     "convergence")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "x")
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (inst
                                                                             1
                                                                             "l")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "adh")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -2
                                                                                           "e!1")
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "x")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "x2")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "A")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "hp")
                                                                                                    (("1"
                                                                                                      (postpone)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -3
                                                                                     "epsilon")
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "delta")
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "x2")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "A")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "NQ")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -7
                                                                                                   "x2")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "A")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "dd?")
                                                                                                      (("2"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (skeep)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "closed_interval")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "hp")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "x")
                                                                          (("2"
                                                                            (expand
                                                                             "dd?")
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (expand
                                                                                   "closed_interval")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "hp")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "dd_noe")
                            (("2" (typepred "D")
                              (("2" (inst -2 "D") nil nil)) nil))
                            nil)
                           ("3" (lemma "dd_deriv_domain")
                            (("3" (typepred "D")
                              (("3" (inst?) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "env_at_t?")
                (("2" (skeep)
                  (("2" (inst -2 "k") (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("3" (skeep)
                (("3" (expand "sol_at_t?")
                  (("3" (skeep)
                    (("3" (typepred "t")
                      (("3" (typepred "env_1")
                        (("3" (expand "restrict")
                          (("3" (lemma "deriv_diff_fun[(D)]")
                            (("1" (expand "deriv" -1)
                              (("1"
                                (expand "-")
                                (("1"
                                  (inst
                                   -1
                                   "LAMBDA (s: (D)):
             env_at_t(f, fs, env)(T)(nth(f, k)`1) + fs(k)(s)"
                                   "LAMBDA (s: (D)):env(nth(f, k)`1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (decompose-equality -1)
                                      (("1"
                                        (inst -1 "t")
                                        (("1"
                                          (expand "deriv" 1)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil)
                                       ("3" (postpone) nil nil)
                                       ("4" (postpone) nil nil)
                                       ("5" (postpone) nil nil)
                                       ("6" (postpone) nil nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil)
                                   ("3" (postpone) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil)
                             ("3" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))