(RTA_gen
 (DIFFt_TCC1 0
  (DIFFt_TCC1-1 nil 3894721894 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dLVar type-decl nil hp_def dL)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (MapExpr type-eq-decl nil hp_def dL)
    (list type-decl nil list_adt nil) (ODEs type-eq-decl nil hp_def dL)
    (HP type-decl nil HP_adt dL)
    (fresh_hp? inductive-decl "bool" hp_expr dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cnst const-decl "real" hp_def dL)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (mapexpr_inj const-decl "bool" hp_def dL))
   nil (DIFFt subtype "(: (RTA_gen.t, hp_def.cnst(0)) :)" "Assigns")))
 (DIFFt_TCC2 0
  (DIFFt_TCC2-1 nil 3894721894
   ("" (skeep)
    (("" (lemma "fresh_mapexpr_inj")
      (("" (inst? -1)
        (("" (typepred "t")
          (("" (expand "fresh_hp?")
            (("" (flatten)
              (("" (inst -3 "dlvar_index(t)" _)
                (("" (inst?) (("" (rewrite "dlvar_eq") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fresh_mapexpr_inj formula-decl nil hp_expr dL)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (fresh_hp? inductive-decl "bool" hp_expr dL)
    (HP type-decl nil HP_adt dL)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cnst const-decl "real" hp_def dL)
    (dlvar_eq formula-decl nil hp_def dL)
    (Assigns type-eq-decl nil hp_def dL)
    (fresh_li? inductive-decl "bool" hp_expr dL) nil nil nil
    (ODEs type-eq-decl nil hp_def dL)
    (MapExprInj type-eq-decl nil hp_def dL)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dLVar type-decl nil hp_def dL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL))
   nil
   (DIFFt subtype
    "list_adt[[hp_def.dLVar, [Environment -> real]]].cons((RTA_gen.t, hp_def.cnst(1)), RTA_gen.ode)"
    "ODEs")))
 (monitor_TCC1 0
  (monitor_TCC1-1 nil 3894721894 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (HP type-decl nil HP_adt dL)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fresh_hp? inductive-decl "bool" hp_expr dL)
    (dLVar type-decl nil hp_def dL)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL) nil
    (RealExpr type-eq-decl nil hp_def dL)
    (MapExpr type-eq-decl nil hp_def dL)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (ODEs type-eq-decl nil hp_def dL))
   nil
   (monitor subtype "RTA_gen.t"
    "{t: hp_def.dLVar | hp_expr.fresh_hp?(HP_adt.DIFF(RTA_gen.ode, RTA_gen.be))(hp_def.dlvar_index(t))}")))
 (monitor_TCC2 0
  (monitor_TCC2-1 nil 3894721894
   ("" (skeep)
    (("" (typepred "t")
      (("" (expand "fresh_hp?" -1)
        (("" (assert)
          (("" (flatten) (("" (assert) (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (BoolExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (dLVar type-decl nil hp_def dL)
    (fresh_hp? inductive-decl "bool" hp_expr dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (HP type-decl nil HP_adt dL)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL))
   nil
   (monitor subtype "RTA_gen.t"
    "{t: hp_def.dLVar | booleans.AND(hp_expr.fresh_hp?(RTA_gen.stm1)(hp_def.dlvar_index(t)), hp_expr.fresh?(RTA_gen.switch)(hp_def.dlvar_index(t)))}")))
 (monitor_TCC3 0
  (monitor_TCC3-1 nil 3894721894 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (HP type-decl nil HP_adt dL)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fresh_hp? inductive-decl "bool" hp_expr dL)
    (dLVar type-decl nil hp_def dL)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL) nil
    (<< adt-def-decl "(strict_well_founded?[HP])" HP_adt dL))
   nil
   (monitor termination
    "RTA_gen.monitor(RTA_gen.switch, RTA_gen.tau)(RTA_gen.stm1, RTA_gen.t)"
    "nil")))
 (monitor_TCC4 0
  (monitor_TCC4-1 nil 3894721894
   ("" (skeep)
    (("" (typepred "t")
      (("" (replace -3 -1)
        (("" (hide -3)
          (("" (expand "fresh_hp?" -1)
            (("" (assert) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   (nil (BoolExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (dLVar type-decl nil hp_def dL)
    (fresh_hp? inductive-decl "bool" hp_expr dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (HP type-decl nil HP_adt dL)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (monitor subtype "RTA_gen.t"
    "{t: hp_def.dLVar | booleans.AND(hp_expr.fresh_hp?(RTA_gen.stm2)(hp_def.dlvar_index(t)), hp_expr.fresh?(RTA_gen.switch)(hp_def.dlvar_index(t)))}")))
 (monitor_TCC5 0
  (monitor_TCC5-1 nil 3894721894 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (HP type-decl nil HP_adt dL)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fresh_hp? inductive-decl "bool" hp_expr dL)
    (dLVar type-decl nil hp_def dL)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL) nil
    (<< adt-def-decl "(strict_well_founded?[HP])" HP_adt dL))
   nil
   (monitor termination
    "RTA_gen.monitor(RTA_gen.switch, RTA_gen.tau)(RTA_gen.stm2, RTA_gen.t)"
    "nil")))
 (monitor_TCC6 0
  (monitor_TCC6-1 nil 3894721894
   ("" (skeep)
    (("" (typepred "t")
      (("" (expand "fresh_hp?" -1)
        (("" (assert) (("" (replace -3) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   (nil (BoolExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (dLVar type-decl nil hp_def dL)
    (fresh_hp? inductive-decl "bool" hp_expr dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (HP type-decl nil HP_adt dL)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL))
   nil
   (monitor subtype "RTA_gen.t"
    "{t: hp_def.dLVar | booleans.AND(hp_expr.fresh_hp?(RTA_gen.stm1)(hp_def.dlvar_index(t)), hp_expr.fresh?(RTA_gen.switch)(hp_def.dlvar_index(t)))}")))
 (monitor_TCC7 0
  (monitor_TCC7-1 nil 3894721894 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (HP type-decl nil HP_adt dL)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fresh_hp? inductive-decl "bool" hp_expr dL)
    (dLVar type-decl nil hp_def dL)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL) nil
    (<< adt-def-decl "(strict_well_founded?[HP])" HP_adt dL))
   nil
   (monitor termination
    "RTA_gen.monitor(RTA_gen.switch, RTA_gen.tau)(RTA_gen.stm1, RTA_gen.t)"
    "nil")))
 (monitor_TCC8 0
  (monitor_TCC8-1 nil 3894721894
   ("" (skeep)
    (("" (typepred "t")
      (("" (expand "fresh_hp?" -1)
        (("" (replace -3 -1)
          (("" (assert) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   (nil (BoolExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (dLVar type-decl nil hp_def dL)
    (fresh_hp? inductive-decl "bool" hp_expr dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (HP type-decl nil HP_adt dL)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL))
   nil
   (monitor subtype "RTA_gen.t"
    "{t: hp_def.dLVar | booleans.AND(hp_expr.fresh_hp?(RTA_gen.stm2)(hp_def.dlvar_index(t)), hp_expr.fresh?(RTA_gen.switch)(hp_def.dlvar_index(t)))}")))
 (monitor_TCC9 0
  (monitor_TCC9-1 nil 3894721894 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (HP type-decl nil HP_adt dL)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fresh_hp? inductive-decl "bool" hp_expr dL)
    (dLVar type-decl nil hp_def dL)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL) nil
    (<< adt-def-decl "(strict_well_founded?[HP])" HP_adt dL))
   nil
   (monitor termination
    "RTA_gen.monitor(RTA_gen.switch, RTA_gen.tau)(RTA_gen.stm2, RTA_gen.t)"
    "nil")))
 (monitor_TCC10 0
  (monitor_TCC10-1 nil 3894721894
   ("" (skeep)
    (("" (typepred "t")
      (("" (expand "fresh_hp?" -1)
        (("" (assert) (("" (replace -3) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   (nil (BoolExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (dLVar type-decl nil hp_def dL)
    (fresh_hp? inductive-decl "bool" hp_expr dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (HP type-decl nil HP_adt dL)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL))
   nil
   (monitor subtype "RTA_gen.t"
    "{t: hp_def.dLVar | booleans.AND(hp_expr.fresh_hp?(RTA_gen.stm)(hp_def.dlvar_index(t)), hp_expr.fresh?(RTA_gen.switch)(hp_def.dlvar_index(t)))}")))
 (monitor_TCC11 0
  (monitor_TCC11-1 nil 3894721894 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (HP type-decl nil HP_adt dL)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fresh_hp? inductive-decl "bool" hp_expr dL)
    (dLVar type-decl nil hp_def dL)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL) nil
    (<< adt-def-decl "(strict_well_founded?[HP])" HP_adt dL))
   nil
   (monitor termination
    "RTA_gen.monitor(RTA_gen.switch, RTA_gen.tau)(RTA_gen.stm, RTA_gen.t)"
    "nil")))
 (RTA_simple_safe 0
  (no "no" 3894983183
   ("" (skeep)
    (("" (expand "RTA_simple" 1)
      (("" (dl-loop "P")
        (("1" (hide -) (("1" (dl-axiom) nil nil)) nil)
         ("2" (dl-assert :fnum 1)
          (("2" (hide-all-but (-3 1)) (("2" (dl-hide 1) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((RTA_simple const-decl "HP" RTA_gen nil)
    (dl_choiceb formula-decl nil dynamic_logic dL)
    (dl_composeb formula-decl nil dynamic_logic dL)
    (dl_testb formula-decl nil dynamic_logic dL)
    (DLAND const-decl "bool" bool_expr dL)
    (DLIMPLIES const-decl "bool" bool_expr dL)
    (gamma__3 skolem-const-decl "(cons?[BoolExpr])" RTA_gen nil)
    (dl_hideL formula-decl nil dynamic_logic dL)
    (delta__4 skolem-const-decl "(null?[BoolExpr])" RTA_gen nil)
    (gamma__7 skolem-const-decl "(null?[BoolExpr])" RTA_gen nil)
    (delta__8 skolem-const-decl "(null?[BoolExpr])" RTA_gen nil)
    (gamma__9 skolem-const-decl "(null?[BoolExpr])" RTA_gen nil)
    (dl_impliesR formula-decl nil dynamic_logic dL)
    (delta__10 skolem-const-decl "(null?[BoolExpr])" RTA_gen nil)
    (delta__12 skolem-const-decl "(null?[BoolExpr])" RTA_gen nil)
    (dl_notL formula-decl nil dynamic_logic dL)
    (gamma__11 skolem-const-decl "(cons?[BoolExpr])" RTA_gen nil)
    (delta__6 skolem-const-decl "(null?[BoolExpr])" RTA_gen nil)
    (dl_andR formula-decl nil dynamic_logic dL)
    (gamma__5 skolem-const-decl "(null?[BoolExpr])" RTA_gen nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (A_DLIMPLIES const-decl "bool" bool_expr dL)
    (\|- const-decl "bool" dynamic_logic dL)
    (iterate_left const-decl "T" for_iterate structures)
    (for const-decl "T" for_iterate structures)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (dl_hideR formula-decl nil dynamic_logic dL)
    (dl_axiom formula-decl nil dynamic_logic dL)
    (ALLRUNS const-decl "bool" bool_expr dL)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (gamma__1 skolem-const-decl "(null?[BoolExpr])" RTA_gen nil)
    (DLNOT const-decl "bool" bool_expr dL)
    (monitor def-decl "HP" RTA_gen nil)
    (fresh? const-decl "bool" hp_expr dL)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (fresh_hp? inductive-decl "bool" hp_expr dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dLVar type-decl nil hp_def dL)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt dL)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt dL)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (UNION adt-constructor-decl "[[HP, HP] -> (union?)]" HP_adt dL)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (HP type-decl nil HP_adt dL)
    (Formulas type-eq-decl nil bool_expr dL)
    (dl_loop formula-decl nil dynamic_logic dL)
    (delta__2 skolem-const-decl "(null?[BoolExpr])" RTA_gen nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)
  (RTA_simple_safe-1 nil 3894726876
   ("" (skeep)
    (("" (dl-flatten)
      (("" (expand "RTA_simple" 1 1)
        (("" (dl-loop "P")
          (("1" (dl-flatten) (("1" (postpone) nil nil)) nil)
           ("2" (postpone) nil nil) ("3" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (RTA_simple_safe_inv 0
  (RTA_simple_safe_inv-2 nil 3904654267
   ("" (skeep*)
    (("" (dl-flatten)
      (("" (expand "RTA_simple" 1)
        ((""
          (name "T"
                "LAMBDA(env:Environment): EXISTS(envi:Environment): G(envi) AND semantic_rel(STAR(hc))(envi)(env)")
          (("" (assert)
            ((""
              (name "T2"
                    "LAMBDA(env:Environment): EXISTS(envi:Environment): (S(envi) AND ( (envi=env AND P(envi)) OR semantic_rel(monitor(S, tau)(lc, t))(envi)(env)))")
              (("" (dl-loop "DLOR(T,T2)")
                (("1" (dl-ground)
                  (("1" (lemma "dlSequent_equiv")
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (expand "dlSequent" 1)
                            (("1" (skeep)
                              (("1"
                                (inst-cp -1 "0")
                                (("1"
                                  (inst -1 "1")
                                  (("1"
                                    (inst 1 "1")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (expand "nth")
                                        (("1"
                                          (replace -3 1 rl)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst 1 "env")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "length" 1)
                                      (("2"
                                        (expand "length" 1)
                                        (("2"
                                          (expand "length" 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "length" 1)
                                    (("2"
                                      (expand "length" 1)
                                      (("2"
                                        (expand "length" 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "length" 1)
                                  (("2"
                                    (expand "length" 1)
                                    (("2"
                                      (expand "length" 1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "dlSequent_equiv")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (expand "dlSequent" 1)
                          (("2" (skeep)
                            (("2" (inst-cp -1 "0")
                              (("1"
                                (inst -1 "1")
                                (("1"
                                  (inst 1 "0")
                                  (("1"
                                    (expand "nth")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (replace -4 1 rl)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst 1 "env")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "semantic_rel"
                                                 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (expand "length" 1)
                                      (("2"
                                        (expand "length" 1)
                                        (("2"
                                          (expand "length" 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "length" 1)
                                  (("2"
                                    (expand "length" 1)
                                    (("2"
                                      (expand "length" 1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "length" 1)
                                (("2"
                                  (expand "length" 1)
                                  (("2"
                                    (expand "length" 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (dl-ground)
                  (("1" (lemma "dlSequent_equiv")
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (expand "dlSequent" 1)
                            (("1" (skeep)
                              (("1"
                                (inst 1 "0")
                                (("1"
                                  (expand "nth" 1)
                                  (("1"
                                    (inst -1 "0")
                                    (("1"
                                      (expand "nth" -1)
                                      (("1"
                                        (replace -3 -1 rl)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (expand "A_DLIMPLIES" -6)
                                              (("1"
                                                (inst -6 "envi")
                                                (("1"
                                                  (expand
                                                   "DLIMPLIES"
                                                   -6)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "ALLRUNS"
                                                       -6)
                                                      (("1"
                                                        (inst -6 "env")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "dlSequent_equiv")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (hide 2)
                          (("2" (expand "dlSequent" 1)
                            (("2" (skeep)
                              (("2"
                                (inst 1 "0")
                                (("2"
                                  (inst -1 "0")
                                  (("2"
                                    (expand "nth")
                                    (("2"
                                      (replace -2 -1 rl)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand "A_DLIMPLIES" -5)
                                            (("2"
                                              (inst -5 "envi")
                                              (("2"
                                                (expand "DLIMPLIES" -5)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split -2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "ALLRUNS"
                                                       -5)
                                                      (("2"
                                                        (inst -5 "env")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "DLAND"
                                                             -5)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (dl-choiceb)
                  (("3" (dl-composeb)
                    (("3" (dl-testb)
                      (("3" (dl-flatten)
                        (("3" (dl-ground)
                          (("1" (lemma "dlSequent_equiv")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (expand "dlSequent" 1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "0")
                                        (("1"
                                          (inst -1 "1")
                                          (("1"
                                            (expand "nth" -1)
                                            (("1"
                                              (expand "nth" -1)
                                              (("1"
                                                (expand "nth" 1)
                                                (("1"
                                                  (expand
                                                   "A_DLIMPLIES"
                                                   -4)
                                                  (("1"
                                                    (inst -4 "env")
                                                    (("1"
                                                      (expand
                                                       "DLIMPLIES"
                                                       -4)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "ALLRUNS"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "ALLRUNS"
                                                             -4)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "envo")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "DLAND"
                                                                     -5)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "DLOR"
                                                                         1)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             2
                                                                             rl)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 2
                                                                                 "env")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2"
                                              (expand "length" 1)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "dlSequent_equiv")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (expand "dlSequent" 1)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst 1 "0")
                                        (("2"
                                          (expand "nth" 1)
                                          (("2"
                                            (inst -1 "1")
                                            (("1"
                                              (expand "nth" -1)
                                              (("1"
                                                (expand "nth" -1)
                                                (("1"
                                                  (expand "ALLRUNS" 1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (expand "DLOR" 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (replace
                                                           -3
                                                           2
                                                           rl)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               2
                                                               "env")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "length" 1)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (expand "length" 1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (dl-composeb)
                            (("3" (dl-testb)
                              (("3"
                                (dl-flatten)
                                (("3"
                                  (lemma "dlSequent_equiv")
                                  (("3"
                                    (inst?)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (hide 2)
                                        (("3"
                                          (expand "dlSequent" 1)
                                          (("3"
                                            (skeep)
                                            (("3"
                                              (inst-cp 1 "0")
                                              (("1"
                                                (inst-cp 1 "1")
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (expand "nth" +)
                                                    (("1"
                                                      (expand "nth" +)
                                                      (("1"
                                                        (expand
                                                         "ALLRUNS"
                                                         1)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (expand
                                                             "DLOR"
                                                             1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "0")
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -4
                                                                     -1
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -4
                                                                       1
                                                                       rl)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (inst
                                                                             1
                                                                             "envi")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "semantic_rel_star_iter")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "hc"
                                                                                   "env"
                                                                                   "envi"
                                                                                   "envo")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "length" 1)
                                                  (("2"
                                                    (expand "length" 1)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (expand "length" 1)
                                                  (("2"
                                                    (expand "length" 1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (dl-composeb)
                            (("4" (dl-testb)
                              (("4"
                                (dl-flatten)
                                (("4"
                                  (lemma "dlSequent_equiv")
                                  (("4"
                                    (inst?)
                                    (("4"
                                      (assert)
                                      (("4"
                                        (hide 2)
                                        (("4"
                                          (expand "dlSequent" 1)
                                          (("4"
                                            (skeep)
                                            (("4"
                                              (inst -1 "0")
                                              (("4"
                                                (expand "nth" -1)
                                                (("4"
                                                  (inst-cp 1 "0")
                                                  (("1"
                                                    (inst-cp 1 "1")
                                                    (("1"
                                                      (hide 1)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         +)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           +)
                                                          (("1"
                                                            (expand
                                                             "A_DLIMPLIES")
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "env")
                                                              (("1"
                                                                (expand
                                                                 "DLIMPLIES"
                                                                 -5)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "G(env)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "ALLRUNS"
                                                                         1)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (expand
                                                                             "DLOR"
                                                                             1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (replace
                                                                                 -5
                                                                                 1
                                                                                 rl)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     1
                                                                                     "env")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "semantic_rel"
                                                                                         1)
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "envo")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "semantic_rel"
                                                                                               1)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -5)
                                                                        (("2"
                                                                          (replace
                                                                           -2
                                                                           -1
                                                                           rl)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -5
                                                                                   "envi")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "DLIMPLIES"
                                                                                     -5)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "ALLRUNS"
                                                                                       -5)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -5
                                                                                         "env")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "DLAND"
                                                                                             -5)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "DLOR"
                                                                                               -5)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "length" 1)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (RTA_simple const-decl "HP" RTA_gen nil) nil
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (fresh_hp? inductive-decl "bool" hp_expr dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dLVar type-decl nil hp_def dL)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (ALLRUNS const-decl "bool" bool_expr dL)
    (HP type-decl nil HP_adt dL) (DLOR const-decl "bool" bool_expr dL)
    (DLAND const-decl "bool" bool_expr dL)
    (Formulas type-eq-decl nil bool_expr dL)
    (dl_impliesR formula-decl nil dynamic_logic dL) nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil) nil
    (dl_andL formula-decl nil dynamic_logic dL) nil
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (semantic_rel inductive-decl "bool" hp_expr dL)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt dL)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (monitor def-decl "HP" RTA_gen nil)
    (dl_choiceb formula-decl nil dynamic_logic dL) nil nil
    (dl_testb formula-decl nil dynamic_logic dL) nil nil nil nil nil
    nil nil nil (dl_andR formula-decl nil dynamic_logic dL) nil nil nil
    nil nil
    (semantic_rel_star_iter formula-decl nil bounded_star_semantics dL)
    nil (dl_notL formula-decl nil dynamic_logic dL) nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil
    (dl_composeb formula-decl nil dynamic_logic dL) nil nil
    (A_DLIMPLIES const-decl "bool" bool_expr dL)
    (DLIMPLIES const-decl "bool" bool_expr dL)
    (length_singleton formula-decl nil more_list_props structures)
    (append def-decl "list[T]" list_props nil)
    (move_to_head_rec def-decl "Formulas" dynamic_logic dL)
    (length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (is_dlfnum const-decl "bool" dynamic_logic dL)
    (move_to_head const-decl "Formulas" dynamic_logic dL)
    (dl_moveL formula-decl nil dynamic_logic dL) nil
    (dl_orL formula-decl nil dynamic_logic dL) nil nil nil
    (dl_orR formula-decl nil dynamic_logic dL)
    (nth def-decl "T" list_props nil) nil nil
    (below type-eq-decl nil naturalnumbers nil) nil nil
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dlSequent const-decl "bool" dynamic_logic dL)
    (dlSequent_equiv formula-decl nil dynamic_logic dL) nil nil nil
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (UNION adt-constructor-decl "[[HP, HP] -> (union?)]" HP_adt dL)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt dL)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt dL)
    (DLNOT const-decl "bool" bool_expr dL)
    (dl_loop formula-decl nil dynamic_logic dL)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (RTA_simple_safe_inv-1 nil 3895825003
   ("" (skeep)
    (("" (expand "RTA_simple" 1)
      (("" (dl-flatten)
        (("" (dl-loop "DLAND(P,DLOR(S,G))")
          (("1" (dl-flatten) (("1" (dl-ground) nil nil)) nil)
           ("2" (dl-flatten) nil nil)
           ("3" (dl-choiceb)
            (("3" (dl-ground)
              (("1" (dl-composeb)
                (("1" (dl-testb)
                  (("1" (dl-flatten) (("1" (postpone) nil nil)) nil))
                  nil))
                nil)
               ("2" (dl-composeb)
                (("2" (dl-flatten)
                  (("2" (dl-testb)
                    (("2" (dl-flatten) (("2" (postpone) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (dl-composeb)
                (("3" (dl-testb)
                  (("3" (dl-flatten) (("3" (dl-assert) nil nil)) nil))
                  nil))
                nil)
               ("4" (dl-composeb)
                (("4" (dl-testb)
                  (("4" (dl-flatten) (("4" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (RTA_simple_safe_rule 0
  (RTA_simple_safe_rule-1 nil 3904831885
   ("" (skeep*)
    (("" (lemma "RTA_simple_safe_inv")
      (("" (inst?)
        (("" (assert)
          (("" (split -1)
            (("1" (rewrite "dlSequent_equiv")
              (("1" (rewrite "dlSequent_equiv")
                (("1" (rewrite "dlSequent_equiv")
                  (("1" (rewrite "dlSequent_equiv")
                    (("1" (rewrite "dlSequent_equiv")
                      (("1" (expand "dlSequent" 1)
                        (("1" (expand "dlSequent" -1)
                          (("1" (skeep)
                            (("1" (inst -1 "env")
                              (("1"
                                (split -1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (typepred "j")
                                    (("1"
                                      (expand "length" -1)
                                      (("1"
                                        (expand "length" -1)
                                        (("1"
                                          (expand "nth" -2)
                                          (("1"
                                            (expand "nth" 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst 1 "0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "DLIMPLIES"
                                                     -2)
                                                    (("1"
                                                      (expand
                                                       "dlSequent"
                                                       -2)
                                                      (("1"
                                                        (inst -2 "env")
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (typepred
                                                               "j!1")
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -2)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "length" 1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (typepred "i")
                                    (("2"
                                      (expand "length" -1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "A_DLIMPLIES" 1)
              (("2" (skeep)
                (("2" (assert)
                  (("2" (rewrite "dlSequent_equiv")
                    (("2" (rewrite "dlSequent_equiv")
                      (("2" (rewrite "dlSequent_equiv")
                        (("2" (expand "dlSequent" -2)
                          (("2" (inst -2 "env")
                            (("2" (assert)
                              (("2"
                                (split -2)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (typepred "j")
                                    (("1"
                                      (expand "length " -1)
                                      (("1"
                                        (expand "length " -1)
                                        (("1"
                                          (expand "nth" -2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "DLIMPLIES" 1)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (typepred "i")
                                    (("2"
                                      (expand "length" -1)
                                      (("2"
                                        (expand "length" -1)
                                        (("2"
                                          (expand "DLIMPLIES" 2)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "nth" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide -2)
              (("3" (expand "A_DLIMPLIES" 1)
                (("3" (skeep)
                  (("3" (rewrite "dlSequent_equiv")
                    (("3" (rewrite "dlSequent_equiv")
                      (("3" (rewrite "dlSequent_equiv")
                        (("3" (expand "DLIMPLIES" 1)
                          (("3" (expand "dlSequent" -2)
                            (("3" (inst -2 "env")
                              (("3"
                                (split -2)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (typepred "j")
                                    (("1"
                                      (expand "length" -1)
                                      (("1"
                                        (expand "length" -1)
                                        (("1"
                                          (expand "nth" -2)
                                          (("1"
                                            (expand "nth" -2)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (typepred "i")
                                    (("2"
                                      (expand "length" -1)
                                      (("2"
                                        (expand "length" -1)
                                        (("2"
                                          (expand "nth" 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RTA_simple_safe_inv formula-decl nil RTA_gen nil)
    (A_DLIMPLIES const-decl "bool" bool_expr dL)
    (dlSequent_equiv formula-decl nil dynamic_logic dL)
    (list type-decl nil list_adt nil)
    (Formulas type-eq-decl nil bool_expr dL)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (DLIMPLIES const-decl "bool" bool_expr dL)
    (DLAND const-decl "bool" bool_expr dL)
    (DLOR const-decl "bool" bool_expr dL)
    (ALLRUNS const-decl "bool" bool_expr dL)
    (RTA_simple const-decl "HP" RTA_gen nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (monitor def-decl "HP" RTA_gen nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil nil nil nil nil nil nil
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dlSequent const-decl "bool" dynamic_logic dL)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt dL) nil
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (fresh_hp? inductive-decl "bool" hp_expr dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dLVar type-decl nil hp_def dL)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (HP type-decl nil HP_adt dL) (BoolExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)))