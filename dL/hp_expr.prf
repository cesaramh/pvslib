(hp_expr
 (IMP_table_of_integrals_TCC1 0
  (IMP_table_of_integrals_TCC1-1 nil 3794647703
   ("" (assuming-tcc) nil nil)
   ((connected? const-decl "bool" deriv_domain_def analysis)) nil
   (IMP_table_of_integrals assuming
    "analysis@table_of_integrals[real].table_of_integrals"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")))
 (IMP_table_of_integrals_TCC2 0
  (IMP_table_of_integrals_TCC2-1 nil 3794647703 ("" (assert) nil nil)
   ((not_one_element_real formula-decl nil deriv_domain analysis)) nil
   (IMP_table_of_integrals assuming
    "analysis@table_of_integrals[real].table_of_integrals"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (size_TCC1 0
  (size_TCC1-1 nil 3798049756 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[HP])" HP_adt nil)) nil
   (size termination "hp_expr.size(hp_expr.stm1)" "nil")))
 (size_TCC2 0
  (size_TCC2-1 nil 3798049756 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[HP])" HP_adt nil)) nil
   (size termination "hp_expr.size(hp_expr.stm2)" "nil")))
 (size_TCC3 0
  (size_TCC3-1 nil 3798049756 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[HP])" HP_adt nil)) nil
   (size termination "hp_expr.size(hp_expr.stm1)" "nil")))
 (size_TCC4 0
  (size_TCC4-1 nil 3798049756 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[HP])" HP_adt nil)) nil
   (size termination "hp_expr.size(hp_expr.stm2)" "nil")))
 (size_TCC5 0
  (size_TCC5-1 nil 3798049756 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[HP])" HP_adt nil)) nil
   (size termination "hp_expr.size(hp_expr.stm)" "nil")))
 (dd?_TCC1 0
  (dd?_TCC1-1 nil 3794647703 ("" (subtype-tcc) nil nil) nil nil
   (dd? subtype "hp_expr.b" "{b: reals.real | reals.<(0, b)}")))
 (dd_deriv_domain 0
  (no "no" 3794587276
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "dd?" -1)
        (("" (split -1)
          (("1" (skeep)
            (("1" (lemma "ci_deriv_domain")
              (("1" (inst?)
                (("1" (lemma "ci_ci")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (lemma "hp_dd")
            (("2" (inst?)
              (("2" (assert)
                (("2" (expand "deriv_domain?")
                  (("2" (skeep)
                    (("2" (inst -1 "e" "x")
                      (("2" (skeep) (("2" (inst 1 "y") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ci_deriv_domain formula-decl nil interval_def ODEs)
    (ci_ci formula-decl nil interval_def ODEs)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D skolem-const-decl "(dd?)" hp_expr nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (hp const-decl "bool" interval_def ODEs)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (hp_dd formula-decl nil interval_def ODEs))
   shostak)
  (dd_deriv_domain-1 nil 3793377192
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "dd?")
        (("" (flatten)
          (("" (expand "deriv_domain?" 1)
            (("" (skeep)
              (("" (expand "not_one_element?" -3)
                (("" (inst -3 "x")
                  (("" (skeep)
                    (("" (case "x>y")
                      (("1" (inst 2 "-min(e,x-y)/2")
                        (("1" (grind) nil nil)
                         ("2" (assert)
                          (("2" (split 1)
                            (("1" (grind) nil nil)
                             ("2" (assert)
                              (("2"
                                (expand "connected?" -3)
                                (("2"
                                  (inst
                                   -3
                                   "y"
                                   "x"
                                   "(-min(e, x - y) / 2 + x)")
                                  (("2"
                                    (assert)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "x<y")
                        (("1" (inst 3 "min(y-x,e)/2")
                          (("1" (grind) nil nil)
                           ("2" (split 1)
                            (("1" (grind) nil nil)
                             ("2" (expand "connected?" -3)
                              (("2"
                                (inst
                                 -3
                                 "x"
                                 "y"
                                 "min(y - x, e) / 2 + x")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis))
   shostak))
 (dd_noe 0
  (dd_noe-1 nil 3794902823
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "dd?")
        (("" (split -1)
          (("1" (skeep)
            (("1" (lemma "ci_not_one_element")
              (("1" (inst?)
                (("1" (lemma "ci_ci")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (lemma "hp_noe")
            (("2" (assert)
              (("2" (inst -1 "0")
                (("2" (assert)
                  (("2" (expand "not_one_element?")
                    (("2" (skeep)
                      (("2" (inst -1 "x")
                        (("2" (skeep)
                          (("2" (inst 2 "y") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ci_not_one_element formula-decl nil interval_def ODEs)
    (ci_ci formula-decl nil interval_def ODEs)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D skolem-const-decl "(dd?)" hp_expr nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (hp const-decl "bool" interval_def ODEs)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (hp_noe formula-decl nil interval_def ODEs))
   shostak))
 (dd_con 0
  (dd_con-1 nil 3794902890
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "dd?" -1)
        (("" (split -1)
          (("1" (skeep)
            (("1" (lemma "ci_connected")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (lemma "ci_ci")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "hp_con")
            (("2" (inst -1 "0")
              (("2" (expand "connected?")
                (("2" (skeep)
                  (("2" (inst -1 "x" "y" "z")
                    (("1" (assert) nil nil)
                     ("2" (expand "hp" 1)
                      (("2" (typepred "y")
                        (("2" (replace -2)
                          (("2" (expand "hp") (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ci_connected formula-decl nil interval_def ODEs)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (ci_ci formula-decl nil interval_def ODEs)
    (D skolem-const-decl "(dd?)" hp_expr nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (y skolem-const-decl "(D)" hp_expr nil)
    (hp const-decl "bool" interval_def ODEs)
    (x skolem-const-decl "(D)" hp_expr nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (hp_con formula-decl nil interval_def ODEs))
   shostak))
 (dd_ne 0
  (dd_ne-1 nil 3794903002
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "dd?")
        (("" (split -1)
          (("1" (skeep)
            (("1" (lemma "ci_nonempty")
              (("1" (inst?)
                (("1" (lemma "ci_ci")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (lemma "hp_ne")
            (("2" (inst -1 "0") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ci_nonempty formula-decl nil interval_def ODEs)
    (ci_ci formula-decl nil interval_def ODEs)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D skolem-const-decl "(dd?)" hp_expr nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (hp_ne formula-decl nil interval_def ODEs))
   shostak))
 (dd_ci_TCC1 0
  (dd_ci_TCC1-1 nil 3794909306 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (hp const-decl "bool" interval_def ODEs)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (dd_ci subtype "hp_expr.r" "{b: reals.real | reals.<(0, b)}")))
 (dd_ci 0
  (dd_ci-1 nil 3794909342
   ("" (skeep)
    (("" (typepred "x")
      (("" (typepred "r" "D")
        (("" (expand "dd?")
          (("" (split -3)
            (("1" (skeep)
              (("1" (expand "closed_interval")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (replace -1) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (expand "closed_interval")
                  (("2" (replace -1)
                    (("2" (expand "hp")
                      (("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((/= const-decl "boolean" notequal nil)
    (dd? const-decl "bool" hp_expr nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (hp const-decl "bool" interval_def ODEs)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (derivable_odes?_TCC1 0
  (derivable_odes?_TCC2-1 nil 3792763547
   ("" (skeep)
    (("" (lemma "dd_deriv_domain") (("" (inst?) nil nil)) nil)) nil)
   ((dd_deriv_domain formula-decl nil hp_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (dd? const-decl "bool" hp_expr nil))
   nil
   (derivable_odes? assuming
    "analysis@derivatives[(hp_expr.D)].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (derivable_odes?_TCC2 0
  (derivable_odes?_TCC3-1 nil 3792763547
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "dd?" -1)
        (("" (split -1)
          (("1" (skeep)
            (("1" (lemma "ci_not_one_element")
              (("1" (inst?)
                (("1" (lemma "ci_ci")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (lemma "hp_noe")
            (("2" (inst -1 "0")
              (("2" (assert)
                (("2" (expand "not_one_element?")
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (inst -1 "x")
                        (("2" (skeep)
                          (("2" (inst 2 "y") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ci_not_one_element formula-decl nil interval_def ODEs)
    (ci_ci formula-decl nil interval_def ODEs)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D skolem-const-decl "(dd?)" hp_expr nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (hp const-decl "bool" interval_def ODEs)
    (hp_noe formula-decl nil interval_def ODEs))
   nil
   (derivable_odes? assuming
    "analysis@derivatives[(hp_expr.D)].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (env_at_t_TCC1 0
  (env_at_t_TCC1-1 nil 3790353386
   ("" (skeep)
    (("" (typepred "i")
      (("" (expand "nonempty?" 2)
        (("" (expand "empty?" -2)
          (("" (expand "not_in_map" 1 1)
            (("" (skeep)
              (("" (assert)
                (("" (inst -3 "i_1") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (empty? const-decl "bool" sets nil) (< const-decl "bool" reals nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (not_in_map const-decl "bool" hp_def nil)
    (nonempty? const-decl "bool" sets nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (env_at_t subtype
    "{kk: naturalnumbers.below(list_props[MapExpr].length(hp_expr.odes)) | hp_expr.i = hp_def.dlvar_index(list_props[MapExpr].nth(hp_expr.odes, kk)`1)}"
    "(sets[naturalnumbers.below(list_props[MapExpr].length(hp_expr.odes))].nonempty?)")))
 (env_at_t_TCC2 0
  (env_at_t_TCC2-1 nil 3790357330
   ("" (skeep)
    (("" (split)
      (("1" (expand "env_at_t?" 1)
        (("1" (skeep)
          (("1" (lift-if 1)
            (("1" (split 1)
              (("1" (flatten)
                (("1" (expand "not_in_map" -1)
                  (("1" (assert)
                    (("1" (inst -1 "k") (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2"
                    (case "k = choose[below(length(odes))]
                         ({kk: below(length[MapExpr](odes)) |
                             dlvar_index(nth(odes, k)`1) =
                              dlvar_index(nth[MapExpr](odes, kk)`1)})")
                    (("1" (replaces -1 :dir rl) nil nil)
                     ("2" (hide (2 3))
                      (("2" (typepred "odes")
                        (("2" (lemma "mapexpr_inj_eq")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (name-replace
                                 "ch"
                                 "choose[below(length(odes))]
                   ({kk: below(length[MapExpr](odes)) |
                       dlvar_index(nth(odes, k)`1) =
                        dlvar_index(nth[MapExpr](odes, kk)`1)})")
                                (("2"
                                  (typepred "ch")
                                  (("2"
                                    (inst -3 "k" "ch")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (decompose-equality 1)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 3)
                      (("3" (expand "nonempty?" 1)
                        (("3" (expand "empty?" -1)
                          (("3" (inst -1 "k")
                            (("3" (expand "member" 1)
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (decompose-equality 1)
          (("1" (typepred "env2")
            (("1" (expand "env_at_t?" -1)
              (("1" (flatten)
                (("1" (lift-if 1)
                  (("1" (split 1)
                    (("1" (flatten) (("1" (inst -2 "x!1") nil nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "not_in_map" 1 1)
                        (("2" (skeep)
                          (("2" (inst -3 "i")
                            (("2" (replace -1)
                              (("2"
                                (case
                                 "choose[below(length(odes))]
                          ({kk: below(length[MapExpr](odes)) |
                              x!1 = dlvar_index(nth[MapExpr](odes, kk)`1)}) = i")
                                (("1" (replaces -1) nil nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (typepred "odes")
                                    (("2"
                                      (lemma "mapexpr_inj_eq")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (name-replace
                                             "ch"
                                             "choose[below(length(odes))]
                    ({kk: below(length[MapExpr](odes)) |
                        x!1 = dlvar_index(nth[MapExpr](odes, kk)`1)})")
                                            (("2"
                                              (inst -1 "ch" "i")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (typepred "ch")
                                                    (("2"
                                                      (lemma
                                                       "dLVar_dlvar_extensionality")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide 2)
                                  (("3"
                                    (expand "nonempty?" 1)
                                    (("3"
                                      (expand "empty?" -1)
                                      (("3"
                                        (inst -1 "i")
                                        (("3"
                                          (expand "member" 1)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (expand "nonempty?" 2)
              (("2" (expand "empty?" -1)
                (("2" (expand "not_in_map" 1 1)
                  (("2" (skeep)
                    (("2" (inst -2 "i_1")
                      (("2" (expand "member" 1)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_in_map const-decl "bool" hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (mapexpr_inj_eq formula-decl nil hp_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def nil)
    (dLVar_dlvar_extensionality formula-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (odes skolem-const-decl "ODEs" hp_expr nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (x!1 skolem-const-decl "nat" hp_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (env_at_t subtype
    "LAMBDA (i: naturalnumbers.nat): IF hp_def.not_in_map(hp_expr.odes)(i) THEN hp_expr.envi(i) ELSE hp_expr.fs(sets[naturalnumbers.below(list_props[MapExpr].length(hp_expr.odes))].choose({kk: naturalnumbers.below(list_props[MapExpr].length(hp_expr.odes)) | i = hp_def.dlvar_index(list_props[MapExpr].nth(hp_expr.odes, kk)`1)}))(hp_expr.t) ENDIF"
    "{env: (hp_expr.env_at_t?(hp_expr.odes, hp_expr.fs, hp_expr.envi, hp_expr.t)) | FORALL (env2: (hp_expr.env_at_t?(hp_expr.odes, hp_expr.fs, hp_expr.envi, hp_expr.t))): env = env2}")))
 (sol_at_t?_TCC1 0
  (sol_at_t?_TCC1-1 nil 3780672092 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (dLVar type-decl nil hp_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (hp const-decl "bool" interval_def ODEs)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (sol_at_t? subtype
    "restrict[real, (hp_expr.D), real].restrict(hp_expr.fs(hp_expr.k))"
    "deriv_fun[(D)]")))
 (semantic_rel_TCC1 0
  (semantic_rel_TCC1-1 nil 3780312983 ("" (subtype-tcc) nil nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (semantic_rel subtype "hp_expr.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (semantic_rel_TCC2 0
  (semantic_rel_TCC2-1 nil 3780312983 ("" (subtype-tcc) nil nil)
   ((env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (semantic_rel subtype "hp_expr.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (semantic_rel_TCC3 0
  (semantic_rel_TCC3-1 nil 3790353386 ("" (subtype-tcc) nil nil)
   ((env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (semantic_rel subtype "hp_expr.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (semantic_rel_TCC4 0
  (semantic_rel_TCC4-1 nil 3790353386 ("" (subtype-tcc) nil nil)
   ((env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (semantic_rel subtype "hp_expr.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (fresh_li?_TCC1 0
  (fresh_li?_TCC1-1 nil 3870426015 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (/= const-decl "boolean" notequal nil))
   nil (fresh_li? subtype "hp_expr.l" "(list_adt[MapExpr].cons?)")))
 (fresh_li?_TCC2 0
  (fresh_li?_TCC2-1 nil 3870426015
   ("" (skeep)
    (("" (lemma "cdr_is_MapExprInj") (("" (inst?) nil nil)) nil)) nil)
   ((cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Assigns type-eq-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (fresh_li? subtype "list_adt[MapExpr].cdr(hp_expr.l)" "Assigns")))
 (fresh_assign_nth 0
  (fresh_assign_nth-1 nil 3868171086
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (assert)
      (("2" (skeep)
        (("2" (typepred "i")
          (("2" (ground)
            (("1" (typepred "j")
              (("1" (expand "length" -1) (("1" (assert) nil nil)) nil))
              nil)
             ("2" (typepred "j")
              (("2" (expand "length") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep*)
      (("3" (lemma "mapexpr_inj_cons")
        (("3" (inst?)
          (("3" (assert)
            (("3" (case "j=0")
              (("1" (expand "nth" 1)
                (("1" (assert)
                  (("1" (typepred "i")
                    (("1" (expand "fresh_li?" -1)
                      (("1" (flatten) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nth" 2)
                (("2" (assert)
                  (("2" (inst -2 "i" "j-1")
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (typepred "j")
                      (("2" (expand "length" -1)
                        (("2" (assert) nil nil)) nil))
                      nil)
                     ("3" (typepred "i")
                      (("3" (expand "fresh_li?" -1)
                        (("3" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (j skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
     hp_expr nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (i skolem-const-decl "(fresh_li?(cons(cons1_var, cons2_var)))"
       hp_expr nil)
    (cons1_var skolem-const-decl "MapExpr" hp_expr nil)
    (cons2_var skolem-const-decl "list[MapExpr]" hp_expr nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mapexpr_inj_cons formula-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (list_induction formula-decl nil list_adt nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (fresh? const-decl "bool" hp_expr nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (fresh_li? inductive-decl "bool" hp_expr nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (fresh_mapexpr_inj 0
  (fresh_mapexpr_inj-1 nil 3868171294
   ("" (skeep*)
    (("" (typepred "l")
      (("" (expand "mapexpr_inj")
        (("" (skeep)
          (("" (case "i_1=0")
            (("1" (expand "nth" -3 1)
              (("1" (assert)
                (("1" (lemma "fresh_assign_nth")
                  (("1" (inst -1 "l" "i" "j-1")
                    (("1" (expand "nth" -4)
                      (("1" (flatten)
                        (("1" (replaces -4 :dir rl)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (typepred "j")
                      (("2" (expand "length" -2)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "nth" -2 1)
              (("2" (assert)
                (("2" (case "j=0")
                  (("1" (assert) nil nil)
                   ("2" (expand "nth" -2 2)
                    (("2" (inst?)
                      (("2" (inst -1 "j-1")
                        (("1" (assert) nil nil)
                         ("2" (typepred "j")
                          (("2" (expand "length" -2)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (dLVar type-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (fresh_assign_nth formula-decl nil hp_expr nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (l skolem-const-decl "MapExprInj" hp_expr nil)
    (i skolem-const-decl "(fresh_li?(l))" hp_expr nil)
    (re skolem-const-decl "RealExpr" hp_expr nil)
    (i_1 skolem-const-decl "below(length(cons((dlvar(i), re), l)))"
     hp_expr nil)
    (subrange type-eq-decl nil integers nil)
    (j skolem-const-decl
     "subrange(1 + i_1, length(cons((dlvar(i), re), l)) - 1)" hp_expr
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (dlvar adt-constructor-decl "[nat -> (dlvar?)]" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (fresh_li? inductive-decl "bool" hp_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (fresh_mapexp_nth_2 0
  (fresh_mapexp_nth_2-1 nil 3870526452
   ("" (induct "l")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (split -1)
          (("1" (case "k=0")
            (("1" (expand "nth" 1)
              (("1" (assert)
                (("1" (expand "fresh?")
                  (("1" (typepred "i")
                    (("1" (expand "fresh_li?") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "i")
              (("2" (assert)
                (("2" (expand "fresh?")
                  (("2" (expand "fresh_li?")
                    (("2" (flatten)
                      (("2" (skeep)
                        (("2" (expand "nth" 3)
                          (("2" (inst -3 "i" "k-1")
                            (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "mapexpr_inj_cons")
            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "(fresh_li?(cons(cons1_var, cons2_var)))"
       hp_expr nil)
    (cons1_var skolem-const-decl "MapExpr" hp_expr nil)
    (cons2_var skolem-const-decl "list[MapExpr]" hp_expr nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mapexpr_inj_cons formula-decl nil hp_def nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (list_induction formula-decl nil list_adt nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (fresh? const-decl "bool" hp_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (fresh_li? inductive-decl "bool" hp_expr nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (fresh_hp?_TCC1 0
  (fresh_hp?_TCC1-1 nil 3870426015 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (fresh_hp? subtype "hp_expr.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (fresh_hp?_TCC2 0
  (fresh_hp?_TCC2-1 nil 3870426015 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fresh? const-decl "bool" hp_expr nil))
   nil
   (fresh_hp? subtype "hp_expr.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (fresh_hp?_TCC3 0
  (fresh_hp?_TCC3-1 nil 3870426015 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fresh? const-decl "bool" hp_expr nil))
   nil
   (fresh_hp? subtype "hp_expr.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (fresh_hp?_TCC4 0
  (fresh_hp?_TCC4-1 nil 3870426015 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (fresh? const-decl "bool" hp_expr nil))
   nil
   (fresh_hp? subtype "hp_expr.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}"))))