(diff_re_props
 (diff_re_cont_TCC1 0
  (diff_re_cont_TCC1-1 nil 3872932794 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (g!1 skolem-const-decl "VectorN(1 + k!1)" diff_re_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (g!1 skolem-const-decl "VectorN(1 + k!1)" diff_re_props nil)
    (env!1 skolem-const-decl "(P!1)" diff_re_props nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VectorN type-eq-decl nil matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (k!1 skolem-const-decl "nat" diff_re_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (P!1 skolem-const-decl "(ddl_dom?)" diff_re_props nil)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (* const-decl "real" matrices matrices)
    (vec_re const-decl "real" chain_rule_re nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (not_one_element? const-decl "bool" differentiation nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" differentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (projv const-decl "bool" chain_rule_re nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (proj const-decl "bool" differentiation nil)
    (between? const-decl "bool" differentiation nil))
   nil
   (diff_re_cont subtype
    "chain_rule_re.env_2_vec(diff_re_props.k, diff_re_props.env)"
    "(chain_rule_re.projv(diff_re_props.k, diff_re_props.P))")))
 (diff_re_cont_TCC2 0
  (diff_re_cont_TCC1-1 nil 3872692140
   ("" (expand "+")
    (("" (case "FORALL(k:nat, x,y:VectorN(1+k)): length(x+y) = 1+k")
      (("1" (skeep)
        (("1" (inst -1 "k" "env_2_vec(k,env)" "x")
          (("1" (expand "+") (("1" (propax) nil nil)) nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "k")
          (("1" (skeep)
            (("1" (typepred "x")
              (("1" (typepred "y")
                (("1" (expand "length" -)
                  (("1" (expand "length" -)
                    (("1" (lift-if)
                      (("1" (split)
                        (("1" (split)
                          (("1" (expand "+")
                            (("1" (expand "add")
                              (("1"
                                (expand "add")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "length")
                                    (("1"
                                      (expand "length")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (expand "+")
                (("2" (expand "add" 1)
                  (("2" (expand "length" 1)
                    (("2" (inst -1 "cdr(x)" "cdr(y)")
                      (("1" (assert) nil nil)
                       ("2" (typepred "y") (("2" (grind) nil nil)) nil)
                       ("3" (typepred "x") (("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (Environment type-eq-decl nil hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (j skolem-const-decl "nat" diff_re_props nil)
    (x skolem-const-decl "VectorN(2 + j)" diff_re_props nil)
    (y skolem-const-decl "VectorN(2 + j)" diff_re_props nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices))
   nil
   (diff_re_cont subtype
    "(matrices.+)(chain_rule_re.env_2_vec(diff_re_props.k, diff_re_props.env), diff_re_props.x)"
    "matrices.VectorN((number_fields.+)(1, diff_re_props.k))")))
 (diff_re_cont 0
  (diff_re_cont-1 nil 3872156860
   ("" (skeep)
    (("" (typepred "re")
      (("" (expand "diff_re?")
        (("" (expand "differentiable_re_p?")
          (("" (expand "differentiable?")
            (("" (expand "convergence_zero?")
              (("" (expand "NQ")
                (("" (expand "vec_re")
                  (("" (lemma "vec_2_env_id")
                    (("" (inst -2 "env")
                      (("" (inst? -1)
                        (("" (replace -1)
                          (("" (hide -1)
                            (("" (skeep)
                              ((""
                                (skeep)
                                ((""
                                  (expand "norm_inf")
                                  ((""
                                    (expand "norm_inf")
                                    ((""
                                      (case "epsilon - sqrt(g*g) > 0")
                                      (("1"
                                        (inst -2 "epsilon - sqrt(g*g)")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst
                                             1
                                             "min(1/(1+k),delta)")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst -2 "x_1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "FORALL(k:nat,x_1:VectorN(1+k)): x_1 - zero_vec(1 + k) = x_1")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "k"
                                                       "x_1")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (case
                                                               "FORALL(k:nat,x_1:VectorN(1+k) | NOT (x_1 =zero_vec(1+k))): max(abs(x_1)) > 0")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "k"
                                                                 "x_1")
                                                                (("1"
                                                                  (case
                                                                   "FORALL(k:nat,x_1:VectorN(1+k)): max(abs(x_1)) <= sqrt(x_1*x_1)")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "k"
                                                                     "x_1")
                                                                    (("1"
                                                                      (lemma
                                                                       "abs_div")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "max(abs(x_1))"
                                                                         "(re(vec_2_env(k, env_2_vec(k, env) + x_1, env)) - re(env) - g * x_1)")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "abs"
                                                                               -3
                                                                               2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (mult-by
                                                                                   -3
                                                                                   "max(abs(x_1))")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "abs_diff")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "(re(vec_2_env(k, env_2_vec(k, env) + x_1, env)) - re(env))"
                                                                                       "g * x_1")
                                                                                      (("1"
                                                                                        (case
                                                                                         "abs((re(vec_2_env(k, env_2_vec(k, env) + x_1, env)) - re(env))) - abs(g * x_1) < (epsilon - sqrt(g * g)) * max(abs(x_1))")
                                                                                        (("1"
                                                                                          (hide
                                                                                           -2
                                                                                           -5)
                                                                                          (("1"
                                                                                            (case
                                                                                             "abs((re(vec_2_env(k, env_2_vec(k, env) + x_1, env)) - re(env))) < (epsilon - sqrt(g * g)) * max(abs(x_1)) + abs(g * x_1)")
                                                                                            (("1"
                                                                                              (hide
                                                                                               -2)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "cauchy_schwarz[1+k].cauchy_schwarz")
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "(epsilon - sqrt(g * g)) * max(abs(x_1)) + abs(g * x_1) <= epsilon*sqrt(x_1 * x_1)")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "sqrt(x_1 * x_1) <=1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (name
                                                                                                           "A"
                                                                                                           "abs(g * x_1) + max(abs(x_1)) * epsilon - max(abs(x_1)) * sqrt(g * g)")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (name
                                                                                                                 "B"
                                                                                                                 "sqrt(x_1 * x_1)")
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (name
                                                                                                                       "C"
                                                                                                                       "abs(re(vec_2_env(k, env_2_vec(k, env) + x_1, env)) - re(env))")
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -3
                                                                                                                             -5
                                                                                                                             -6
                                                                                                                             -7)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (grind-reals)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "A<=epsilon")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -3)
                                                                                                                                        (("2"
                                                                                                                                          (grind)
                                                                                                                                          (("2"
                                                                                                                                            (grind-reals)
                                                                                                                                            (("2"
                                                                                                                                              (case
                                                                                                                                               "epsilon*B<=epsilon")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (hide
                                                                                                                                                   2
                                                                                                                                                   -2)
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    (("2"
                                                                                                                                                      (grind-reals)
                                                                                                                                                      (("2"
                                                                                                                                                        (mult-by
                                                                                                                                                         -1
                                                                                                                                                         "epsilon")
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         -5
                                                                                                         -4
                                                                                                         -3
                                                                                                         -2
                                                                                                         -1
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "dot_max_ineq")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "x_1"
                                                                                                             "x_1")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "norm_inf")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "x_1")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -2)
                                                                                                                    (("2"
                                                                                                                      (case
                                                                                                                       "abs(x_1 * x_1) <= 1/(1+k)")
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "dot_pos")
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "abs"
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "sqrt_le")
                                                                                                                                  (("1"
                                                                                                                                    (inst?
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (case
                                                                                                                                         "sqrt(1 / (1 + k)) <= 1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           2
                                                                                                                                           3
                                                                                                                                           -)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "sqrt_le1")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "1/(1+k)")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "k")
                                                                                                                                                  (("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (both-sides
                                                                                                                                                       "*"
                                                                                                                                                       "1+k")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (case
                                                                                                                         "max(abs(x_1)) < 1/(1+k)")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -2
                                                                                                                           -3
                                                                                                                           -4
                                                                                                                           -6
                                                                                                                           2
                                                                                                                           3)
                                                                                                                          (("1"
                                                                                                                            (copy
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (mult-by
                                                                                                                               -1
                                                                                                                               "max(abs(x_1))")
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "max(abs(x_1))*max(abs(x_1)) < 1 / (1 + k)*1/(1+k)")
                                                                                                                                (("1"
                                                                                                                                  (name
                                                                                                                                   "A"
                                                                                                                                   "max(abs(x_1)) * max(abs(x_1))")
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "(1 + k) * max(abs(x_1)) * max(abs(x_1)) = (1 + k) * (max(abs(x_1)) * max(abs(x_1)))")
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -2)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -2
                                                                                                                                             -1
                                                                                                                                             -4)
                                                                                                                                            (("1"
                                                                                                                                              (name
                                                                                                                                               "B"
                                                                                                                                               "(1+k)")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (mult-by
                                                                                                                                                       -1
                                                                                                                                                       "B")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (name
                                                                                                                                     "A"
                                                                                                                                     "max(abs(x_1))")
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -4
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (mult-by
                                                                                                                                             -2
                                                                                                                                             "1/(1+k)")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "min")
                                                                                                                          (("2"
                                                                                                                            (lift-if)
                                                                                                                            (("2"
                                                                                                                              (split)
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "(epsilon - sqrt(g * g)) * max(abs(x_1)) + abs(g * x_1) <= (epsilon - sqrt(g * g)) * max(abs(x_1)) + sqrt(g * g) * sqrt(x_1 * x_1)")
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "epsilon * sqrt(x_1 * x_1) = (epsilon - sqrt(g * g))*sqrt(x_1 * x_1) + sqrt(g * g) * sqrt(x_1 * x_1)")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (mult-by
                                                                                                               -4
                                                                                                               "epsilon-sqrt(g*g)")
                                                                                                              (("1"
                                                                                                                (name
                                                                                                                 "A"
                                                                                                                 "max(abs(x_1)) * (epsilon - sqrt(g * g))")
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (name
                                                                                                                       "B"
                                                                                                                       "(epsilon - sqrt(g * g)) * sqrt(x_1 * x_1)")
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "A + sqrt(g * g) * sqrt(x_1 * x_1) <= B + sqrt(g * g) * sqrt(x_1 * x_1)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (lemma
                                                                                                                 "dot_non_neg")
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (lemma
                                                                                                                 "dot_non_neg")
                                                                                                                (("3"
                                                                                                                  (inst?)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (lemma
                                                                                                       "dot_non_neg")
                                                                                                      (("3"
                                                                                                        (inst?)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "dot_non_neg")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2
                                                                     -)
                                                                    (("2"
                                                                      (induct
                                                                       "k")
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (typepred
                                                                           "x_1!1")
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             -2)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               -2)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "abs")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "max")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "length"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "*")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "dot")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "dot")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "sqrt_sq_abs")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "sq")
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (expand
                                                                             "abs"
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "*")
                                                                              (("2"
                                                                                (expand
                                                                                 "dot"
                                                                                 1)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "sqrt_plus_le")
                                                                                  (("2"
                                                                                    (inst?
                                                                                     -1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "sqrt_sq_abs")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "sq")
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -3
                                                                                               "cdr(x_1!1)")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "max"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (lift-if
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (split)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "max"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (lift-if)
                                                                                                            (("2"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "sqrt_le")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "dot(cdr(x_1!1), cdr(x_1!1))"
                                                                                                                     "dot(cdr(x_1!1), cdr(x_1!1))+car(x_1!1) * car(x_1!1)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (lemma
                                                                                                                       "dot_non_neg")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "*"
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "dot"
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (lemma
                                                                                                                       "dot_non_neg")
                                                                                                                      (("3"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "cdr(x_1!1)")
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "*")
                                                                                                                            (("3"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "sqrt_le")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "car(x_1!1) * car(x_1!1)"
                                                                                                                     "dot(cdr(x_1!1), cdr(x_1!1))+car(x_1!1) * car(x_1!1)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "dot_non_neg")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "cdr(x_1!1)")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "*"
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (lemma
                                                                                                                       "dot_non_neg")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "x_1!1")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "*"
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "dot"
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (typepred
                                                                                                 "x_1!1")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "dot_non_neg")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "cdr(x_1!1)")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "*"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (lemma
                                                                           "dot_non_neg")
                                                                          (("3"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (skeep)
                                                                        (("4"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skeep)
                                                                    (("3"
                                                                      (lemma
                                                                       "dot_non_neg")
                                                                      (("3"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (skeep)
                                                                    (("4"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2
                                                                 -)
                                                                (("2"
                                                                  (induct
                                                                   "k")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (expand
                                                                       "abs")
                                                                      (("1"
                                                                        (expand
                                                                         "max")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (typepred
                                                                             "x_1!1")
                                                                            (("1"
                                                                              (expand
                                                                               "zero_vec")
                                                                              (("1"
                                                                                (expand
                                                                                 "zero_vec")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "list_extensionality")
                                                                                    (("1"
                                                                                      (inst?
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (lemma
                                                                         "norm_inf_recurse")
                                                                        (("2"
                                                                          (expand
                                                                           "norm_inf")
                                                                          (("2"
                                                                            (typepred
                                                                             "x_1!1")
                                                                            (("2"
                                                                              (inst
                                                                               -3
                                                                               "2+j"
                                                                               "x_1!1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "norm_inf")
                                                                                  (("2"
                                                                                    (replace
                                                                                     -3)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -4
                                                                                       "cdr(x_1!1)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "length"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "list_extensionality")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "x_1!1"
                                                                                               "cons(car(x_1!1),cdr(x_1!1))")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "zero_vec"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (skeep)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "nth"
                                                                                                           1)
                                                                                                          (("3"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skeep)
                                                                    (("3"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep)
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2 -)
                                                      (("2"
                                                        (induct "k")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (expand
                                                               "add")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (typepred
                                                                   "x_1!1")
                                                                  (("1"
                                                                    (grind)
                                                                    (("1"
                                                                      (lemma
                                                                       "list_extensionality")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (grind)
                                                                              (("1"
                                                                                (typepred
                                                                                 "n")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "cdr(x_1!1)")
                                                              (("1"
                                                                (expand
                                                                 "-")
                                                                (("1"
                                                                  (expand
                                                                   "sub"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "scal"
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (typepred
                                                                         "zero_vec(2+j)")
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -2)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "zero_vec"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "add"
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "sub")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -3)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "list_extensionality")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nth")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "x_1!1")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil)
                                         ("3"
                                          (lemma "dot_non_neg")
                                          (("3" (inst?) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "dot_non_neg")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (lemma "sqrt_pos")
                                            (("2"
                                              (both-sides
                                               "+"
                                               "sqrt(g*g)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case
                                                   "epsilon <= sqrt(g*g)")
                                                  (("1"
                                                    (hide 1)
                                                    (("1"
                                                      (inst -2 "g*g")
                                                      (("1"
                                                        (inst
                                                         -4
                                                         "sqrt(g*g)")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "min(epsilon/(1+sqrt(1+k))/sqrt(g*g),delta)")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "x_1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "abs_div")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (case
                                                                             "FORALL(k:nat,x_1:VectorN(1+k) | NOT (x_1 =zero_vec(1+k))): max(abs(x_1)) > 0")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "k"
                                                                               "x_1")
                                                                              (("1"
                                                                                (expand
                                                                                 "abs"
                                                                                 -5
                                                                                 2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (mult-by
                                                                                     -5
                                                                                     "max(abs(x_1))")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "abs_diff")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "(re(vec_2_env(k, env_2_vec(k, env) + x_1, env)) - re(env))"
                                                                                         "g * x_1")
                                                                                        (("1"
                                                                                          (name
                                                                                           "AA"
                                                                                           "abs(re(vec_2_env(k, env_2_vec(k, env) + x_1, env)) - re(env))")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "AA < sqrt(g * g) * max(abs(x_1)) + abs(g*x_1)")
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -2
                                                                                                   -7)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "cauchy_schwarz[1+k].cauchy_schwarz")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "dot_max_ineq")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "x_1"
                                                                                                           "x_1")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "dot_pos")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "x_1")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "abs"
                                                                                                                 -2
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "sqrt_le")
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -2
                                                                                                                           -3)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "sqrt(length(x_1) * norm_inf(x_1) * norm_inf(x_1)) = sqrt(1+k)*norm_inf(x_1)")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "AA <sqrt(g*g)*(1+sqrt(1+k))*max(abs(x_1))")
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "FORALL(k:nat,x_1:VectorN(1+k)): x_1 - zero_vec(1 + k) = x_1")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "k"
                                                                                                                                       "x_1")
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (case
                                                                                                                                           "sqrt(g * g) * (1 + sqrt(1 + k)) * max(abs(x_1)) < epsilon")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (name
                                                                                                                                             "dd"
                                                                                                                                             "sqrt(g * g) * (1 + sqrt(1 + k)) ")
                                                                                                                                            (("2"
                                                                                                                                              (case
                                                                                                                                               "epsilon / (1 + sqrt(1 + k)) / sqrt(g * g) = epsilon/(dd)")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -2)
                                                                                                                                                  (("1"
                                                                                                                                                    (mult-by
                                                                                                                                                     -12
                                                                                                                                                     "dd")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "min")
                                                                                                                                                        (("1"
                                                                                                                                                          (lift-if)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (split)
                                                                                                                                                              (("1"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("1"
                                                                                                                                                                  (mult-by
                                                                                                                                                                   -1
                                                                                                                                                                   "dd")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (grind-reals)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (grind-reals)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("3"
                                                                                                                                                (expand
                                                                                                                                                 "dd")
                                                                                                                                                (("3"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       2
                                                                                                                                       -)
                                                                                                                                      (("2"
                                                                                                                                        (induct
                                                                                                                                         "k")
                                                                                                                                        (("1"
                                                                                                                                          (skeep)
                                                                                                                                          (("1"
                                                                                                                                            (typepred
                                                                                                                                             "x_1!1")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "length")
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "length")
                                                                                                                                                (("1"
                                                                                                                                                  (lift-if)
                                                                                                                                                  (("1"
                                                                                                                                                    (split)
                                                                                                                                                    (("1"
                                                                                                                                                      (grind)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "list_extensionality")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (grind)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (skeep)
                                                                                                                                          (("2"
                                                                                                                                            (skeep)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "-")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "sub")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "zero_vec"
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "add"
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "scal"
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "cdr(x_1!1)")
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (hide
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "list_extensionality")
                                                                                                                                                              (("1"
                                                                                                                                                                (inst?)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (grind)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "nth")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (typepred
                                                                                                                                                           "x_1!1")
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (case
                                                                                                                                     "abs(g * x_1) <= sqrt(g * g) *sqrt(1+k)* norm_inf( x_1)")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "norm_inf")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "norm_inf")
                                                                                                                                        (("2"
                                                                                                                                          (mult-by
                                                                                                                                           -1
                                                                                                                                           "sqrt(g*g)")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (grind-reals)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -)
                                                                                                                                (("2"
                                                                                                                                  (typepred
                                                                                                                                   "x_1")
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "sqrt_times")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "1+k"
                                                                                                                                       "norm_inf(x_1) * norm_inf(x_1)")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -
                                                                               2)
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "norms.abs_pos")
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "norms.abs_zero")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "x_1!1")
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "min")
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (grind-reals)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "sqrt_le")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "epsilon^2"
                                                           "g*g")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (split)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "dot_non_neg")
                                        (("3" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_re? const-decl "bool" chain_rule_re nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (* const-decl "real" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (j skolem-const-decl "nat" diff_re_props nil)
    (x_1!1 skolem-const-decl "VectorN(2 + j)" diff_re_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (max def-decl "real" norms mv_analysis)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         mv_analysis)
    (abs_div formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (div_cancel2 formula-decl nil real_props nil)
    (x_1 skolem-const-decl
     "{xx: (NQ(projv(k, P), env_2_vec(k, env))) | NOT xx = zero_vec(1 + k)}"
     diff_re_props nil)
    (env skolem-const-decl "(P)" diff_re_props nil)
    (P skolem-const-decl "(ddl_dom?)" diff_re_props nil)
    (dot_non_neg formula-decl nil cauchy_schwarz mv_analysis)
    (le_times_le_pos formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (dot_max_ineq formula-decl nil norms mv_analysis)
    (sqrt_le formula-decl nil sqrt reals)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (sqrt_le1 formula-decl nil sqrt reals)
    (dot_pos formula-decl nil cauchy_schwarz mv_analysis)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cauchy_schwarz formula-decl nil cauchy_schwarz mv_analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (< const-decl "bool" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (abs_diff formula-decl nil abs_lems reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (sqrt_sq_abs formula-decl nil sqrt reals)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (sq const-decl "nonneg_real" sq reals)
    (dot def-decl "real" matrices matrices)
    (sqrt_plus_le formula-decl nil sqrt reals)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (x_1!1 skolem-const-decl "VectorN(2 + j)" diff_re_props nil)
    (j skolem-const-decl "nat" diff_re_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (length_singleton formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (posnat nonempty-type-eq-decl nil integers nil)
    (j skolem-const-decl "nat" diff_re_props nil)
    (x_1!1 skolem-const-decl
     "{x_1: VectorN(2 + j) | NOT (x_1 = zero_vec(2 + j))}"
     diff_re_props nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (norm_inf_recurse formula-decl nil norms mv_analysis)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (projv const-decl "bool" chain_rule_re nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (epsilon skolem-const-decl "posreal" diff_re_props nil)
    (g skolem-const-decl "VectorN(1 + k)" diff_re_props nil)
    (k skolem-const-decl "nat" diff_re_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_plus_gt1 formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (abs_pos formula-decl nil norms mv_analysis)
    (abs_zero formula-decl nil norms mv_analysis)
    (sqrt_square formula-decl nil sqrt reals)
    (sqrt_times formula-decl nil sqrt reals)
    (x_1!1 skolem-const-decl "VectorN(2 + j)" diff_re_props nil)
    (j skolem-const-decl "nat" diff_re_props nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (dd skolem-const-decl "nnreal" diff_re_props nil)
    (div_div2 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (delta skolem-const-decl "posreal" diff_re_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_min application-judgement "{z: nzreal | z <= x AND z <= y}"
     real_defs nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (expt def-decl "real" exponentiation nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (sqrt_pos judgement-tcc nil sqrt reals)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (vec_2_env_id formula-decl nil chain_rule_re nil)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (differentiable? const-decl "bool" differentiable_def mv_analysis))
   shostak))
 (diff_re_divbound_TCC1 0
  (diff_re_divbound_TCC1-1 nil 3875373499 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (projv const-decl "bool" chain_rule_re nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (connected? const-decl "bool" differentiation nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" differentiation nil)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec_re const-decl "real" chain_rule_re nil)
    (* const-decl "real" matrices matrices)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (diff_re_divbound subtype "diff_re_props.x"
    "(list_adt[real].cons?)")))
 (diff_re_divbound_TCC2 0
  (diff_re_divbound_TCC2-1 nil 3875373499
   ("" (skeep)
    (("" (expand "norm_inf")
      (("" (expand "norm_inf")
        (("" (lemma "norms.abs_zero")
          (("" (inst?)
            (("" (assert) (("" (skeep) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (abs_zero formula-decl nil norms mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (/= const-decl "boolean" notequal nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (projv const-decl "bool" chain_rule_re nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (diff_re_divbound subtype
    "norms.norm_inf((number_fields.+)(1, diff_re_props.k))(diff_re_props.x)"
    "nznum")))
 (diff_re_divbound 0
  (diff_re_divbound-1 nil 3874762199
   ("" (skeep)
    (("" (typepred "re")
      (("" (expand "diff_re?")
        (("" (inst -1 "env")
          (("" (expand "differentiable_re_p?")
            (("" (expand "differentiable?")
              (("" (skeep)
                (("" (expand "convergence_zero?")
                  (("" (inst -1 "1/100")
                    (("" (skeep)
                      (("" (inst 1 "delta")
                        (("" (expand "NQ")
                          (("" (expand "vec_re")
                            (("" (lemma "vec_2_env_id")
                              ((""
                                (inst?)
                                ((""
                                  (replace -1)
                                  ((""
                                    (hide -1)
                                    ((""
                                      (inst
                                       1
                                       "1/100 + (1+k)*norm_inf(g)")
                                      ((""
                                        (skeep)
                                        ((""
                                          (inst -1 "x")
                                          ((""
                                            (assert)
                                            ((""
                                              (split)
                                              (("1"
                                                (lemma "abs_diff")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "(re(vec_2_env(k, env_2_vec(k, env) + x, env)) - re(env)) / norm_inf(1 + k)(x)"
                                                   "(g * x) / norm_inf(1 + k)(x)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "(re(vec_2_env(k, env_2_vec(k, env) + x, env)) - re(env)) / norm_inf(1 + k)(x) - (g * x) / norm_inf(1 + k)(x) = (re(vec_2_env(k, env_2_vec(k, env) + x, env)) - re(env) - g * x) / norm_inf(1 + k)(x)")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (name
                                                             "A"
                                                             "abs((re(vec_2_env(k, env_2_vec(k, env) + x, env)) - re(env)) / norm_inf(1 + k)(x))")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (name
                                                                   "B"
                                                                   "abs((re(vec_2_env(k, env_2_vec(k, env) + x, env)) - re(env) - g * x) / norm_inf(1 + k)(x))")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "abs_div")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "dot_max_ineq")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "norm_inf"
                                                                                       -2)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "norm_inf(x)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "abs"
                                                                                           -3
                                                                                           2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "A <= B + length(g) * norm_inf(g)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (div-by
                                                                                                   -2
                                                                                                   "norm_inf(x)")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (case
                                                   "x - zero_vec(1 + k) = x")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2 3 -)
                                                    (("2"
                                                      (lemma "sub_idx")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (lemma
                                                             "scal_zero")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (lemma
                                                                   "zero_id")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "x")
                                                                    (("2"
                                                                      (typepred
                                                                       "x")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_re? const-decl "bool" chain_rule_re nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (vec_2_env_id formula-decl nil chain_rule_re nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (projv const-decl "bool" chain_rule_re nil)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (* const-decl "real" matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (norm? const-decl "bool" norms mv_analysis)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (<= const-decl "bool" reals nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dot_max_ineq formula-decl nil norms mv_analysis)
    (abs_div formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs_diff formula-decl nil abs_lems reals)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub_idx formula-decl nil vector_arithmetic mv_analysis)
    (zero_id formula-decl nil vector_arithmetic mv_analysis)
    (scal_zero formula-decl nil vector_arithmetic mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   shostak))
 (diff_re_val 0
  (diff_re_val-3 nil 3903443287
   ("" (skeep)
    (("" (expand "diff_re?")
      (("" (skeep)
        (("" (expand "differentiable_re_p?")
          (("" (expand "differentiable?")
            (("" (expand "convergence_zero?")
              (("" (expand "NQ")
                (("" (expand "vec_re")
                  (("" (expand "val")
                    (("" (lemma "vec_2_env_id")
                      (("" (inst? -1)
                        (("" (replace -1)
                          (("" (lemma "vec_2_env_plus")
                            (("" (inst?)
                              ((""
                                (case "dlvar_index(v)<k+1")
                                (("1"
                                  (inst 1 "e(1+k,dlvar_index(v))")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 1 "epsilon")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst
                                           -2
                                           "x"
                                           "dlvar_index(v)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "vec_2_env_id")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "vec_2_env")
                                                          (("1"
                                                            (case
                                                             "FORALL(k:nat, i:below(1+k), x:VectorN(1+k)): e(1 + k, i) * x = nth(x,i)")
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               2
                                                               -)
                                                              (("2"
                                                                (induct
                                                                 "k")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (expand
                                                                       "*")
                                                                      (("2"
                                                                        (expand
                                                                         "dot"
                                                                         1)
                                                                        (("2"
                                                                          (typepred
                                                                           "e(2 + j, i)")
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -2)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1
                                                                                     -2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "e"
                                                                                       1)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -2
                                                                                               "i-1"
                                                                                               "cdr(x!1)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (typepred
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nth"
                                                                                               2)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "FORALL(k:nat,x:VectorN(1+k)): zero_vec(1 + k) * x = 0")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (typepred
                                                                                                         "x!1")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2
                                                                                                     3
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (induct
                                                                                                       "k")
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (skeep)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "zero_vec"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "*")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "dot"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (inst?
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "x!2")
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (inst 2 "zero_vec(1+k)")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst 2 "epsilon")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst
                                           -1
                                           "x"
                                           "dlvar_index(v)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case
                                                   "FORALL(k:nat, x:VectorN(1+k)): zero_vec(1 + k) * x = 0")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2 3 -)
                                                    (("2"
                                                      (induct "k")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (expand
                                                             "*")
                                                            (("2"
                                                              (expand
                                                               "dot"
                                                               1)
                                                              (("2"
                                                                (typepred
                                                                 "zero_vec(2+j)")
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -2)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "zero_vec"
                                                                           1
                                                                           2)
                                                                          (("2"
                                                                            (lemma
                                                                             "zero_cdr")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -4
                                                                                     "cdr(x!1)")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((differentiable? const-decl "bool" differentiable_def mv_analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (val const-decl "real" hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (vec_2_env_plus formula-decl nil chain_rule_re nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (< const-decl "bool" reals nil) (dLVar type-decl nil hp_def nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Vector type-eq-decl nil matrices matrices)
    (* const-decl "real" matrices matrices)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (dot def-decl "real" matrices matrices)
    (x!2 skolem-const-decl "VectorN(2 + j!1)" diff_re_props nil)
    (j!1 skolem-const-decl "nat" diff_re_props nil)
    (x!1 skolem-const-decl "VectorN(2 + j)" diff_re_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (i skolem-const-decl "below(2 + j)" diff_re_props nil)
    (j skolem-const-decl "nat" diff_re_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (projv const-decl "bool" chain_rule_re nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (k skolem-const-decl "nat" diff_re_props nil)
    (v skolem-const-decl "dLVar" diff_re_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_cdr formula-decl nil vector_arithmetic mv_analysis)
    (j skolem-const-decl "nat" diff_re_props nil)
    (x!1 skolem-const-decl "VectorN(2 + j)" diff_re_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VectorN type-eq-decl nil matrices matrices)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (vec_2_env_id formula-decl nil chain_rule_re nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (diff_re? const-decl "bool" chain_rule_re nil))
   nil)
  (diff_re_val-2 nil 3903442919
   ("" (skeep)
    (("" (expand "diff_re?")
      (("" (skeep)
        (("" (expand "differentiable_re_p?")
          (("" (expand "differentiable?")
            (("" (expand "convergence_zero?")
              (("" (expand "NQ")
                (("" (expand "vec_re")
                  (("" (expand "val")
                    (("" (lemma "vec_2_env_id")
                      (("" (inst? -1)
                        (("" (replace -1)
                          (("" (lemma "vec_2_env_plus")
                            (("" (inst?)
                              ((""
                                (case "dlvar_index(v)<k+1")
                                (("1"
                                  (inst 1 "e(1+k,dlvar_index(v))")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 1 "epsilon")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst
                                           -2
                                           "x"
                                           "dlvar_index(v)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "vec_2_env_id")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "vec_2_env")
                                                          (("1"
                                                            (case
                                                             "FORALL(k:nat, i:below(1+k), x:VectorN(1+k)): e(1 + k, i) * x = nth(x,i)")
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               2
                                                               -)
                                                              (("2"
                                                                (induct
                                                                 "k")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (expand
                                                                       "*")
                                                                      (("2"
                                                                        (expand
                                                                         "dot"
                                                                         1)
                                                                        (("2"
                                                                          (typepred
                                                                           "e(2 + j, i)")
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -2)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1
                                                                                     -2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "e"
                                                                                       1)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -2
                                                                                               "i-1"
                                                                                               "cdr(x!1)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (typepred
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nth"
                                                                                               2)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "FORALL(k:nat,x:VectorN(1+k)): zero_vec(1 + k) * x = 0")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (typepred
                                                                                                         "x!1")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2
                                                                                                     3
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (induct
                                                                                                       "k")
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (skeep)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "zero_vec"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "*")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "dot"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (inst?
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "x!2")
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (inst 2 "zero_vec(1+k)")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst 2 "epsilon")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst
                                           -1
                                           "x"
                                           "dlvar_index(v)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case
                                                   "FORALL(k:nat, x:VectorN(1+k)): zero_vec(1 + k) * x = 0")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2 3 -)
                                                    (("2"
                                                      (induct "k")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (expand
                                                             "*")
                                                            (("2"
                                                              (expand
                                                               "dot"
                                                               1)
                                                              (("2"
                                                                (typepred
                                                                 "zero_vec(2+j)")
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -2)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "zero_vec"
                                                                           1
                                                                           2)
                                                                          (("2"
                                                                            (lemma
                                                                             "zero_cdr")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -4
                                                                                     "cdr(x!1)")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_re? const-decl "bool" chain_rule_re nil)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (vec_2_env_id formula-decl nil chain_rule_re nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (x!1 skolem-const-decl "VectorN(2 + j)" diff_re_props nil)
    (j skolem-const-decl "nat" diff_re_props nil)
    (zero_cdr formula-decl nil vector_arithmetic mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (v skolem-const-decl "dLVar" diff_re_props nil)
    (k skolem-const-decl "nat" diff_re_props nil)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (/= const-decl "boolean" notequal nil)
    (projv const-decl "bool" chain_rule_re nil)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "nat" diff_re_props nil)
    (i skolem-const-decl "below(2 + j)" diff_re_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (x!1 skolem-const-decl "VectorN(2 + j)" diff_re_props nil)
    (j!1 skolem-const-decl "nat" diff_re_props nil)
    (x!2 skolem-const-decl "VectorN(2 + j!1)" diff_re_props nil)
    (dot def-decl "real" matrices matrices)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (* const-decl "real" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (below type-eq-decl nil naturalnumbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (dLVar type-decl nil hp_def nil) (< const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (vec_2_env_plus formula-decl nil chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (val const-decl "real" hp_def nil)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (differentiable? const-decl "bool" differentiable_def mv_analysis))
   nil)
  (diff_re_val-1 nil 3870947559
   ("" (skeep)
    (("" (expand "diff_re?")
      (("" (skeep)
        (("" (expand "differentiable_re_p?")
          (("" (expand "differentiable?")
            (("" (expand "convergence_zero?")
              (("" (expand "NQ")
                (("" (expand "vec_re")
                  (("" (expand "val")
                    (("" (lemma "vec_2_env_id")
                      (("" (inst? -1)
                        (("" (replace -1)
                          (("" (lemma "vec_2_env_plus")
                            (("" (inst?)
                              ((""
                                (case "i<k+1")
                                (("1"
                                  (inst 1 "e(1+k,i)")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 1 "epsilon")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst -2 "x" "i")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "vec_2_env_id")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "vec_2_env")
                                                          (("1"
                                                            (case
                                                             "FORALL(k:nat, i:below(1+k), x:VectorN(1+k)): e(1 + k, i) * x = nth(x,i)")
                                                            (("1"
                                                              (inst?
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               2
                                                               -)
                                                              (("2"
                                                                (induct
                                                                 "k")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (expand
                                                                       "*")
                                                                      (("2"
                                                                        (expand
                                                                         "dot"
                                                                         1)
                                                                        (("2"
                                                                          (typepred
                                                                           "e(2 + j, i!1)")
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -2)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1
                                                                                     -2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "e"
                                                                                       1)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -2
                                                                                               "i!1-1"
                                                                                               "cdr(x!1)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (typepred
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nth"
                                                                                               2)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "FORALL(k:nat,x:VectorN(1+k)): zero_vec(1 + k) * x = 0")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "*")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (typepred
                                                                                                         "x!1")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2
                                                                                                     3
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (induct
                                                                                                       "k")
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (skeep)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "zero_vec"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "*")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "dot"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (inst?
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "x!2")
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (inst 2 "zero_vec(1+k)")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst 2 "epsilon")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst -1 "x" "i")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case
                                                   "FORALL(k:nat, x:VectorN(1+k)): zero_vec(1 + k) * x = 0")
                                                  (("1"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2 3 -)
                                                    (("2"
                                                      (induct "k")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (expand
                                                             "*")
                                                            (("2"
                                                              (expand
                                                               "dot"
                                                               1)
                                                              (("2"
                                                                (typepred
                                                                 "zero_vec(2+j)")
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -2)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "zero_vec"
                                                                           1
                                                                           2)
                                                                          (("2"
                                                                            (lemma
                                                                             "zero_cdr")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -4
                                                                                     "cdr(x!1)")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_re? const-decl "bool" chain_rule_re nil)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (vec_2_env_id formula-decl nil chain_rule_re nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (zero_cdr formula-decl nil vector_arithmetic mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (/= const-decl "boolean" notequal nil)
    (projv const-decl "bool" chain_rule_re nil)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (dot def-decl "real" matrices matrices)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (* const-decl "real" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (below type-eq-decl nil naturalnumbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (< const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (vec_2_env_plus formula-decl nil chain_rule_re nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (val const-decl "real" hp_def nil)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (differentiable? const-decl "bool" differentiable_def mv_analysis))
   shostak))
 (diff_re_cnst 0
  (diff_re_cnst-1 nil 3870947563
   ("" (skeep)
    (("" (expand "diff_re?")
      (("" (expand "differentiable_re_p?")
        (("" (skeep)
          (("" (expand "differentiable?")
            (("" (expand "convergence_zero?")
              (("" (expand "NQ")
                (("" (expand "cnst")
                  (("" (assert)
                    (("" (expand "vec_re")
                      (("" (inst 1 "zero_vec(1 + k)")
                        (("" (skeep)
                          (("" (inst 1 "epsilon")
                            (("" (skeep)
                              ((""
                                (expand "abs")
                                ((""
                                  (assert)
                                  ((""
                                    (expand "norm_inf")
                                    ((""
                                      (expand "norm_inf")
                                      ((""
                                        (assert)
                                        ((""
                                          (lift-if)
                                          ((""
                                            (case
                                             "zero_vec(1 + k) * x = 0")
                                            (("1"
                                              (replace -1)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (typepred "x")
                                                (("2"
                                                  (case
                                                   "FORALL(k:nat,x:VectorN(1+k)): zero_vec(1 + k) * x = 0")
                                                  (("1"
                                                    (inst? -1)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2 -)
                                                    (("2"
                                                      (induct "k")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (expand
                                                             "*"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "dot")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (typepred
                                                                   "zero_vec(2 + j)")
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "zero_vec"
                                                                         1
                                                                         2)
                                                                        (("2"
                                                                          (lemma
                                                                           "zero_cdr")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (replace
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -4
                                                                                   "cdr(x!1)")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "*")
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "x!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "length"
                                                                                       -2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VectorN type-eq-decl nil matrices matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (Vector type-eq-decl nil matrices matrices)
    (* const-decl "real" matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (projv const-decl "bool" chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (/= const-decl "boolean" notequal nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (x!1 skolem-const-decl "VectorN(2 + j)" diff_re_props nil)
    (j skolem-const-decl "nat" diff_re_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (zero_cdr formula-decl nil vector_arithmetic mv_analysis)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dot def-decl "real" matrices matrices)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (vec_re const-decl "real" chain_rule_re nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cnst const-decl "real" hp_def nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (diff_re? const-decl "bool" chain_rule_re nil))
   shostak))
 (diff_re_prod 0
  (diff_re_prod-1 nil 3870947566
   ("" (skeep)
    (("" (typepred "re1")
      (("" (typepred "re2")
        (("" (expand "diff_re?")
          (("" (expand "differentiable_re_p?")
            (("" (expand "differentiable?")
              (("" (lemma "diff_re_cont")
                (("" (skeep)
                  (("" (inst -1 "P" "env" "k" "re2")
                    (("" (inst -2 "env")
                      (("" (inst -3 "env")
                        (("" (expand "convergence_zero?")
                          (("" (expand "norm_inf")
                            (("" (expand "norm_inf")
                              ((""
                                (expand "NQ")
                                ((""
                                  (expand "vec_re")
                                  ((""
                                    (lemma "vec_2_env_id")
                                    ((""
                                      (inst?)
                                      ((""
                                        (replace -1)
                                        ((""
                                          (hide -1)
                                          ((""
                                            (skeep*)
                                            ((""
                                              (inst
                                               1
                                               "re2(env)*g!1+re1(env)*g")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (case
                                                   "g!1 = zero_vec(1+k)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (inst
                                                       -3
                                                       "epsilon/3*1/(abs(re1(env))+epsilon)")
                                                      (("1"
                                                        (inst
                                                         -4
                                                         "epsilon/3/(abs(re2(env))+epsilon/3)")
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (skeep*)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "epsilon/3")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (inst
                                                                   1
                                                                   "min(1,min(delta,min(delta!1,delta!2)))")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "x")
                                                                      (("1"
                                                                        (inst
                                                                         -3
                                                                         "x")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "x")
                                                                          (("1"
                                                                            (expand
                                                                             "*"
                                                                             1
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "*"
                                                                               1
                                                                               2)
                                                                              (("1"
                                                                                (name
                                                                                 "envo"
                                                                                 "vec_2_env(k, env_2_vec(k, env) + x, env)")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "norm_inf")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "norm_inf")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "abs_div")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "max(abs(x))"
                                                                                                   _)
                                                                                                  (("1"
                                                                                                    (copy
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (copy
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (inst?
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "max(abs(x)) > 0")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "abs"
                                                                                                                             -2
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "abs"
                                                                                                                                 -3
                                                                                                                                 2)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "abs"
                                                                                                                                   1
                                                                                                                                   2)
                                                                                                                                  (("1"
                                                                                                                                    (name
                                                                                                                                     "M"
                                                                                                                                     "max(abs(x))")
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (both-sides
                                                                                                                                           "*"
                                                                                                                                           "M")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "abs(re1(envo) * re2(envo) - (re2(env) * zero_vec(1 + k) + re1(env) * g) * x - re1(env) * re2(env)) / M * M = abs(re1(envo) * re2(envo) - (re2(env) * zero_vec(1 + k) + re1(env) * g) * x - re1(env) * re2(env))")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (mult-by
                                                                                                                                                     -2
                                                                                                                                                     "M")
                                                                                                                                                    (("1"
                                                                                                                                                      (mult-by
                                                                                                                                                       -3
                                                                                                                                                       "M")
                                                                                                                                                      (("1"
                                                                                                                                                        (case
                                                                                                                                                         "abs(re1(env))*abs((re2(envo) - re2(env) - g * x)) <= (M*epsilon / 3) *(abs(re1(env))/ (abs(re1(env)) + epsilon))")
                                                                                                                                                        (("1"
                                                                                                                                                          (hide
                                                                                                                                                           -4)
                                                                                                                                                          (("1"
                                                                                                                                                            (case
                                                                                                                                                             "abs(re2(envo))*abs((re1(envo) - re1(env) - g!1 * x)) <= (M*epsilon / 3) *(abs(re2(envo))/(abs(re2(env)) + epsilon/3))")
                                                                                                                                                            (("1"
                                                                                                                                                              (hide
                                                                                                                                                               -4)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "(abs(re2(envo)) / (abs(re2(env)) + epsilon / 3))< 1")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (case
                                                                                                                                                                     "abs(re2(envo)) * abs((re1(envo) - re1(env) - g!1 * x)) < (M * epsilon / 3)")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (hide
                                                                                                                                                                       -2
                                                                                                                                                                       -3)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (case
                                                                                                                                                                         "(abs(re1(env)) / (abs(re1(env)) + epsilon)) < 1")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (case
                                                                                                                                                                           "abs(re1(env)) * abs((re2(envo) - re2(env) - g * x)) < (M * epsilon / 3)")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             -2
                                                                                                                                                                             -4)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "abs_mult")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -1
                                                                                                                                                                                 "re1(env)"
                                                                                                                                                                                 "(re2(envo) - re2(env) - g * x)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -1
                                                                                                                                                                                   -2
                                                                                                                                                                                   rl)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (hide
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "abs_mult")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           -1
                                                                                                                                                                                           "re2(envo)"
                                                                                                                                                                                           "(re1(envo) - re1(env) - g!1 * x)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -1
                                                                                                                                                                                             -3
                                                                                                                                                                                             rl)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (hide
                                                                                                                                                                                               -1)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                   "triangle")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (inst
                                                                                                                                                                                                     -1
                                                                                                                                                                                                     "re1(env) * re2(envo) - re1(env) * re2(env) - re1(env) * (g * x)"
                                                                                                                                                                                                     "re1(envo) * re2(envo) - re1(env) * re2(envo) - re2(envo) * (g!1 * x)")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (case
                                                                                                                                                                                                         "re1(envo) * re2(envo) - re1(env) * re2(env) - re1(env) * (g * x) - re2(envo) * (g!1 * x) = re1(envo) * re2(envo) - (re2(env) * zero_vec(1 + k) + re1(env) * g) * x - re1(env) * re2(env)")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (hide
                                                                                                                                                                                                             2
                                                                                                                                                                                                             -)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (both-sides
                                                                                                                                                                                                               "*"
                                                                                                                                                                                                               "-1")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                                   "dot_linear_left")
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (inst
                                                                                                                                                                                                                     -1
                                                                                                                                                                                                                     "x"
                                                                                                                                                                                                                     "zero_vec(1+k)"
                                                                                                                                                                                                                     "re1(env)*g"
                                                                                                                                                                                                                     "re2(env)")
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                                           "asso_dot")
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                             -1
                                                                                                                                                                                                                             "re1(env)"
                                                                                                                                                                                                                             "g"
                                                                                                                                                                                                                             "x")
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (replace
                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (hide
                                                                                                                                                                                                                                   -)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                                                     "dot_zero")
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                                       -1
                                                                                                                                                                                                                                       "x"
                                                                                                                                                                                                                                       "1+k")
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (case
                                                                                                                                                                                                                                         "FORALL(k:nat, x,y:VectorN(1+k)): x*y = y*x")
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (inst
                                                                                                                                                                                                                                           -1
                                                                                                                                                                                                                                           "k"
                                                                                                                                                                                                                                           "x"
                                                                                                                                                                                                                                           "zero_vec(1+k)")
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (reveal
                                                                                                                                                                                                                                                 -)
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                                          (hide
                                                                                                                                                                                                                                           2
                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (induct
                                                                                                                                                                                                                                             "k")
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (skeep)
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (typepred
                                                                                                                                                                                                                                                 "x!1")
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (typepred
                                                                                                                                                                                                                                                   "y")
                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                    (grind)
                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                       "length")
                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                        (lift-if)
                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                          (split)
                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                            (split)
                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                              (grind)
                                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                                                              (grind)
                                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                            nil)
                                                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                                                            (grind)
                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                                              (skeep)
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (skeep)
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                                                   "*")
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                     "dot"
                                                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (inst
                                                                                                                                                                                                                                                       -1
                                                                                                                                                                                                                                                       "cdr(x!1)"
                                                                                                                                                                                                                                                       "cdr(y)")
                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                                                        (typepred
                                                                                                                                                                                                                                                         "y")
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (grind)
                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                                                       ("3"
                                                                                                                                                                                                                                                        (typepred
                                                                                                                                                                                                                                                         "x!1")
                                                                                                                                                                                                                                                        (("3"
                                                                                                                                                                                                                                                          (grind)
                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (mult-by
                                                                                                                                                                             -1
                                                                                                                                                                             "(M * epsilon / 3)")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide
                                                                                                                                                                           2
                                                                                                                                                                           -)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (grind-reals)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (mult-by
                                                                                                                                                                       -1
                                                                                                                                                                       "(M * epsilon / 3)")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (grind-reals)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "abs_diff")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -1
                                                                                                                                                                       "re2(envo)"
                                                                                                                                                                       "re2(env)")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (both-sides
                                                                                                                                                                           "*"
                                                                                                                                                                           "(abs(re2(env)) + epsilon/3)")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (case
                                                                                                                                                                             "(abs(re2(envo)) / (abs(re2(env)) + epsilon / 3)) * (abs(re2(env)) + epsilon / 3) = abs(re2(envo))")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (name
                                                                                                                                                                               "xx"
                                                                                                                                                                               "(abs(re2(env)) + epsilon / 3)")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -
                                                                                                                                                                                   2
                                                                                                                                                                                   3)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (case
                                                                                                                                                               "abs(re2(envo)) = 0")
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (mult-by
                                                                                                                                                                 -3
                                                                                                                                                                 "abs(re2(envo))")
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (case
                                                                                                                                                                     "abs((re1(envo) - re1(env) - zero_vec(1 + k) * x)) * abs(re2(envo)) = abs(re2(envo)) * abs((re1(envo) - re1(env) - g!1 * x))")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (case
                                                                                                                                                                         "(M * epsilon / 3) * (abs(re2(envo)) / (abs(re2(env)) + epsilon)) = abs(re2(envo)) * (epsilon / 3 / (abs(re2(env)) + epsilon)) * M")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (reveal
                                                                                                                                                                         -)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "abs(re1(env)) = 0")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (mult-by
                                                                                                                                                               -3
                                                                                                                                                               "abs(re1(env))")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (name
                                                                                                                                               "V"
                                                                                                                                               "abs(re1(envo) * re2(envo) - (re2(env) * zero_vec(1 + k) + re1(env) * g) * x - re1(env) * re2(env))")
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (div-by
                                                                                                                                                     -2
                                                                                                                                                     "M")
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (lemma
                                                                                                                             "norms.abs_pos")
                                                                                                                            (("2"
                                                                                                                              (inst?
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "norms.abs_zero")
                                                                                                                                (("2"
                                                                                                                                  (inst?)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (skeep)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "x")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma "dot_pos")
                                                    (("2"
                                                      (inst?)
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "epsilon/3/sqrt(g!1*g!1)/sqrt(1+k)")
                                                        (("1"
                                                          (name
                                                           "e1"
                                                           "epsilon / 3 / sqrt(g!1 * g!1)/sqrt(1+k)")
                                                          (("1"
                                                            (inst
                                                             -4
                                                             "epsilon/3/(abs(re1(env))+epsilon)")
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "epsilon/3/(abs(re2(env))+e1)")
                                                              (("1"
                                                                (skeep*)
                                                                (("1"
                                                                  (inst
                                                                   2
                                                                   "min(1,min(delta,min(delta!1,delta!2)))")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst
                                                                       -3
                                                                       "x")
                                                                      (("1"
                                                                        (inst
                                                                         -4
                                                                         "x")
                                                                        (("1"
                                                                          (inst
                                                                           -5
                                                                           "x")
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (expand
                                                                                   "norm_inf")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "norm_inf")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "*"
                                                                                       2
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "*"
                                                                                         2
                                                                                         2)
                                                                                        (("1"
                                                                                          (name
                                                                                           "envo"
                                                                                           "vec_2_env(k, env_2_vec(k, env) + x, env)")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "FORALL(k:nat, x:VectorN(1+k)): x - zero_vec(1 + k) = x")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "k"
                                                                                                   "x")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "FORALL(k:nat, x:VectorN(1+k)| x/=zero_vec(1+k)): max(abs(x)) > 0 ")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "k"
                                                                                                           "x")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "abs_div")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "max(abs(x))"
                                                                                                               _)
                                                                                                              (("1"
                                                                                                                (copy
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (copy
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (inst?)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "abs"
                                                                                                                                       -2
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "abs"
                                                                                                                                           -3
                                                                                                                                           2)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "abs"
                                                                                                                                             2
                                                                                                                                             2)
                                                                                                                                            (("1"
                                                                                                                                              (name
                                                                                                                                               "M"
                                                                                                                                               "max(abs(x))")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (mult-by
                                                                                                                                                     -2
                                                                                                                                                     "M")
                                                                                                                                                    (("1"
                                                                                                                                                      (mult-by
                                                                                                                                                       -3
                                                                                                                                                       "M")
                                                                                                                                                      (("1"
                                                                                                                                                        (mult-by
                                                                                                                                                         2
                                                                                                                                                         "M")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (case
                                                                                                                                                             "abs(re2(envo))*abs((re1(envo) - re1(env) - g!1 * x)) <= (M*epsilon / 3) *(abs(re2(envo))/(abs(re2(env)) + e1))")
                                                                                                                                                            (("1"
                                                                                                                                                              (hide
                                                                                                                                                               -3)
                                                                                                                                                              (("1"
                                                                                                                                                                (case
                                                                                                                                                                 "abs(re1(env))*abs((re2(envo) - re2(env) - g * x)) <= (M*epsilon / 3) *(abs(re1(env))/ (abs(re1(env)) + epsilon))")
                                                                                                                                                                (("1"
                                                                                                                                                                  (hide
                                                                                                                                                                   -4)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (case
                                                                                                                                                                     "abs(re1(envo) * re2(envo) - (re2(env) * g!1 + re1(env) * g) * x - re1(env) * re2(env)) / M * M = abs(re1(envo) * re2(envo) - (re2(env) * g!1 + re1(env) * g) * x - re1(env) * re2(env))")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (case
                                                                                                                                                                             "abs(re1(env)) * abs((re2(envo) - re2(env) - g * x)) < (M * epsilon / 3)")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (hide
                                                                                                                                                                               -2)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (case
                                                                                                                                                                                 "abs(re2(envo)) * abs((re1(envo) - re1(env) - g!1 * x)) < (M * epsilon / 3)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -3)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "abs_mult")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (copy
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -1
                                                                                                                                                                                         "re2(envo)"
                                                                                                                                                                                         "(re1(envo) - re1(env) - g!1 * x)")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -1
                                                                                                                                                                                           -3
                                                                                                                                                                                           rl)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (inst
                                                                                                                                                                                               -1
                                                                                                                                                                                               "re1(env)"
                                                                                                                                                                                               "(re2(envo) - re2(env) - g * x)")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (replace
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 -3
                                                                                                                                                                                                 rl)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (hide
                                                                                                                                                                                                   -1)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                       "triangle")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (inst
                                                                                                                                                                                                         -1
                                                                                                                                                                                                         "re1(env) * re2(envo) - re1(env) * re2(env) - re1(env) * (g * x)"
                                                                                                                                                                                                         "re1(envo) * re2(envo) - re1(env) * re2(envo) - re2(envo) * (g!1 * x)")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (name
                                                                                                                                                                                                             "AA"
                                                                                                                                                                                                             "abs(re1(env) * re2(envo) - re1(env) * re2(env) - re1(env) * (g * x))")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (replace
                                                                                                                                                                                                               -1)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (name
                                                                                                                                                                                                                 "BB"
                                                                                                                                                                                                                 "abs(re1(envo) * re2(envo) - re1(env) * re2(envo) - re2(envo) * (g!1 * x))")
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (hide
                                                                                                                                                                                                                     -1
                                                                                                                                                                                                                     -2)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                                       "triangle")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (inst
                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                         "re1(envo) * re2(envo) - re1(env) * re2(env) - re1(env) * (g * x) - re2(envo) * (g!1 * x)"
                                                                                                                                                                                                                         "(re2(envo)-re2(env))*(g!1*x)")
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (lemma
                                                                                                                                                                                                                           "abs_mult")
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (inst
                                                                                                                                                                                                                             -1
                                                                                                                                                                                                                             "(re2(envo) - re2(env))"
                                                                                                                                                                                                                             "(g!1 * x)")
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (replace
                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (hide
                                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (case
                                                                                                                                                                                                                                     "re1(envo) * re2(envo) - re1(env) * re2(env) - re1(env) * (g * x) - re2(env) * (g!1 * x) = re1(envo) * re2(envo) - (re2(env) * g!1 + re1(env) * g) * x - re1(env) * re2(env)")
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (replace
                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (name
                                                                                                                                                                                                                                         "CC"
                                                                                                                                                                                                                                         "abs(re1(envo) * re2(envo) - re1(env) * re2(env) - re1(env) * (g * x) - re2(envo) * (g!1 * x))")
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (hide
                                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (name
                                                                                                                                                                                                                                               "DD"
                                                                                                                                                                                                                                               "abs(re1(envo) * re2(envo) - (re2(env) * g!1 + re1(env) * g) * x - re1(env) * re2(env))")
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (hide
                                                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                                                   -2)
                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                    (case
                                                                                                                                                                                                                                                     "abs(re2(envo) - re2(env))*abs(g!1*x) <= epsilon / 3 / sqrt(g!1 * g!1) / sqrt(1 + k)*abs(g!1*x)")
                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                      (hide
                                                                                                                                                                                                                                                       -7)
                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                        (case
                                                                                                                                                                                                                                                         "epsilon / 3 / sqrt(g!1 * g!1) / sqrt(1 + k) * abs(g!1 * x) <= (M*epsilon)/3")
                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                                                          (hide
                                                                                                                                                                                                                                                           2
                                                                                                                                                                                                                                                           3
                                                                                                                                                                                                                                                           -)
                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                            (both-sides
                                                                                                                                                                                                                                                             "*"
                                                                                                                                                                                                                                                             "3/epsilon")
                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                (case
                                                                                                                                                                                                                                                                 "abs(g!1 * x) * (3 / epsilon) * (epsilon / 3 / sqrt(g!1 * g!1) / sqrt(1 + k)) = abs(g!1 * x)/ sqrt(g!1 * g!1) / sqrt(1 + k)")
                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                    (hide
                                                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                        (case
                                                                                                                                                                                                                                                                         "(M * epsilon) / 3 * (3 / epsilon) = M")
                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                          (replace
                                                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                            (hide
                                                                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                              (lemma
                                                                                                                                                                                                                                                                               "cauchy_schwarz[1+k].cauchy_schwarz")
                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                (inst?)
                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                    (div-by
                                                                                                                                                                                                                                                                                     -1
                                                                                                                                                                                                                                                                                     "sqrt(g!1*g!1)")
                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                      (div-by
                                                                                                                                                                                                                                                                                       -1
                                                                                                                                                                                                                                                                                       "sqrt(1+k)")
                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                                                                                                         "dot_max_ineq")
                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                          (inst
                                                                                                                                                                                                                                                                                           -1
                                                                                                                                                                                                                                                                                           "x"
                                                                                                                                                                                                                                                                                           "x")
                                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                                            (lemma
                                                                                                                                                                                                                                                                                             "dot_pos")
                                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                                              (inst
                                                                                                                                                                                                                                                                                               -1
                                                                                                                                                                                                                                                                                               "x")
                                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                                                                                 "abs"
                                                                                                                                                                                                                                                                                                 -2
                                                                                                                                                                                                                                                                                                 1)
                                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                                    (typepred
                                                                                                                                                                                                                                                                                                     "x")
                                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                                      (replace
                                                                                                                                                                                                                                                                                                       -2)
                                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                                                                                                                         "sqrt_le")
                                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                                          (inst?
                                                                                                                                                                                                                                                                                                           -1)
                                                                                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                                                                                              (case
                                                                                                                                                                                                                                                                                                               "sqrt(norm_inf(x) * norm_inf(x) + norm_inf(x) * norm_inf(x) * k) = sqrt(1+k)*abs(norm_inf(x))")
                                                                                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                                                                                                                   "norm_inf")
                                                                                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                                                                                     "abs"
                                                                                                                                                                                                                                                                                                                     -2
                                                                                                                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                                                                                      (div-by
                                                                                                                                                                                                                                                                                                                       -2
                                                                                                                                                                                                                                                                                                                       "sqrt(1+k)")
                                                                                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                                                                                         "M")
                                                                                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                                nil)
                                                                                                                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                                                                                                 "norm_inf")
                                                                                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                                                                                  (grind-reals)
                                                                                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                                                                                    (hide
                                                                                                                                                                                                                                                                                                                     2
                                                                                                                                                                                                                                                                                                                     3
                                                                                                                                                                                                                                                                                                                     -)
                                                                                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                                                                                                                                       "sqrt_times")
                                                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                                                        (inst
                                                                                                                                                                                                                                                                                                                         -1
                                                                                                                                                                                                                                                                                                                         "(1+k)"
                                                                                                                                                                                                                                                                                                                         "max(abs(x))*max(abs(x))")
                                                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                                                                                                               "abs"
                                                                                                                                                                                                                                                                                                                               1
                                                                                                                                                                                                                                                                                                                               2)
                                                                                                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                                                                                                (propax)
                                                                                                                                                                                                                                                                                                                                nil
                                                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                                                                                                         "dot_pos")
                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                          (inst?)
                                                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                                                                                                       "dot_pos")
                                                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                                                        (inst?)
                                                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                                                                     ("3"
                                                                                                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                                                                                                       "dot_pos")
                                                                                                                                                                                                                                                                                      (("3"
                                                                                                                                                                                                                                                                                        (inst?)
                                                                                                                                                                                                                                                                                        (("3"
                                                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                                      (case
                                                                                                                                                                                                                                                       " abs(g!1 * x) = 0")
                                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                                                        (mult-by
                                                                                                                                                                                                                                                         -6
                                                                                                                                                                                                                                                         " abs(g!1 * x)")
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                                         2
                                                                                                                                                                                                                                         3
                                                                                                                                                                                                                                         -)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (both-sides
                                                                                                                                                                                                                                           "*"
                                                                                                                                                                                                                                           "-1")
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (lemma
                                                                                                                                                                                                                                               "dot_linear_left")
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                                 -1
                                                                                                                                                                                                                                                 "x"
                                                                                                                                                                                                                                                 "g!1"
                                                                                                                                                                                                                                                 "re1(env)*g"
                                                                                                                                                                                                                                                 "re2(env)")
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                                                                       "asso_dot")
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                                                         -2)
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (inst?)
                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (case
                                                                                                                                                                                   "(abs(re2(envo)) / (abs(re2(env)) + e1)) < 1")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (mult-by
                                                                                                                                                                                       -1
                                                                                                                                                                                       "(M * epsilon / 3)")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (hide
                                                                                                                                                                                     2
                                                                                                                                                                                     3
                                                                                                                                                                                     4)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (both-sides
                                                                                                                                                                                       "*"
                                                                                                                                                                                       "(abs(re2(env)) + e1)")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (case
                                                                                                                                                                                         "(abs(re2(envo)) / (abs(re2(env)) + e1)) * (abs(re2(env)) + e1) = abs(re2(envo))")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -1)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (hide
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -5)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (lemma
                                                                                                                                                                                                 "abs_diff")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (inst
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   "re2(envo)"
                                                                                                                                                                                                   "re2(env)")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (name
                                                                                                                                                                                           "aa"
                                                                                                                                                                                           "(abs(re2(env)) + e1)")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (grind-reals)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (grind-reals)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (case
                                                                                                                                                                               "(abs(re1(env)) / (abs(re1(env)) + epsilon)) < 1")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (mult-by
                                                                                                                                                                                 -1
                                                                                                                                                                                 "(M * epsilon / 3)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (grind-reals)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (grind-reals)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (case
                                                                                                                                                                   "abs(re1(env)) = 0")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (mult-by
                                                                                                                                                                     -3
                                                                                                                                                                     "abs(re1(env))")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (case
                                                                                                                                                               "abs(re2(envo)) = 0")
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (mult-by
                                                                                                                                                                 -2
                                                                                                                                                                 "abs(re2(envo))")
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           2
                                                                                                           3
                                                                                                           -)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "norms.abs_pos")
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "norms.abs_zero")
                                                                                                              (("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "x!1")
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (skeep)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "list_extensionality")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "zero_vec(m)"
                                                                                                                                 "x!1")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   -
                                                                                                   2
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (induct
                                                                                                     "k")
                                                                                                    (("1"
                                                                                                      (skeep)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "x!1")
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "add")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "length")
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "list_extensionality")
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (skeep)
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "-")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "sub")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "add"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "scal"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "zero_vec"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "cdr(x!1)")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "list_extensionality")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "nth")
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (typepred
                                                                                                                       "x!1")
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   2
                                                                   3
                                                                   -)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (case
                                                                       "e1 >0")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (both-sides
                                                                           "*"
                                                                           "(abs(re2(env)) + e1)")
                                                                          (("1"
                                                                            (case
                                                                             " epsilon / 3 / (abs(re2(env)) + e1) * (abs(re2(env)) + e1) = epsilon/3")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (name
                                                                                 "X"
                                                                                 "(abs(re2(env)) + e1)")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "e1")
                                                                        (("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (reveal
                                                                             -)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lemma
                                                                                 "sqrt_pos")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (both-sides
                                                                                       "*"
                                                                                       "sqrt(g!1*g!1)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (name
                                                                                           "G"
                                                                                           "sqrt(g!1 * g!1)")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (grind-reals)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "e1 >0")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (both-sides
                                                                           "*"
                                                                           "(abs(re2(env)) + e1)")
                                                                          (("1"
                                                                            (case
                                                                             " epsilon / 3 / (abs(re2(env)) + e1) * (abs(re2(env)) + e1) = epsilon/3")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (name
                                                                                 "X"
                                                                                 "(abs(re2(env)) + e1)")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "e1")
                                                                        (("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (grind-reals)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                (("3"
                                                                  (case
                                                                   "e1 >0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "e1")
                                                                    (("2"
                                                                      (grind-reals)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "sqrt_pos")
                                                            (("2"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind-reals)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (lemma
                                                           "sqrt_pos")
                                                          (("3"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -)
                                                (("2"
                                                  (case
                                                   "FORALL(c:real,k:nat, x:VectorN(1+k)): length(c*x) = length(x)")
                                                  (("1"
                                                    (case
                                                     "FORALL(k:nat, x,y:VectorN(1+k)): length(x+y) = 1+k")
                                                    (("1"
                                                      (copy -2)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "re2(env)"
                                                         "k"
                                                         "g!1")
                                                        (("1"
                                                          (inst
                                                           -3
                                                           "re1(env)"
                                                           "k"
                                                           "g")
                                                          (("1"
                                                            (typepred
                                                             "g")
                                                            (("1"
                                                              (typepred
                                                               "g!1")
                                                              (("1"
                                                                (inst
                                                                 -6
                                                                 "k"
                                                                 "re2(env) * g!1"
                                                                 "re1(env) * g")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2 -)
                                                      (("2"
                                                        (induct "k")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (typepred
                                                             "x")
                                                            (("1"
                                                              (typepred
                                                               "y")
                                                              (("1"
                                                                (expand
                                                                 "+")
                                                                (("1"
                                                                  (expand
                                                                   "add")
                                                                  (("1"
                                                                    (expand
                                                                     "length")
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (expand
                                                                               "add")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (expand
                                                               "+")
                                                              (("2"
                                                                (expand
                                                                 "add"
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   1)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "cdr(x)"
                                                                     "cdr(y)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "y")
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (typepred
                                                                       "x")
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (induct "k")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (typepred "x")
                                                        (("1"
                                                          (expand
                                                           "*"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "scal")
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -2)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -2)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (expand
                                                                       "scal")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (expand
                                                             "*")
                                                            (("2"
                                                              (expand
                                                               "scal"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 1)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "c"
                                                                   "cdr(x)")
                                                                  (("2"
                                                                    (typepred
                                                                     "x")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (diff_re_cont formula-decl nil diff_re_props nil)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (vec_2_env_id formula-decl nil chain_rule_re nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (TRUE const-decl "bool" booleans nil)
    (x skolem-const-decl "VectorN(2 + j)" diff_re_props nil)
    (j skolem-const-decl "nat" diff_re_props nil)
    (j skolem-const-decl "nat" diff_re_props nil)
    (x skolem-const-decl "VectorN(2 + j)" diff_re_props nil)
    (y skolem-const-decl "VectorN(2 + j)" diff_re_props nil)
    (dot_pos formula-decl nil cauchy_schwarz mv_analysis)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nnreal type-eq-decl nil real_types nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (sqrt_pos judgement-tcc nil sqrt reals)
    (div_cancel3 formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (zero_times1 formula-decl nil real_props nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (M skolem-const-decl "real" diff_re_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (both_sides_times_pos_le2 formula-decl nil real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (pos_times_lt formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (pos_times_le formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_times3 formula-decl nil real_props nil)
    (div_div2 formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (x skolem-const-decl
     "{xx: (NQ(projv(k, P), env_2_vec(k, env))) | xx /= zero_vec(1 + k)}"
     diff_re_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (dot_max_ineq formula-decl nil norms mv_analysis)
    (sqrt_le formula-decl nil sqrt reals)
    (sqrt_square formula-decl nil sqrt reals)
    (sqrt_times formula-decl nil sqrt reals)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (cauchy_schwarz formula-decl nil cauchy_schwarz mv_analysis)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (envo skolem-const-decl "Environment" diff_re_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (j skolem-const-decl "nat" diff_re_props nil)
    (x!1 skolem-const-decl "VectorN(2 + j)" diff_re_props nil)
    (e1 skolem-const-decl "nzreal" diff_re_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (pos_div_ge formula-decl nil real_props nil)
    (neg_times_ge formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (abs_div formula-decl nil real_props nil)
    (* const-decl "real" matrices matrices)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs_pos formula-decl nil norms mv_analysis)
    (abs_zero formula-decl nil norms mv_analysis)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs_diff formula-decl nil abs_lems reals)
    (epsilon skolem-const-decl "posreal" diff_re_props nil)
    (M skolem-const-decl "real" diff_re_props nil)
    (dot_zero formula-decl nil vector_arithmetic mv_analysis)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (dot def-decl "real" matrices matrices)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (y skolem-const-decl "VectorN(2 + j)" diff_re_props nil)
    (x!1 skolem-const-decl "VectorN(2 + j)" diff_re_props nil)
    (j skolem-const-decl "nat" diff_re_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (asso_dot formula-decl nil vector_arithmetic mv_analysis)
    (dot_linear_left formula-decl nil cauchy_schwarz mv_analysis)
    (both_sides_times1 formula-decl nil real_props nil)
    (odd? const-decl "bool" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (triangle formula-decl nil real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (neg_times_gt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (envo skolem-const-decl "Environment" diff_re_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (< const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (max def-decl "real" norms mv_analysis)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (projv const-decl "bool" chain_rule_re nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (k skolem-const-decl "nat" diff_re_props nil)
    (P skolem-const-decl "(ddl_dom?)" diff_re_props nil)
    (re2 skolem-const-decl "(diff_re?(k, P))" diff_re_props nil)
    (env skolem-const-decl "(P)" diff_re_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (g!1 skolem-const-decl "VectorN(1 + k)" diff_re_props nil)
    (re1 skolem-const-decl "(diff_re?(k, P))" diff_re_props nil)
    (g skolem-const-decl "VectorN(1 + k)" diff_re_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (diff_re? const-decl "bool" chain_rule_re nil))
   shostak))
 (diff_re_pow 0
  (diff_re_pow-1 nil 3870947565
   ("" (induct "p")
    (("1" (skeep)
      (("1" (expand "^")
        (("1" (expand "^")
          (("1" (expand "expt")
            (("1" (lemma "diff_re_cnst")
              (("1" (inst? -1)
                (("1" (inst -1 "1")
                  (("1" (expand "cnst") (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (typepred "re")
          (("2" (expand "^")
            (("2" (expand "^")
              (("2" (expand "expt" 1)
                (("2" (inst -2 "k" "P" "re")
                  (("2" (lemma "diff_re_prod")
                    (("2" (inst -1 "k" "P" "re" "re^j")
                      (("1" (expand "*" -1)
                        (("1" (expand "^")
                          (("1" (expand "^") (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "^")
                        (("2" (expand "^") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (nat_induction formula-decl nil naturalnumbers nil)
    (expt def-decl "real" exponentiation nil)
    (cnst const-decl "real" hp_def nil)
    (diff_re_cnst formula-decl nil diff_re_props nil)
    (^ const-decl "real" exponentiation nil)
    (diff_re_prod formula-decl nil diff_re_props nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (j skolem-const-decl "nat" diff_re_props nil)
    (re skolem-const-decl "(diff_re?(k, P))" diff_re_props nil)
    (P skolem-const-decl "(ddl_dom?)" diff_re_props nil)
    (k skolem-const-decl "nat" diff_re_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (diff_re_sum 0
  (diff_re_sum-1 nil 3870947568
   ("" (skeep)
    (("" (typepred "re1")
      (("" (typepred "re2")
        (("" (expand "diff_re?")
          (("" (skeep)
            (("" (expand "differentiable_re_p?")
              (("" (inst -1 "env")
                (("" (inst -2 "env")
                  (("" (expand "differentiable?")
                    (("" (skeep*)
                      (("" (expand "convergence_zero?")
                        (("" (expand "vec_re")
                          (("" (inst 1 "g+g!1")
                            (("1" (skeep)
                              (("1"
                                (inst -1 "epsilon/2")
                                (("1"
                                  (inst -2 "epsilon/2")
                                  (("1"
                                    (skeep*)
                                    (("1"
                                      (inst 1 "min(delta,delta!1)")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst -1 "x")
                                          (("1"
                                            (inst -2 "x")
                                            (("1"
                                              (split)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (expand "+")
                                                  (("1"
                                                    (expand "NQ")
                                                    (("1"
                                                      (lemma
                                                       "dot_linear_left")
                                                      (("1"
                                                        (expand "+" -1)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "x"
                                                           "g"
                                                           "g!1"
                                                           "1")
                                                          (("1"
                                                            (lemma
                                                             "one_idx")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "g")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -5
                                                                       -2
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "triangle")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "(re1(vec_2_env(k, env_2_vec(k, env) + x, env)) -
            re1(vec_2_env(k, env_2_vec(k, env), env))
            - g!1 * x)
 
          / norm_inf(1 + k)(x)"
                                                                             "(re2(vec_2_env(k, env_2_vec(k, env) + x, env)) -
            re2(vec_2_env(k, env_2_vec(k, env), env))
            - g * x)
   
        / norm_inf(1 + k)(x)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -)
                              (("2"
                                (typepred "g")
                                (("2"
                                  (typepred "g!1")
                                  (("2"
                                    (case
                                     "FORALL(k:nat,x,y:VectorN(1+k)): length(x+y)= 1+k")
                                    (("1" (inst?) nil nil)
                                     ("2"
                                      (hide 2 -)
                                      (("2"
                                        (induct "k")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (expand "+")
                                            (("1"
                                              (expand "add")
                                              (("1"
                                                (expand "add")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred "x")
                                                    (("1"
                                                      (typepred "y")
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (expand "+")
                                              (("2"
                                                (expand "add" 1)
                                                (("2"
                                                  (expand "length" 1)
                                                  (("2"
                                                    (inst? -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (typepred "y")
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -2)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (typepred "x")
                                                      (("3"
                                                        (expand
                                                         "length"
                                                         -2)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((differentiable? const-decl "bool" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (g!1 skolem-const-decl "VectorN(1 + k)" diff_re_props nil)
    (g skolem-const-decl "VectorN(1 + k)" diff_re_props nil)
    (k skolem-const-decl "nat" diff_re_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (one_idx formula-decl nil vector_arithmetic mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (norm? const-decl "bool" norms mv_analysis)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (* const-decl "real" matrices matrices)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (triangle formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (dot_linear_left formula-decl nil cauchy_schwarz mv_analysis)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (projv const-decl "bool" chain_rule_re nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (j skolem-const-decl "nat" diff_re_props nil)
    (x skolem-const-decl "VectorN(2 + j)" diff_re_props nil)
    (y skolem-const-decl "VectorN(2 + j)" diff_re_props nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (diff_re? const-decl "bool" chain_rule_re nil))
   shostak))
 (diff_re_diff 0
  (diff_re_diff-1 nil 3870947569
   ("" (skeep)
    (("" (lemma "diff_re_sum")
      (("" (inst -1 "k" "P" "re1" "cnst(-1)*re2")
        (("1" (expand "-")
          (("1" (expand "+")
            (("1" (expand "*")
              (("1" (expand "cnst") (("1" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (lemma "diff_re_prod")
          (("2" (inst?)
            (("2" (lemma "diff_re_cnst") (("2" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (re2 skolem-const-decl "(diff_re?(k, P))" diff_re_props nil)
    (cnst const-decl "real" hp_def nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (P skolem-const-decl "(ddl_dom?)" diff_re_props nil)
    (k skolem-const-decl "nat" diff_re_props nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (diff_re_cnst formula-decl nil diff_re_props nil)
    (diff_re_prod formula-decl nil diff_re_props nil)
    (diff_re_sum formula-decl nil diff_re_props nil))
   shostak))
 (diff_re_inv_aux 0
  (diff_re_inv_aux-3 "" 3903445533
   ("" (skeep)
    (("" (typepred "re")
      (("" (expand "diff_re?")
        (("" (skeep)
          (("" (inst -1 "env")
            (("" (expand "differentiable_re_p?")
              (("" (expand "differentiable?")
                (("" (skeep)
                  (("" (lemma "diff_re_divbound")
                    (("" (inst?)
                      (("" (inst -1 "re")
                        (("" (lemma "diff_re_cont")
                          (("" (inst?)
                            (("" (skeep*)
                              ((""
                                (expand "convergence_zero?")
                                ((""
                                  (expand "NQ")
                                  ((""
                                    (expand "norm_inf")
                                    ((""
                                      (expand "vec_re")
                                      ((""
                                        (expand "/" 1)
                                        ((""
                                          (lemma "vec_2_env_id")
                                          ((""
                                            (inst?)
                                            ((""
                                              (replace -1)
                                              ((""
                                                (hide -1)
                                                ((""
                                                  (name "X1" "re(env)")
                                                  ((""
                                                    (replace -1)
                                                    ((""
                                                      (hide -1)
                                                      ((""
                                                        (inst
                                                         1
                                                         "-1/(X1*X1)*g")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (case
                                                             "epsilon/2*real_defs.abs(X1*X1) >0")
                                                            (("1"
                                                              (inst
                                                               -4
                                                               "epsilon/2*abs(X1*X1)")
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (copy
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "epsilon/2*abs(X1*X1)/M*abs(X1)/2")
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "abs(X1)/2")
                                                                      (("1"
                                                                        (skeep*)
                                                                        (("1"
                                                                          (inst
                                                                           1
                                                                           "min(delta,min(delta!1,min(delta!2,delta!3)))")
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "x")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "x")
                                                                                (("1"
                                                                                  (inst
                                                                                   -3
                                                                                   "x")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -4
                                                                                     "x")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (name
                                                                                         "X2"
                                                                                         "re(vec_2_env(k, env_2_vec(k, env) + x, env))")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (div-by
                                                                                               -4
                                                                                               "real_defs.abs(X1*X1)")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "abs_div")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "X1*X1"
                                                                                                   "(X2 - g * x - X1) / norm_inf(x)")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     -5
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "(X2 - g * x - X1) / norm_inf(x) / (X1 * X1) = (X2/(X1*X1) -1/X1 -1/(X1*X1)*(g*x))/norm_inf(x)")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "asso_dot")
                                                                                                              (("1"
                                                                                                                (inst?
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "sub_zero")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "x")
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "x")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -5)
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -1
                                                                                                                                 -2
                                                                                                                                 -3
                                                                                                                                 -4
                                                                                                                                 -5)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "abs((X2 / (X1 * X1) - 1 / X1 - 1 / (X1 * X1) * (g * x)) / norm_inf(x)) = abs((-X2 / (X1 * X1) + 1 / X1 - -1 / (X1 * X1) * (g * x)) / norm_inf(x))")
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "abs_diff")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "(1 / X2 - 1 / X1 - -1 / (X1 * X1) * (g * x)) / norm_inf(x)"
                                                                                                                                             "(1/X2+X2/(X1*X1)-2/X1)/norm_inf(x)")
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "(1 / X2 - 1 / X1 - -1 / (X1 * X1) * (g * x)) / norm_inf(x) - (1 / X2 + X2 / (X1 * X1) - 2 / X1) / norm_inf(x) = (-X2 / (X1 * X1) + 1 / X1 - -1 / (X1 * X1) * (g * x)) / norm_inf(x)")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (name
                                                                                                                                                     "A"
                                                                                                                                                     "abs((-X2 / (X1 * X1) + 1 / X1 - -1 / (X1 * X1) * (g * x)) / norm_inf(x))")
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (hide
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (name
                                                                                                                                                           "B"
                                                                                                                                                           "abs((1 / X2 - 1 / X1 - -1 / (X1 * X1) * (g * x)) / norm_inf(x))")
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (case
                                                                                                                                                                 "abs((1 / X2 + X2 / (X1 * X1) - 2 / X1) / norm_inf(x)) < epsilon/2")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   -1
                                                                                                                                                                   -5
                                                                                                                                                                   -7
                                                                                                                                                                   2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (case
                                                                                                                                                                     "X2*X1*X1 /=0")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "X2")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (typepred
                                                                                                                                                                         "X1")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (case
                                                                                                                                                                           "abs(X2 - X1)*abs((X2 - X1) / norm_inf(x)) <= epsilon / 2 * abs(X1 * X1)*abs(X1)/2*abs((X2 - X1) / norm_inf(x))/M")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "abs_mult")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst
                                                                                                                                                                               -1
                                                                                                                                                                               "X2-X1"
                                                                                                                                                                               "(X2 - X1) / norm_inf(x)")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -1
                                                                                                                                                                                 -2
                                                                                                                                                                                 rl)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (div-by
                                                                                                                                                                                     -7
                                                                                                                                                                                     "M")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (div-by
                                                                                                                                                                                       -1
                                                                                                                                                                                       "real_defs.abs(X1*X1)")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "abs_div")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst
                                                                                                                                                                                             -1
                                                                                                                                                                                             "X1*X1"
                                                                                                                                                                                             "((X2 - X1) / norm_inf(x)) * X2 - ((X2 - X1) / norm_inf(x)) * X1")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -1
                                                                                                                                                                                               -2
                                                                                                                                                                                               rl)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (hide
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (case
                                                                                                                                                                                                     "abs((((X2 - X1) / norm_inf(x)) * X2 - ((X2 - X1) / norm_inf(x)) * X1) / (X1 * X1)) < epsilon / 2*abs(X1)/2")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (hide
                                                                                                                                                                                                       -2)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (case
                                                                                                                                                                                                         "(((X2 - X1) / norm_inf(x)) * X2 - ((X2 - X1) / norm_inf(x)) * X1) / (X1 * X1) = (1 + X2*X2/(X1*X1)-2*X2/X1)/norm_inf(x)")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -1)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (hide
                                                                                                                                                                                                             -1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (mult-by
                                                                                                                                                                                                               -1
                                                                                                                                                                                                               "real_defs.abs(1/X2)")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                 "abs_mult")
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                   "(1 + X2 * X2 / (X1 * X1) - 2 * X2 / X1) / norm_inf(x)"
                                                                                                                                                                                                                   "1 / X2")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (hide
                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (name
                                                                                                                                                                                                                         "C"
                                                                                                                                                                                                                         "real_defs.abs((1 + X2 * X2 / (X1 * X1) - 2 * X2 / X1) / norm_inf(x)) * real_defs.abs(1 / X2)")
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (hide
                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (case
                                                                                                                                                                                                                                 "abs(X1) / 2 * real_defs.abs(1 / X2) <= 1")
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (case
                                                                                                                                                                                                                                     "epsilon / 2 * abs(X1) / 2 * real_defs.abs(1 / X2) = (epsilon / 2) * (abs(X1) / 2 * real_defs.abs(1 / X2))")
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (replace
                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (name
                                                                                                                                                                                                                                           "aaa"
                                                                                                                                                                                                                                           "abs(X1) / 2 * real_defs.abs(1 / X2)")
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (hide
                                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (mult-by
                                                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                                                   "epsilon/2")
                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                  (case
                                                                                                                                                                                                                                   "real_defs.abs(X2-X1) = real_defs.abs(X1-X2)")
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (hide
                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                                                         "abs_diff")
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (inst
                                                                                                                                                                                                                                           -1
                                                                                                                                                                                                                                           "X1"
                                                                                                                                                                                                                                           "X2")
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (case
                                                                                                                                                                                                                                             "abs(X2) > abs(X1)/2")
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (lemma
                                                                                                                                                                                                                                               "abs_mult")
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (div-by
                                                                                                                                                                                                                                                 -2
                                                                                                                                                                                                                                                 "real_defs.abs(X2)")
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (case
                                                                                                                                                                                                                                                   "abs(X1) / 2 / real_defs.abs(X2) = abs(X1) / 2 * real_defs.abs(1 / X2)")
                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (hide
                                                                                                                                                                                                                                                       2
                                                                                                                                                                                                                                                       3
                                                                                                                                                                                                                                                       4
                                                                                                                                                                                                                                                       -)
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (grind-reals)
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (grind)
                                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                       "abs"
                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (lift-if)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (lift-if)
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (lift-if)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (split)
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (flatten)
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil)
                                                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                                                (flatten)
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (name-replace
                                                                                                                                                                                                                                                   "XX1"
                                                                                                                                                                                                                                                   "X1")
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (name-replace
                                                                                                                                                                                                                                                     "XX2"
                                                                                                                                                                                                                                                     "X2")
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (grind-reals)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil)
                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (name
                                                                                                                                                                                                         "aa"
                                                                                                                                                                                                         "real_defs.abs((((X2 - X1) / norm_inf(x)) * X2 - ((X2 - X1) / norm_inf(x)) * X1) / (X1 * X1))")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -1)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (hide
                                                                                                                                                                                                             -1)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (case
                                                                                                                                                                                                               "abs((X2 - X1) / norm_inf(x)) * abs(X1 * X1)*abs(X1) * (epsilon / 2)/2 / M / real_defs.abs(X1 * X1) = abs((X2 - X1) / norm_inf(x)) * abs(X1)/2*(epsilon / 2) / M")
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (hide
                                                                                                                                                                                                                   -1)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (mult-by
                                                                                                                                                                                                                     -6
                                                                                                                                                                                                                     "epsilon/2*abs(X1)/2")
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil)
                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                nil
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (case
                                                                                                                                                                               "abs((X2 - X1) / norm_inf(x)) =0")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (name
                                                                                                                                                                                 "bb"
                                                                                                                                                                                 "abs((X2 - X1) / norm_inf(x))")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (hide
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert
                                                                                                                                                                                         1)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (name-replace
                                                                                                                                                                                 "XX1"
                                                                                                                                                                                 "X1")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (name-replace
                                                                                                                                                                                   "XX2"
                                                                                                                                                                                   "X2")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (mult-by
                                                                                                                                                                                     -3
                                                                                                                                                                                     "abs((XX2 - XX1) / norm_inf(x))")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "X2")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "X1")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (copy
                                                                                                                                                                           -4)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst?)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               -5
                                                                                                                                                                               "env")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (grind)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       2
                                                                                                                                       -)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "abs")
                                                                                                                                        (("2"
                                                                                                                                          (lift-if)
                                                                                                                                          (("2"
                                                                                                                                            (lift-if)
                                                                                                                                            (("2"
                                                                                                                                              (lift-if)
                                                                                                                                              (("2"
                                                                                                                                                (name-replace
                                                                                                                                                 "XX1"
                                                                                                                                                 "X1")
                                                                                                                                                (("2"
                                                                                                                                                  (name-replace
                                                                                                                                                   "XX2"
                                                                                                                                                   "X2")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (split)
                                                                                                                                                      (("1"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("2"
                                                                                                                                                          (split)
                                                                                                                                                          (("1"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (flatten)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "X1")
                                                                        (("2"
                                                                          (inst
                                                                           -4
                                                                           "env")
                                                                          (("2"
                                                                            (grind-reals)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "X1")
                                                                        (("2"
                                                                          (lemma
                                                                           "sq_nz_pos")
                                                                          (("2"
                                                                            (expand
                                                                             "sq")
                                                                            (("2"
                                                                              (inst
                                                                               -5
                                                                               "env")
                                                                              (("2"
                                                                                (inst?
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (name
                                                                                     "RR"
                                                                                     "re(env) * re(env)")
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("2"
                                                                                          (grind-reals)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "X1")
                                                              (("2"
                                                                (lemma
                                                                 "sq_nz_pos")
                                                                (("2"
                                                                  (inst
                                                                   -5
                                                                   "env")
                                                                  (("2"
                                                                    (expand
                                                                     "sq")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (name
                                                                         "RR"
                                                                         "re(env) * re(env)")
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (grind-reals)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "-1 / (X1 * X1) * g")
                                                          (("2"
                                                            (typepred
                                                             "g")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (expand "X1")
                                                          (("3"
                                                            (inst? -4)
                                                            (("3"
                                                              (grind-reals)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((differentiable? const-decl "bool" differentiable_def mv_analysis)
    (diff_re_divbound formula-decl nil diff_re_props nil)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (X1 skolem-const-decl "real" diff_re_props nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (Vector type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (k skolem-const-decl "nat" diff_re_props nil)
    (g skolem-const-decl "VectorN(1 + k)" diff_re_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (M skolem-const-decl "posreal" diff_re_props nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (abs_div formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x skolem-const-decl
     "{xx: (NQ(projv(k, P), env_2_vec(k, env))) | xx /= zero_vec(1 + k)}"
     diff_re_props nil)
    (env skolem-const-decl "(P)" diff_re_props nil)
    (P skolem-const-decl "(ddl_dom?)" diff_re_props nil)
    (XX1 skolem-const-decl "real" diff_re_props nil)
    (XX2 skolem-const-decl "real" diff_re_props nil)
    (abs_mult formula-decl nil real_props nil)
    (div_simp formula-decl nil real_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (X2 skolem-const-decl "real" diff_re_props nil)
    (cross_mult formula-decl nil real_props nil)
    (both_sides_times2 formula-decl nil real_props nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (div_div2 formula-decl nil real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (abs_diff formula-decl nil abs_lems reals)
    (sub_zero formula-decl nil vector_arithmetic mv_analysis)
    (asso_dot formula-decl nil vector_arithmetic mv_analysis)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* const-decl "real" matrices matrices)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (projv const-decl "bool" chain_rule_re nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (sq const-decl "nonneg_real" sq reals)
    (re skolem-const-decl "(diff_re?(k, P))" diff_re_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (neg_times_gt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sq_nz_pos judgement-tcc nil sq reals)
    (epsilon skolem-const-decl "posreal" diff_re_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (zero_times3 formula-decl nil real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (vec_2_env_id formula-decl nil chain_rule_re nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (TRUE const-decl "bool" booleans nil)
    (diff_re_cont formula-decl nil diff_re_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (diff_re? const-decl "bool" chain_rule_re nil))
   shostak))
 (diff_re_inv 0
  (diff_re_inv-1 nil 3901890953
   ("" (skeep)
    (("" (lemma "diff_re_inv_aux")
      (("" (insteep)
        (("" (split)
          (("1" (case "real_fun_ops./(1,re) = div_safe_re(cnst(1),re)")
            (("1" (assert) nil nil)
             ("2" (hide-all-but (-2 1))
              (("2" (decompose-equality 1) (("2" (grind) nil nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_re_inv_aux formula-decl nil diff_re_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (div_safe const-decl "real" reals_safe_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (div_safe_re const-decl "real" hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (diff_re? const-decl "bool" chain_rule_re nil))
   shostak))
 (diff_re_div 0
  (diff_re_div-1 nil 3874079709
   ("" (skeep)
    (("" (lemma "diff_re_prod")
      (("" (lemma "diff_re_inv")
        (("" (inst -1 "k" "P" "re2")
          (("" (split)
            (("1" (inst -2 "k" "P" "re1" "cnst(1)/re2")
              (("1"
                (case-replace
                 "re1 * div_safe_re(cnst(1), re2) = div_safe_re(re1,re2)")
                (("1" (hide-all-but 1)
                  (("1" (decompose-equality) (("1" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_re_prod formula-decl nil diff_re_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (re2 skolem-const-decl "(diff_re?(k, P))" diff_re_props nil)
    (cnst const-decl "real" hp_def nil)
    (div_safe_re const-decl "real" hp_def nil)
    (P skolem-const-decl "(ddl_dom?)" diff_re_props nil)
    (k skolem-const-decl "nat" diff_re_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_safe const-decl "real" reals_safe_ops reals)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (diff_re_inv formula-decl nil diff_re_props nil))
   shostak)))