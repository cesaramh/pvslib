(floor_ex
 (eventually_not_assign 0
  (eventually_not_assign-2 nil 3913380799
   ("" (rewrite "norm_DLEVENTUALLY")
    (("" (use "dltl_SEQcup_dual")
      (("" (use "dl_cut")
        (("" (assert)
          (("" (hide-all-but 1)
            (("" (rewrite "dltl_ASSIGNcup_dual" :dir rl)
              (("" (dl-hide 2 1)
                (("" (dl-flatten)
                  (("" (dl-hide 2 1)
                    (("" (dl-flatten)
                      (("" (rewrite "SOMERUNS_eq")
                        (("" (rewrite "SOMERUNS_eq")
                          (("" (rewrite "dl_assignd")
                            (("" (dl-assert)
                              ((""
                                (rewrite "dlSequent_equiv")
                                ((""
                                  (expand "dlSequent")
                                  ((""
                                    (skeep)
                                    ((""
                                      (hide -1)
                                      ((""
                                        (inst 1 "0")
                                        ((""
                                          (expand "nth")
                                          ((""
                                            (expand "SOMERUNS")
                                            ((""
                                              (expand "DLNOT")
                                              ((""
                                                (expand "DLOR")
                                                ((""
                                                  (expand "=")
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (expand
                                                       "cnst"
                                                       1
                                                       2)
                                                      ((""
                                                        (case
                                                         "NOT val(x)(env) =5")
                                                        (("1"
                                                          (inst
                                                           2
                                                           "env")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "semantic_rel")
                                                              (("1"
                                                                (expand
                                                                 "DLBOOL")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "val")
                                                          (("2"
                                                            (inst
                                                             1
                                                             "env WITH [(dlvar_index(x)) := env(dlvar_index(x))+6*(0.1)]")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "semantic_rel")
                                                                (("2"
                                                                  (expand
                                                                   "semantic_rel_diff")
                                                                  (("2"
                                                                    (expand
                                                                     "DLBOOL")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "cnst_lins_sol_u")
                                                                        (("2"
                                                                          (expand
                                                                           "solves_u?")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "DLTRUE"
                                                                             "(: (x, cnst(6)) :)")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "env")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     1
                                                                                     "hp(0)")
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "1/10"
                                                                                       "LAMBDA (i: below(length((: (x, cnst(6)) :)))): LAMBDA (r: real): Y_sol_ex((: (x, cnst(6)) :))(i)(r)(env)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "env_at_t?")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "i_1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "not_in_map")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "0")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "Y_sol_ex")
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "k")
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "+")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "*")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "is_cnst?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "nth")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "cnst"
                                                                                                                     1
                                                                                                                     (1
                                                                                                                      2))
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "cnst")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "val")
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "cnst_lins?")
                                                                                        (("2"
                                                                                          (skeep*)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "i!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nth")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "6")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (expand
                                                                                         "hp")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "DLBOOL")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "cnst_lins?")
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "mapexpr_inj")
                                                                                    (("1"
                                                                                      (skeep*)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "i")
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "j")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nth")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep*)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "i")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               1
                                                                                               "6")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_DLEVENTUALLY formula-decl nil temporal_logic dL)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (DLNOT const-decl "bool" bool_expr dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (= const-decl "BoolExpr" bool_expr dL)
    (dLVar type-decl nil hp_def dL) (val const-decl "real" hp_def dL)
    (x const-decl "dLVar" floor_ex nil)
    (cnst const-decl "real" hp_def dL)
    (dl_cut formula-decl nil dynamic_logic dL)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt dL)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (SOMERUNS_st const-decl "bool" ltl_expr dL)
    (DLOR const-decl "bool" bool_expr dL)
    (normDLEVENTUALLY const-decl "bool" ltl_expr dL)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt dL)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (SOMERUNS_tr const-decl "bool" ltl_expr dL)
    (TraceBoolExpr type-eq-decl nil ltl_expr dL)
    (Trace type-eq-decl nil trace_semantics dL)
    (wf_trace? const-decl "bool" trace_semantics dL)
    (TraceState type-decl nil TraceState_adt dL)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Formulas type-eq-decl nil bool_expr dL)
    (append def-decl "list[T]" list_props nil)
    (move_to_head_rec def-decl "Formulas" dynamic_logic dL)
    (length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (is_dlfnum const-decl "bool" dynamic_logic dL)
    (move_to_head const-decl "Formulas" dynamic_logic dL)
    (dl_moveR formula-decl nil dynamic_logic dL)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dl_hideR formula-decl nil dynamic_logic dL)
    (gamma__57 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (delta__58 skolem-const-decl "(cons?)" floor_ex nil)
    (gamma__61 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (delta__62 skolem-const-decl "(cons?)" floor_ex nil)
    (SOMERUNS_eq formula-decl nil ltl_expr dL)
    (dl_assignd formula-decl nil dynamic_logic dL)
    (dlSequent_equiv formula-decl nil dynamic_logic dL)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (semantic_rel inductive-decl "bool" hp_expr dL)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cnst_lins_sol_u formula-decl nil dl_solution dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (MapExprInj type-eq-decl nil hp_def dL)
    (cnst_lins? const-decl "bool" dl_solution dL)
    (hp const-decl "bool" interval_def ODEs)
    (dd? const-decl "bool" hp_expr dL)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (env_at_t? const-decl "bool" hp_expr dL)
    (not_in_map const-decl "bool" hp_def dL)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (is_cnst? const-decl "bool" dl_solution dL)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (solution_odes_u? const-decl "bool" hp_expr dL)
    (Y_sol_ex const-decl "[Environment -> real]" dl_solution dL)
    (env skolem-const-decl "Environment" floor_ex nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subrange type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (solves_u? const-decl "bool" dl_solution dL)
    (semantic_rel_diff const-decl "bool" hp_expr dL)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nth def-decl "T" list_props nil)
    (dlSequent const-decl "bool" dynamic_logic dL)
    (dl_false_or formula-decl nil bool_expr dL)
    (SUB_MapVar def-decl
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     substitution dL)
    (dl_sub_not formula-decl nil substitution dL)
    (Substitution type-eq-decl nil substitution dL)
    (dl_sub_eq formula-decl nil substitution dL)
    (dl_subre_const formula-decl nil substitution dL)
    (dl_subre_val formula-decl nil substitution dL)
    (SOMERUNS const-decl "bool" bool_expr dL)
    (delta__60 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (dl_orR formula-decl nil dynamic_logic dL)
    (gamma__59 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (dltl_ASSIGNcup_dual formula-decl nil temporal_logic dL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (HP type-decl nil HP_adt dL) (MapExpr type-eq-decl nil hp_def dL)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (ODEs type-eq-decl nil hp_def dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (DLBOOL const-decl "bool" bool_expr dL)
    (TRUE const-decl "bool" booleans nil)
    (Assigns type-eq-decl nil hp_def dL)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt dL)
    (FALSE const-decl "bool" booleans nil)
    (dltl_SEQcup_dual formula-decl nil temporal_logic dL))
   nil)
  (eventually_not_assign-1 nil 3904143705
   ("" (rewrite "norm_DLEVENTUALLY")
    (("" (use "dltl_SEQcup_dual")
      (("" (use "dl_cut")
        (("" (assert)
          (("" (hide-all-but 1)
            (("" (rewrite "dltl_ASSIGNcup_dual" :dir rl)
              (("" (dl-hide 2 1)
                (("" (dl-flatten)
                  (("" (dl-hide 2 1)
                    (("" (dl-flatten)
                      (("" (rewrite "SOMERUNS_eq")
                        (("" (rewrite "SOMERUNS_eq")
                          (("" (rewrite "dl_assignd")
                            (("" (dl-assert)
                              ((""
                                (rewrite "dlSequent_equiv")
                                ((""
                                  (expand "dlSequent")
                                  ((""
                                    (skeep)
                                    ((""
                                      (hide -1)
                                      ((""
                                        (inst 1 "0")
                                        ((""
                                          (expand "nth")
                                          ((""
                                            (expand "SOMERUNS")
                                            ((""
                                              (expand "DLNOT")
                                              ((""
                                                (expand "DLOR")
                                                ((""
                                                  (expand "=")
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (expand
                                                       "cnst"
                                                       1
                                                       2)
                                                      ((""
                                                        (case
                                                         "NOT val(x)(env) =5")
                                                        (("1"
                                                          (inst
                                                           2
                                                           "env")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "semantic_rel")
                                                              (("1"
                                                                (expand
                                                                 "DLBOOL")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "val")
                                                          (("2"
                                                            (inst
                                                             1
                                                             "env WITH [x := env(x)+6*(0.1)]")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "semantic_rel")
                                                                (("2"
                                                                  (expand
                                                                   "semantic_rel_diff")
                                                                  (("2"
                                                                    (expand
                                                                     "DLBOOL")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "cnst_lins_sol_u")
                                                                        (("2"
                                                                          (expand
                                                                           "solves_u?")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "DLTRUE"
                                                                             "(: (x, cnst(6)) :)")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "env")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     1
                                                                                     "hp(0)")
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "1/10"
                                                                                       "LAMBDA (i: below(length((: (x, cnst(6)) :)))): LAMBDA (r: real): Y_sol_ex((: (x, cnst(6)) :))(i)(r)(env)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "env_at_t?")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "i_1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "not_in_map")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "0")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "Y_sol_ex")
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "k")
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "+")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "*")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "is_cnst?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "nth")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "cnst"
                                                                                                                     1
                                                                                                                     (1
                                                                                                                      2))
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "cnst")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "val")
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "cnst_lins?")
                                                                                        (("2"
                                                                                          (skeep*)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "i!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nth")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "6")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (expand
                                                                                         "hp")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "DLBOOL")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "cnst_lins?")
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "mapexpr_inj")
                                                                                    (("1"
                                                                                      (skeep*)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "i")
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "j")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nth")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep*)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "i")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               1
                                                                                               "6")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_DLEVENTUALLY formula-decl nil temporal_logic dL)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (DLNOT const-decl "bool" bool_expr dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (= const-decl "BoolExpr" bool_expr dL)
    (val const-decl "real" hp_def dL)
    (x const-decl "dLVar" floor_ex nil)
    (cnst const-decl "real" hp_def dL)
    (dl_cut formula-decl nil dynamic_logic dL)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt dL)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (SOMERUNS_st const-decl "bool" ltl_expr dL)
    (DLOR const-decl "bool" bool_expr dL)
    (normDLEVENTUALLY const-decl "bool" ltl_expr dL)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt dL)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (SOMERUNS_tr const-decl "bool" ltl_expr dL)
    (TraceBoolExpr type-eq-decl nil ltl_expr dL)
    (Trace type-eq-decl nil trace_semantics dL)
    (wf_trace? const-decl "bool" trace_semantics dL)
    (TraceState type-decl nil TraceState_adt dL)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Formulas type-eq-decl nil bool_expr dL)
    (append def-decl "list[T]" list_props nil)
    (move_to_head_rec def-decl "Formulas" dynamic_logic dL)
    (length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (is_dlfnum const-decl "bool" dynamic_logic dL)
    (move_to_head const-decl "Formulas" dynamic_logic dL)
    (dl_moveR formula-decl nil dynamic_logic dL)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dl_hideR formula-decl nil dynamic_logic dL) nil nil nil nil
    (SOMERUNS_eq formula-decl nil ltl_expr dL)
    (dl_assignd formula-decl nil dynamic_logic dL)
    (dlSequent_equiv formula-decl nil dynamic_logic dL)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (semantic_rel inductive-decl "bool" hp_expr dL)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cnst_lins_sol_u formula-decl nil dl_solution dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (MapExprInj type-eq-decl nil hp_def dL)
    (cnst_lins? const-decl "bool" dl_solution dL)
    (hp const-decl "bool" interval_def ODEs)
    (dd? const-decl "bool" hp_expr dL)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (env_at_t? const-decl "bool" hp_expr dL)
    (not_in_map const-decl "bool" hp_def dL) nil
    (is_cnst? const-decl "bool" dl_solution dL) nil
    (solution_odes_u? const-decl "bool" hp_expr dL)
    (Y_sol_ex const-decl "[Environment -> real]" dl_solution dL) nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subrange type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (solves_u? const-decl "bool" dl_solution dL)
    (semantic_rel_diff const-decl "bool" hp_expr dL)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nth def-decl "T" list_props nil)
    (dlSequent const-decl "bool" dynamic_logic dL) nil
    (SUB_MapVar def-decl
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     substitution dL)
    (dl_sub_not formula-decl nil substitution dL)
    (Substitution type-eq-decl nil substitution dL)
    (dl_sub_eq formula-decl nil substitution dL)
    (dl_subre_const formula-decl nil substitution dL)
    (dl_subre_val formula-decl nil substitution dL)
    (dl_false_or formula-decl nil bool_expr dL)
    (SOMERUNS const-decl "bool" bool_expr dL) nil
    (dl_orR formula-decl nil dynamic_logic dL) nil
    (dltl_ASSIGNcup_dual formula-decl nil temporal_logic dL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (HP type-decl nil HP_adt dL) (MapExpr type-eq-decl nil hp_def dL)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (ODEs type-eq-decl nil hp_def dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (DLBOOL const-decl "bool" bool_expr dL)
    (TRUE const-decl "bool" booleans nil)
    (Assigns type-eq-decl nil hp_def dL)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt dL)
    (FALSE const-decl "bool" booleans nil)
    (dltl_SEQcup_dual formula-decl nil temporal_logic dL))
   nil))
 (end_state_5 0
  (end_state_5-1 nil 3904143760
   ("" (dl-assert) (("" (dl-grind) nil nil)) nil)
   ((dl_subre_val formula-decl nil substitution dL)
    (dl_subre_const formula-decl nil substitution dL)
    (Substitution type-eq-decl nil substitution dL)
    (dl_sub_eq formula-decl nil substitution dL)
    (SUB_MapVar def-decl
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     substitution dL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (val const-decl "real" hp_def dL)
    (= const-decl "BoolExpr" bool_expr dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt dL)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (Assigns type-eq-decl nil hp_def dL)
    (TRUE const-decl "bool" booleans nil)
    (DLBOOL const-decl "bool" bool_expr dL)
    (cnst const-decl "real" hp_def dL)
    (x const-decl "dLVar" floor_ex nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (ODEs type-eq-decl nil hp_def dL)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dLVar type-decl nil hp_def dL) (HP type-decl nil HP_adt dL)
    (dl_composeb formula-decl nil dynamic_logic dL)
    (dl_assignb formula-decl nil dynamic_logic dL)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (ALLRUNS const-decl "bool" bool_expr dL)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (for const-decl "T" for_iterate structures)
    (iterate_left const-decl "T" for_iterate structures)
    (\|- const-decl "bool" dynamic_logic dL))
   nil))
 (eventually_not_int 0
  (eventually_not_int-2 nil 3913380897
   ("" (rewrite "norm_DLEVENTUALLY")
    (("" (use "dltl_SEQcup_dual")
      (("" (use "dl_cut")
        (("" (assert)
          (("" (hide-all-but 1)
            (("" (rewrite "dltl_ASSIGNcup_dual" :dir rl)
              (("" (dl-hide 2 1)
                (("" (dl-flatten)
                  (("" (dl-hide 2 1)
                    (("" (rewrite "SOMERUNS_eq")
                      (("" (rewrite "SOMERUNS_eq")
                        (("" (rewrite "dl_assignd")
                          (("" (dl-assert)
                            (("" (rewrite "dlSequent_equiv")
                              ((""
                                (expand "dlSequent")
                                ((""
                                  (skeep)
                                  ((""
                                    (hide -1)
                                    ((""
                                      (inst 1 "0")
                                      ((""
                                        (expand "nth")
                                        ((""
                                          (expand "SOMERUNS")
                                          ((""
                                            (expand "DLNOT")
                                            ((""
                                              (expand "DLOR")
                                              ((""
                                                (expand "SUB")
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (expand
                                                     "assign_sub")
                                                    ((""
                                                      (expand
                                                       "assign_env")
                                                      ((""
                                                        (expand
                                                         "assign_env")
                                                        ((""
                                                          (assert)
                                                          ((""
                                                            (expand
                                                             "integer_re?"
                                                             1
                                                             2)
                                                            ((""
                                                              (assert)
                                                              ((""
                                                                (expand
                                                                 "val"
                                                                 1
                                                                 2)
                                                                ((""
                                                                  (assert)
                                                                  ((""
                                                                    (expand
                                                                     "floor_re"
                                                                     1)
                                                                    ((""
                                                                      (assert)
                                                                      ((""
                                                                        (case
                                                                         "NOT integer_re?(val(x))(env)")
                                                                        (("1"
                                                                          (inst
                                                                           2
                                                                           "env")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "semantic_rel")
                                                                              (("1"
                                                                                (expand
                                                                                 "DLBOOL")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "integer_re?"
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "integer_re?")
                                                                            (("2"
                                                                              (expand
                                                                               "val")
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "env WITH [(dlvar_index(x)) := env(dlvar_index(x))+6*(0.1)]")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "semantic_rel")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "semantic_rel_diff")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "DLBOOL")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "cnst_lins_sol_u")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "solves_u?")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "DLTRUE"
                                                                                                 "(: (x, cnst(6)) :)")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "env")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "hp(0)")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "1/10"
                                                                                                       "LAMBDA (i: below(length((: (x, cnst(6)) :)))): LAMBDA (r: real): Y_sol_ex((: (x, cnst(6)) :))(i)(r)(env)")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "env_at_t?")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (split)
                                                                                                            (("1"
                                                                                                              (skeep)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "i_1")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "not_in_map")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "0")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "nth")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (skeep)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "Y_sol_ex")
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "k")
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -2)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "nth")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "+")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "*")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "is_cnst?")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "nth")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "cnst"
                                                                                                                                     1
                                                                                                                                     (1
                                                                                                                                      2))
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "cnst")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "val")
                                                                                                                                        (("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "cnst_lins?")
                                                                                                        (("2"
                                                                                                          (skeep*)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "i!1")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "nth")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "6")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (expand
                                                                                                         "hp")
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "DLBOOL")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "cnst_lins?")
                                                                                                    (("2"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (dl-mapexpr_inj)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skeep*)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "nth")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "i")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "6")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (name-replace
                                                                                         "N"
                                                                                         "env(dlvar_index(x))")
                                                                                        (("2"
                                                                                          (grind)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "rem_even")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "N*5+3"
                                                                                               "5")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "rem")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "div")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "sgn")
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "floor_plus_int")
                                                                                                            (("1"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -3
                                                                                                                   "N"
                                                                                                                   "3/5")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "-N"
                                                                                                                   "-3/5")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "integers.closed_neg")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "rationals.closed_neg")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "rationals.closed_plus")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "integers.closed_plus")
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "rationals.closed_times")
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "integers.closed_times")
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "rationals.closed_times")
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dltl_SEQcup_dual formula-decl nil temporal_logic dL)
    (FALSE const-decl "bool" booleans nil)
    (floor_re const-decl "(integer?)" floor_ex nil)
    (integer? const-decl "bool" integers nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt dL)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (Assigns type-eq-decl nil hp_def dL)
    (TRUE const-decl "bool" booleans nil)
    (DLBOOL const-decl "bool" bool_expr dL)
    (cnst const-decl "real" hp_def dL)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (ODEs type-eq-decl nil hp_def dL)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def dL) (HP type-decl nil HP_adt dL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (dltl_ASSIGNcup_dual formula-decl nil temporal_logic dL)
    (gamma__71 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (dl_orR formula-decl nil dynamic_logic dL)
    (delta__72 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (SOMERUNS_eq formula-decl nil ltl_expr dL)
    (dl_assignd formula-decl nil dynamic_logic dL)
    (dlSequent_equiv formula-decl nil dynamic_logic dL)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (assign_env def-decl "Environment" substitution dL)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (N skolem-const-decl "real" floor_ex nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (rem const-decl "{k | abs(k) < abs(j)}" rem ints)
    (sgn const-decl "int" real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (closed_neg formula-decl nil integers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (closed_neg formula-decl nil rationals nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (div const-decl "integer" div ints)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (closed_plus formula-decl nil rationals nil)
    (closed_times formula-decl nil integers nil)
    (closed_times formula-decl nil rationals nil)
    (closed_plus formula-decl nil integers nil)
    (rem_even formula-decl nil rem ints)
    (solves_u? const-decl "bool" dl_solution dL)
    (mapexpr_inj_distinct_vars formula-decl nil hp_def dL)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (distinct_var? def-decl "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}" hp_def dL)
    (pairwise_distinct_vars? def-decl "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     hp_def dL)
    (env skolem-const-decl "Environment" floor_ex nil)
    (Y_sol_ex const-decl "[Environment -> real]" dl_solution dL)
    (solution_odes_u? const-decl "bool" hp_expr dL)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (is_cnst? const-decl "bool" dl_solution dL)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (not_in_map const-decl "bool" hp_def dL)
    (env_at_t? const-decl "bool" hp_expr dL)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dd? const-decl "bool" hp_expr dL)
    (hp const-decl "bool" interval_def ODEs)
    (cnst_lins? const-decl "bool" dl_solution dL)
    (MapExprInj type-eq-decl nil hp_def dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cnst_lins_sol_u formula-decl nil dl_solution dL)
    (semantic_rel_diff const-decl "bool" hp_expr dL)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def dL)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (semantic_rel inductive-decl "bool" hp_expr dL)
    (assign_sub const-decl "Environment" substitution dL)
    (nth def-decl "T" list_props nil)
    (dlSequent const-decl "bool" dynamic_logic dL)
    (SUB const-decl "bool" substitution dL)
    (dl_false_or formula-decl nil bool_expr dL)
    (dl_sub_not formula-decl nil substitution dL)
    (Substitution type-eq-decl nil substitution dL)
    (SOMERUNS const-decl "bool" bool_expr dL)
    (delta__74 skolem-const-decl "(cons?)" floor_ex nil)
    (gamma__73 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (delta__70 skolem-const-decl "(cons?)" floor_ex nil)
    (gamma__69 skolem-const-decl "(null?[BoolExpr])" floor_ex nil)
    (dl_hideR formula-decl nil dynamic_logic dL)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dl_moveR formula-decl nil dynamic_logic dL)
    (move_to_head const-decl "Formulas" dynamic_logic dL)
    (is_dlfnum const-decl "bool" dynamic_logic dL)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (move_to_head_rec def-decl "Formulas" dynamic_logic dL)
    (append def-decl "list[T]" list_props nil)
    (Formulas type-eq-decl nil bool_expr dL)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (TraceState type-decl nil TraceState_adt dL)
    (wf_trace? const-decl "bool" trace_semantics dL)
    (Trace type-eq-decl nil trace_semantics dL)
    (TraceBoolExpr type-eq-decl nil ltl_expr dL)
    (SOMERUNS_tr const-decl "bool" ltl_expr dL)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt dL)
    (normDLEVENTUALLY const-decl "bool" ltl_expr dL)
    (DLOR const-decl "bool" bool_expr dL)
    (SOMERUNS_st const-decl "bool" ltl_expr dL)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt dL)
    (dl_cut formula-decl nil dynamic_logic dL)
    (x const-decl "dLVar" floor_ex nil)
    (val const-decl "real" hp_def dL) (dLVar type-decl nil hp_def dL)
    (integer_re? const-decl "bool" floor_ex nil)
    (RealExpr type-eq-decl nil hp_def dL)
    (DLNOT const-decl "bool" bool_expr dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (norm_DLEVENTUALLY formula-decl nil temporal_logic dL))
   nil)
  (eventually_not_int-1 nil 3904143862
   ("" (rewrite "norm_DLEVENTUALLY")
    (("" (use "dltl_SEQcup_dual")
      (("" (use "dl_cut")
        (("" (assert)
          (("" (hide-all-but 1)
            (("" (rewrite "dltl_ASSIGNcup_dual" :dir rl)
              (("" (dl-hide 2 1)
                (("" (dl-flatten)
                  (("" (dl-hide 2 1)
                    (("" (dl-flatten)
                      (("" (rewrite "SOMERUNS_eq")
                        (("" (rewrite "SOMERUNS_eq")
                          (("" (rewrite "dl_assignd")
                            (("" (dl-assert)
                              ((""
                                (rewrite "dlSequent_equiv")
                                ((""
                                  (expand "dlSequent")
                                  ((""
                                    (skeep)
                                    ((""
                                      (hide -1)
                                      ((""
                                        (inst 1 "0")
                                        ((""
                                          (expand "nth")
                                          ((""
                                            (expand "SOMERUNS")
                                            ((""
                                              (expand "DLNOT")
                                              ((""
                                                (expand "DLOR")
                                                ((""
                                                  (expand "SUB")
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (expand
                                                       "assign_sub")
                                                      ((""
                                                        (expand
                                                         "assign_env")
                                                        ((""
                                                          (expand
                                                           "assign_env")
                                                          ((""
                                                            (assert)
                                                            ((""
                                                              (expand
                                                               "integer_re?"
                                                               1
                                                               2)
                                                              ((""
                                                                (assert)
                                                                ((""
                                                                  (expand
                                                                   "val"
                                                                   1
                                                                   2)
                                                                  ((""
                                                                    (assert)
                                                                    ((""
                                                                      (expand
                                                                       "floor_re"
                                                                       1)
                                                                      ((""
                                                                        (assert)
                                                                        ((""
                                                                          (case
                                                                           "NOT integer_re?(val(x))(env)")
                                                                          (("1"
                                                                            (inst
                                                                             2
                                                                             "env")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "semantic_rel")
                                                                                (("1"
                                                                                  (expand
                                                                                   "DLBOOL")
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "integer_re?"
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "integer_re?")
                                                                              (("2"
                                                                                (expand
                                                                                 "val")
                                                                                (("2"
                                                                                  (inst
                                                                                   1
                                                                                   "env WITH [x := env(x)+6*(0.1)]")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "semantic_rel")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "semantic_rel_diff")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "DLBOOL")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "cnst_lins_sol_u")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "solves_u?")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "DLTRUE"
                                                                                                   "(: (x, cnst(6)) :)")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "env")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "hp(0)")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "1/10"
                                                                                                         "LAMBDA (i: below(length((: (x, cnst(6)) :)))): LAMBDA (r: real): Y_sol_ex((: (x, cnst(6)) :))(i)(r)(env)")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "env_at_t?")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (skeep)
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "i_1")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "not_in_map")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "0")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "nth")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "Y_sol_ex")
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "k")
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "nth")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "+")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "*")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "is_cnst?")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "nth")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "cnst"
                                                                                                                                       1
                                                                                                                                       (1
                                                                                                                                        2))
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "cnst")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "val")
                                                                                                                                          (("2"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "cnst_lins?")
                                                                                                          (("2"
                                                                                                            (skeep*)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "i!1")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "nth")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "6")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (expand
                                                                                                           "hp")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "DLBOOL")
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "cnst_lins?")
                                                                                                      (("2"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "mapexpr_inj")
                                                                                                          (("1"
                                                                                                            (skeep*)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "i")
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "j")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "nth")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skeep*)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "nth")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "i")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "6")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -3)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "rem_even")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "env(0)*5+3"
                                                                                               "5")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "rem")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "div")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "sgn")
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "floor_plus_int")
                                                                                                            (("1"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -3
                                                                                                                   "env(0)"
                                                                                                                   "3/5")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "-env(0)"
                                                                                                                   "-3/5")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "integers.closed_neg")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "rationals.closed_neg")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "rationals.closed_plus")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "integers.closed_plus")
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "rationals.closed_times")
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "integers.closed_times")
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "rationals.closed_times")
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_DLEVENTUALLY formula-decl nil temporal_logic dL)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (DLNOT const-decl "bool" bool_expr dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (integer_re? const-decl "bool" floor_ex nil)
    (val const-decl "real" hp_def dL)
    (x const-decl "dLVar" floor_ex nil)
    (dl_cut formula-decl nil dynamic_logic dL)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt dL)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (SOMERUNS_st const-decl "bool" ltl_expr dL)
    (DLOR const-decl "bool" bool_expr dL)
    (normDLEVENTUALLY const-decl "bool" ltl_expr dL)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt dL)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (SOMERUNS_tr const-decl "bool" ltl_expr dL)
    (TraceBoolExpr type-eq-decl nil ltl_expr dL)
    (Trace type-eq-decl nil trace_semantics dL)
    (wf_trace? const-decl "bool" trace_semantics dL)
    (TraceState type-decl nil TraceState_adt dL)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Formulas type-eq-decl nil bool_expr dL)
    (append def-decl "list[T]" list_props nil)
    (move_to_head_rec def-decl "Formulas" dynamic_logic dL)
    (length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (is_dlfnum const-decl "bool" dynamic_logic dL)
    (move_to_head const-decl "Formulas" dynamic_logic dL)
    (dl_moveR formula-decl nil dynamic_logic dL)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dl_hideR formula-decl nil dynamic_logic dL) nil nil nil nil
    (SOMERUNS_eq formula-decl nil ltl_expr dL)
    (dl_assignd formula-decl nil dynamic_logic dL)
    (dlSequent_equiv formula-decl nil dynamic_logic dL)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (assign_env def-decl "Environment" substitution dL)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rem_even formula-decl nil rem ints)
    (closed_plus formula-decl nil integers nil)
    (closed_times formula-decl nil rationals nil)
    (closed_times formula-decl nil integers nil)
    (closed_plus formula-decl nil rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (div const-decl "integer" div ints)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (closed_neg formula-decl nil rationals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (closed_neg formula-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sgn const-decl "int" real_defs nil)
    (rem const-decl "{k | abs(k) < abs(j)}" rem ints)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (solves_u? const-decl "bool" dl_solution dL)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (Y_sol_ex const-decl "[Environment -> real]" dl_solution dL)
    (solution_odes_u? const-decl "bool" hp_expr dL) nil
    (is_cnst? const-decl "bool" dl_solution dL) nil
    (not_in_map const-decl "bool" hp_def dL)
    (env_at_t? const-decl "bool" hp_expr dL)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dd? const-decl "bool" hp_expr dL)
    (hp const-decl "bool" interval_def ODEs)
    (cnst_lins? const-decl "bool" dl_solution dL)
    (MapExprInj type-eq-decl nil hp_def dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cnst_lins_sol_u formula-decl nil dl_solution dL)
    (semantic_rel_diff const-decl "bool" hp_expr dL)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (semantic_rel inductive-decl "bool" hp_expr dL)
    (assign_sub const-decl "Environment" substitution dL)
    (nth def-decl "T" list_props nil)
    (dlSequent const-decl "bool" dynamic_logic dL)
    (SUB const-decl "bool" substitution dL)
    (dl_sub_not formula-decl nil substitution dL)
    (Substitution type-eq-decl nil substitution dL)
    (dl_false_or formula-decl nil bool_expr dL)
    (SOMERUNS const-decl "bool" bool_expr dL) nil
    (dl_orR formula-decl nil dynamic_logic dL) nil
    (dltl_ASSIGNcup_dual formula-decl nil temporal_logic dL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (HP type-decl nil HP_adt dL) (MapExpr type-eq-decl nil hp_def dL)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (ODEs type-eq-decl nil hp_def dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cnst const-decl "real" hp_def dL)
    (DLBOOL const-decl "bool" bool_expr dL)
    (TRUE const-decl "bool" booleans nil)
    (Assigns type-eq-decl nil hp_def dL)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt dL)
    (integer? const-decl "bool" integers nil)
    (floor_re const-decl "(integer?)" floor_ex nil)
    (FALSE const-decl "bool" booleans nil)
    (dltl_SEQcup_dual formula-decl nil temporal_logic dL))
   nil))
 (end_state_int 0
  (end_state_int-1 nil 3904143918
   ("" (dl-assert) (("" (dl-grind) nil nil)) nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (integer_re? const-decl "bool" floor_ex nil)
    (BoolExpr type-eq-decl nil hp_def dL)
    (val const-decl "real" hp_def dL)
    (floor_re const-decl "(integer?)" floor_ex nil)
    (integer? const-decl "bool" integers nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt dL)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (Assigns type-eq-decl nil hp_def dL)
    (TRUE const-decl "bool" booleans nil)
    (DLBOOL const-decl "bool" bool_expr dL)
    (cnst const-decl "real" hp_def dL)
    (x const-decl "dLVar" floor_ex nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (ODEs type-eq-decl nil hp_def dL)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dLVar type-decl nil hp_def dL) (HP type-decl nil HP_adt dL)
    (dl_composeb formula-decl nil dynamic_logic dL)
    (dl_assignb formula-decl nil dynamic_logic dL)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (ALLRUNS const-decl "bool" bool_expr dL)
    (Substitution type-eq-decl nil substitution dL)
    (SUB const-decl "bool" substitution dL)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (assign_env def-decl "Environment" substitution dL)
    (assign_sub const-decl "Environment" substitution dL)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (for const-decl "T" for_iterate structures)
    (iterate_left const-decl "T" for_iterate structures)
    (\|- const-decl "bool" dynamic_logic dL))
   nil)))