(dl_solution
 (init_zip_sol_TCC1 0
  (init_zip_sol_TCC1-1 nil 3871024496
   ("" (assert) (("" (skeep) (("" (assert) nil nil)) nil)) nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (init_zip_sol subtype
    "(number_fields.+)(dl_solution.i, ((number_fields.-)(list_props[MapExpr].length(dl_solution.ode), list_props[MapExpr].length(dl_solution.a))))"
    "below[length[MapExpr](ode)]")))
 (init_zip_sol_TCC2 0
  (init_zip_sol_TCC2-1 nil 3871024496
   ("" (skeep) (("" (skeep) (("" (assert) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init_zip_sol subtype "dl_solution.i"
    "below[length[MapExpr](ode)]")))
 (init_zip_sol_TCC3 0
  (init_zip_sol_TCC3-1 nil 3871024496
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init_zip_sol subtype
    "(number_fields.-)(list_props[MapExpr].length(dl_solution.ode), list_props[MapExpr].length(dl_solution.acc))"
    "naturalnumber")))
 (init_zip_sol_TCC4 0
  (init_zip_sol_TCC4-1 nil 3871024496
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init_zip_sol subtype "dl_solution.acc"
    "{a: hp_def.MapExprInj | booleans.AND(list_props[MapExpr].length(a) = list_props[MapExpr].length(dl_solution.ode), FORALL (i: naturalnumbers.below(list_props[MapExpr].length(a))): list_props[MapExpr].nth(a, i) = (list_props[MapExpr].nth(dl_solution.ode, i)`1, dl_solution.y(i)(dl_solution.t)))}")))
 (init_zip_sol_TCC5 0
  (init_zip_sol_TCC5-1 nil 3871024496
   ("" (skeep)
    (("" (skeep)
      (("" (case "NOT length(ll) = length(acc)+1")
        (("1" (assert)
          (("1" (replace -1 1)
            (("1" (expand "length" 1 1) (("1" (propax) nil nil)) nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (skeep)
            (("2" (case "i=0")
              (("1" (replace -1)
                (("1" (decompose-equality -3)
                  (("1" (expand "nth" 2 1)
                    (("1" (replace -1)
                      (("1" (replace -4) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "acc")
                (("2" (decompose-equality -5)
                  (("2" (expand "nth" 3)
                    (("2" (assert)
                      (("2" (inst -5 "i-1")
                        (("2" (replace -2)
                          (("2" (assert)
                            (("2" (replace -5 3)
                              (("2"
                                (expand "nth" 3 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dLVar type-decl nil hp_def nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (ODEs type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init_zip_sol subtype "dl_solution.ll"
    "{a: hp_def.MapExprInj | booleans.AND(reals.<=(list_props[MapExpr].length(a), list_props[MapExpr].length(dl_solution.ode)), FORALL (i: naturalnumbers.below(list_props[MapExpr].length(a))): list_props[MapExpr].nth(a, i) = (list_props[MapExpr].nth(dl_solution.ode, (number_fields.-)((number_fields.+)(i, list_props[MapExpr].length(dl_solution.ode)), list_props[MapExpr].length(a)))`1, dl_solution.y((number_fields.-)((number_fields.+)(i, list_props[MapExpr].length(dl_solution.ode)), list_props[MapExpr].length(a)))(dl_solution.t)))}")))
 (init_zip_sol_TCC6 0
  (init_zip_sol_TCC6-1 nil 3871024496
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (replace -1)
          (("" (assert)
            (("" (expand "length" 2 2) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init_zip_sol termination
    "dl_solution.init_zip_sol(dl_solution.ode, dl_solution.y, dl_solution.t, dl_solution.ll)"
    "nil")))
 (init_zip_sol_TCC7 0
  (init_zip_sol_TCC7-1 nil 3871024496
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init_zip_sol subtype
    "(number_fields.-)(list_props[MapExpr].length(dl_solution.ode), ((number_fields.+)(list_props[MapExpr].length(dl_solution.acc), 1)))"
    "below[length[MapExpr](ode)]")))
 (init_zip_sol_TCC8 0
  (init_zip_sol_TCC8-1 nil 3871024496
   ("" (skeep)
    (("" (expand "mapexpr_inj" 2)
      (("" (skeep)
        (("" (typepred "i" "j")
          (("" (typepred "ode")
            (("" (case "j=0")
              (("1" (assert) nil nil)
               ("2" (case "i=0")
                (("1" (expand "nth" -6 1)
                  (("1" (assert)
                    (("1" (expand "mapexpr_inj" -2)
                      (("1" (typepred "acc")
                        (("1" (expand "nth" -9 2)
                          (("1" (expand "length" -6)
                            (("1" (inst -3 "j-1")
                              (("1"
                                (replace -3)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst
                                     -5
                                     "length(ode)-1-length(acc)"
                                     "length(ode)-1-length(acc)+j")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (hide -7 -8)
                                        (("2"
                                          (case "j - length(acc) <= 0")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (move-terms 1 l 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred "j")
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -2
                                                     1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "length" -2)
                    (("2" (expand "length" -4)
                      (("2" (expand "nth" -5 1)
                        (("2" (expand "nth" -5 2)
                          (("2" (typepred "acc")
                            (("2" (inst-cp -3 "i-1")
                              (("2"
                                (replace -4)
                                (("2"
                                  (inst-cp -3 "j-1")
                                  (("2"
                                    (replace -4)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "mapexpr_inj" -6)
                                        (("2"
                                          (inst
                                           -6
                                           "length(ode) - 1 - length(acc) + i"
                                           "length(ode) - 1 - length(acc) + j")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (subrange type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ODEs type-eq-decl nil hp_def nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (j skolem-const-decl "subrange(1 + i,
         length(cons[[dLVar, [Environment -> real]]]
                    ((nth[MapExpr]
                          (ode,
                           length[MapExpr](ode) - 1 -
                            length[MapExpr](acc))`1,
                      y(length[MapExpr](ode) - 1 - length[MapExpr](acc))
                       (t)),
                     acc))
          - 1)" dl_solution nil)
    (i skolem-const-decl
       "below(length(cons[[dLVar, [Environment -> real]]]
                 ((nth[MapExpr]
                       (ode,
                        length[MapExpr](ode) - 1 - length[MapExpr](acc))`1,
                   y(length[MapExpr](ode) - 1 - length[MapExpr](acc))(t)),
                  acc)))" dl_solution nil)
    (acc skolem-const-decl "{a: MapExprInj |
   length(a) <= length(ode) AND
    FORALL (i: below(length(a))):
      nth(a, i) =
       (nth(ode, i + length(ode) - length(a))`1,
        y(i + length(ode) - length(a))(t))}" dl_solution nil)
    (t skolem-const-decl "real" dl_solution nil)
    (y skolem-const-decl
     "[below(length(ode)) -> [real -> [Environment -> real]]]"
     dl_solution nil)
    (ode skolem-const-decl "ODEs" dl_solution nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init_zip_sol subtype
    "list_adt[[hp_def.dLVar, [Environment -> real]]].cons((list_props[MapExpr].nth(dl_solution.ode, (number_fields.-)(list_props[MapExpr].length(dl_solution.ode), ((number_fields.+)(list_props[MapExpr].length(dl_solution.acc), 1))))`1, dl_solution.y((number_fields.-)(list_props[MapExpr].length(dl_solution.ode), ((number_fields.+)(list_props[MapExpr].length(dl_solution.acc), 1))))(dl_solution.t)), dl_solution.acc)"
    "MapExprInj")))
 (zip_sol_test_TCC1 0
  (zip_sol_test_TCC1-1 nil 3871452250 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cnst const-decl "real" hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (mapexpr_inj const-decl "bool" hp_def nil))
   nil
   (zip_sol_test subtype "(: (dl_solution.v, hp_def.cnst(5)) :)"
    "ODEs")))
 (zip_sol_test_TCC2 0
  (zip_sol_test_TCC2-1 nil 3871452250 ("" (subtype-tcc) nil nil)
   ((length_singleton formula-decl nil more_list_props structures)) nil
   (zip_sol_test subtype
    "(LAMBDA (i: naturalnumbers.below(1)): LAMBDA (r: reals.real): (real_fun_ops[Environment].+)((real_fun_ops[Environment].+)(hp_def.val(dl_solution.v), hp_def.cnst(5)), hp_def.cnst(r)))"
    "[naturalnumbers.below(list_props[MapExpr].length((: (dl_solution.v, hp_def.cnst(5)) :))) -> [real -> [Environment -> real]]]")))
 (zip_sol_test_TCC3 0
  (zip_sol_test_TCC3-1 nil 3871452250
   ("" (skeep)
    (("" (split 1)
      (("1" (expand "length")
        (("1" (expand "length" 1) (("1" (assert) nil nil)) nil)) nil)
       ("2" (skeep)
        (("2" (typepred "i_1")
          (("2" (expand "length" -1) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (zip_sol_test subtype "list_adt[MapExpr].null"
    "{a: hp_def.MapExprInj | booleans.AND(reals.<=(list_props[MapExpr].length(a), list_props[MapExpr].length((: (dl_solution.v, hp_def.cnst(5)) :))), FORALL (i_1: naturalnumbers.below(list_props[MapExpr].length(a))): list_props[MapExpr].nth(a, i_1) = (list_props[MapExpr].nth((: (dl_solution.v, hp_def.cnst(5)) :), (number_fields.-)((number_fields.+)(i_1, list_props[MapExpr].length((: (dl_solution.v, hp_def.cnst(5)) :))), list_props[MapExpr].length(a)))`1, (real_fun_ops[Environment].+)((real_fun_ops[Environment].+)(hp_def.val(dl_solution.v), hp_def.cnst(5)), hp_def.cnst(5))))}")))
 (zip_sol_test 0
  (zip_sol_test-1 nil 3871452256 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (init_zip_sol def-decl "{a: MapExprInj |
   length(a) = length(ode) AND
    FORALL (i: below(length(a))): nth(a, i) = (nth(ode, i)`1, y(i)(t))}"
     dl_solution nil))
   shostak))
 (zs_TCC1 0
  (zs_TCC1-1 nil 3871453603
   ("" (skeep)
    (("" (split 1)
      (("1" (expand "length" 1)
        (("1" (assert)
          (("1" (lift-if 1)
            (("1" (split 1)
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (typepred "i")
          (("2" (expand "length" -1) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (zs subtype "list_adt[MapExpr].null"
    "{a: hp_def.MapExprInj | booleans.AND(reals.<=(list_props[MapExpr].length(a), list_props[MapExpr].length(dl_solution.ode)), FORALL (i: naturalnumbers.below(list_props[MapExpr].length(a))): list_props[MapExpr].nth(a, i) = (list_props[MapExpr].nth(dl_solution.ode, (number_fields.-)((number_fields.+)(i, list_props[MapExpr].length(dl_solution.ode)), list_props[MapExpr].length(a)))`1, dl_solution.y((number_fields.-)((number_fields.+)(i, list_props[MapExpr].length(dl_solution.ode)), list_props[MapExpr].length(a)))(dl_solution.t)))}")))
 (map_inj_zs 0
  (map_inj_zs-1 nil 3872781803
   ("" (skeep)
    (("" (expand "zs" 1)
      (("" (typepred "init_zip_sol(ode, y, t, null)")
        (("" (split 1)
          (("1" (flatten)
            (("1" (expand "not_in_map")
              (("1" (skeep)
                (("1" (inst -1 "i_1")
                  (("1" (assert)
                    (("1" (inst -5 "i_1") (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (typepred "i_1") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "not_in_map")
              (("2" (skeep)
                (("2" (inst -1 "i_1")
                  (("1" (assert)
                    (("1" (inst -5 "i_1") (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (typepred "i_1") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zs const-decl "MapExprInj" dl_solution nil)
    (not_in_map const-decl "bool" hp_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ode skolem-const-decl "ODEs" dl_solution nil)
    (y skolem-const-decl
     "[below(length(ode)) -> [real -> [Environment -> real]]]"
     dl_solution nil)
    (t skolem-const-decl "real" dl_solution nil)
    (i_1 skolem-const-decl
     "below(length(init_zip_sol(ode, y, t, null)))" dl_solution nil)
    (i_1 skolem-const-decl "below(length(ode))" dl_solution nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil) (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (init_zip_sol def-decl "{a: MapExprInj |
   length(a) = length(ode) AND
    FORALL (i: below(length(a))): nth(a, i) = (nth(ode, i)`1, y(i)(t))}"
     dl_solution nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (solution_domain_ax_ode_TCC1 0
  (solution_domain_ax_ode_TCC2-1 nil 3870814032
   ("" (subtype-tcc) nil nil) ((dd? const-decl "bool" hp_expr nil)) nil
   (solution_domain_ax_ode subtype "interval_def.hp(0)"
    "(hp_expr.dd?)")))
 (solution_domain_ax_ode 0
  (solution_domain_ax_ode-1 nil 3870815509
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (lemma "dlSequent_equiv")
            (("1" (inst?)
              (("1" (assert)
                (("1" (hide -2)
                  (("1" (expand "dlSequent" -1)
                    (("1" (inst -1 "env")
                      (("1" (split -1)
                        (("1" (skeep)
                          (("1" (typepred "j")
                            (("1" (expand "length" -1)
                              (("1"
                                (expand "length" -1)
                                (("1"
                                  (expand "nth" -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "ALLRUNS" -2)
                                      (("1"
                                        (inst
                                         -2
                                         "assign_sub(zs(ode, y)(t))(env)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "semantic_rel" 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (label "envin" 1)
                                                (("1"
                                                  (hide "envin")
                                                  (("1"
                                                    (expand
                                                     "solves_u?"
                                                     -3)
                                                    (("1"
                                                      (inst -3 "env")
                                                      (("1"
                                                        (inst
                                                         1
                                                         "hp(0)")
                                                        (("1"
                                                          (expand
                                                           "semantic_rel_diff")
                                                          (("1"
                                                            (name
                                                             "ys"
                                                             "(LAMBDA (i: below(length(ode))):
                                    LAMBDA (r: real): y(i)(r)(env))")
                                                            (("1"
                                                              (label
                                                               "ys"
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "t"
                                                                     "ys")
                                                                    (("1"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "env_at_t?"
                                                                         1)
                                                                        (("1"
                                                                          (lemma
                                                                           "assign_env_alt")
                                                                          (("1"
                                                                            (expand
                                                                             "zs"
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "assign_sub"
                                                                               1)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -2
                                                                                           "i")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "map_inj_zs")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "i")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "zs"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "k")
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "init_zip_sol(ode,y,t,null)")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -3
                                                                                               "k")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "nth(init_zip_sol(ode, y, t, null), k)`1 = nth(ode,k)`1")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       -5
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           -5
                                                                                                           lr)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -5
                                                                                                             1
                                                                                                             lr)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               " nth(init_zip_sol(ode, y, t, null), k)`2 = y(k)(t)")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "ys"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "k")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "i")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (hide-all-but
                                                                                           -1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (typepred
                                                                           "env_1")
                                                                          (("2"
                                                                            (inst
                                                                             -3
                                                                             "t_1")
                                                                            (("1"
                                                                              (case
                                                                               " assign_sub(zs(ode, y)(t_1))(env) = env_1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2
                                                                                 3)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "assign_env_alt")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "assign_sub"
                                                                                     1)
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (decompose-equality
                                                                                           1)
                                                                                          (("2"
                                                                                            (case
                                                                                             "not_in_map(ode)(x!1)")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "map_inj_zs")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x!1")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -5
                                                                                                         "x!1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "env_at_t?"
                                                                                                             -6)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -6
                                                                                                                 "x!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "not_in_map"
                                                                                               1)
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "i")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "zs"
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "(init_zip_sol(ode, y, t_1, null))")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -3
                                                                                                         "i")
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           " nth((init_zip_sol(ode, y, t_1, null)), i)`1 = (nth(ode, i)`1)")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             -6
                                                                                                             lr)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               -6
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 -6
                                                                                                                 lr)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "zs"
                                                                                                                   1
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -5)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -6
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         " nth((init_zip_sol(ode, y, t_1, null)), i)`2 = y(i)(t_1)")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "env_at_t?"
                                                                                                                             -9)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -10
                                                                                                                                 "i")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "ys"
                                                                                                                                     -10)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "i")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "zs"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "t_1")
                                                                              (("2"
                                                                                (expand
                                                                                 "hp"
                                                                                 -1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "t")
                                                                      (("2"
                                                                        (expand
                                                                         "hp"
                                                                         1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (typepred "i")
                            (("2" (expand "length" -1)
                              (("2"
                                (expand "length" -1)
                                (("2"
                                  (expand "nth" 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "dlSequent_equiv")
          (("2" (inst?)
            (("2" (assert)
              (("2" (expand "dlSequent" 1)
                (("2" (skeep)
                  (("2" (inst 1 "0")
                    (("2" (expand "nth" 1 1)
                      (("2" (hide 2)
                        (("2" (expand "ALLRUNS" 1)
                          (("2" (skeep)
                            (("2" (expand "semantic_rel" -2)
                              (("2"
                                (expand "semantic_rel_diff" -2)
                                (("2"
                                  (case "((Q(env) AND env = envo))")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst -4 "env" "0")
                                          (("1"
                                            (split -4)
                                            (("1"
                                              (case
                                               "envo = assign_sub(zs(ode, y)(0))(env)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (lemma
                                                   "assign_env_alt")
                                                  (("2"
                                                    (expand
                                                     "assign_sub"
                                                     1)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (decompose-equality
                                                             1)
                                                            (("2"
                                                              (inst
                                                               -2
                                                               "x!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "not_in_map"
                                                                 1)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         -2
                                                                         lr)
                                                                        (("2"
                                                                          (replace
                                                                           -2
                                                                           1
                                                                           lr)
                                                                          (("2"
                                                                            (expand
                                                                             "zs"
                                                                             1)
                                                                            (("2"
                                                                              (typepred
                                                                               "init_zip_sol(ode, y, 0, null)")
                                                                              (("2"
                                                                                (inst
                                                                                 -3
                                                                                 "i")
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   -3)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "solves_u?"
                                                                                       -11)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -11
                                                                                         "env")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "solution_odes_u?"
                                                                                           -11)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -12)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "solution_odes?"
                                                                                                 -11)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "env_at_t?"
                                                                                                     -12)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -12
                                                                                                       "i")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "zs"
                                                                                                           -5)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst
                                                                                           -10
                                                                                           "0")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "nth"
                                                                                             -10)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (typepred "s")
                                                (("2"
                                                  (case "NOT s = 0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (replace -1)
                                                    (("2"
                                                      (case
                                                       "env = assign_sub(zs(ode, y)(0))(env)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (lemma
                                                           "assign_env_alt")
                                                          (("2"
                                                            (decompose-equality
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "assign_sub"
                                                               1)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       -2
                                                                       "x!1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "not_in_map"
                                                                         1)
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (inst
                                                                             -2
                                                                             "i")
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               -2
                                                                               lr)
                                                                              (("2"
                                                                                (replace
                                                                                 -2
                                                                                 1
                                                                                 lr)
                                                                                (("2"
                                                                                  (expand
                                                                                   "zs"
                                                                                   1)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "init_zip_sol(ode, y, 0, null)")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -3
                                                                                       "i")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -3)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "solves_u?"
                                                                                             -12)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -12
                                                                                               "env")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "solution_odes_u?"
                                                                                                 -12)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "solution_odes?"
                                                                                                     -12)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "env_at_t?"
                                                                                                         -13)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -13
                                                                                                           "i")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "zs"
                                                                                                               -)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (inst
                                                                                                 -11
                                                                                                 "0")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   -11)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst -3 "0")
                                            (("2"
                                              (expand "nth" -3)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (split -2)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (label "envin" 1)
                                        (("2"
                                          (hide "envin")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (skeep*)
                                              (("2"
                                                (inst -4 "env" "r")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -4)
                                                    (("1"
                                                      (case
                                                       "envo  = assign_sub(zs(ode, y)(r))(env)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "assign_env_alt")
                                                        (("2"
                                                          (hide -2 2)
                                                          (("2"
                                                            (decompose-equality
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "assign_sub"
                                                               1)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (case
                                                                     "not_in_map(ode)(x!1)")
                                                                    (("1"
                                                                      (inst
                                                                       -3
                                                                       "x!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           1
                                                                           lr)
                                                                          (("1"
                                                                            (expand
                                                                             "env_at_t?"
                                                                             -4)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst
                                                                                 -4
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -2
                                                                         -3
                                                                         -4
                                                                         -5
                                                                         -6)
                                                                        (("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (lemma
                                                                             "map_inj_zs")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "not_in_map"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (inst
                                                                           -2
                                                                           "i")
                                                                          (("1"
                                                                            (expand
                                                                             "zs"
                                                                             -2)
                                                                            (("1"
                                                                              (typepred
                                                                               "init_zip_sol(ode,y,r,null)")
                                                                              (("1"
                                                                                (inst
                                                                                 -3
                                                                                 "i")
                                                                                (("1"
                                                                                  (case
                                                                                   "nth(init_zip_sol(ode, y, r, null), i)`1 = nth(ode,i)`1")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -5
                                                                                       -6)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "zs"
                                                                                         1
                                                                                         1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -6
                                                                                           1)
                                                                                          (("1"
                                                                                            (case
                                                                                             " nth(init_zip_sol(ode, y, r, null), i)`2 = y(i)(r)")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "env_at_t?"
                                                                                                 -9)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -10
                                                                                                     "i")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "fs")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "solution_odes_u?"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "solves_u?"
                                                                                                                 -14)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -14
                                                                                                                   "env")
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     " solution_odes_subset")
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "D")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -2
                                                                                                                         "hp(0)"
                                                                                                                         "ode"
                                                                                                                         "env"
                                                                                                                         "(LAMBDA (i: below(length(ode))):
                                             LAMBDA (r: real): y(i)(r)(env))"
                                                                                                                         "D")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "solution_odes_u?"
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -3
                                                                                                                                 "fs"
                                                                                                                                 "D")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -3
                                                                                                                                     "i"
                                                                                                                                     "r")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (skeep)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (skeep)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "dd?"
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "hp"
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (split
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (skeep)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "closed_interval"
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1
                                                                                                                                           -2)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (replace
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "hp"
                                                                                                                                       -2)
                                                                                                                                      (("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (inst
                                                                                                                     -13
                                                                                                                     "0")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "nth"
                                                                                                                       -13)
                                                                                                                      (("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "i")
                                                                            (("2"
                                                                              (expand
                                                                               "zs"
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst
                                                         -2
                                                         "s"
                                                         "env_at_t(ode,fs,env)(s)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "assign_sub(zs(ode, y)(s))(env) = env_at_t(ode, fs, env)(s)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (decompose-equality
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 "assign_env_alt")
                                                                (("2"
                                                                  (expand
                                                                   "assign_sub"
                                                                   1)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (case
                                                                         "not_in_map(ode)(x!1)")
                                                                        (("1"
                                                                          (inst
                                                                           -3
                                                                           "x!1")
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             1)
                                                                            (("1"
                                                                              (typepred
                                                                               "env_at_t(ode, fs, env)(s)")
                                                                              (("1"
                                                                                (expand
                                                                                 "env_at_t?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x!1")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "map_inj_zs")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "not_in_map"
                                                                           1)
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (inst
                                                                               -2
                                                                               "i")
                                                                              (("1"
                                                                                (skoletin*
                                                                                 -2)
                                                                                (("1"
                                                                                  (expand
                                                                                   "zs"
                                                                                   -)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "init_zip_sol(ode, y, s, null)")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -3
                                                                                       "i")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -3)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -5)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -6)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "zs"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -7
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -4
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "env_at_t(ode, fs, env)(s)")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "env_at_t?"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -2
                                                                                                               "i")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -10
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -2
                                                                                                                     1
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -1
                                                                                                                       -2
                                                                                                                       -3
                                                                                                                       -4
                                                                                                                       -5
                                                                                                                       -6
                                                                                                                       8
                                                                                                                       -9
                                                                                                                       -10
                                                                                                                       -11
                                                                                                                       -12
                                                                                                                       -13
                                                                                                                       -14)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -1
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "fs")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "solves_u?")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "env")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "solution_odes_u?")
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -4
                                                                                                                                     "fs"
                                                                                                                                     "D")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -4
                                                                                                                                         "i"
                                                                                                                                         "s")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (typepred
                                                                                                                                           "s")
                                                                                                                                          (("2"
                                                                                                                                            (typepred
                                                                                                                                             "r")
                                                                                                                                            (("2"
                                                                                                                                              (typepred
                                                                                                                                               "D")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "dd?"
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (split
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (skeep)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "closed_interval")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "hp")
                                                                                                                                                      (("2"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (skeep)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -2
                                                                                                                                         -3
                                                                                                                                         -4)
                                                                                                                                        (("2"
                                                                                                                                          (typepred
                                                                                                                                           "D")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "hp"
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "dd?"
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (split
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (skeep)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "closed_interval")
                                                                                                                                                        (("1"
                                                                                                                                                          (propax)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (replace
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "hp")
                                                                                                                                                    (("2"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (reveal
                                                                                                                                 -)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -15
                                                                                                                                   "0")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "nth"
                                                                                                                                     -15)
                                                                                                                                    (("2"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "i")
                                                                                (("2"
                                                                                  (expand
                                                                                   "zs"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "s")
                                                          (("2"
                                                            (typepred
                                                             "D")
                                                            (("2"
                                                              (typepred
                                                               "r")
                                                              (("2"
                                                                (hide
                                                                 -5
                                                                 -6
                                                                 -7)
                                                                (("2"
                                                                  (hide
                                                                   2
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     "dd?"
                                                                     -2)
                                                                    (("2"
                                                                      (split
                                                                       -2)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "r")
                                                  (("2"
                                                    (typepred "D")
                                                    (("2"
                                                      (expand "dd?" -1)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (hide
                                                           -3
                                                           -4
                                                           -5)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "closed_interval"
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "hp"
                                                           -1)
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (inst -3 "0")
                                                  (("3"
                                                    (expand "nth" -3)
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (Formulas type-eq-decl nil bool_expr nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (HP type-decl nil HP_adt nil)
    (ALLRUNS const-decl "bool" bool_expr nil)
    (dLVar type-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     nil)
    (nth def-decl "T" list_props nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (assign_env_alt formula-decl nil substitution nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (not_in_map const-decl "bool" hp_def nil)
    (i skolem-const-decl "(not_in_map(ode))" dl_solution nil)
    (map_inj_zs formula-decl nil dl_solution nil)
    (k skolem-const-decl "below(length(ode))" dl_solution nil)
    (init_zip_sol def-decl "{a: MapExprInj |
   length(a) = length(ode) AND
    FORALL (i: below(length(a))): nth(a, i) = (nth(ode, i)`1, y(i)(t))}"
     dl_solution nil)
    (y skolem-const-decl
     "[below(length(ode)) -> [real -> [Environment -> real]]]"
     dl_solution nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (assign_env def-decl "Environment" substitution nil)
    (i skolem-const-decl "below(length(ode))" dl_solution nil)
    (t_1 skolem-const-decl "{t_1: (hp(0)) | t_1 <= t}" dl_solution nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (ode skolem-const-decl "ODEs" dl_solution nil)
    (R skolem-const-decl "BoolExpr" dl_solution nil)
    (env skolem-const-decl "(R)" dl_solution nil)
    (ys skolem-const-decl "[below(length(ode)) -> [real -> real]]"
     dl_solution nil)
    (t skolem-const-decl "nnreal" dl_solution nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dd? const-decl "bool" hp_expr nil)
    (hp const-decl "bool" interval_def ODEs)
    (solves_u? const-decl "bool" dl_solution nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (Assigns type-eq-decl nil hp_def nil)
    (assign_sub const-decl "Environment" substitution nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (zs const-decl "MapExprInj" dl_solution nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (dlSequent const-decl "bool" dynamic_logic nil)
    (dlSequent_equiv formula-decl nil dynamic_logic nil)
    (env skolem-const-decl "Environment" dl_solution nil)
    (x!1 skolem-const-decl "nat" dl_solution nil)
    (x!1 skolem-const-decl "nat" dl_solution nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (TRUE const-decl "bool" booleans nil)
    (i skolem-const-decl "below(length(ode))" dl_solution nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (x!1 skolem-const-decl "nat" dl_solution nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (s skolem-const-decl "{s: nnreal | s <= r}" dl_solution nil)
    (i skolem-const-decl "below(length(ode))" dl_solution nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (solution_odes_subset formula-decl nil ODEs_equiv nil)
    (x!1 skolem-const-decl "nat" dl_solution nil)
    (r skolem-const-decl "(D)" dl_solution nil)
    (D skolem-const-decl "(dd?)" dl_solution nil)
    (length_singleton formula-decl nil more_list_props structures)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dl_solution_domain_iff 0
  (dl_solution_domain_iff-1 nil 3871048720
   ("" (lemma "solution_domain_ax_ode")
    (("" (skeep)
      (("" (inst?)
        (("" (beta)
          (("" (inst -1 "y")
            (("" (assert)
              (("" (flatten)
                (("" (split 1)
                  (("1" (flatten)
                    (("1" (expand "UPTO")
                      (("1" (assert)
                        (("1" (lemma "dlSequent_equiv")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (hide -2)
                                (("1"
                                  (lemma "dlSequent_equiv")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (expand "dlSequent" 1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 1 "0")
                                              (("1"
                                                (expand "nth" 1 1)
                                                (("1"
                                                  (expand "DLFORALL" 1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (expand
                                                       "DLIMPLIES"
                                                       1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "DLAND"
                                                           -2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "dl_assignb")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "SUB"
                                                                         1)
                                                                        (("1"
                                                                          (inst?
                                                                           -5)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               1)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (inst
                                                                                   -3
                                                                                   "s")
                                                                                  (("1"
                                                                                    (split
                                                                                     -3)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "dl_assignb")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "SUB"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "s")
                                                                                      (("2"
                                                                                        (hide
                                                                                         -3)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -4)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -3)
                                                                                            (("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (typepred
                                                                                       "s")
                                                                                      (("3"
                                                                                        (hide
                                                                                         -3
                                                                                         -5
                                                                                         2)
                                                                                        (("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "x_1")
                                                                            (("2"
                                                                              (hide
                                                                               -1
                                                                               -2
                                                                               -4
                                                                               -5
                                                                               2)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (inst
                                                                             -1
                                                                             "0")
                                                                            (("3"
                                                                              (expand
                                                                               "nth"
                                                                               -1)
                                                                              (("3"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -3)
                      (("1" (propax) nil nil)
                       ("2" (hide -2)
                        (("2" (hide 2)
                          (("2" (lemma "dlSequent_equiv")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (hide -2)
                                  (("2"
                                    (expand "dlSequent" -1)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (typepred "env")
                                        (("2"
                                          (inst -2 "env")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -2)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (typepred "j")
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -1)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "DLFORALL"
                                                             -2)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "t")
                                                              (("1"
                                                                (expand
                                                                 "UPTO"
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   "DLIMPLIES"
                                                                   -2)
                                                                  (("1"
                                                                    (split
                                                                     -2)
                                                                    (("1"
                                                                      (lemma
                                                                       "dl_assignb")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "SUB"
                                                                                 -1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "DLAND"
                                                                         1)
                                                                        (("2"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (typepred
                                                                             "t")
                                                                            (("1"
                                                                              (hide
                                                                               -4)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "DLFORALL"
                                                                             1)
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (inst
                                                                                 -5
                                                                                 "x")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "dl_assignb")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "SUB"
                                                                                         1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -3
                                                                                     -4)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (typepred "i")
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -1)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (UPTO const-decl "BoolExpr" bool_expr nil)
    (dlSequent_equiv formula-decl nil dynamic_logic nil)
    (dlSequent const-decl "bool" dynamic_logic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (dl_assignb formula-decl nil dynamic_logic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (R skolem-const-decl "BoolExpr" dl_solution nil)
    (env skolem-const-decl "Environment" dl_solution nil)
    (x_1 skolem-const-decl "real" dl_solution nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (SUB const-decl "bool" substitution nil)
    (nth def-decl "T" list_props nil)
    (zs const-decl "MapExprInj" dl_solution nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (Assigns type-eq-decl nil hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (>= const-decl "BoolExpr" bool_expr nil)
    (DLAND const-decl "bool" bool_expr nil)
    (DLIMPLIES const-decl "bool" bool_expr nil)
    (DLFORALL const-decl "bool" bool_expr nil)
    (QBoolExpr type-eq-decl nil hp_def nil)
    (Formulas type-eq-decl nil bool_expr nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (HP type-decl nil HP_adt nil)
    (ALLRUNS const-decl "bool" bool_expr nil)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     nil)
    (QHP type-eq-decl nil bool_expr nil)
    (t skolem-const-decl "nnreal" dl_solution nil)
    (x skolem-const-decl "real" dl_solution nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (hp const-decl "bool" interval_def ODEs)
    (solves_u? const-decl "bool" dl_solution nil)
    (dd? const-decl "bool" hp_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (solution_domain_ax_ode formula-decl nil dl_solution nil))
   shostak))
 (dl_solution_domain 0
  (dl_solution_domain-1 nil 3873233404
   ("" (lemma "dl_solution_domain_iff")
    (("" (skeep)
      (("" (inst?)
        (("" (inst -1 "y")
          (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (dd? const-decl "bool" hp_expr nil)
    (solves_u? const-decl "bool" dl_solution nil)
    (hp const-decl "bool" interval_def ODEs)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dl_solution_domain_iff formula-decl nil dl_solution nil))
   shostak))
 (solution_domain_ax_TCC1 0
  (solution_domain_ax_TCC1-1 nil 3870816910 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)) nil
   (solution_domain_ax subtype "dl_solution.y"
    "[naturalnumbers.below(list_props[MapExpr].length((: (dl_solution.v, dl_solution.re1) :))) -> [real -> [Environment -> real]]]")))
 (solution_domain_ax_TCC2 0
  (solution_domain_ax_TCC2-1 nil 3870816910
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (/= const-decl "boolean" notequal nil)
    (length def-decl "nat" list_props nil))
   nil
   (solution_domain_ax subtype "(: (dl_solution.v, dl_solution.re1) :)"
    "ODEs")))
 (solution_domain_ax 0
  (solution_domain_ax-1 nil 3870816944
   ("" (lemma "solution_domain_ax_ode")
    (("" (skeep)
      (("" (inst?)
        (("" (assert)
          (("" (inst -1 "y")
            (("" (assert)
              (("" (flatten)
                (("" (split 1)
                  (("1" (flatten)
                    (("1" (skeep)
                      (("1" (assert)
                        (("1" (inst -3 "env" "t")
                          (("1" (split -3)
                            (("1" (assert)
                              (("1"
                                (expand "assign_sub" -1)
                                (("1"
                                  (hide -2 -3 -4)
                                  (("1"
                                    (hide -2)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (inst -2 "s")
                                (("2"
                                  (hide -3 -4)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (hide 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (hide 1)
                        (("2" (skeep)
                          (("2" (hide -2)
                            (("2" (inst -1 "env" "t")
                              (("2"
                                (assert)
                                (("2"
                                  (split -1)
                                  (("1"
                                    (hide -2 -3)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst -1 "s")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nth def-decl "T" list_props nil)
    (init_zip_sol def-decl "{a: MapExprInj |
   length(a) = length(ode) AND
    FORALL (i: below(length(a))): nth(a, i) = (nth(ode, i)`1, y(i)(t))}"
     dl_solution nil)
    (zs const-decl "MapExprInj" dl_solution nil)
    (assign_env def-decl "Environment" substitution nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (assign_sub const-decl "Environment" substitution nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (solution_domain_ax_ode formula-decl nil dl_solution nil))
   shostak))
 (solution_domain_ax_lin 0
  (solution_domain_ax_lin-1 nil 3870817321
   ("" (skeep*)
    (("" (lemma "solution_domain_ax")
      (("" (inst?)
        (("" (assert)
          ((""
            (inst -1
             "LAMBDA(kk: below(1)): LAMBDA(r:real): LAMBDA(env:Environment): env(dlvar_index(v)) + m * r")
            (("" (assert)
              (("" (split -1)
                (("1" (expand "val") (("1" (propax) nil nil)) nil)
                 ("2" (hide 2)
                  (("2" (expand "solves_u?" 1)
                    (("2" (skeep)
                      (("2" (expand "solution_odes_u?" 1)
                        (("2" (split 1)
                          (("1" (expand "solution_odes?" 1)
                            (("1" (split 1)
                              (("1"
                                (expand "derivable_odes?" 1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (typepred "k")
                                    (("1"
                                      (expand "restrict" 1)
                                      (("1" (derivable 1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "env_at_t?" 1)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (typepred "k")
                                    (("2"
                                      (expand "length" -1)
                                      (("2"
                                        (expand "length" -1)
                                        (("2"
                                          (expand "nth" 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (skeep)
                                (("3"
                                  (expand "sol_at_t?" 1)
                                  (("3"
                                    (skeep)
                                    (("3"
                                      (typepred "k")
                                      (("3"
                                        (expand "length" -1)
                                        (("3"
                                          (expand "length" -1)
                                          (("3"
                                            (expand "nth" 1)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand "restrict")
                                                (("3"
                                                  (hide 1)
                                                  (("3"
                                                    (deriv
                                                     "LAMBDA (s: (hp(0))): envi(dlvar_index(v)) + m * s")
                                                    (("1"
                                                      (reveal +)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (decompose-equality
                                                           -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "t")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "cnst"
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "cnst"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (expand
                                                             "cnst"
                                                             1)
                                                            (("3"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma "hp_dd")
                                                      (("2"
                                                        (inst -1 "0")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (skeep)
                              (("2"
                                (expand "solution_odes?" -1)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (lemma
                                     "derivs_funs_equal[(dl_solution.S)]")
                                    (("1"
                                      (case "EXISTS(a,b:(S)): a<b")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst
                                             -2
                                             "a"
                                             "b"
                                             "ff(i_1)"
                                             "LAMBDA(t:(S)): envi(dlvar_index(v)) + m * t")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (decompose-equality
                                                   -1)
                                                  (("1"
                                                    (inst -1 "t")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "restrict"
                                                         -1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand "restrict")
                                                    (("2"
                                                      (expand
                                                       "sol_at_t?"
                                                       -4)
                                                      (("2"
                                                        (inst
                                                         -4
                                                         "x"
                                                         "env_at_t( (: (v, cnst(m)) :), ff, envi)(x)")
                                                        (("2"
                                                          (inst -4 "0")
                                                          (("2"
                                                            (typepred
                                                             "i_1")
                                                            (("2"
                                                              (case
                                                               "NOT i_1=0")
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   -6
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "restrict"
                                                                     -6)
                                                                    (("2"
                                                                      (replace
                                                                       -6
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "cnst"
                                                                         1)
                                                                        (("2"
                                                                          (hide
                                                                           -)
                                                                          (("2"
                                                                            (hide
                                                                             1)
                                                                            (("2"
                                                                              (deriv
                                                                               "LAMBDA (t: (dl_solution.S)): envi(dlvar_index(v)) + m * t")
                                                                              (("1"
                                                                                (reveal
                                                                                 1)
                                                                                (("1"
                                                                                  (decompose-equality
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "dd_deriv_domain")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (inst 1 "0")
                                                  (("1"
                                                    (expand
                                                     "restrict"
                                                     1)
                                                    (("1"
                                                      (expand
                                                       "env_at_t?"
                                                       -3)
                                                      (("1"
                                                        (inst -3 "i_1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "i_1=0")
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               -4)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "i_1")
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "S")
                                                    (("2"
                                                      (hide
                                                       -2
                                                       -3
                                                       -4
                                                       -5
                                                       -6)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -)
                                              (("2"
                                                (derivable)
                                                nil
                                                nil))
                                              nil)
                                             ("3"
                                              (expand
                                               "derivable_odes?"
                                               -2)
                                              (("3"
                                                (inst -2 "0")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (expand "restrict")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (case "i_1=0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "i_1")
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "S")
                                        (("2"
                                          (hide -2 -3 -4 -5 -6)
                                          (("2"
                                            (expand "dd?" -1)
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 1 "0" "b")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide 2)
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst 1 "0" "1")
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -)
                                      (("2"
                                        (lemma "dd_noe")
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (assert)
                                      (("3"
                                        (hide -)
                                        (("3"
                                          (lemma "dd_con")
                                          (("3" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((solution_domain_ax formula-decl nil dl_solution nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (restrict const-decl "R" restrict nil)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (derivable_const_lam formula-decl nil derivatives_lam analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (hp const-decl "bool" interval_def ODEs)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (nth def-decl "T" list_props nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (hp_dd formula-decl nil interval_def ODEs)
    (d__73 skolem-const-decl "[(hp(0)) -> real]" dl_solution nil)
    (deriv_id_lam formula-decl nil derivatives_lam analysis)
    (deriv_const_lam formula-decl nil derivatives_lam analysis)
    (deriv_add_lam formula-decl nil derivatives_lam analysis)
    (deriv_scal1_lam formula-decl nil derivatives_lam analysis)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_domain_not_one_element formula-decl nil deriv_domain_def
     analysis)
    (solution_odes? const-decl "bool" hp_expr nil)
    (dd_con formula-decl nil hp_expr nil)
    (dd_noe formula-decl nil hp_expr nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (d__74 skolem-const-decl "[(dl_solution.S) -> real]" dl_solution
     nil)
    (dd_deriv_domain formula-decl nil hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (envi skolem-const-decl "(R)" dl_solution nil)
    (R skolem-const-decl "BoolExpr" dl_solution nil)
    (i_1 skolem-const-decl "below(length((: (v, cnst(m)) :)))"
     dl_solution nil)
    (ff skolem-const-decl
     "[below(length((: (v, cnst(m)) :))) -> [real -> real]]"
     dl_solution nil)
    (m skolem-const-decl "real" dl_solution nil)
    (v skolem-const-decl "dLVar" dl_solution nil)
    (S skolem-const-decl
     "{SS: (dd?) | FORALL (x: real): SS(x) IMPLIES hp(0)(x)}"
     dl_solution nil)
    (b skolem-const-decl "posreal" dl_solution nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (derivs_funs_equal formula-decl nil derivative_props analysis)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (solves_u? const-decl "bool" dl_solution nil)
    (val const-decl "real" hp_def nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dLVar type-decl nil hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (solution_domain_ax_lin_val 0
  (solution_domain_ax_lin_val-1 nil 3870844959
   ("" (lemma "solution_domain_ax_ode")
    (("" (skeep)
      (("" (inst?)
        (("" (assert)
          (("" (expand "val" 1 2)
            (("" (expand "val" 1 2)
              (("" (expand "val" 1 2)
                (("" (expand "val" 1 2)
                  ((""
                    (inst -1
                     "LAMBDA(kk:below((length((: (v, val(w)) :))))): LAMBDA(s:real): LAMBDA (env:Environment): env(dlvar_index(v)) + val(w)(env)*s")
                    (("" (assert)
                      (("" (typepred "w")
                        (("" (expand "same_var")
                          (("" (split -1)
                            (("1" (flatten)
                              (("1"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst -3 "env" "t")
                                        (("1"
                                          (hide -4)
                                          (("1"
                                            (split -3)
                                            (("1"
                                              (hide -2 -3)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (inst -2 "s_1")
                                                (("2"
                                                  (hide -1 2 3)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide 1)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (hide -2)
                                          (("2"
                                            (inst -1 "env_1" "t")
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (hide -2)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst -1 "s")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2"
                                (expand "solves_u?" 1)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (expand "solution_odes_u?" 1)
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (expand "solution_odes?" 1)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (expand
                                             "derivable_odes?"
                                             1)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (expand "restrict" 1)
                                                (("1"
                                                  (derivable)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "env_at_t?" 1)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (typepred "k")
                                                (("2"
                                                  (expand "length" -1)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("2"
                                                      (expand "nth" 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skeep)
                                            (("3"
                                              (expand "sol_at_t?" 1)
                                              (("3"
                                                (skeep)
                                                (("3"
                                                  (expand "restrict" 1)
                                                  (("3"
                                                    (typepred "k")
                                                    (("3"
                                                      (expand
                                                       "length"
                                                       -1)
                                                      (("3"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("3"
                                                          (expand
                                                           "nth"
                                                           1)
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (hide +)
                                                              (("3"
                                                                (deriv
                                                                 "LAMBDA (s_1: (hp(0))): envi(dlvar_index(v)) + val(w)(envi) * s_1")
                                                                (("1"
                                                                  (reveal
                                                                   1)
                                                                  (("1"
                                                                    (decompose-equality
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "t")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (typepred
                                                                             "envi")
                                                                            (("1"
                                                                              (typepred
                                                                               "env")
                                                                              (("1"
                                                                                (expand
                                                                                 "env_at_t?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "dlvar_index(w)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "val"
                                                                                         1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "not_in_map"
                                                                                       1)
                                                                                      (("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "i")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "length"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "val"
                                                                       1)
                                                                      (("2"
                                                                        (typepred
                                                                         "env")
                                                                        (("2"
                                                                          (expand
                                                                           "env_at_t?"
                                                                           -1)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "dlvar_index(w)")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "not_in_map"
                                                                                   1)
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "i")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "length"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "length"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nth"
                                                                                               -2)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (expand
                                                                       "val"
                                                                       1)
                                                                      (("3"
                                                                        (typepred
                                                                         "env")
                                                                        (("3"
                                                                          (expand
                                                                           "env_at_t?"
                                                                           -1)
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (inst
                                                                               -1
                                                                               "dlvar_index(w)")
                                                                              (("3"
                                                                                (expand
                                                                                 "not_in_map"
                                                                                 1)
                                                                                (("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "i")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "length"
                                                                                       -1)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "length"
                                                                                         -1)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "nth"
                                                                                           -2)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "hp_dd")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "0")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (lemma
                                             "derivs_funs_equal[(dl_solution.S)]")
                                            (("1"
                                              (case
                                               "EXISTS(a,b:(S)): a<b")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "a"
                                                   "b"
                                                   "ff(i_1)"
                                                   "LAMBDA(t:(S)): envi(dlvar_index(v)) + val(w)(envi)*t")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (expand
                                                         "restrict"
                                                         -1)
                                                        (("1"
                                                          (decompose-equality
                                                           -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "t")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (expand
                                                           "solution_odes?"
                                                           -2)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "x"
                                                               "env_at_t( (: (v ,val(w)) :), ff, envi)(x)")
                                                              (("2"
                                                                (expand
                                                                 "sol_at_t?"
                                                                 -4)
                                                                (("2"
                                                                  (inst
                                                                   -4
                                                                   "i_1")
                                                                  (("2"
                                                                    (replace
                                                                     -4
                                                                     1)
                                                                    (("2"
                                                                      (typepred
                                                                       "i_1")
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "nth"
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "env_at_t((: (v, val(w)) :), ff, envi)(x)")
                                                                                (("2"
                                                                                  (expand
                                                                                   "env_at_t?"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "val"
                                                                                       1
                                                                                       1)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "dlvar_index(w)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           1
                                                                                           rl)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -)
                                                                                            (("1"
                                                                                              (hide
                                                                                               +)
                                                                                              (("1"
                                                                                                (deriv
                                                                                                 "LAMBDA (t: (dl_solution.S)): envi(dlvar_index(v)) + val(w)(envi) * t")
                                                                                                (("1"
                                                                                                  (reveal
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "x")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "val"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "val"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "val"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (expand
                                                                                                       "val"
                                                                                                       1)
                                                                                                      (("3"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   "dd_deriv_domain")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           -)
                                                                                          (("2"
                                                                                            (hide
                                                                                             2
                                                                                             3)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "not_in_map"
                                                                                               1)
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "i")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (inst 1 "0")
                                                        (("1"
                                                          (expand
                                                           "solution_odes?"
                                                           -2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "env_at_t?"
                                                               -3)
                                                              (("1"
                                                                (inst
                                                                 -3
                                                                 "i_1")
                                                                (("1"
                                                                  (expand
                                                                   "restrict"
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (typepred
                                                                       "i_1")
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             -4)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           -1
                                                           -2
                                                           2
                                                           3)
                                                          (("2"
                                                            (typepred
                                                             "S")
                                                            (("2"
                                                              (hide -2)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (derivable)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (derivable)
                                                    (("3"
                                                      (expand
                                                       "solution_odes?")
                                                      (("3"
                                                        (expand
                                                         "derivable_odes?")
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (inst
                                                             -2
                                                             "i_1")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -)
                                                (("2"
                                                  (typepred "S")
                                                  (("2"
                                                    (hide 2 3)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (expand
                                                         "dd?"
                                                         -1)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "0"
                                                               "b")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             1
                                                             "0"
                                                             "1")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "dd_noe")
                                              (("2" (inst?) nil nil))
                                              nil)
                                             ("3"
                                              (lemma "dd_con")
                                              (("3" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (hp const-decl "bool" interval_def ODEs)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (derivable_const_lam formula-decl nil derivatives_lam analysis)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (restrict const-decl "R" restrict nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (hp_dd formula-decl nil interval_def ODEs)
    (w skolem-const-decl "(LAMBDA (v2: dLVar): NOT same_var(v, v2))"
     dl_solution nil)
    (v skolem-const-decl "dLVar" dl_solution nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (d__75 skolem-const-decl "[(hp(0)) -> real]" dl_solution nil)
    (deriv_id_lam formula-decl nil derivatives_lam analysis)
    (deriv_const_lam formula-decl nil derivatives_lam analysis)
    (deriv_add_lam formula-decl nil derivatives_lam analysis)
    (deriv_scal1_lam formula-decl nil derivatives_lam analysis)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_domain_not_one_element formula-decl nil deriv_domain_def
     analysis)
    (solution_odes? const-decl "bool" hp_expr nil)
    (dd_con formula-decl nil hp_expr nil)
    (dd_noe formula-decl nil hp_expr nil)
    (S skolem-const-decl
     "{SS: (dd?) | FORALL (x: real): SS(x) IMPLIES hp(0)(x)}"
     dl_solution nil)
    (ff skolem-const-decl
     "[below(length((: (v, val(w)) :))) -> [real -> real]]" dl_solution
     nil)
    (i_1 skolem-const-decl "below(length((: (v, val(w)) :)))"
     dl_solution nil)
    (R skolem-const-decl "BoolExpr" dl_solution nil)
    (envi skolem-const-decl "(R)" dl_solution nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (length_singleton formula-decl nil more_list_props structures)
    (dd_deriv_domain formula-decl nil hp_expr nil)
    (d__76 skolem-const-decl "[(dl_solution.S) -> real]" dl_solution
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (b skolem-const-decl "posreal" dl_solution nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (derivs_funs_equal formula-decl nil derivative_props analysis)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (solves_u? const-decl "bool" dl_solution nil)
    (<= const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (assign_sub const-decl "Environment" substitution nil)
    (assign_env def-decl "Environment" substitution nil)
    (zs const-decl "MapExprInj" dl_solution nil)
    (init_zip_sol def-decl "{a: MapExprInj |
   length(a) = length(ode) AND
    FORALL (i: below(length(a))): nth(a, i) = (nth(ode, i)`1, y(i)(t))}"
     dl_solution nil)
    (nth def-decl "T" list_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (same_var const-decl "bool" hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (val const-decl "real" hp_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (solution_domain_ax_ode formula-decl nil dl_solution nil))
   shostak))
 (solution_domain_ax_quad_TCC1 0
  (solution_domain_ax_quad_TCC1-1 nil 3870818938
   ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil))
   nil
   (solution_domain_ax_quad subtype "2"
    "{i: integers.int | booleans.OR(dl_solution.s /= 0, reals.>=(i, 0))}")))
 (solution_domain_ax_quad_TCC2 0
  (solution_domain_ax_quad_TCC2-1 nil 3870818938
   ("" (subtype-tcc) nil nil)
   ((nnreal_expt application-judgement "nnreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (val const-decl "real" hp_def nil))
   nil
   (solution_domain_ax_quad subtype "2"
    "{i: integers.int | booleans.OR(dl_solution.t /= 0, reals.>=(i, 0))}")))
 (solution_domain_ax_quad 0
  (solution_domain_ax_quad-1 nil 3870818999
   ("" (lemma "solution_domain_ax_ode")
    (("" (skeep)
      (("" (inst?)
        (("" (assert)
          ((""
            (inst -1
             "LAMBDA(k: below(length((: (v, cnst(m)), (w, val(v)) :)))): LAMBDA(r:real): LAMBDA(env:Environment): IF k=0 THEN env(dlvar_index(v)) + m *r ELSE env(dlvar_index(w)) + env(dlvar_index(v))*r + m * r^2/2 ENDIF")
            (("" (assert)
              (("" (split -1)
                (("1" (flatten)
                  (("1" (split 1)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (hide -3)
                          (("1" (skeep)
                            (("1" (inst -3 "env" "t")
                              (("1"
                                (assert)
                                (("1"
                                  (split -3)
                                  (("1"
                                    (hide -2 -3)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst -2 "s")
                                        (("2"
                                          (hide -1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (hide 1)
                          (("2" (hide -2)
                            (("2" (skeep)
                              (("2"
                                (inst -1 "env_1" "t")
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (hide -2)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst -1 "s")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "solves_u?" 1)
                    (("2" (skeep)
                      (("2" (expand "solution_odes_u?" 1)
                        (("2" (split 1)
                          (("1" (expand "solution_odes?" 1)
                            (("1" (split 1)
                              (("1"
                                (expand "derivable_odes?" 1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand "restrict" 1)
                                    (("1"
                                      (case "k=0")
                                      (("1"
                                        (assert)
                                        (("1" (derivable) nil nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2" (derivable) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "env_at_t?" 1)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (case "k=0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nth" 1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (expand "nth" 2 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case "k-1=0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "nth" 2)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred "k")
                                                (("2"
                                                  (expand "length" -1)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (skeep)
                                (("3"
                                  (expand "sol_at_t?" 1)
                                  (("3"
                                    (skeep)
                                    (("3"
                                      (case "k=0")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "nth" 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "restrict" 1)
                                              (("1"
                                                (hide 1)
                                                (("1"
                                                  (deriv
                                                   "LAMBDA (s: (hp(0))): envi(dlvar_index(v)) + m * s")
                                                  (("1"
                                                    (reveal 1)
                                                    (("1"
                                                      (decompose-equality
                                                       -1)
                                                      (("1"
                                                        (inst -1 "t")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "cnst"
                                                               1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "cnst"
                                                         1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         "cnst"
                                                         1)
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma "hp_dd")
                                                    (("2"
                                                      (inst -1 "0")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (expand "restrict" 2)
                                          (("2"
                                            (case "k=1")
                                            (("1"
                                              (expand "nth" 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "nth" 2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 2)
                                                      (("1"
                                                        (deriv
                                                         "(LAMBDA (s: (hp(0))): envi(dlvar_index(w)) + m * s ^ 2 / 2 + envi(dlvar_index(v)) * s)")
                                                        (("1"
                                                          (reveal 1)
                                                          (("1"
                                                            (decompose-equality
                                                             -1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "t")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "val"
                                                                   1)
                                                                  (("1"
                                                                    (typepred
                                                                     "env")
                                                                    (("1"
                                                                      (expand
                                                                       "env_at_t?"
                                                                       -1)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (inst
                                                                           -2
                                                                           "0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               -2)
                                                                              (("1"
                                                                                (replace
                                                                                 -2
                                                                                 1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "hp_noe")
                                                              (("2"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide
                                                               -2
                                                               -3
                                                               -4
                                                               2
                                                               3)
                                                              (("3"
                                                                (lemma
                                                                 "hp_dd")
                                                                (("3"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "hp_dd")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "0")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred "k")
                                                (("2"
                                                  (expand "length" -1)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (skeep)
                              (("2"
                                (typepred "i_1")
                                (("2"
                                  (expand "length" -1)
                                  (("2"
                                    (expand "length" -1)
                                    (("2"
                                      (case
                                       "(LAMBDA(s:(S)): ff(0)(s)) = (LAMBDA(s:(S)): envi(dlvar_index(v)) + m * s)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case "i_1=0")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (decompose-equality -2)
                                              (("1"
                                                (inst -1 "t")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (lemma
                                               "derivs_funs_equal[(dl_solution.S)]")
                                              (("1"
                                                (case
                                                 "EXISTS(a,b:(S)): a<b")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst
                                                     -2
                                                     "a"
                                                     "b"
                                                     "ff(i_1)"
                                                     "LAMBDA(s:(S)): envi(dlvar_index(w)) + m * s ^ 2 / 2 + envi(dlvar_index(v)) * s")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (expand
                                                           "restrict"
                                                           -1)
                                                          (("1"
                                                            (decompose-equality
                                                             -1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "t")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (expand
                                                             "solution_odes?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -6
                                                                 "x"
                                                                 "env_at_t((: (v, cnst(m)), (w, val(v)) :), ff, envi)(x)")
                                                                (("2"
                                                                  (expand
                                                                   "sol_at_t?"
                                                                   -6)
                                                                  (("2"
                                                                    (inst
                                                                     -6
                                                                     "1")
                                                                    (("2"
                                                                      (case
                                                                       "i_1=1")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -7
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "val"
                                                                                 1)
                                                                                (("1"
                                                                                  (typepred
                                                                                   " env_at_t((: (v, cnst(m)),
                                                          (w, LAMBDA (env: Environment) -> real: env(dlvar_index(v))) :),
                                                       ff, envi)
                                                      (x)")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "env_at_t?"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         "0")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           -2)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2
                                                                                             1
                                                                                             rl)
                                                                                            (("1"
                                                                                              (decompose-equality
                                                                                               -6)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       +)
                                                                                                      (("1"
                                                                                                        (deriv
                                                                                                         "LAMBDA (s: (dl_solution.S)): envi(dlvar_index(w)) + m * s ^ 2 / 2 + envi(dlvar_index(v)) * s")
                                                                                                        (("1"
                                                                                                          (reveal
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (decompose-equality
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "x")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (lemma
                                                                                                           "dd_deriv_domain")
                                                                                                          (("2"
                                                                                                            (inst?)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "length"
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "restrict"
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -3)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (inst 1 "0")
                                                          (("1"
                                                            (expand
                                                             "restrict"
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "solution_odes?")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "env_at_t?")
                                                                  (("1"
                                                                    (inst
                                                                     -5
                                                                     "i_1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -5)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -3)
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             -5)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide -)
                                                            (("2"
                                                              (hide
                                                               2
                                                               3)
                                                              (("2"
                                                                (typepred
                                                                 "S")
                                                                (("2"
                                                                  (hide
                                                                   -2)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (derivable 1)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "solution_odes?")
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (expand
                                                           "derivable_odes?")
                                                          (("3"
                                                            (inst
                                                             -4
                                                             "i_1")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -)
                                                  (("2"
                                                    (hide 2 3)
                                                    (("2"
                                                      (typepred "S")
                                                      (("2"
                                                        (expand
                                                         "dd?"
                                                         -1)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "0"
                                                               "b")
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "hp"
                                                             -1)
                                                            (("2"
                                                              (inst
                                                               1
                                                               "0"
                                                               "1")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "dd_noe")
                                                (("2" (inst?) nil nil))
                                                nil)
                                               ("3"
                                                (assert)
                                                (("3"
                                                  (lemma "dd_con")
                                                  (("3"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (lemma
                                             "derivs_funs_equal[(dl_solution.S)]")
                                            (("1"
                                              (case
                                               "EXISTS(a,b:(S)): a<b")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "a"
                                                   "b"
                                                   "ff(0)"
                                                   "(LAMBDA (s: (S)): envi(dlvar_index(v)) + m * s)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (expand
                                                         "restrict"
                                                         -1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand
                                                             "solution_odes?"
                                                             -3)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -5
                                                                 "x"
                                                                 "env_at_t((: (v, cnst(m)), (w, val(v)) :), ff, envi)(x)")
                                                                (("2"
                                                                  (expand
                                                                   "sol_at_t?"
                                                                   -5)
                                                                  (("2"
                                                                    (inst
                                                                     -5
                                                                     "0")
                                                                    (("2"
                                                                      (replace
                                                                       -5)
                                                                      (("2"
                                                                        (expand
                                                                         "nth"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "cnst"
                                                                           1)
                                                                          (("2"
                                                                            (hide
                                                                             -)
                                                                            (("2"
                                                                              (hide
                                                                               1)
                                                                              (("2"
                                                                                (deriv
                                                                                 "(LAMBDA (s: (dl_solution.S)): envi(dlvar_index(v)) + m * s)")
                                                                                (("1"
                                                                                  (reveal
                                                                                   1)
                                                                                  (("1"
                                                                                    (decompose-equality
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "x")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "dd_deriv_domain")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (inst 1 "0")
                                                        (("1"
                                                          (expand
                                                           "restrict")
                                                          (("1"
                                                            (expand
                                                             "solution_odes?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "env_at_t?")
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "0")
                                                                  (("1"
                                                                    (replace
                                                                     -4)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (typepred
                                                               "S")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (derivable)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (expand
                                                     "solution_odes?")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (expand
                                                         "derivable_odes?"
                                                         -3)
                                                        (("3"
                                                          (inst -3 "0")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (typepred "S")
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (expand
                                                         "dd?"
                                                         -1)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "0"
                                                               "b")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             1
                                                             "0"
                                                             "1")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "dd_noe")
                                              (("2" (inst?) nil nil))
                                              nil)
                                             ("3"
                                              (lemma "dd_con")
                                              (("3" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (hp const-decl "bool" interval_def ODEs)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (derivable_const_lam formula-decl nil derivatives_lam analysis)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam analysis)
    (restrict const-decl "R" restrict nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (zero_hat formula-decl nil exponent_props reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (deriv_domain_not_one_element formula-decl nil deriv_domain_def
     analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (deriv_scal1_lam formula-decl nil derivatives_lam analysis)
    (deriv_add_lam formula-decl nil derivatives_lam analysis)
    (deriv_const_lam formula-decl nil derivatives_lam analysis)
    (deriv_id_lam formula-decl nil derivatives_lam analysis)
    (d__77 skolem-const-decl "[(hp(0)) -> real]" dl_solution nil)
    (hp_dd formula-decl nil interval_def ODEs)
    (hp_noe formula-decl nil interval_def ODEs)
    (d__78 skolem-const-decl "[(hp(0)) -> real]" dl_solution nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (deriv_pow_lam formula-decl nil derivatives_lam analysis)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (deriv_scald2_lam formula-decl nil derivatives_lam analysis)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (dd? const-decl "bool" hp_expr nil)
    (derivs_funs_equal formula-decl nil derivative_props analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (b skolem-const-decl "posreal" dl_solution nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (length_singleton formula-decl nil more_list_props structures)
    (dd_deriv_domain formula-decl nil hp_expr nil)
    (d__79 skolem-const-decl "[(dl_solution.S) -> real]" dl_solution
     nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (envi skolem-const-decl "(R)" dl_solution nil)
    (R skolem-const-decl "BoolExpr" dl_solution nil)
    (i_1 skolem-const-decl
     "below(length((: (v, cnst(m)), (w, val(v)) :)))" dl_solution nil)
    (ff skolem-const-decl
     "[below(length((: (v, cnst(m)), (w, val(v)) :))) -> [real -> real]]"
     dl_solution nil)
    (w skolem-const-decl "(LAMBDA (v2: dLVar): NOT same_var(v, v2))"
     dl_solution nil)
    (m skolem-const-decl "real" dl_solution nil)
    (v skolem-const-decl "dLVar" dl_solution nil)
    (S skolem-const-decl
     "{SS: (dd?) | FORALL (x: real): SS(x) IMPLIES hp(0)(x)}"
     dl_solution nil)
    (dd_noe formula-decl nil hp_expr nil)
    (dd_con formula-decl nil hp_expr nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (d__80 skolem-const-decl "[(dl_solution.S) -> real]" dl_solution
     nil)
    (b skolem-const-decl "posreal" dl_solution nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (solves_u? const-decl "bool" dl_solution nil)
    (nnreal type-eq-decl nil real_types nil)
    (expt def-decl "real" exponentiation nil)
    (nth def-decl "T" list_props nil)
    (init_zip_sol def-decl "{a: MapExprInj |
   length(a) = length(ode) AND
    FORALL (i: below(length(a))): nth(a, i) = (nth(ode, i)`1, y(i)(t))}"
     dl_solution nil)
    (zs const-decl "MapExprInj" dl_solution nil)
    (assign_env def-decl "Environment" substitution nil)
    (assign_sub const-decl "Environment" substitution nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (<= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (val const-decl "real" hp_def nil)
    (same_var const-decl "bool" hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cnst const-decl "real" hp_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (solution_domain_ax_ode formula-decl nil dl_solution nil))
   shostak))
 (get_index_TCC1 0
  (get_index_TCC1-1 nil 3870844901
   ("" (skeep)
    (("" (typepred "j")
      (("" (expand "in_map" -1)
        (("" (skeep)
          (("" (typepred "i")
            (("" (expand "length" -1) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (dLVar type-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (get_index subtype "dl_solution.l" "(list_adt[MapExpr].cons?)")))
 (get_index_TCC2 0
  (get_index_TCC2-1 nil 3870844901
   ("" (skeep)
    (("" (expand "nth" 1 1)
      (("" (assert)
        (("" (typepred "j")
          (("" (expand "in_map" -1) (("" (skeep) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (dLVar type-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (get_index subtype "0"
    "{n: naturalnumbers.below(list_props[MapExpr].length(dl_solution.l)) | hp_def.dlvar_index(list_props[MapExpr].nth(dl_solution.l, n)`1) = dl_solution.j}")))
 (get_index_TCC3 0
  (get_index_TCC3-1 nil 3870844901
   ("" (skeep)
    (("" (typepred "j")
      (("" (expand "in_map")
        (("" (skeep)
          (("" (case "i=0")
            (("1" (expand "nth" -2) (("1" (assert) nil nil)) nil)
             ("2" (inst 3 "i-1")
              (("1" (expand "nth" -1) (("1" (assert) nil nil)) nil)
               ("2" (assert)
                (("2" (typepred "i")
                  (("2" (expand "length" -1)
                    (("2" (assert)
                      (("2" (lift-if -1)
                        (("2" (split -1)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (dLVar type-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (i skolem-const-decl "below(length(l))" dl_solution nil)
    (l skolem-const-decl "MapExprInj" dl_solution nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (get_index subtype "dl_solution.j"
    "(hp_def.in_map(list_adt[MapExpr].cdr(dl_solution.l)))")))
 (get_index_TCC4 0
  (get_index_TCC4-1 nil 3870844901
   ("" (skeep)
    (("" (lemma "cdr_is_MapExprInj") (("" (inst?) nil nil)) nil)) nil)
   ((cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (get_index subtype "list_adt[MapExpr].cdr(dl_solution.l)"
    "MapExprInj")))
 (get_index_TCC5 0
  (get_index_TCC5-1 nil 3870844901
   ("" (skeep)
    (("" (expand "length" 2 2)
      (("" (assert)
        (("" (typepred "j")
          (("" (expand "in_map" -1)
            (("" (skeep)
              (("" (typepred "i")
                (("" (lift-if 2)
                  (("" (split 2)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (expand "length" -2)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (dLVar type-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (get_index termination
    "dl_solution.get_index(list_adt[MapExpr].cdr(dl_solution.l))"
    "nil")))
 (get_index_TCC6 0
  (get_index_TCC6-1 nil 3870844901
   ("" (skeep)
    (("" (typepred "v(cdr[MapExpr](l))(j)")
      (("1" (case "cons?(l)")
        (("1" (expand "length" 2 1)
          (("1" (assert)
            (("1" (expand "nth" 2 1) (("1" (propax) nil nil)) nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (typepred "j")
            (("2" (expand "in_map" -1)
              (("2" (skeep)
                (("2" (typepred "i")
                  (("2" (expand "length" -1) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "cdr_is_MapExprInj")
        (("2" (inst?)
          (("2" (assert)
            (("2" (typepred "j")
              (("2" (expand "in_map" -1)
                (("2" (skeep)
                  (("2" (typepred "i")
                    (("2" (expand "length" 1 2)
                      (("2" (lift-if 1)
                        (("2" (assert)
                          (("2" (split 1)
                            (("1" (assert)
                              (("1"
                                (expand "length" -2)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (typepred "j")
        (("3" (hide 3)
          (("3" (expand "in_map")
            (("3" (skeep)
              (("3" (case "i=0")
                (("1" (expand "nth" -2) (("1" (assert) nil nil)) nil)
                 ("2" (inst 2 "i-1")
                  (("1" (expand "nth" -1 1) (("1" (assert) nil nil))
                    nil)
                   ("2" (assert)
                    (("2" (typepred "i")
                      (("2" (expand "length" -1)
                        (("2" (lift-if -1)
                          (("2" (split -1)
                            (("1" (flatten)
                              (("1"
                                (typepred "j")
                                (("1"
                                  (expand "in_map")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (typepred "i!1")
                                      (("1"
                                        (expand "length" -1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (in_map const-decl "bool" hp_def nil)
    (length def-decl "nat" list_props nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dLVar type-decl nil hp_def nil) (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (l skolem-const-decl "MapExprInj" dl_solution nil)
    (i skolem-const-decl "below(length(l))" dl_solution nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (get_index subtype
    "(number_fields.+)(1, dl_solution.get_index(list_adt[MapExpr].cdr(dl_solution.l))(dl_solution.j))"
    "{n: naturalnumbers.below(list_props[MapExpr].length(dl_solution.l)) | hp_def.dlvar_index(list_props[MapExpr].nth(dl_solution.l, n)`1) = dl_solution.j}")))
 (cnst_val_0 0
  (cnst_val_0-1 nil 3873235640
   ("" (skeep) (("" (grind) (("" (decompose-equality 1) nil nil)) nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (cnst const-decl "real" hp_def nil)
    (dLVar type-decl nil hp_def nil) (val const-decl "real" hp_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (cnst_val_com 0
  (cnst_val_com-1 nil 3873235666
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (expand "cnst")
        (("" (expand "val")
          (("" (expand "+") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (dLVar type-decl nil hp_def nil) (val const-decl "real" hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (val_inj 0
  (val_inj-1 nil 3873236663
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (decompose-equality -1)
          (("1" (inst -1 "LAMBDA(i:nat): i")
            (("1" (expand "val") (("1" (decompose-equality 1) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten) (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dLVar type-decl nil hp_def nil) (val const-decl "real" hp_def nil)
    (dLVar_dlvar_extensionality formula-decl nil hp_def nil)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def nil))
   shostak))
 (in_map_ex_TCC1 0
  (in_map_ex_TCC1-1 nil 3871122749 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (in_map_ex subtype "dl_solution.l" "(list_adt[MapExpr].cons?)")))
 (in_map_ex_TCC2 0
  (in_map_ex_TCC2-1 nil 3871122749
   ("" (skeep)
    (("" (typepred "l") (("" (rewrite "cdr_is_MapExprInj") nil nil))
      nil))
    nil)
   ((Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (dLVar type-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (in_map_ex subtype "list_adt[MapExpr].cdr(dl_solution.l)"
    "Assigns")))
 (in_map_ex_TCC3 0
  (in_map_ex_TCC3-1 nil 3871122749 ("" (termination-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (in_map_ex termination
    "dl_solution.in_map_ex(list_adt[MapExpr].cdr(dl_solution.l))"
    "nil")))
 (in_map_ex_eq 0
  (in_map_ex_eq-1 nil 3873241778
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (flatten)
      (("2" (grind)
        (("2" (decompose-equality 1)
          (("2" (skeep)
            (("2" (typepred "i") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (decompose-equality 1)
        (("3" (expand "in_map")
          (("3" (iff)
            (("3" (split 1)
              (("1" (flatten)
                (("1" (skeep)
                  (("1" (case "i=0")
                    (("1" (expand "nth" -2)
                      (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (expand "nth" -1)
                      (("2" (assert)
                        (("2" (split -2)
                          (("1" (decompose-equality -1)
                            (("1" (inst -1 "x!1")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "in_map_ex" 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1 3 rl)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst 3 "i-1")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "cdr_is_MapExprInj")
                            (("2" (inst -1 "cons(cons1_var,cons2_var)")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "in_map_ex" -1)
                  (("2" (split -1)
                    (("1" (inst 1 "0")
                      (("1" (grind) nil nil)
                       ("2" (expand "length" 1)
                        (("2" (assert) nil nil)) nil))
                      nil)
                     ("2" (split -2)
                      (("1" (decompose-equality -1)
                        (("1" (inst -1 "x!1")
                          (("1" (replace -1 -2 rl)
                            (("1" (skeep)
                              (("1"
                                (inst 1 "i+1")
                                (("1"
                                  (expand "nth" 1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "length" 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "cdr_is_MapExprInj")
                          (("2" (inst -1 "cons(cons1_var,cons2_var)")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (below type-eq-decl nil nat_types nil)
    (cdr_is_MapExprInj judgement-tcc nil hp_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (i skolem-const-decl "below(length(cons2_var))" dl_solution nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons1_var skolem-const-decl "MapExpr" dl_solution nil)
    (cons2_var skolem-const-decl "list[MapExpr]" dl_solution nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (list_induction formula-decl nil list_adt nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (in_map_ex def-decl "bool" dl_solution nil)
    (Assigns type-eq-decl nil hp_def nil)
    (in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (env_c_val 0
  (env_c_val-1 nil 3882006894 ("" (grind) nil nil)
   ((env_c const-decl "real" dl_solution nil)
    (val const-decl "real" hp_def nil))
   shostak))
 (get_val_cnst_id_ex_TCC1 0
  (get_val_cnst_id_ex_TCC1-1 nil 3873240805
   ("" (skeep)
    (("" (typepred "i")
      (("" (skeep)
        (("" (replace -2)
          (("" (split 2)
            (("1" (assert) (("1" (grind) nil nil)) nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (grind)
              (("4" (typepred "j")
                (("4" (rewrite "in_map_ex_eq") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dlvar adt-constructor-decl "[nat -> (dlvar?)]" hp_def nil)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def nil)
    (val const-decl "real" hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (in_map const-decl "bool" hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (env_c const-decl "real" dl_solution nil)
    (env_nat_shift const-decl "real" dl_solution nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (get_val_cnst_id_ex subtype
    "(number_fields.-)(list_props[MapExpr].nth(dl_solution.l, dl_solution.i)`2(dl_solution.env_nat_shift(0)), list_props[MapExpr].nth(dl_solution.l, dl_solution.i)`2(dl_solution.env_c(0)))"
    "(hp_def.in_map(dl_solution.l))")))
 (get_val_cnst_id_ex_TCC2 0
  (get_val_cnst_id_ex_TCC2-1 nil 3873240805
   ("" (skeep)
    (("" (typepred "i")
      (("" (skeep)
        (("" (replace -2)
          (("" (split 2)
            (("1" (grind)
              (("1" (typepred "get_index(l)(j)")
                (("1" (assert) nil nil)) nil))
              nil)
             ("2" (grind)
              (("2" (decompose-equality 1)
                (("2" (typepred "get_index(l)(j)")
                  (("2" (replace -2) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (skeep)
              (("3"
                (typepred "get_index(l)(
                          (cnst(c) + val(dlvar(j)))(env_nat_shift(0)) -
                           (cnst(c) + val(dlvar(j)))(env_c(0)))")
                (("1" (grind)
                  (("1" (decompose-equality -3)
                    (("1" (inst -1 "LAMBDA(i:nat): 0")
                      (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (case "j = dlvar_index(nth(l,m)`1)")
                    (("1" (assert)
                      (("1" (lemma "mapexpr_inj_eq")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (inst -1 "m" "get_index(l)(j)")
                              (("1"
                                (assert)
                                (("1" (decompose-equality 1) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (decompose-equality -3)
                        (("2" (inst-cp -1 "LAMBDA(i:nat): 0")
                          (("2" (inst -1 "LAMBDA(i:nat): i")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split 1)
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil)
                   ("4" (hide 2) (("4" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dlvar adt-constructor-decl "[nat -> (dlvar?)]" hp_def nil)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def nil)
    (val const-decl "real" hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (in_map const-decl "bool" hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dLVar_dlvar_extensionality formula-decl nil hp_def nil)
    (mapexpr_inj_eq formula-decl nil hp_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (env_c const-decl "real" dl_solution nil)
    (env_nat_shift const-decl "real" dl_solution nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_index def-decl
     "{n: below(length(l)) | dlvar_index(nth(l, n)`1) = j}" dl_solution
     nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (get_val_cnst_id_ex subtype
    "(dl_solution.get_index(dl_solution.l)((number_fields.-)(list_props[MapExpr].nth(dl_solution.l, dl_solution.i)`2(dl_solution.env_nat_shift(0)), list_props[MapExpr].nth(dl_solution.l, dl_solution.i)`2(dl_solution.env_c(0)))), list_props[MapExpr].nth(dl_solution.l, dl_solution.i)`2(dl_solution.env_c(0)))"
    "{vc: [naturalnumbers.below(list_props[MapExpr].length(dl_solution.l)), reals.real] | booleans.AND(vc`1 /= dl_solution.i, booleans.AND(list_props[MapExpr].nth(dl_solution.l, dl_solution.i)`2 = (real_fun_ops[Environment].+)(hp_def.cnst(vc`2), hp_def.val(list_props[MapExpr].nth(dl_solution.l, vc`1)`1)), FORALL (c: reals.real, m: naturalnumbers.below(list_props[MapExpr].length(dl_solution.l))): booleans.IMPLIES(list_props[MapExpr].nth(dl_solution.l, dl_solution.i)`2 = (real_fun_ops[Environment].+)(hp_def.cnst(c), hp_def.val(list_props[MapExpr].nth(dl_solution.l, m)`1)), (booleans.AND(m = vc`1, vc`2 = c)))))}")))
 (is_val_not_in_map?_TCC1 0
  (is_val_not_in_map?_TCC1-1 nil 3871118769 ("" (subtype-tcc) nil nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (cnst_lins? const-decl "bool" dl_solution nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (in_map const-decl "bool" hp_def nil)
    (quad_cnst? const-decl "bool" dl_solution nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (env_c const-decl "real" dl_solution nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (val const-decl "real" hp_def nil)
    (env_nat_shift const-decl "real" dl_solution nil)
    (cnst const-decl "real" hp_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (is_cnst? const-decl "bool" dl_solution nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (is_val_not_in_map? subtype
    "(number_fields.-)(list_props[MapExpr].nth(dl_solution.l, dl_solution.i)`2(dl_solution.env_nat_shift(0)), list_props[MapExpr].nth(dl_solution.l, dl_solution.i)`2(dl_solution.env_c(0)))"
    "nat")))
 (Y_sol_ex_TCC1 0
  (Y_sol_ex_TCC1-1 nil 3871118769
   ("" (skeep)
    (("" (typepred "l")
      (("" (expand "cnst_lins?" -2)
        (("" (inst -2 "i")
          (("" (split -2)
            (("1" (skeep)
              (("1" (hide 2 3)
                (("1" (expand "is_cnst?" 1) (("1" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (split -2)
                (("1" (hide 4)
                  (("1" (expand "is_val_not_in_map?" 3)
                    (("1" (split 3)
                      (("1" (propax) nil nil)
                       ("2" (rewrite "in_map_ex_eq")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "quad_cnst?" -1)
                  (("2" (split -1)
                    (("1" (skeep)
                      (("1" (inst 3 "dlvar_index(v)" "c")
                        (("1" (split 3)
                          (("1" (assert)
                            (("1" (lemma "mapexpr_inj_eq_index")
                              (("1"
                                (inst -1 "l")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst
                                     -1
                                     "i"
                                     "get_index(l)(dlvar_index(v))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred
                                         "get_index(l)(dlvar_index(v))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "mapexpr_inj_eq_index")
                                            (("1"
                                              (inst -1 "l")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "i"
                                                   "get_index(l)(dlvar_index(v))")
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "NOT i = get_index(l)(dlvar_index(v))")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (replace
                                                         -1
                                                         -4
                                                         rl)
                                                        (("2"
                                                          (replace
                                                           -4
                                                           -5
                                                           lr)
                                                          (("2"
                                                            (decompose-equality
                                                             -5)
                                                            (("2"
                                                              (inst-cp
                                                               -1
                                                               "LAMBDA(i:nat): 0")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "LAMBDA(i:nat): i")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "dlvar_eq") nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (inst 4 "dlvar_index(v)" "c")
                        (("2" (assert)
                          (("2"
                            (case "NOT dlvar_index(nth[MapExpr](l, i)`1) = dlvar_index(v)")
                            (("1" (rewrite "dlvar_eq")
                              (("1" (assert) nil nil)) nil)
                             ("2" (rewrite "dlvar_eq")
                              (("2"
                                (case
                                 "get_index(l)(dlvar_index(v)) = i")
                                (("1"
                                  (replace -1 -3)
                                  (("1"
                                    (replace -3 -4)
                                    (("1"
                                      (case
                                       "dlvar_index(v) /= dlvar_index(v_1)")
                                      (("1"
                                        (decompose-equality -5)
                                        (("1"
                                          (inst-cp
                                           -1
                                           "LAMBDA(i:nat): 0")
                                          (("1"
                                            (inst-cp
                                             -1
                                             "LAMBDA(i:nat): i")
                                            (("1"
                                              (hide -1)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "dlvar_index(v)")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "mapexpr_inj_eq_index")
                                  (("2"
                                    (inst -1 "l")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst
                                         -1
                                         "i"
                                         "get_index(l)(dlvar_index(v))")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cnst_lins? const-decl "bool" dl_solution nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (dLVar type-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (quad_cnst? const-decl "bool" dl_solution nil)
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (mapexpr_inj_eq_index formula-decl nil hp_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (get_index def-decl
     "{n: below(length(l)) | dlvar_index(nth(l, n)`1) = j}" dl_solution
     nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dlvar_eq formula-decl nil hp_def nil)
    (in_map const-decl "bool" hp_def nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (env_nat_shift const-decl "real" dl_solution nil)
    (val const-decl "real" hp_def nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (env_c const-decl "real" dl_solution nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (in_map_ex_eq formula-decl nil dl_solution nil)
    (Assigns type-eq-decl nil hp_def nil)
    (is_val_not_in_map? const-decl "bool" dl_solution nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (is_cnst? const-decl "bool" dl_solution nil)
    (cnst const-decl "real" hp_def nil)
    (nth def-decl "T" list_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (Y_sol_ex subtype "dl_solution.i"
    "{i: naturalnumbers.below(list_props[MapExpr].length(dl_solution.l)) | EXISTS (j: (hp_def.in_map(dl_solution.l)), c: reals.real): booleans.AND(hp_def.dlvar_index(list_props[MapExpr].nth(dl_solution.l, i)`1) /= j, list_props[MapExpr].nth(dl_solution.l, i)`2 = (real_fun_ops[Environment].+)(hp_def.cnst(c), hp_def.val(hp_def.dlvar(j))))}")))
 (cnst_lins_def 0
  (cnst_lins_def-2 nil 3903544728
   ("" (skeep)
    (("" (assert)
      (("" (typepred "l")
        (("" (expand "cnst_lins?" -2)
          (("" (inst -2 "k")
            (("" (split -2)
              (("1" (skeep)
                (("1" (hide 1 3) (("1" (grind) nil nil)) nil)) nil)
               ("2" (skeep)
                (("2" (split -2)
                  (("1" (hide 2)
                    (("1" (expand "is_val_not_in_map?" 3)
                      (("1" (rewrite "in_map_ex_eq")
                        (("1" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand "quad_cnst?" -1)
                    (("2" (inst 1 "dlvar_index(v)" "c")
                      (("1" (split -1)
                        (("1" (skeep)
                          (("1" (assert)
                            (("1" (rewrite "dlvar_eq")
                              (("1"
                                (lemma "mapexpr_inj_eq_index")
                                (("1"
                                  (inst -1 "l")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -1
                                       "get_index(l)(dlvar_index(v))"
                                       "k")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "NOT k = get_index(l)(dlvar_index(v))")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (replace -1 -2 rl)
                                            (("2"
                                              (replace -2 -3 lr)
                                              (("2"
                                                (decompose-equality -3)
                                                (("2"
                                                  (inst-cp
                                                   -1
                                                   "LAMBDA(i:nat): 0")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "LAMBDA(i:nat): i")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (skeep)
                            (("2" (rewrite "dlvar_eq")
                              (("2"
                                (lemma "mapexpr_inj_eq_index")
                                (("2"
                                  (inst -1 "l")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       -1
                                       "k"
                                       "get_index(l)(dlvar_index(v))")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case
                                           "NOT k = get_index(l)(dlvar_index(v))")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (replace -1 -2 rl)
                                            (("2"
                                              (replace -2 -3 lr)
                                              (("2"
                                                (decompose-equality -3)
                                                (("2"
                                                  (inst-cp
                                                   -1
                                                   "LAMBDA(i:nat): 0")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "LAMBDA(i:nat): i")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (split -1)
                          (("1" (skeep) (("1" (grind) nil nil)) nil)
                           ("2" (skeep) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cnst const-decl "real" hp_def nil)
    (is_cnst? const-decl "bool" dl_solution nil)
    (nth def-decl "T" list_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (is_val_not_in_map? const-decl "bool" dl_solution nil)
    (env_nat_shift const-decl "real" dl_solution nil)
    (val const-decl "real" hp_def nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (env_c const-decl "real" dl_solution nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (in_map_ex_eq formula-decl nil dl_solution nil)
    (Assigns type-eq-decl nil hp_def nil)
    (in_map const-decl "bool" hp_def nil)
    (l skolem-const-decl "(cnst_lins?)" dl_solution nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (v skolem-const-decl "dLVar" dl_solution nil)
    (dlvar_eq formula-decl nil hp_def nil)
    (get_index def-decl
     "{n: below(length(l)) | dlvar_index(nth(l, n)`1) = j}" dl_solution
     nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mapexpr_inj_eq_index formula-decl nil hp_def nil)
    (quad_cnst? const-decl "bool" dl_solution nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (cnst_lins? const-decl "bool" dl_solution nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil)
  (cnst_lins_def-1 nil 3873294819
   ("" (skeep)
    (("" (assert)
      (("" (typepred "l")
        (("" (expand "cnst_lins?" -2)
          (("" (inst -2 "k")
            (("" (split -2)
              (("1" (skeep)
                (("1" (hide 1 3) (("1" (grind) nil nil)) nil)) nil)
               ("2" (skeep)
                (("2" (split -2)
                  (("1" (hide 2)
                    (("1" (expand "is_val_not_in_map?" 3)
                      (("1" (rewrite "in_map_ex_eq")
                        (("1" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand "quad_cnst?" -1)
                    (("2" (inst 1 "j2" "c2")
                      (("1" (split -1)
                        (("1" (skeep)
                          (("1" (assert)
                            (("1" (lemma "mapexpr_inj_eq")
                              (("1"
                                (inst -1 "l")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -1 "get_index(l)(j2)" "k")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "NOT k = get_index(l)(j2)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (replace -1 -2 rl)
                                          (("2"
                                            (replace -2 -3 lr)
                                            (("2"
                                              (decompose-equality -3)
                                              (("2"
                                                (inst-cp
                                                 -1
                                                 "LAMBDA(i:nat): 0")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "LAMBDA(i:nat): i")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (skeep)
                            (("2" (lemma "mapexpr_inj_eq")
                              (("2"
                                (inst -1 "l")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "k" "get_index(l)(j2)")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (case
                                         "NOT k = get_index(l)(j2)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (replace -1 -2 rl)
                                          (("2"
                                            (replace -2 -3 lr)
                                            (("2"
                                              (decompose-equality -3)
                                              (("2"
                                                (inst-cp
                                                 -1
                                                 "LAMBDA(i:nat): 0")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "LAMBDA(i:nat): i")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (split -1)
                          (("1" (skeep) (("1" (grind) nil nil)) nil)
                           ("2" (skeep) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cnst const-decl "real" hp_def nil)
    (is_cnst? const-decl "bool" dl_solution nil)
    (nth def-decl "T" list_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (is_val_not_in_map? const-decl "bool" dl_solution nil)
    (env_nat_shift const-decl "real" dl_solution nil)
    (val const-decl "real" hp_def nil)
    (env_c const-decl "real" dl_solution nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (in_map_ex_eq formula-decl nil dl_solution nil)
    (Assigns type-eq-decl nil hp_def nil)
    (in_map const-decl "bool" hp_def nil)
    (mapexpr_inj_eq formula-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (get_index def-decl
     "{n: below(length(l)) | dlvar_index(nth(l, n)`1) = j}" dl_solution
     nil)
    (quad_cnst? const-decl "bool" dl_solution nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (cnst_lins? const-decl "bool" dl_solution nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (cnst_lins_sol_TCC1 0
  (cnst_lins_sol_TCC1-1 nil 3873282967 ("" (subtype-tcc) nil nil)
   ((dd? const-decl "bool" hp_expr nil)) nil
   (cnst_lins_sol subtype "interval_def.hp(0)" "(hp_expr.dd?)")))
 (cnst_lins_sol 0
  (cnst_lins_sol-2 "" 3903558184
   ("" (skeep)
    (("" (expand "solution_odes?" 1)
      (("" (split 1)
        (("1" (expand "derivable_odes?" 1)
          (("1" (skeep)
            (("1" (expand "restrict" 1)
              (("1" (expand "Y_sol_ex" 1)
                (("1"
                  (case " is_cnst?(l)(k) OR is_val_not_in_map?(l)(k)")
                  (("1"
                    (with-tccs
                     (case " (LAMBDA (s: (hp(0))):
                                     IF is_cnst?(l)(k) OR is_val_not_in_map?(l)(k)
                                       THEN (val(nth(l, k)`1) + nth(l, k)`2 * cnst(s))(envi)
                                     ELSE (val(nth(l, k)`1) +
                                            (cnst(nth(l, k)`2(env_c(0))) +
                                              val(nth(l, get_val_cnst_id_ex(l)(k)`1)`1))
                                             * cnst(s)
                                            +
                                            nth(l, get_val_cnst_id_ex(l)(k)`1)`2 * cnst(s) ^ 2 /
                                             cnst(2))
                                              (envi)
                                     ENDIF) =  (LAMBDA (s: (hp(0))):
                                     (val(nth(l, k)`1) + nth(l, k)`2 * cnst(s))(envi)
                                    )"))
                    (("1" (replace -1)
                      (("1" (hide -1)
                        (("1" (hide -1)
                          (("1" (expand "*" 1)
                            (("1" (expand "cnst" 1)
                              (("1" (derivable 1) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (decompose-equality 1)
                        (("1" (lift-if 1)
                          (("1" (split 1)
                            (("1" (propax) nil nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2"
                      (with-tccs
                       (case "(LAMBDA (s: (hp(0))):
                                     IF is_cnst?(l)(k) OR is_val_not_in_map?(l)(k)
                                       THEN (val(nth(l, k)`1) + nth(l, k)`2 * cnst(s))(envi)
                                     ELSE (val(nth(l, k)`1) +
                                            (cnst(nth(l, k)`2(env_c(0))) +
                                              val(nth(l, get_val_cnst_id_ex(l)(k)`1)`1))
                                             * cnst(s)
                                            +
                                            nth(l, get_val_cnst_id_ex(l)(k)`1)`2 * cnst(s) ^ 2 /
                                             cnst(2))
                                              (envi)
                                     ENDIF) = (LAMBDA (s: (hp(0))):
                                     (val(nth(l, k)`1) +
                                            (cnst(nth(l, k)`2(env_c(0))) +
                                              val(nth(l, get_val_cnst_id_ex(l)(k)`1)`1))
                                             * cnst(s)
                                            +
                                            nth(l, get_val_cnst_id_ex(l)(k)`1)`2 * cnst(s) ^ 2 /
                                             cnst(2))
                                              (envi)
                                     )"))
                      (("1" (replace -1)
                        (("1" (expand "+" 2)
                          (("1" (expand "cnst" 2)
                            (("1" (expand "val" 2)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "^" 2)
                                  (("1"
                                    (expand "div_safe_re")
                                    (("1"
                                      (expand "div_safe")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (derivable 2)
                                          (("1"
                                            (lemma "cnst_lins_def")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "cnst_lins_def")
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skeep 1)
                                            (("3"
                                              (lemma "cnst_lins_def")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (skeep)
                                            (("4"
                                              (assert)
                                              (("4"
                                                (lemma "cnst_lins_def")
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("5"
                                            (skeep)
                                            (("5"
                                              (assert)
                                              (("5"
                                                (lemma "cnst_lins_def")
                                                (("5"
                                                  (inst?)
                                                  (("5"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("6"
                                            (skeep)
                                            (("6"
                                              (assert)
                                              (("6"
                                                (lemma "cnst_lins_def")
                                                (("6"
                                                  (inst?)
                                                  (("6"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (decompose-equality 1)
                        (("1" (lift-if 1)
                          (("1" (flatten)
                            (("1" (split 1)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (hide 2 3 4)
                            (("2" (lemma "cnst_lins_def")
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "l")
                                    (("2"
                                      (reveal +)
                                      (("2"
                                        (hide 3)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skeep)
                          (("3" (lemma "cnst_lins_def")
                            (("3" (inst?) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "env_at_t?" 1)
          (("2" (skeep)
            (("2" (expand "Y_sol_ex" 1)
              (("2" (case "is_cnst?(l)(k) OR is_val_not_in_map?(l)(k)")
                (("1" (assert)
                  (("1" (lift-if 1)
                    (("1" (split 1)
                      (("1" (flatten)
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (flatten) (("2" (replaces 1) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace 1) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (expand "sol_at_t?" 1)
            (("3" (skeep)
              (("3" (expand "Y_sol_ex" 1 1)
                (("3"
                  (case "is_cnst?(l)(k) OR is_val_not_in_map?(l)(k)")
                  (("1" (expand "restrict" 1)
                    (("1"
                      (with-tccs
                       (case " (LAMBDA (s: (hp(0))):
                                     IF is_cnst?(l)(k) OR is_val_not_in_map?(l)(k)
                                       THEN (val(nth(l, k)`1) + nth(l, k)`2 * cnst(s))(envi)
                                     ELSE (val(nth(l, k)`1) +
                                            (cnst(nth(l, k)`2(env_c(0))) +
                                              val(nth(l, get_val_cnst_id_ex(l)(k)`1)`1))
                                             * cnst(s)
                                            +
                                            nth(l, get_val_cnst_id_ex(l)(k)`1)`2 * cnst(s) ^ 2 /
                                             cnst(2))
                                              (envi)
                                     ENDIF) =  (LAMBDA (s: (hp(0))):
                                    (val(nth(l, k)`1) + nth(l, k)`2 * cnst(s))(envi)
                                    )"))
                      (("1" (replace -1)
                        (("1" (expand "+" 1)
                          (("1" (expand "*" 1)
                            (("1" (expand "val" 1)
                              (("1"
                                (expand "cnst" 1)
                                (("1"
                                  (typepred " env")
                                  (("1"
                                    (hide -)
                                    (("1"
                                      (expand "deriv" 1 1)
                                      (("1"
                                        (hide 1)
                                        (("1"
                                          (deriv
                                           "(LAMBDA (s: (hp(0))):
                       envi(dlvar_index(nth(l, k)`1)) + nth(l, k)`2(envi) * s)")
                                          (("1"
                                            (reveal +)
                                            (("1"
                                              (decompose-equality -1)
                                              (("1"
                                                (inst -1 "t")
                                                (("1"
                                                  (expand "deriv" -1)
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (typepred "envi")
                                                      (("1"
                                                        (typepred
                                                         " env")
                                                        (("1"
                                                          (expand
                                                           "env_at_t?"
                                                           -1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (reveal
                                                               -)
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3
                                                                 -4
                                                                 -5
                                                                 -6
                                                                 -7
                                                                 -8
                                                                 -9)
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "is_cnst?"
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       -3
                                                                       -4
                                                                       -5
                                                                       -6
                                                                       -7
                                                                       -8
                                                                       -9
                                                                       -10
                                                                       -11)
                                                                      (("1"
                                                                        (typepred
                                                                         "l")
                                                                        (("1"
                                                                          (expand
                                                                           "cnst_lins?"
                                                                           -2)
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "k")
                                                                            (("1"
                                                                              (split
                                                                               -2)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "is_val_not_in_map?"
                                                                     -1)
                                                                    (("2"
                                                                      (typepred
                                                                       "l")
                                                                      (("2"
                                                                        (expand
                                                                         "cnst_lins?"
                                                                         -2)
                                                                        (("2"
                                                                          (inst
                                                                           -2
                                                                           "k")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split
                                                                               -2)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      1))
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (case
                                                                                   "in_map(l)(dlvar_index(v))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "in_map_ex_eq")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2)
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              2))
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -3
                                                                                         "dlvar_index(v)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           4)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1
                                                                                             -2
                                                                                             -3)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -4
                                                                                               "dlvar_index(v)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -4
                                                                                                     -5
                                                                                                     -6
                                                                                                     -7)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 -)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "dlvar_index(v)")
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     (1
                                                                                                      2))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "not_in_map"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "in_map"
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (skeep)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "i")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           -)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "dlvar_index(v)")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "hp"
                                                                                               1)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "hp_noe")
                                                (("2" (inst?) nil nil))
                                                nil)
                                               ("3"
                                                (lemma "hp_dd")
                                                (("3" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "hp_dd")
                                            (("2"
                                              (inst -1 "0")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (decompose-equality 1)
                          (("1" (lift-if 1)
                            (("1" (split -1)
                              (("1"
                                (split 1)
                                (("1" (propax) nil nil)
                                 ("2" (flatten) nil nil))
                                nil)
                               ("2"
                                (split 1)
                                (("1" (propax) nil nil)
                                 ("2" (flatten) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "cnst_lins_def")
                            (("2" (inst?)
                              (("2"
                                (skeep)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "restrict" 2)
                    (("2"
                      (with-tccs
                       (case "(LAMBDA (s: (hp(0))):
                                     IF is_cnst?(l)(k) OR is_val_not_in_map?(l)(k)
                                       THEN (val(nth(l, k)`1) + nth(l, k)`2 * cnst(s))(envi)
                                     ELSE (val(nth(l, k)`1) +
                                            (cnst(nth(l, k)`2(env_c(0))) +
                                              val(nth(l, get_val_cnst_id_ex(l)(k)`1)`1))
                                             * cnst(s)
                                            +
                                            nth(l, get_val_cnst_id_ex(l)(k)`1)`2 * cnst(s) ^ 2 /
                                             cnst(2))
                                              (envi)
                                     ENDIF) = (LAMBDA (s: (hp(0))):
                                      (val(nth(l, k)`1) +
                                            (cnst(nth(l, k)`2(env_c(0))) +
                                              val(nth(l, get_val_cnst_id_ex(l)(k)`1)`1))
                                             * cnst(s)
                                            +
                                            nth(l, get_val_cnst_id_ex(l)(k)`1)`2 * cnst(s) ^ 2 /
                                             cnst(2))
                                              (envi)
                                     )"))
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (expand "+" 2)
                            (("1" (expand "cnst" 2)
                              (("1"
                                (hide 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "^" 1)
                                    (("1"
                                      (expand "*" 1)
                                      (("1"
                                        (expand "val" 1)
                                        (("1"
                                          (expand "div_safe_re" 1)
                                          (("1"
                                            (expand "div_safe" 1)
                                            (("1"
                                              (expand "deriv" 1)
                                              (("1"
                                                (with-tccs
                                                 (deriv
                                                  "LAMBDA (s: (hp(0))):
                        envi(dlvar_index(nth(l, k)`1)) +
                         nth(l, get_val_cnst_id_ex(l)(k)`1)`2(envi) * s ^ 2 / 2
                         + s * nth(l, k)`2(env_c(0))
                         + s * envi(dlvar_index(nth(l, get_val_cnst_id_ex(l)(k)`1)`1))"))
                                                (("1"
                                                  (with-tccs
                                                   (decompose-equality
                                                    -1))
                                                  (("1"
                                                    (inst -1 "t")
                                                    (("1"
                                                      (expand
                                                       "deriv"
                                                       -1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1 -2)
                                                          (("1"
                                                            (typepred
                                                             "l")
                                                            (("1"
                                                              (expand
                                                               "cnst_lins?"
                                                               -2)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "k")
                                                                (("1"
                                                                  (split
                                                                   -2)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (reveal
                                                                       +)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (reveal
                                                                       1)
                                                                      (("2"
                                                                        (case
                                                                         "NOT in_map(l)(dlvar_index(v))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "is_val_not_in_map?"
                                                                             2)
                                                                            (("1"
                                                                              (rewrite
                                                                               "in_map_ex_eq")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   2)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    (("1"
                                                                                      (reveal
                                                                                       +)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (reveal
                                                                               +)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replace
                                                                                   -2
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "quad_cnst?"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (split
                                                                                       -3)
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (case
                                                                                           "get_val_cnst_id_ex(l)(k)`1 = get_index(l)(dlvar_index(v))")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "get_index(l)(dlvar_index(v))")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -4
                                                                                                 3)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "cnst"
                                                                                                   3)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "env_c"
                                                                                                     3
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "env")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "env_at_t?"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -2
                                                                                                               "get_index(l)(dlvar_index(v))")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -4
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -4
                                                                                                                   3
                                                                                                                   lr)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -8
                                                                                                                       3
                                                                                                                       lr)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "val"
                                                                                                                         3)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "cnst"
                                                                                                                           3)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "+"
                                                                                                                             3)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -2
                                                                                                                               3
                                                                                                                               rl)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "Y_sol_ex"
                                                                                                                                 3)
                                                                                                                                (("1"
                                                                                                                                  (lift-if
                                                                                                                                   3)
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     3)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -7)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "+"
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "cnst"
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "*"
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "val"
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         3)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "is_cnst?"
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -6)
                                                                                                                                              (("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "get_val_cnst_id_ex(l)(k)`1"
                                                                                               "get_index(l)(dlvar_index(v))")
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "get_val_cnst_id_ex(l)(k)")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -3
                                                                                                   "c"
                                                                                                   "get_index(l)(dlvar_index(v))")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (case
                                                                                           "get_val_cnst_id_ex(l)(k)`1 = get_index(l)(dlvar_index(v))")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "+"
                                                                                                 4)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "cnst"
                                                                                                   4)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "val"
                                                                                                     4)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "env_c"
                                                                                                       4)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "get_index(l)(dlvar_index(v))")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "env")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "env_at_t?"
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -2
                                                                                                                     "get_index(l)(dlvar_index(v))")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -4
                                                                                                                       -2
                                                                                                                       lr)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -8
                                                                                                                         4)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "+"
                                                                                                                           4)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "cnst"
                                                                                                                             4)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "val"
                                                                                                                               4)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -2
                                                                                                                                 4
                                                                                                                                 rl)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "Y_sol_ex"
                                                                                                                                   4)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "is_cnst?(l)(get_index(l)(dlvar_index(v))) OR
                                                           is_val_not_in_map?(l)(get_index(l)(dlvar_index(v)))")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lift-if
                                                                                                                                         4)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           4)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -8)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "cnst"
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "*"
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "+"
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "val"
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               3
                                                                                                                                               4
                                                                                                                                               5
                                                                                                                                               6)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 -2
                                                                                                                                                 -3
                                                                                                                                                 -4
                                                                                                                                                 -5
                                                                                                                                                 -6
                                                                                                                                                 -7
                                                                                                                                                 -8
                                                                                                                                                 -9
                                                                                                                                                 -10)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       5)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "is_val_not_in_map?"
                                                                                                                                             2)
                                                                                                                                            (("2"
                                                                                                                                              (split
                                                                                                                                               2)
                                                                                                                                              (("1"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   "in_map_ex_eq")
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -7)
                                                                                                                                                    (("2"
                                                                                                                                                      (hide
                                                                                                                                                       -2
                                                                                                                                                       -3
                                                                                                                                                       -4
                                                                                                                                                       -5
                                                                                                                                                       -6)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide
                                                                                                                                                         -4
                                                                                                                                                         -5)
                                                                                                                                                        (("2"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "get_val_cnst_id_ex(l)(k)")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -3
                                                                                               "c"
                                                                                               "get_index(l)(dlvar_index(v))")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (reveal +)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (lemma
                                                         "cnst_lins_def")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (reveal +)
                                                    (("3"
                                                      (lemma
                                                       "cnst_lins_def")
                                                      (("3"
                                                        (hide -2 1)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (inst?)
                                                            (("3"
                                                              (hide 2)
                                                              (("3"
                                                                (hide
                                                                 -3
                                                                 -4)
                                                                (("3"
                                                                  (reveal
                                                                   +)
                                                                  (("3"
                                                                    (hide
                                                                     1)
                                                                    (("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "cnst_lins_def")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (reveal +)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide -1)
                                                  (("3"
                                                    (lemma
                                                     "cnst_lins_def")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (reveal +)
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (hide -1)
                                                  (("4"
                                                    (lemma
                                                     "cnst_lins_def")
                                                    (("4"
                                                      (inst?)
                                                      (("4"
                                                        (reveal +)
                                                        (("4"
                                                          (flatten)
                                                          (("4"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (hide -1)
                                                  (("5"
                                                    (lemma
                                                     "cnst_lins_def")
                                                    (("5"
                                                      (inst?)
                                                      (("5"
                                                        (reveal +)
                                                        (("5"
                                                          (flatten)
                                                          (("5"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (hide -1)
                                                  (("6"
                                                    (lemma
                                                     "cnst_lins_def")
                                                    (("6"
                                                      (inst?)
                                                      (("6"
                                                        (reveal +)
                                                        (("6"
                                                          (flatten)
                                                          (("6"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("7"
                                                  (hide -1)
                                                  (("7"
                                                    (lemma
                                                     "cnst_lins_def")
                                                    (("7"
                                                      (inst?)
                                                      (("7"
                                                        (reveal +)
                                                        (("7"
                                                          (flatten)
                                                          (("7"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("8"
                                                  (hide -1)
                                                  (("8"
                                                    (lemma
                                                     "cnst_lins_def")
                                                    (("8"
                                                      (inst?)
                                                      (("8"
                                                        (reveal +)
                                                        (("8"
                                                          (flatten)
                                                          (("8"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("9"
                                                  (lemma
                                                   "cnst_lins_def")
                                                  (("9"
                                                    (inst?)
                                                    (("9"
                                                      (reveal +)
                                                      (("9"
                                                        (flatten)
                                                        (("9"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("10"
                                                  (lemma
                                                   "cnst_lins_def")
                                                  (("10"
                                                    (inst?)
                                                    (("10"
                                                      (reveal +)
                                                      (("10"
                                                        (flatten)
                                                        (("10"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (with-tccs (decompose-equality 1)) nil
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((solution_odes? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_domain_not_one_element formula-decl nil deriv_domain_def
     analysis)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (deriv_scal1_lam formula-decl nil derivatives_lam analysis)
    (deriv_add_lam formula-decl nil derivatives_lam analysis)
    (deriv_const_lam formula-decl nil derivatives_lam analysis)
    (deriv_id_lam formula-decl nil derivatives_lam analysis)
    (d__81 skolem-const-decl "[(hp(0)) -> real]" dl_solution nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (env_nat_shift const-decl "real" dl_solution nil)
    (quad_cnst? const-decl "bool" dl_solution nil)
    (Assigns type-eq-decl nil hp_def nil)
    (in_map_ex_eq formula-decl nil dl_solution nil)
    (not_in_map const-decl "bool" hp_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (v skolem-const-decl "dLVar" dl_solution nil)
    (hp_noe formula-decl nil interval_def ODEs)
    (hp_dd formula-decl nil interval_def ODEs)
    (k skolem-const-decl "below(length(l))" dl_solution nil)
    (get_index def-decl
     "{n: below(length(l)) | dlvar_index(nth(l, n)`1) = j}" dl_solution
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_scal2_lam formula-decl nil derivatives_lam analysis)
    (deriv_scald2_lam formula-decl nil derivatives_lam analysis)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (deriv_pow_lam formula-decl nil derivatives_lam analysis)
    (expt_x1 formula-decl nil exponentiation nil)
    (d__82 skolem-const-decl "[(hp(0)) -> real]" dl_solution nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (expt def-decl "real" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (restrict const-decl "R" restrict nil)
    (is_val_not_in_map? const-decl "bool" dl_solution nil)
    (is_cnst? const-decl "bool" dl_solution nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (cnst_lins? const-decl "bool" dl_solution nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (dLVar type-decl nil hp_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (k skolem-const-decl "below(length(l))" dl_solution nil)
    (l skolem-const-decl "(cnst_lins?)" dl_solution nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (derivable_const_lam formula-decl nil derivatives_lam analysis)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (BoolExpr type-eq-decl nil hp_def nil)
    (env_c const-decl "real" dl_solution nil)
    (get_val_cnst_id_ex const-decl "{vc: [below(length(l)), real] |
   vc`1 /= i AND
    nth(l, i)`2 = cnst(vc`2) + val(nth(l, vc`1)`1) AND
     (FORALL (c: real, m: below(length(l))):
        nth(l, i)`2 = cnst(c) + val(nth(l, m)`1) IMPLIES
         (m = vc`1 AND vc`2 = c))}" dl_solution nil)
    (div_safe_re const-decl "real" hp_def nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (dlvar adt-constructor-decl "[nat -> (dlvar?)]" hp_def nil)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def nil)
    (val const-decl "real" hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (/= const-decl "boolean" notequal nil)
    (in_map const-decl "bool" hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (hp const-decl "bool" interval_def ODEs)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_safe const-decl "real" reals_safe_ops reals)
    (^ const-decl "real" exponentiation nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (derivable_scal2_lam formula-decl nil derivatives_lam analysis)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam analysis)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (cnst_lins_def formula-decl nil dl_solution nil)
    (Y_sol_ex const-decl "[Environment -> real]" dl_solution nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak)
  (cnst_lins_sol-1 nil 3873283542
   ("" (skeep)
    (("" (expand "solution_odes?" 1)
      (("" (split 1)
        (("1" (expand "derivable_odes?" 1)
          (("1" (skeep)
            (("1" (expand "restrict" 1)
              (("1" (expand "Y_sol_ex" 1)
                (("1"
                  (case " is_cnst?(l)(k) OR is_val_not_in_map?(l)(k)")
                  (("1"
                    (with-tccs
                     (case " (LAMBDA (s: (hp(0))):
                         IF is_cnst?(l)(k) OR is_val_not_in_map?(l)(k)
                           THEN (val(nth(l, k)`1) + nth(l, k)`2 * cnst(s))(envi)
                         ELSE (val(nth(l, k)`1) +
                                (cnst(nth(l, k)`2(env_c(0))) +
                                  val(nth(l, get_val_cnst_id_ex(l)(k)`1)`1))
                                 * cnst(s)
                                +
                                nth(l, get_val_cnst_id_ex(l)(k)`1)`2 * cnst(s) ^ 2 /
                                 cnst(2))
                                  (envi)
                         ENDIF) =  (LAMBDA (s: (hp(0))):
                         (val(nth(l, k)`1) + nth(l, k)`2 * cnst(s))(envi)
                        )"))
                    (("1" (replace -1)
                      (("1" (hide -1)
                        (("1" (hide -1)
                          (("1" (expand "*" 1)
                            (("1" (expand "cnst" 1)
                              (("1" (derivable 1) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (decompose-equality 1)
                        (("1" (lift-if 1)
                          (("1" (split 1)
                            (("1" (propax) nil nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2"
                      (with-tccs
                       (case "(LAMBDA (s: (hp(0))):
                         IF is_cnst?(l)(k) OR is_val_not_in_map?(l)(k)
                           THEN (val(nth(l, k)`1) + nth(l, k)`2 * cnst(s))(envi)
                         ELSE (val(nth(l, k)`1) +
                                (cnst(nth(l, k)`2(env_c(0))) +
                                  val(nth(l, get_val_cnst_id_ex(l)(k)`1)`1))
                                 * cnst(s)
                                +
                                nth(l, get_val_cnst_id_ex(l)(k)`1)`2 * cnst(s) ^ 2 /
                                 cnst(2))
                                  (envi)
                         ENDIF) = (LAMBDA (s: (hp(0))):
                         (val(nth(l, k)`1) +
                                (cnst(nth(l, k)`2(env_c(0))) +
                                  val(nth(l, get_val_cnst_id_ex(l)(k)`1)`1))
                                 * cnst(s)
                                +
                                nth(l, get_val_cnst_id_ex(l)(k)`1)`2 * cnst(s) ^ 2 /
                                 cnst(2))
                                  (envi)
                         )"))
                      (("1" (replace -1)
                        (("1" (expand "+" 2)
                          (("1" (expand "cnst" 2)
                            (("1" (expand "val" 2)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "^" 2)
                                  (("1"
                                    (expand "div_safe_re")
                                    (("1"
                                      (expand "div_safe")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (derivable 2)
                                          (("1"
                                            (lemma "cnst_lins_def")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "cnst_lins_def")
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skeep 1)
                                            (("3"
                                              (lemma "cnst_lins_def")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (skeep)
                                            (("4"
                                              (assert)
                                              (("4"
                                                (lemma "cnst_lins_def")
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("5"
                                            (skeep)
                                            (("5"
                                              (assert)
                                              (("5"
                                                (lemma "cnst_lins_def")
                                                (("5"
                                                  (inst?)
                                                  (("5"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("6"
                                            (skeep)
                                            (("6"
                                              (assert)
                                              (("6"
                                                (lemma "cnst_lins_def")
                                                (("6"
                                                  (inst?)
                                                  (("6"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (decompose-equality 1)
                        (("1" (lift-if 1)
                          (("1" (flatten)
                            (("1" (split 1)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (hide 2 3 4)
                            (("2" (lemma "cnst_lins_def")
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "l")
                                    (("2"
                                      (reveal +)
                                      (("2"
                                        (hide 3)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skeep)
                          (("3" (lemma "cnst_lins_def")
                            (("3" (inst?) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "env_at_t?" 1)
          (("2" (skeep)
            (("2" (expand "Y_sol_ex" 1)
              (("2" (case "is_cnst?(l)(k) OR is_val_not_in_map?(l)(k)")
                (("1" (assert)
                  (("1" (lift-if 1)
                    (("1" (split 1)
                      (("1" (flatten)
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (lift-if 2)
                    (("2" (split 2)
                      (("1" (flatten) (("1" (assert) nil nil)) nil)
                       ("2" (flatten)
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (expand "sol_at_t?" 1)
            (("3" (skeep)
              (("3" (expand "Y_sol_ex" 1 1)
                (("3"
                  (case "is_cnst?(l)(k) OR is_val_not_in_map?(l)(k)")
                  (("1" (expand "restrict" 1)
                    (("1"
                      (with-tccs
                       (case " (LAMBDA (s: (hp(0))):
                         IF is_cnst?(l)(k) OR is_val_not_in_map?(l)(k)
                           THEN (val(nth(l, k)`1) + nth(l, k)`2 * cnst(s))(envi)
                         ELSE (val(nth(l, k)`1) +
                                (cnst(nth(l, k)`2(env_c(0))) +
                                  val(nth(l, get_val_cnst_id_ex(l)(k)`1)`1))
                                 * cnst(s)
                                +
                                nth(l, get_val_cnst_id_ex(l)(k)`1)`2 * cnst(s) ^ 2 /
                                 cnst(2))
                                  (envi)
                         ENDIF) =  (LAMBDA (s: (hp(0))):
                        (val(nth(l, k)`1) + nth(l, k)`2 * cnst(s))(envi)
                        )"))
                      (("1" (replace -1)
                        (("1" (expand "+" 1)
                          (("1" (expand "*" 1)
                            (("1" (expand "val" 1)
                              (("1"
                                (expand "cnst" 1)
                                (("1"
                                  (typepred " env")
                                  (("1"
                                    (hide -)
                                    (("1"
                                      (expand "deriv" 1 1)
                                      (("1"
                                        (hide 1)
                                        (("1"
                                          (deriv
                                           "(LAMBDA (s: (hp(0))):
               envi(nth(l, k)`1) + nth(l, k)`2(envi) * s)")
                                          (("1"
                                            (reveal +)
                                            (("1"
                                              (decompose-equality -1)
                                              (("1"
                                                (inst -1 "t")
                                                (("1"
                                                  (expand "deriv" -1)
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (typepred "envi")
                                                      (("1"
                                                        (typepred
                                                         " env")
                                                        (("1"
                                                          (expand
                                                           "env_at_t?"
                                                           -1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (reveal
                                                               -)
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3
                                                                 -4
                                                                 -5
                                                                 -6
                                                                 -7
                                                                 -8
                                                                 -9)
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "is_cnst?"
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       -3
                                                                       -4
                                                                       -5
                                                                       -6
                                                                       -7
                                                                       -8
                                                                       -9
                                                                       -10
                                                                       -11)
                                                                      (("1"
                                                                        (typepred
                                                                         "l")
                                                                        (("1"
                                                                          (expand
                                                                           "cnst_lins?"
                                                                           -2)
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "k")
                                                                            (("1"
                                                                              (split
                                                                               -2)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "is_val_not_in_map?"
                                                                     -1)
                                                                    (("2"
                                                                      (typepred
                                                                       "l")
                                                                      (("2"
                                                                        (expand
                                                                         "cnst_lins?"
                                                                         -2)
                                                                        (("2"
                                                                          (inst
                                                                           -2
                                                                           "k")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split
                                                                               -2)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      1))
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (case
                                                                                   "in_map(l)(j2)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "in_map_ex_eq")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2)
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              2))
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -3
                                                                                         "j2")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           4)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1
                                                                                             -2
                                                                                             -3)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -4
                                                                                               "j2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -4
                                                                                                     -5
                                                                                                     -6
                                                                                                     -7)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 -)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "j2")
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     (1
                                                                                                      2))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "not_in_map"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "in_map"
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (skeep)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "i")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           -)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "j2")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "hp"
                                                                                               1)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "hp_noe")
                                                (("2" (inst?) nil nil))
                                                nil)
                                               ("3"
                                                (lemma "hp_dd")
                                                (("3" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "hp_dd")
                                            (("2"
                                              (inst -1 "0")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (decompose-equality 1)
                          (("1" (lift-if 1)
                            (("1" (split -1)
                              (("1"
                                (split 1)
                                (("1" (propax) nil nil)
                                 ("2" (flatten) nil nil))
                                nil)
                               ("2"
                                (split 1)
                                (("1" (propax) nil nil)
                                 ("2" (flatten) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "cnst_lins_def")
                            (("2" (inst?)
                              (("2"
                                (skeep)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "restrict" 2)
                    (("2"
                      (with-tccs
                       (case "(LAMBDA (s: (hp(0))):
                         IF is_cnst?(l)(k) OR is_val_not_in_map?(l)(k)
                           THEN (val(nth(l, k)`1) + nth(l, k)`2 * cnst(s))(envi)
                         ELSE (val(nth(l, k)`1) +
                                (cnst(nth(l, k)`2(env_c(0))) +
                                  val(nth(l, get_val_cnst_id_ex(l)(k)`1)`1))
                                 * cnst(s)
                                +
                                nth(l, get_val_cnst_id_ex(l)(k)`1)`2 * cnst(s) ^ 2 /
                                 cnst(2))
                                  (envi)
                         ENDIF) = (LAMBDA (s: (hp(0))):
                          (val(nth(l, k)`1) +
                                (cnst(nth(l, k)`2(env_c(0))) +
                                  val(nth(l, get_val_cnst_id_ex(l)(k)`1)`1))
                                 * cnst(s)
                                +
                                nth(l, get_val_cnst_id_ex(l)(k)`1)`2 * cnst(s) ^ 2 /
                                 cnst(2))
                                  (envi)
                         )"))
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (expand "+" 2)
                            (("1" (expand "cnst" 2)
                              (("1"
                                (hide 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "^" 1)
                                    (("1"
                                      (expand "*" 1)
                                      (("1"
                                        (expand "val" 1)
                                        (("1"
                                          (expand "div_safe_re" 1)
                                          (("1"
                                            (expand "div_safe" 1)
                                            (("1"
                                              (expand "deriv" 1)
                                              (("1"
                                                (with-tccs
                                                 (deriv
                                                  "LAMBDA (s: (hp(0))):
               envi(nth(l, k)`1) +
                nth(l, get_val_cnst_id_ex(l)(k)`1)`2(envi) * s ^ 2 / 2
                + s * nth(l, k)`2(env_c(0))
                + s * envi(nth(l, get_val_cnst_id_ex(l)(k)`1)`1)"))
                                                (("1"
                                                  (with-tccs
                                                   (decompose-equality
                                                    -1))
                                                  (("1"
                                                    (inst -1 "t")
                                                    (("1"
                                                      (expand
                                                       "deriv"
                                                       -1)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1 -2)
                                                          (("1"
                                                            (typepred
                                                             "l")
                                                            (("1"
                                                              (expand
                                                               "cnst_lins?"
                                                               -2)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "k")
                                                                (("1"
                                                                  (split
                                                                   -2)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (reveal
                                                                       +)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (reveal
                                                                       1)
                                                                      (("2"
                                                                        (case
                                                                         "NOT in_map(l)(j2)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "is_val_not_in_map?"
                                                                             2)
                                                                            (("1"
                                                                              (rewrite
                                                                               "in_map_ex_eq")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   2)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    (("1"
                                                                                      (reveal
                                                                                       +)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (reveal
                                                                               +)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replace
                                                                                   -2
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "quad_cnst?"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (split
                                                                                       -3)
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (case
                                                                                           "get_val_cnst_id_ex(l)(k)`1 = get_index(l)(j2)")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "get_index(l)(j2)")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -4
                                                                                                 3)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "cnst"
                                                                                                   3)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "env_c"
                                                                                                     3
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "env")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "env_at_t?"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -2
                                                                                                               "get_index(l)(j2)")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -4
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -4
                                                                                                                   3
                                                                                                                   lr)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -8
                                                                                                                       3
                                                                                                                       lr)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "val"
                                                                                                                         3)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "cnst"
                                                                                                                           3)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "+"
                                                                                                                             3)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -2
                                                                                                                               3
                                                                                                                               rl)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "Y_sol_ex"
                                                                                                                                 3)
                                                                                                                                (("1"
                                                                                                                                  (lift-if
                                                                                                                                   3)
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     3)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -5)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -7)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "+"
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "cnst"
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "*"
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "val"
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         3)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "is_cnst?"
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -6)
                                                                                                                                              (("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "get_val_cnst_id_ex(l)(k)`1"
                                                                                               "get_index(l)(j2)")
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "get_val_cnst_id_ex(l)(k)")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -3
                                                                                                   "c2"
                                                                                                   "get_index(l)(j2)")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (case
                                                                                           "get_val_cnst_id_ex(l)(k)`1 = get_index(l)(j2)")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "+"
                                                                                                 4)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "cnst"
                                                                                                   4)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "val"
                                                                                                     4)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "env_c"
                                                                                                       4)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "get_index(l)(j2)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "env")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "env_at_t?"
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -2
                                                                                                                     "get_index(l)(j2)")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -4
                                                                                                                       -2
                                                                                                                       lr)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -8
                                                                                                                         4)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "+"
                                                                                                                           4)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "cnst"
                                                                                                                             4)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "val"
                                                                                                                               4)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -2
                                                                                                                                 4
                                                                                                                                 rl)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "Y_sol_ex"
                                                                                                                                   4)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "is_cnst?(l)(get_index(l)(j2)) OR
                                  is_val_not_in_map?(l)(get_index(l)(j2))")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (lift-if
                                                                                                                                         4)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           4)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -6)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -8)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "cnst"
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "*"
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "+"
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "val"
                                                                                                                                                         1)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               3
                                                                                                                                               4
                                                                                                                                               5
                                                                                                                                               6)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 -2
                                                                                                                                                 -3
                                                                                                                                                 -4
                                                                                                                                                 -5
                                                                                                                                                 -6
                                                                                                                                                 -7
                                                                                                                                                 -8
                                                                                                                                                 -9
                                                                                                                                                 -10)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       5)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "is_val_not_in_map?"
                                                                                                                                             2)
                                                                                                                                            (("2"
                                                                                                                                              (split
                                                                                                                                               2)
                                                                                                                                              (("1"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   "in_map_ex_eq")
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -7)
                                                                                                                                                    (("2"
                                                                                                                                                      (hide
                                                                                                                                                       -2
                                                                                                                                                       -3
                                                                                                                                                       -4
                                                                                                                                                       -5
                                                                                                                                                       -6)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide
                                                                                                                                                         -4
                                                                                                                                                         -5)
                                                                                                                                                        (("2"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             " get_val_cnst_id_ex(l)(k)")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -3
                                                                                               "c2"
                                                                                               "get_index(l)(j2)")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (reveal +)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (lemma
                                                         "cnst_lins_def")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (reveal +)
                                                    (("3"
                                                      (lemma
                                                       "cnst_lins_def")
                                                      (("3"
                                                        (hide -2 1)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (inst?)
                                                            (("3"
                                                              (hide 2)
                                                              (("3"
                                                                (hide
                                                                 -3
                                                                 -4)
                                                                (("3"
                                                                  (reveal
                                                                   +)
                                                                  (("3"
                                                                    (hide
                                                                     1)
                                                                    (("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "cnst_lins_def")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (reveal +)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide -1)
                                                  (("3"
                                                    (lemma
                                                     "cnst_lins_def")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (reveal +)
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (hide -1)
                                                  (("4"
                                                    (lemma
                                                     "cnst_lins_def")
                                                    (("4"
                                                      (inst?)
                                                      (("4"
                                                        (reveal +)
                                                        (("4"
                                                          (flatten)
                                                          (("4"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (hide -1)
                                                  (("5"
                                                    (lemma
                                                     "cnst_lins_def")
                                                    (("5"
                                                      (inst?)
                                                      (("5"
                                                        (reveal +)
                                                        (("5"
                                                          (flatten)
                                                          (("5"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (hide -1)
                                                  (("6"
                                                    (lemma
                                                     "cnst_lins_def")
                                                    (("6"
                                                      (inst?)
                                                      (("6"
                                                        (reveal +)
                                                        (("6"
                                                          (flatten)
                                                          (("6"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("7"
                                                  (hide -1)
                                                  (("7"
                                                    (lemma
                                                     "cnst_lins_def")
                                                    (("7"
                                                      (inst?)
                                                      (("7"
                                                        (reveal +)
                                                        (("7"
                                                          (flatten)
                                                          (("7"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("8"
                                                  (hide -1)
                                                  (("8"
                                                    (lemma
                                                     "cnst_lins_def")
                                                    (("8"
                                                      (inst?)
                                                      (("8"
                                                        (reveal +)
                                                        (("8"
                                                          (flatten)
                                                          (("8"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("9"
                                                  (lemma
                                                   "cnst_lins_def")
                                                  (("9"
                                                    (inst?)
                                                    (("9"
                                                      (reveal +)
                                                      (("9"
                                                        (flatten)
                                                        (("9"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("10"
                                                  (lemma
                                                   "cnst_lins_def")
                                                  (("10"
                                                    (inst?)
                                                    (("10"
                                                      (reveal +)
                                                      (("10"
                                                        (flatten)
                                                        (("10"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (with-tccs (decompose-equality 1)) nil
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((solution_odes? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_domain_not_one_element formula-decl nil deriv_domain_def
     analysis)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (deriv_scal1_lam formula-decl nil derivatives_lam analysis)
    (deriv_add_lam formula-decl nil derivatives_lam analysis)
    (deriv_const_lam formula-decl nil derivatives_lam analysis)
    (deriv_id_lam formula-decl nil derivatives_lam analysis)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (env_nat_shift const-decl "real" dl_solution nil)
    (quad_cnst? const-decl "bool" dl_solution nil)
    (in_map_ex_eq formula-decl nil dl_solution nil)
    (Assigns type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (hp_noe formula-decl nil interval_def ODEs)
    (hp_dd formula-decl nil interval_def ODEs)
    (get_index def-decl
     "{n: below(length(l)) | dlvar_index(nth(l, n)`1) = j}" dl_solution
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_scal2_lam formula-decl nil derivatives_lam analysis)
    (deriv_scald2_lam formula-decl nil derivatives_lam analysis)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (deriv_pow_lam formula-decl nil derivatives_lam analysis)
    (expt_x1 formula-decl nil exponentiation nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (expt def-decl "real" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (restrict const-decl "R" restrict nil)
    (is_val_not_in_map? const-decl "bool" dl_solution nil)
    (is_cnst? const-decl "bool" dl_solution nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (cnst_lins? const-decl "bool" dl_solution nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (derivable_const_lam formula-decl nil derivatives_lam analysis)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (env_c const-decl "real" dl_solution nil)
    (get_val_cnst_id_ex const-decl "{vc: [below(length(l)), real] |
   vc`1 /= i AND
    nth(l, i)`2 = cnst(vc`2) + val(nth(l, vc`1)`1) AND
     (FORALL (c: real, m: below(length(l))):
        nth(l, i)`2 = cnst(c) + val(nth(l, m)`1) IMPLIES
         (m = vc`1 AND vc`2 = c))}" dl_solution nil)
    (div_safe_re const-decl "real" hp_def nil)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (val const-decl "real" hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (/= const-decl "boolean" notequal nil)
    (in_map const-decl "bool" hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (hp const-decl "bool" interval_def ODEs)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_safe const-decl "real" reals_safe_ops reals)
    (^ const-decl "real" exponentiation nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (derivable_scal2_lam formula-decl nil derivatives_lam analysis)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam analysis)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (cnst_lins_def formula-decl nil dl_solution nil)
    (Y_sol_ex const-decl "[Environment -> real]" dl_solution nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (cnst_lins_sol_u_TCC1 0
  (cnst_lins_sol_u_TCC1-1 nil 3873295362 ("" (subtype-tcc) nil nil)
   ((dd? const-decl "bool" hp_expr nil)) nil
   (cnst_lins_sol_u subtype "interval_def.hp(0)" "(hp_expr.dd?)")))
 (cnst_lins_sol_u 0
  (cnst_lins_sol_u-2 nil 3882023739
   ("" (skeep)
    (("" (expand "solves_u?" 1)
      (("" (skeep)
        (("" (expand "solution_odes_u?" 1)
          (("" (lemma "cnst_lins_sol")
            (("" (inst?)
              (("" (assert)
                (("" (skeep)
                  (("" (skeep)
                    (("" (expand "solution_odes?" -2)
                      (("" (flatten)
                        (("" (typepred "l")
                          (("" (expand "cnst_lins?" -2)
                            (("" (inst -2 "i_1")
                              ((""
                                (split -2)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (case
                                     "(LAMBDA(s:(S)): ff(i_1)(s)) = (LAMBDA(s:(S)): envi(dlvar_index(nth(l,i_1)`1)) + c*s)")
                                    (("1"
                                      (decompose-equality -1)
                                      (("1"
                                        (inst -1 "t")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "Y_sol_ex" 1)
                                            (("1"
                                              (lift-if 1)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand "val" 1)
                                                    (("1"
                                                      (expand "+")
                                                      (("1"
                                                        (expand "*" 1)
                                                        (("1"
                                                          (replace
                                                           -3
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "cnst"
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide 2 3)
                                                    (("2"
                                                      (expand
                                                       "is_cnst?"
                                                       1)
                                                      (("2"
                                                        (replace -2 1)
                                                        (("2"
                                                          (hide -)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (lemma
                                         "derivs_funs_equal[(dl_solution.S)]")
                                        (("1"
                                          (case
                                           "EXISTS(a,b:(dl_solution.S)): a<b")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst -2 "a" "b" _ _)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst
                                                           -7
                                                           "x"
                                                           "env_at_t(l,ff,envi)(x)")
                                                          (("1"
                                                            (expand
                                                             "sol_at_t?"
                                                             -7)
                                                            (("1"
                                                              (inst
                                                               -7
                                                               "i_1")
                                                              (("1"
                                                                (expand
                                                                 "restrict"
                                                                 -7)
                                                                (("1"
                                                                  (replace
                                                                   -7
                                                                   1)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "cnst"
                                                                       1)
                                                                      (("1"
                                                                        (hide
                                                                         -)
                                                                        (("1"
                                                                          (label
                                                                           "der"
                                                                           1)
                                                                          (("1"
                                                                            (hide
                                                                             "der")
                                                                            (("1"
                                                                              (deriv
                                                                               "(LAMBDA (s: (dl_solution.S)): envi(dlvar_index(nth(l, i_1)`1)) + c * s)")
                                                                              (("1"
                                                                                (reveal
                                                                                 der)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "dd_deriv_domain")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "env_at_t?"
                                                         -6)
                                                        (("2"
                                                          (inst
                                                           -6
                                                           "i_1")
                                                          (("2"
                                                            (inst
                                                             1
                                                             "0")
                                                            (("1"
                                                              (replace
                                                               -6
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -6
                                                                 1
                                                                 rl)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -)
                                                              (("2"
                                                                (typepred
                                                                 "S")
                                                                (("2"
                                                                  (hide
                                                                   -2)
                                                                  (("2"
                                                                    (expand
                                                                     "dd?"
                                                                     -1)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "closed_interval"
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "hp"
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (derivable)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (expand
                                                     "derivable_odes?"
                                                     -5)
                                                    (("3"
                                                      (inst -5 "i_1")
                                                      (("3"
                                                        (expand
                                                         "restrict"
                                                         -5)
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (hide -)
                                                (("2"
                                                  (typepred "S")
                                                  (("2"
                                                    (expand "dd?" -1)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "0"
                                                             "b")
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (hide
                                                                 -2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide -2)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         1
                                                         "0"
                                                         "1")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "dd_noe")
                                          (("2" (inst -1 "S") nil nil))
                                          nil)
                                         ("3"
                                          (lemma "dd_con")
                                          (("3" (inst -1 "S") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "derivable_odes?" -4)
                                    (("2"
                                      (inst -4 "i_1")
                                      (("2"
                                        (expand "restrict" -4)
                                        (("2"
                                          (case
                                           "EXISTS(a,b: (dl_solution.S)): a<b")
                                          (("1"
                                            (skeep -2)
                                            (("1"
                                              (case
                                               "NOT in_map(l)(dlvar_index(v))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -3)
                                                  (("1"
                                                    (case
                                                     "(LAMBDA(s:(dl_solution.S)): ff(i_1)(s)) = (LAMBDA(s:(dl_solution.S)): envi(dlvar_index(nth(l,i_1)`1)) + (c+envi(dlvar_index(v)))*s)")
                                                    (("1"
                                                      (decompose-equality
                                                       -1)
                                                      (("1"
                                                        (inst -1 "t")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           2)
                                                          (("1"
                                                            (expand
                                                             "Y_sol_ex"
                                                             2)
                                                            (("1"
                                                              (lift-if
                                                               2)
                                                              (("1"
                                                                (split
                                                                 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "*"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "val"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "cnst"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "+"
                                                                           1)
                                                                          (("1"
                                                                            (replace
                                                                             -4
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "+"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "cnst"
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "val"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     3)
                                                                    (("2"
                                                                      (expand
                                                                       "is_val_not_in_map?"
                                                                       2)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (rewrite
                                                                           "in_map_ex_eq")
                                                                          (("2"
                                                                            (replace
                                                                             -4)
                                                                            (("2"
                                                                              (hide
                                                                               -2
                                                                               -3
                                                                               -4
                                                                               -5
                                                                               -6
                                                                               -7
                                                                               -8
                                                                               -9)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "derivs_funs_equal[(dl_solution.S)]")
                                                      (("1"
                                                        (skeep -2)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "a"
                                                           "b"
                                                           _
                                                           _)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (hide
                                                                     2
                                                                     3
                                                                     4)
                                                                    (("1"
                                                                      (inst
                                                                       -7
                                                                       "x"
                                                                       "env_at_t(l,ff,envi)(x)")
                                                                      (("1"
                                                                        (expand
                                                                         "sol_at_t?"
                                                                         -7)
                                                                        (("1"
                                                                          (inst
                                                                           -7
                                                                           "i_1")
                                                                          (("1"
                                                                            (expand
                                                                             "restrict"
                                                                             -7)
                                                                            (("1"
                                                                              (replace
                                                                               -7
                                                                               1)
                                                                              (("1"
                                                                                (replace
                                                                                 -2
                                                                                 1)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "env_at_t(l, ff, envi)(x)")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "env_at_t?"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "dlvar_index(v)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "+"
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "cnst"
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "val"
                                                                                               1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 1
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (label
                                                                                                   "ant"
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (label
                                                                                                     "der"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       "ant")
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         "der")
                                                                                                        (("1"
                                                                                                          (deriv
                                                                                                           "(LAMBDA (s: (dl_solution.S)):
                                                                      envi(dlvar_index(nth(l, i_1)`1)) + s * envi(dlvar_index(v)) + s * c)")
                                                                                                          (("1"
                                                                                                            (reveal
                                                                                                             der)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (lemma
                                                                                                             "dd_deriv_domain")
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (reveal
                                                                                             +)
                                                                                            (("2"
                                                                                              (hide
                                                                                               1
                                                                                               2
                                                                                               4)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "not_in_map"
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "in_map"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "i")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "env_at_t?"
                                                                     -6)
                                                                    (("2"
                                                                      (inst
                                                                       -6
                                                                       "i_1")
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "0")
                                                                        (("1"
                                                                          (replace
                                                                           -6
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -)
                                                                          (("2"
                                                                            (typepred
                                                                             "S")
                                                                            (("2"
                                                                              (expand
                                                                               "dd?"
                                                                               -1)
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "closed_interval"
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "hp"
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -)
                                                              (("2"
                                                                (hide
                                                                 2
                                                                 3
                                                                 4)
                                                                (("2"
                                                                  (derivable)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -)
                                                        (("2"
                                                          (hide 2 3 4)
                                                          (("2"
                                                            (lemma
                                                             "dd_noe")
                                                            (("2"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide -)
                                                        (("3"
                                                          (hide 2 3 4)
                                                          (("3"
                                                            (lemma
                                                             "dd_con")
                                                            (("3"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "quad_cnst?"
                                                   -4)
                                                  (("2"
                                                    (case
                                                     "(LAMBDA(s:(dl_solution.S)): ff(i_1)(s)) = (LAMBDA(s:(dl_solution.S)): envi(dlvar_index(nth(l,i_1)`1)) + (c+envi(dlvar_index(v)))*s + nth(l,get_index(l)(dlvar_index(v)))`2(envi)*s^2/2)")
                                                    (("1"
                                                      (decompose-equality
                                                       -1)
                                                      (("1"
                                                        (inst -1 "t")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "Y_sol_ex"
                                                             1)
                                                            (("1"
                                                              (lift-if
                                                               1)
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       -4
                                                                       -7
                                                                       -8
                                                                       -9
                                                                       -10
                                                                       -11)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "is_cnst?"
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -2
                                                                               -3)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "is_val_not_in_map?"
                                                                           -1)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (rewrite
                                                                               "in_map_ex_eq")
                                                                              (("2"
                                                                                (replace
                                                                                 -2)
                                                                                (("2"
                                                                                  (hide
                                                                                   1)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (typepred
                                                                     "get_index(l)(dlvar_index(v))")
                                                                    (("2"
                                                                      (case
                                                                       "get_val_cnst_id_ex(l)(i_1)`1 = get_index(l)(dlvar_index(v))")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (split
                                                                           -8)
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "cnst"
                                                                                 3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "*"
                                                                                   3)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "^"
                                                                                     3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "div_safe_re")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "val"
                                                                                         3)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "+"
                                                                                           3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "div_safe")
                                                                                            (("1"
                                                                                              (case
                                                                                               "t^2 = expt(t,2)")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -5)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -9
                                                                                                       3)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "+"
                                                                                                         3)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "cnst"
                                                                                                           3)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "val"
                                                                                                             3)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "env_c"
                                                                                                               3)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (replace
                                                                               -1)
                                                                              (("2"
                                                                                (expand
                                                                                 "+"
                                                                                 4)
                                                                                (("2"
                                                                                  (expand
                                                                                   "*"
                                                                                   4)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "div_safe_re")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "div_safe")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "cnst")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "val"
                                                                                           4)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "^"
                                                                                             4
                                                                                             4)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "^"
                                                                                               4
                                                                                               3)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -8)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "+"
                                                                                                   4)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "val"
                                                                                                     4)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "env_c")
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -4)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2
                                                                         3
                                                                         4)
                                                                        (("2"
                                                                          (typepred
                                                                           "get_val_cnst_id_ex(l)(i_1)")
                                                                          (("2"
                                                                            (inst
                                                                             -3
                                                                             "c"
                                                                             "get_index(l)(dlvar_index(v))")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  -2
                                                                                  -3
                                                                                  -4
                                                                                  -8
                                                                                  1
                                                                                  2))
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "derivs_funs_equal[(dl_solution.S)]")
                                                      (("1"
                                                        (skeep -3)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "a"
                                                           "b"
                                                           _
                                                           _)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst-cp
                                                                       -9
                                                                       "x"
                                                                       "env_at_t(l,ff,envi)(x)")
                                                                      (("1"
                                                                        (expand
                                                                         "sol_at_t?"
                                                                         -10)
                                                                        (("1"
                                                                          (inst-cp
                                                                           -10
                                                                           "i_1")
                                                                          (("1"
                                                                            (expand
                                                                             "restrict"
                                                                             -11)
                                                                            (("1"
                                                                              (replace
                                                                               -11)
                                                                              (("1"
                                                                                (replace
                                                                                 -3
                                                                                 1)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "env_at_t(l, ff, envi)(x)")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "env_at_t?"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "+"
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "cnst"
                                                                                         1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -2
                                                                                             "get_index(l)(dlvar_index(v))")
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "get_index(l)(dlvar_index(v))")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "val"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -4
                                                                                                     1
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "(LAMBDA(s:(dl_solution.S)): ff(get_index(l)(dlvar_index(v)))(s)) = (LAMBDA(s:(dl_solution.S)): envi(dlvar_index(nth(l,get_index(l)(dlvar_index(v)))`1)) +  nth(l, get_index(l)(dlvar_index(v)))`2(envi)*s)")
                                                                                                      (("1"
                                                                                                        (decompose-equality
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "x")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -3)
                                                                                                              (("1"
                                                                                                                (label
                                                                                                                 "ants"
                                                                                                                 -)
                                                                                                                (("1"
                                                                                                                  (label
                                                                                                                   "der"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       "der")
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         "ants")
                                                                                                                        (("1"
                                                                                                                          (deriv
                                                                                                                           "(LAMBDA (s: (dl_solution.S)):
                                                                      envi(dlvar_index(nth(l, i_1)`1)) +
                                                                       nth(l, get_index(l)(dlvar_index(v)))`2(envi) * s ^ 2 / 2
                                                                       + s * envi(dlvar_index(v))
                                                                       + s * c)")
                                                                                                                          (("1"
                                                                                                                            (reveal
                                                                                                                             "der")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (lemma
                                                                                                                             "dd_deriv_domain")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "S")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         2
                                                                                                         3)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "derivs_funs_equal[(dl_solution.S)]")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "a"
                                                                                                             "b"
                                                                                                             _
                                                                                                             _)
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (skeep)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -14
                                                                                                                         "x!1"
                                                                                                                         "env_at_t(l,ff,envi)(x!1)")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "sol_at_t?"
                                                                                                                           -14)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -14
                                                                                                                             "get_index(l)(dlvar_index(v))")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "restrict"
                                                                                                                               -14)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -14
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (typepred
                                                                                                                                   "get_index(l)(dlvar_index(v))")
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (label
                                                                                                                                       "ants"
                                                                                                                                       -)
                                                                                                                                      (("1"
                                                                                                                                        (label
                                                                                                                                         "der"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (hide
                                                                                                                                           "ants")
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             "der")
                                                                                                                                            (("1"
                                                                                                                                              (deriv
                                                                                                                                               "(LAMBDA (s: (dl_solution.S)):
                                                                                  envi(dlvar_index(v)) + nth(l, get_index(l)(dlvar_index(v)))`2(envi) * s)")
                                                                                                                                              (("1"
                                                                                                                                                (reveal
                                                                                                                                                 "der")
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (reveal
                                                                                                                                                       ants)
                                                                                                                                                      (("1"
                                                                                                                                                        (split
                                                                                                                                                         -9)
                                                                                                                                                        (("1"
                                                                                                                                                          (hide
                                                                                                                                                           -11
                                                                                                                                                           -15
                                                                                                                                                           -16
                                                                                                                                                           -17
                                                                                                                                                           -18)
                                                                                                                                                          (("1"
                                                                                                                                                            (skeep)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "cnst")
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide
                                                                                                                                                           -14
                                                                                                                                                           -15
                                                                                                                                                           -16
                                                                                                                                                           -17
                                                                                                                                                           -18)
                                                                                                                                                          (("2"
                                                                                                                                                            (skeep)
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "cnst"
                                                                                                                                                                 2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "+"
                                                                                                                                                                   2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "val"
                                                                                                                                                                     2)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "env_at_t(l, ff, envi)(x!1)")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "env_at_t?"
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "dlvar_index(v_1)")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (hide
                                                                                                                                                                               -)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "not_in_map")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "in_map"
                                                                                                                                                                                   2)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (skeep)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       1
                                                                                                                                                                                       "i")
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (lemma
                                                                                                                                                 "dd_deriv_domain")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "env_at_t?"
                                                                                                                       -13)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         "0")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -13
                                                                                                                           "get_index(l)(dlvar_index(v))")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -13
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           -)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "S")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "dd?"
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (skeep)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -)
                                                                                                                  (("2"
                                                                                                                    (derivable)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("3"
                                                                                                                  (reveal
                                                                                                                   -)
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -4
                                                                                                                     "get_index(l)(dlvar_index(v))")
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "restrict")
                                                                                                                      (("3"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "0")
                                                                      (("1"
                                                                        (expand
                                                                         "env_at_t?"
                                                                         -8)
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "i_1")
                                                                          (("1"
                                                                            (replace
                                                                             -8)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -)
                                                                        (("2"
                                                                          (typepred
                                                                           "S")
                                                                          (("2"
                                                                            (expand
                                                                             "dd?"
                                                                             -1)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               2
                                                               3)
                                                              (("2"
                                                                (hide
                                                                 -)
                                                                (("2"
                                                                  (derivable)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -)
                                                        (("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (lemma
                                                             "dd_noe")
                                                            (("2"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide -)
                                                        (("3"
                                                          (hide 2 3)
                                                          (("3"
                                                            (lemma
                                                             "dd_con")
                                                            (("3"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (typepred "S")
                                                (("2"
                                                  (expand "dd?" -1)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst
                                                         1
                                                         "0"
                                                         "b")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst 1 "0" "1")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((solves_u? const-decl "bool" dl_solution nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (dLVar type-decl nil hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (cnst_lins? const-decl "bool" dl_solution nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (in_map const-decl "bool" hp_def nil)
    (derivable_scal2_lam formula-decl nil derivatives_lam analysis)
    (deriv_scal2_lam formula-decl nil derivatives_lam analysis)
    (d__84 skolem-const-decl "[(dl_solution.S) -> real]" dl_solution
     nil)
    (not_in_map const-decl "bool" hp_def nil)
    (c skolem-const-decl "real" dl_solution nil)
    (v skolem-const-decl "dLVar" dl_solution nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (is_val_not_in_map? const-decl "bool" dl_solution nil)
    (Assigns type-eq-decl nil hp_def nil)
    (in_map_ex_eq formula-decl nil dl_solution nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (env_c const-decl "real" dl_solution nil)
    (env_nat_shift const-decl "real" dl_solution nil)
    (quad_cnst? const-decl "bool" dl_solution nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam analysis)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (deriv_scald2_lam formula-decl nil derivatives_lam analysis)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (deriv_pow_lam formula-decl nil derivatives_lam analysis)
    (expt_x1 formula-decl nil exponentiation nil)
    (d__85 skolem-const-decl "[(dl_solution.S) -> real]" dl_solution
     nil)
    (d__86 skolem-const-decl "[(dl_solution.S) -> real]" dl_solution
     nil)
    (v_1 skolem-const-decl "dLVar" dl_solution nil)
    (zero_hat formula-decl nil exponent_props reals)
    (nat_exp application-judgement "nat" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def nil)
    (dlvar adt-constructor-decl "[nat -> (dlvar?)]" hp_def nil)
    (get_val_cnst_id_ex const-decl "{vc: [below(length(l)), real] |
   vc`1 /= i AND
    nth(l, i)`2 = cnst(vc`2) + val(nth(l, vc`1)`1) AND
     (FORALL (c: real, m: below(length(l))):
        nth(l, i)`2 = cnst(c) + val(nth(l, m)`1) IMPLIES
         (m = vc`1 AND vc`2 = c))}" dl_solution nil)
    (div_safe_re const-decl "real" hp_def nil)
    (expt def-decl "real" exponentiation nil)
    (div_safe const-decl "real" reals_safe_ops reals)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (get_index def-decl
     "{n: below(length(l)) | dlvar_index(nth(l, n)`1) = j}" dl_solution
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (b skolem-const-decl "posreal" dl_solution nil)
    (dd_con formula-decl nil hp_expr nil)
    (dd_noe formula-decl nil hp_expr nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (TRUE const-decl "bool" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (deriv_domain_not_one_element formula-decl nil deriv_domain_def
     analysis)
    (derivable_const_lam formula-decl nil derivatives_lam analysis)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (deriv_scal1_lam formula-decl nil derivatives_lam analysis)
    (deriv_add_lam formula-decl nil derivatives_lam analysis)
    (deriv_const_lam formula-decl nil derivatives_lam analysis)
    (deriv_id_lam formula-decl nil derivatives_lam analysis)
    (d__83 skolem-const-decl "[(dl_solution.S) -> real]" dl_solution
     nil)
    (dd_deriv_domain formula-decl nil hp_expr nil)
    (restrict const-decl "R" restrict nil)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (c skolem-const-decl "real" dl_solution nil)
    (envi skolem-const-decl "(R)" dl_solution nil)
    (R skolem-const-decl "BoolExpr" dl_solution nil)
    (i_1 skolem-const-decl "below(length(l))" dl_solution nil)
    (ff skolem-const-decl "[below(length(l)) -> [real -> real]]"
     dl_solution nil)
    (l skolem-const-decl "(cnst_lins?)" dl_solution nil)
    (derivable? const-decl "bool" derivatives analysis)
    (S skolem-const-decl
     "{SS: (dd?) | FORALL (x: real): SS(x) IMPLIES hp(0)(x)}"
     dl_solution nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (b skolem-const-decl "posreal" dl_solution nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (derivs_funs_equal formula-decl nil derivative_props analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (is_cnst? const-decl "bool" dl_solution nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (cnst const-decl "real" hp_def nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (val const-decl "real" hp_def nil)
    (Y_sol_ex const-decl "[Environment -> real]" dl_solution nil)
    (dd? const-decl "bool" hp_expr nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (hp const-decl "bool" interval_def ODEs)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cnst_lins_sol formula-decl nil dl_solution nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil)
  (cnst_lins_sol_u-1 nil 3873324691
   ("" (skeep)
    (("" (expand "solves_u?" 1)
      (("" (skeep)
        (("" (expand "solution_odes_u?" 1)
          (("" (lemma "cnst_lins_sol")
            (("" (inst?)
              (("" (assert)
                (("" (skeep)
                  (("" (skeep)
                    (("" (expand "solution_odes?" -2)
                      (("" (flatten)
                        (("" (typepred "l")
                          (("" (expand "cnst_lins?" -2)
                            (("" (inst -2 "i_1")
                              ((""
                                (split -2)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (case
                                     "(LAMBDA(s:(S)): ff(i_1)(s)) = (LAMBDA(s:(S)): envi(nth(l,i_1)`1) + c!1*s)")
                                    (("1"
                                      (decompose-equality -1)
                                      (("1"
                                        (inst -1 "t")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (expand "Y_sol_ex" 1)
                                            (("1"
                                              (lift-if 1)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand "val" 1)
                                                    (("1"
                                                      (expand "+")
                                                      (("1"
                                                        (expand "*" 1)
                                                        (("1"
                                                          (replace
                                                           -3
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "cnst"
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide 2 3)
                                                    (("2"
                                                      (expand
                                                       "is_cnst?"
                                                       1)
                                                      (("2"
                                                        (replace -2 1)
                                                        (("2"
                                                          (hide -)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (lemma
                                         "derivs_funs_equal[(dl_solution.S)]")
                                        (("1"
                                          (case
                                           "EXISTS(a,b:(dl_solution.S)): a<b")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst
                                               -2
                                               "a!1"
                                               "b!1"
                                               _
                                               _)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst
                                                           -7
                                                           "x!1"
                                                           "env_at_t(l,ff,envi)(x!1)")
                                                          (("1"
                                                            (expand
                                                             "sol_at_t?"
                                                             -7)
                                                            (("1"
                                                              (inst
                                                               -7
                                                               "i_1")
                                                              (("1"
                                                                (expand
                                                                 "restrict"
                                                                 -7)
                                                                (("1"
                                                                  (replace
                                                                   -7
                                                                   1)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "cnst"
                                                                       1)
                                                                      (("1"
                                                                        (hide
                                                                         -)
                                                                        (("1"
                                                                          (label
                                                                           "der"
                                                                           1)
                                                                          (("1"
                                                                            (hide
                                                                             "der")
                                                                            (("1"
                                                                              (deriv
                                                                               "(LAMBDA (s: (dl_solution.S)): envi(nth(l, i_1)`1) + c!1 * s)")
                                                                              (("1"
                                                                                (reveal
                                                                                 der)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "dd_deriv_domain")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "env_at_t?"
                                                         -6)
                                                        (("2"
                                                          (inst
                                                           -6
                                                           "i_1")
                                                          (("2"
                                                            (inst
                                                             1
                                                             "0")
                                                            (("1"
                                                              (replace
                                                               -6
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -6
                                                                 1
                                                                 rl)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -)
                                                              (("2"
                                                                (typepred
                                                                 "S")
                                                                (("2"
                                                                  (hide
                                                                   -2)
                                                                  (("2"
                                                                    (expand
                                                                     "dd?"
                                                                     -1)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "closed_interval"
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "hp"
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -)
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (derivable)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (expand
                                                     "derivable_odes?"
                                                     -5)
                                                    (("3"
                                                      (inst -5 "i_1")
                                                      (("3"
                                                        (expand
                                                         "restrict"
                                                         -5)
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (hide -)
                                                (("2"
                                                  (typepred "S")
                                                  (("2"
                                                    (expand "dd?" -1)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "0"
                                                             "b!1")
                                                            (("1"
                                                              (hide -2)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (hide
                                                                 -2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide -2)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         1
                                                         "0"
                                                         "1")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "dd_noe")
                                          (("2" (inst -1 "S") nil nil))
                                          nil)
                                         ("3"
                                          (lemma "dd_con")
                                          (("3" (inst -1 "S") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "derivable_odes?" -4)
                                    (("2"
                                      (inst -4 "i_1")
                                      (("2"
                                        (expand "restrict" -4)
                                        (("2"
                                          (case
                                           "EXISTS(a,b: (dl_solution.S)): a<b")
                                          (("1"
                                            (skeep -2)
                                            (("1"
                                              (case
                                               "NOT in_map(l)(j2)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -3)
                                                  (("1"
                                                    (case
                                                     "(LAMBDA(s:(dl_solution.S)): ff(i_1)(s)) = (LAMBDA(s:(dl_solution.S)): envi(nth(l,i_1)`1) + (c2+envi(j2))*s)")
                                                    (("1"
                                                      (decompose-equality
                                                       -1)
                                                      (("1"
                                                        (inst -1 "t")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           2)
                                                          (("1"
                                                            (expand
                                                             "Y_sol_ex"
                                                             2)
                                                            (("1"
                                                              (lift-if
                                                               2)
                                                              (("1"
                                                                (split
                                                                 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "*"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "val"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "cnst"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "+"
                                                                           1)
                                                                          (("1"
                                                                            (replace
                                                                             -4
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "+"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "cnst"
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "val"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     3)
                                                                    (("2"
                                                                      (expand
                                                                       "is_val_not_in_map?"
                                                                       2)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (rewrite
                                                                           "in_map_ex_eq")
                                                                          (("2"
                                                                            (replace
                                                                             -4)
                                                                            (("2"
                                                                              (hide
                                                                               -2
                                                                               -3
                                                                               -4
                                                                               -5
                                                                               -6
                                                                               -7
                                                                               -8
                                                                               -9)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "derivs_funs_equal[(dl_solution.S)]")
                                                      (("1"
                                                        (skeep -2)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "a!1"
                                                           "b!1"
                                                           _
                                                           _)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (hide
                                                                     2
                                                                     3
                                                                     4)
                                                                    (("1"
                                                                      (inst
                                                                       -7
                                                                       "x!1"
                                                                       "env_at_t(l,ff,envi)(x!1)")
                                                                      (("1"
                                                                        (expand
                                                                         "sol_at_t?"
                                                                         -7)
                                                                        (("1"
                                                                          (inst
                                                                           -7
                                                                           "i_1")
                                                                          (("1"
                                                                            (expand
                                                                             "restrict"
                                                                             -7)
                                                                            (("1"
                                                                              (replace
                                                                               -7
                                                                               1)
                                                                              (("1"
                                                                                (replace
                                                                                 -2
                                                                                 1)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "env_at_t(l, ff, envi)(x!1)")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "env_at_t?"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "j2")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "+"
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "cnst"
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "val"
                                                                                               1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 1
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (label
                                                                                                   "ant"
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (label
                                                                                                     "der"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       "ant")
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         "der")
                                                                                                        (("1"
                                                                                                          (deriv
                                                                                                           "(LAMBDA (s: (dl_solution.S)):
                envi(nth(l, i_1)`1) + s * envi(j2) + s * c2)")
                                                                                                          (("1"
                                                                                                            (reveal
                                                                                                             der)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (lemma
                                                                                                             "dd_deriv_domain")
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (reveal
                                                                                             +)
                                                                                            (("2"
                                                                                              (hide
                                                                                               1
                                                                                               2
                                                                                               4)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "not_in_map"
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "in_map"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "i")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "env_at_t?"
                                                                     -6)
                                                                    (("2"
                                                                      (inst
                                                                       -6
                                                                       "i_1")
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "0")
                                                                        (("1"
                                                                          (replace
                                                                           -6
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -)
                                                                          (("2"
                                                                            (typepred
                                                                             "S")
                                                                            (("2"
                                                                              (expand
                                                                               "dd?"
                                                                               -1)
                                                                              (("2"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "closed_interval"
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "hp"
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide -)
                                                              (("2"
                                                                (hide
                                                                 2
                                                                 3
                                                                 4)
                                                                (("2"
                                                                  (derivable)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -)
                                                        (("2"
                                                          (hide 2 3 4)
                                                          (("2"
                                                            (lemma
                                                             "dd_noe")
                                                            (("2"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide -)
                                                        (("3"
                                                          (hide 2 3 4)
                                                          (("3"
                                                            (lemma
                                                             "dd_con")
                                                            (("3"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "quad_cnst?"
                                                   -4)
                                                  (("2"
                                                    (case
                                                     "(LAMBDA(s:(dl_solution.S)): ff(i_1)(s)) = (LAMBDA(s:(dl_solution.S)): envi(nth(l,i_1)`1) + (c2+envi(j2))*s + nth(l,get_index(l)(j2))`2(envi)*s^2/2)")
                                                    (("1"
                                                      (decompose-equality
                                                       -1)
                                                      (("1"
                                                        (inst -1 "t")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "Y_sol_ex"
                                                             1)
                                                            (("1"
                                                              (lift-if
                                                               1)
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       -4
                                                                       -7
                                                                       -8
                                                                       -9
                                                                       -10
                                                                       -11)
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "is_cnst?"
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -2
                                                                               -3)
                                                                              (("1"
                                                                                (hide
                                                                                 -2)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "is_val_not_in_map?"
                                                                           -1)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (rewrite
                                                                               "in_map_ex_eq")
                                                                              (("2"
                                                                                (replace
                                                                                 -2)
                                                                                (("2"
                                                                                  (hide
                                                                                   1)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (typepred
                                                                     "get_index(l)(j2)")
                                                                    (("2"
                                                                      (case
                                                                       "get_val_cnst_id_ex(l)(i_1)`1 = get_index(l)(j2)")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (split
                                                                           -8)
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "cnst"
                                                                                 3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "*"
                                                                                   3)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "^"
                                                                                     3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "/"
                                                                                       3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "val"
                                                                                         3)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "+"
                                                                                           3)
                                                                                          (("1"
                                                                                            (case
                                                                                             "t^2 = expt(t,2)")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -5)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -9
                                                                                                     3)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "+"
                                                                                                       3)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "cnst"
                                                                                                         3)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "val"
                                                                                                           3)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "env_c"
                                                                                                             3)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (replace
                                                                               -1)
                                                                              (("2"
                                                                                (expand
                                                                                 "+"
                                                                                 4)
                                                                                (("2"
                                                                                  (expand
                                                                                   "*"
                                                                                   4)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "/"
                                                                                     4)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "cnst"
                                                                                       4)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "val"
                                                                                         4)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "^"
                                                                                           4
                                                                                           4)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "^"
                                                                                             4
                                                                                             3)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -8)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "+"
                                                                                                 4)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "cnst"
                                                                                                   4)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "val"
                                                                                                     4)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "env_c")
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -4)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2
                                                                         3
                                                                         4)
                                                                        (("2"
                                                                          (typepred
                                                                           "  get_val_cnst_id_ex(l)(i_1)")
                                                                          (("2"
                                                                            (inst
                                                                             -3
                                                                             "c2"
                                                                             "get_index(l)(j2)")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "derivs_funs_equal[(dl_solution.S)]")
                                                      (("1"
                                                        (skeep -3)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "a!1"
                                                           "b!1"
                                                           _
                                                           _)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst-cp
                                                                       -9
                                                                       "x!1"
                                                                       "env_at_t(l,ff,envi)(x!1)")
                                                                      (("1"
                                                                        (expand
                                                                         "sol_at_t?"
                                                                         -10)
                                                                        (("1"
                                                                          (inst-cp
                                                                           -10
                                                                           "i_1")
                                                                          (("1"
                                                                            (expand
                                                                             "restrict"
                                                                             -11)
                                                                            (("1"
                                                                              (replace
                                                                               -11)
                                                                              (("1"
                                                                                (replace
                                                                                 -3
                                                                                 1)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "env_at_t(l, ff, envi)(x!1)")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "env_at_t?"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "+"
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "cnst"
                                                                                         1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -2
                                                                                             "get_index(l)(j2)")
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "get_index(l)(j2)")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "val"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -4
                                                                                                     1
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "(LAMBDA(s:(dl_solution.S)): ff(get_index(l)(j2))(s)) = (LAMBDA(s:(dl_solution.S)): envi(nth(l,get_index(l)(j2))`1) +  nth(l, get_index(l)(j2))`2(envi)*s)")
                                                                                                      (("1"
                                                                                                        (decompose-equality
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "x!1")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -3)
                                                                                                              (("1"
                                                                                                                (label
                                                                                                                 "ants"
                                                                                                                 -)
                                                                                                                (("1"
                                                                                                                  (label
                                                                                                                   "der"
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       "der")
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         "ants")
                                                                                                                        (("1"
                                                                                                                          (deriv
                                                                                                                           "(LAMBDA (s: (dl_solution.S)):
                envi(nth(l, i_1)`1) +
                 nth(l, get_index(l)(j2))`2(envi) * s ^ 2 / 2
                 + s * envi(j2)
                 + s * c2)")
                                                                                                                          (("1"
                                                                                                                            (reveal
                                                                                                                             "der")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (lemma
                                                                                                                             "dd_deriv_domain")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "S")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         2
                                                                                                         3)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "derivs_funs_equal[(dl_solution.S)]")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "a!1"
                                                                                                             "b!1"
                                                                                                             _
                                                                                                             _)
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (skeep)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -14
                                                                                                                         "x!2"
                                                                                                                         "env_at_t(l,ff,envi)(x!2)")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "sol_at_t?"
                                                                                                                           -14)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -14
                                                                                                                             "get_index(l)(j2)")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "restrict"
                                                                                                                               -14)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -14
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (typepred
                                                                                                                                   "get_index(l)(j2)")
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (label
                                                                                                                                       "ants"
                                                                                                                                       -)
                                                                                                                                      (("1"
                                                                                                                                        (label
                                                                                                                                         "der"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (hide
                                                                                                                                           "ants")
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             "der")
                                                                                                                                            (("1"
                                                                                                                                              (deriv
                                                                                                                                               "(LAMBDA (s: (dl_solution.S)):
                envi(j2) + nth(l, get_index(l)(j2))`2(envi) * s)")
                                                                                                                                              (("1"
                                                                                                                                                (reveal
                                                                                                                                                 "der")
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (reveal
                                                                                                                                                       ants)
                                                                                                                                                      (("1"
                                                                                                                                                        (split
                                                                                                                                                         -9)
                                                                                                                                                        (("1"
                                                                                                                                                          (hide
                                                                                                                                                           -11
                                                                                                                                                           -15
                                                                                                                                                           -16
                                                                                                                                                           -17
                                                                                                                                                           -18)
                                                                                                                                                          (("1"
                                                                                                                                                            (skeep)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "cnst")
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide
                                                                                                                                                           -14
                                                                                                                                                           -15
                                                                                                                                                           -16
                                                                                                                                                           -17
                                                                                                                                                           -18)
                                                                                                                                                          (("2"
                                                                                                                                                            (skeep)
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "cnst"
                                                                                                                                                                 2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "+"
                                                                                                                                                                   2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "val"
                                                                                                                                                                     2)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "env_at_t(l, ff, envi)(x!2)")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "env_at_t?"
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "j4")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replace
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (hide
                                                                                                                                                                               -)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "not_in_map")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "in_map"
                                                                                                                                                                                   2)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (skeep)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       1
                                                                                                                                                                                       "i")
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (lemma
                                                                                                                                                 "dd_deriv_domain")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "env_at_t?"
                                                                                                                       -13)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         "0")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -13
                                                                                                                           "get_index(l)(j2)")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -13
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           -)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "S")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "dd?"
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (skeep)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -)
                                                                                                                  (("2"
                                                                                                                    (derivable)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("3"
                                                                                                                  (reveal
                                                                                                                   -)
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -4
                                                                                                                     "get_index(l)(j2)")
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "restrict")
                                                                                                                      (("3"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "0")
                                                                      (("1"
                                                                        (expand
                                                                         "env_at_t?"
                                                                         -8)
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "i_1")
                                                                          (("1"
                                                                            (replace
                                                                             -8)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -)
                                                                        (("2"
                                                                          (typepred
                                                                           "S")
                                                                          (("2"
                                                                            (expand
                                                                             "dd?"
                                                                             -1)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               2
                                                               3)
                                                              (("2"
                                                                (hide
                                                                 -)
                                                                (("2"
                                                                  (derivable)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -)
                                                        (("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (lemma
                                                             "dd_noe")
                                                            (("2"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide -)
                                                        (("3"
                                                          (hide 2 3)
                                                          (("3"
                                                            (lemma
                                                             "dd_con")
                                                            (("3"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (typepred "S")
                                                (("2"
                                                  (expand "dd?" -1)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst
                                                         1
                                                         "0"
                                                         "b!1")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst 1 "0" "1")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((solution_odes_u? const-decl "bool" hp_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (in_map const-decl "bool" hp_def nil)
    (derivable_scal2_lam formula-decl nil derivatives_lam analysis)
    (deriv_scal2_lam formula-decl nil derivatives_lam analysis)
    (not_in_map const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (derivable_scald2_lam formula-decl nil derivatives_lam analysis)
    (derivable_pow_lam formula-decl nil derivatives_lam analysis)
    (deriv_scald2_lam formula-decl nil derivatives_lam analysis)
    (deriv_pow_lam formula-decl nil derivatives_lam analysis)
    (zero_hat formula-decl nil exponent_props reals)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (dd_con formula-decl nil hp_expr nil)
    (dd_noe formula-decl nil hp_expr nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (bijective? const-decl "bool" functions nil)
    (deriv_domain_not_one_element formula-decl nil deriv_domain_def
     analysis)
    (derivable_const_lam formula-decl nil derivatives_lam analysis)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_scal1_lam formula-decl nil derivatives_lam analysis)
    (deriv_add_lam formula-decl nil derivatives_lam analysis)
    (deriv_const_lam formula-decl nil derivatives_lam analysis)
    (deriv_id_lam formula-decl nil derivatives_lam analysis)
    (dd_deriv_domain formula-decl nil hp_expr nil)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (derivs_funs_equal formula-decl nil derivative_props analysis)
    (cnst const-decl "real" hp_def nil)
    (val const-decl "real" hp_def nil)
    (dd? const-decl "bool" hp_expr nil)
    (hp const-decl "bool" interval_def ODEs)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (solution_domain_ax_cnst_imp_zip 0
  (solution_domain_ax_cnst_imp_zip-1 nil 3873283468
   ("" (skeep)
    (("" (lemma "dl_solution_domain")
      (("" (inst?)
        (("" (assert)
          (("" (inst -1 "Y_sol_ex(ode)")
            (("" (lemma "cnst_lins_sol_u") (("" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dl_solution_domain formula-decl nil dl_solution nil)
    (cnst_lins_sol_u formula-decl nil dl_solution nil)
    (R skolem-const-decl "BoolExpr" dl_solution nil)
    (ode skolem-const-decl "(cnst_lins?)" dl_solution nil)
    (Y_sol_ex const-decl "[Environment -> real]" dl_solution nil)
    (hp const-decl "bool" interval_def ODEs)
    (solves_u? const-decl "bool" dl_solution nil)
    (dd? const-decl "bool" hp_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (cnst_lins? const-decl "bool" dl_solution nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (solution_domain_ax_cnst_imp_zip_no_hyp 0
  (solution_domain_ax_cnst_imp_zip_no_hyp-1 nil 3881748114
   ("" (skeep)
    (("" (use "solution_domain_ax_cnst_imp_zip" ("R" "DLTRUE"))
      (("" (beta)
        (("" (flatten)
          (("" (split -1)
            (("1" (hide -2) (("1" (grind) nil nil)) nil)
             ("2" (hide 2) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((solution_domain_ax_cnst_imp_zip formula-decl nil dl_solution nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (TRUE const-decl "bool" booleans nil)
    (cnst_lins? const-decl "bool" dl_solution nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (DLFORALL const-decl "bool" bool_expr nil)
    (DLIMPLIES const-decl "bool" bool_expr nil)
    (DLAND const-decl "bool" bool_expr nil)
    (>= const-decl "BoolExpr" bool_expr nil)
    (cnst const-decl "real" hp_def nil)
    (UPTO const-decl "BoolExpr" bool_expr nil)
    (zs const-decl "MapExprInj" dl_solution nil)
    (\|- const-decl "bool" dynamic_logic nil)
    (ALLRUNS const-decl "bool" bool_expr nil)
    (iterate_left const-decl "T" for_iterate structures)
    (for const-decl "T" for_iterate structures)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak)))