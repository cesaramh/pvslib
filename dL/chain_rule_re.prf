(chain_rule_re
 (env_2_vec_TCC1 0
  (env_2_vec_TCC1-1 nil 3798369964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length_singleton formula-decl nil more_list_props structures))
   nil
   (env_2_vec subtype "(: chain_rule_re.env(0) :)"
    "matrices.VectorN((number_fields.+)(1, chain_rule_re.k))")))
 (env_2_vec_TCC2 0
  (env_2_vec_TCC2-1 nil 3798369964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (env_2_vec subtype "(number_fields.-)(chain_rule_re.k, 1)" "nat")))
 (env_2_vec_TCC3 0
  (env_2_vec_TCC3-1 nil 3798369964 ("" (termination-tcc) nil nil) nil
   nil
   (env_2_vec termination
    "chain_rule_re.env_2_vec((number_fields.-)(chain_rule_re.k, 1), chain_rule_re.shift_d(chain_rule_re.env))"
    "nil")))
 (env_2_vec_TCC4 0
  (env_2_vec_TCC4-1 nil 3798369964
   ("" (skeep) (("" (expand "length" 2 1) (("" (assert) nil nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (env_2_vec subtype
    "list_adt[real].cons(chain_rule_re.env(0), chain_rule_re.env_2_vec((number_fields.-)(chain_rule_re.k, 1), chain_rule_re.shift_d(chain_rule_re.env)))"
    "matrices.VectorN((number_fields.+)(1, chain_rule_re.k))")))
 (env_2_vec_nth_TCC1 0
  (env_2_vec_nth_TCC1-1 nil 3798369964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (env_2_vec_nth subtype "chain_rule_re.i"
    "below[length[real](env_2_vec(k, env))]")))
 (env_2_vec_nth 0
  (env_2_vec_nth-1 nil 3798369995
   ("" (induct "k")
    (("1" (skeep) (("1" (typepred "i") (("1" (grind) nil nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "i=0")
          (("1" (replace -1)
            (("1" (expand "nth" 1)
              (("1" (expand "env_2_vec") (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (expand "env_2_vec" 2 1)
            (("2" (expand "nth" 2 1)
              (("2" (assert)
                (("2" (inst -1 "shift_d(env)" "i-1")
                  (("2" (expand "shift_d" -1 2)
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (typepred "i") (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (shift_d const-decl "Environment" chain_rule_re nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (VectorN type-eq-decl nil matrices matrices)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil))
   shostak))
 (projv_dd 0
  (projv_dd-1 nil 3852126491
   ("" (skeep)
    (("" (typepred "P")
      (("" (lemma "dd_norm_equiv[1+k]")
        (("" (inst -1 "projv(k,P)")
          (("" (assert)
            (("" (hide 2)
              (("" (inst 1 "norm_inf(1+k)")
                (("" (expand "ddl_dom?" -1)
                  (("" (expand "deriv_domain?")
                    (("" (skeep)
                      (("" (typepred "p")
                        (("" (hide -1)
                          (("" (expand "projv" -2)
                            (("" (skeep)
                              ((""
                                (inst -4 "0")
                                ((""
                                  (expand "not_one_element?")
                                  ((""
                                    (expand "not_one_element?")
                                    ((""
                                      (inst -4 "car(p)")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (typepred "y")
                                          (("1"
                                            (case "car(p) > y")
                                            (("1"
                                              (inst
                                               1
                                               "-min(e!1,car(p)-y)/2*e(1+k,0)")
                                              (("1"
                                                (lemma
                                                 "norm_inf_e_scal")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (hide
                                                         -1
                                                         -3
                                                         -4
                                                         -5
                                                         -6)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (split 1)
                                                (("1"
                                                  (typepred
                                                   "-min(e!1, car[real](p) - y) / 2 * e(1 + k, 0)"
                                                   "e(1 + k, 0)")
                                                  (("1"
                                                    (replace -4)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (case
                                                     " -min(e!1, car[real](p) - y) / 2 * e(1 + k, 0) = zero_vec(1 + k)")
                                                    (("1"
                                                      (expand
                                                       "zero_vec"
                                                       -1)
                                                      (("1"
                                                        (expand "*" -1)
                                                        (("1"
                                                          (expand
                                                           "e"
                                                           -1)
                                                          (("1"
                                                            (expand
                                                             "scal"
                                                             -1)
                                                            (("1"
                                                              (decompose-equality
                                                               -1)
                                                              (("1"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 -4)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand "projv" 1)
                                                  (("3"
                                                    (inst
                                                     1
                                                     "LAMBDA(i:nat): IF i=0 THEN car(p) + -min(e!1, car[real](p) - y) / 2 ELSE env(i) ENDIF")
                                                    (("1"
                                                      (lemma
                                                       "env_2_vec_nth")
                                                      (("1"
                                                        (lemma
                                                         "list_extensionality[real]")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (typepred
                                                                   "p + -min(e!1, car[real](p) - y) / 2 * e(1 + k, 0)"
                                                                   "p"
                                                                   "e(1+k,0)")
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "max"
                                                                       -)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "n")
                                                                    (("2"
                                                                      (case
                                                                       "n=0")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "nth"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "env_2_vec")
                                                                            (("1"
                                                                              (expand
                                                                               "env_2_vec")
                                                                              (("1"
                                                                                (expand
                                                                                 "env_2_vec")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         -2
                                                                         "k"
                                                                         "LAMBDA (i: nat): IF i = 0 THEN car(p) + -min(e!1, car[real](p) - y) / 2 ELSE env(i) ENDIF"
                                                                         "n")
                                                                        (("2"
                                                                          (replace
                                                                           -2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "nth(p + -min(e!1, car[real](p) - y) / 2 * e(1 + k, 0), n) = nth(p,n)")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "env_2_vec_nth")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "k"
                                                                                       "env"
                                                                                       "n")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         2
                                                                                         rl)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -8
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "nth_sum")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "n")
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "nth_dist")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "nth_e")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "1+k"
                                                                                                 "0"
                                                                                                 "n")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -2
                                                                                                     "e(1+k,0)"
                                                                                                     "-min(e!1, car[real](p) - y) / 2"
                                                                                                     "n")
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "connected?"
                                                         -5)
                                                        (("2"
                                                          (expand
                                                           "proj"
                                                           -2)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               "env"
                                                               "env!1"
                                                               "LAMBDA (i: nat): IF i = 0 THEN car[real](p) + -min(e!1, car[real](p) - y) / 2 ELSE env(i) ENDIF")
                                                              (("2"
                                                                (expand
                                                                 "between?"
                                                                 1)
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (case
                                                                       "i_1=0")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (lemma
                                                                               "env_2_vec_nth")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "k"
                                                                                 "env"
                                                                                 "0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "e!1")
                                                                                (("2"
                                                                                  (replace
                                                                                   -5
                                                                                   1)
                                                                                  (("2"
                                                                                    (case
                                                                                     "env(0) = car[real](p)")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "env_2_vec_nth")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "k"
                                                                                           "env"
                                                                                           "0")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -8
                                                                                               -1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "car(p) < y")
                                              (("1"
                                                (hide 1)
                                                (("1"
                                                  (inst
                                                   1
                                                   "min(e!1,y-car(p))/2*e(1+k,0)")
                                                  (("1"
                                                    (lemma
                                                     "norm_inf_e_scal")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide
                                                             -1
                                                             -3
                                                             -4
                                                             -5
                                                             -6)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (split 1)
                                                    (("1"
                                                      (typepred
                                                       "min(e!1, y - car[real](p)) / 2 * e(1 + k, 0)"
                                                       "e(1 + k, 0)")
                                                      (("1"
                                                        (replace -4)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         " min(e!1, y - car[real](p)) / 2 * e(1 + k, 0) = zero_vec(1 + k)")
                                                        (("1"
                                                          (expand
                                                           "zero_vec"
                                                           -1)
                                                          (("1"
                                                            (expand
                                                             "*"
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "e"
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "scal"
                                                                 -1)
                                                                (("1"
                                                                  (decompose-equality
                                                                   -1)
                                                                  (("1"
                                                                    (hide
                                                                     -2
                                                                     -3
                                                                     -4)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "projv"
                                                       1)
                                                      (("3"
                                                        (inst
                                                         1
                                                         "LAMBDA(i:nat): IF i=0 THEN car(p) + min(e!1, y - car[real](p)) / 2 ELSE env(i) ENDIF")
                                                        (("1"
                                                          (lemma
                                                           "env_2_vec_nth")
                                                          (("1"
                                                            (lemma
                                                             "list_extensionality[real]")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (typepred
                                                                         "p + min(e!1, y - car[real](p)) / 2 * e(1 + k, 0)"
                                                                         "p"
                                                                         "e(1+k,0)")
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "max"
                                                                             -)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (typepred
                                                                         "n")
                                                                        (("2"
                                                                          (case
                                                                           "n=0")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "env_2_vec")
                                                                                (("1"
                                                                                  (expand
                                                                                   "env_2_vec")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "env_2_vec")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -2
                                                                             "k"
                                                                             "LAMBDA (i: nat): IF i = 0 THEN car(p) + min(e!1, y - car[real](p)) / 2 ELSE env(i) ENDIF"
                                                                             "n")
                                                                            (("2"
                                                                              (replace
                                                                               -2)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (case
                                                                                   "nth(p + min(e!1, y - car[real](p)) / 2 * e(1 + k, 0), n) = nth(p,n)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "env_2_vec_nth")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "k"
                                                                                           "env"
                                                                                           "n")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             2
                                                                                             rl)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -8
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "nth_sum")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "n")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "nth_dist")
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "nth_e")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "1+k"
                                                                                                     "0"
                                                                                                     "n")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -2
                                                                                                         "e(1+k,0)"
                                                                                                         " min(e!1, y - car[real](p)) / 2 "
                                                                                                         "n")
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "connected?"
                                                             -5)
                                                            (("2"
                                                              (expand
                                                               "proj"
                                                               -2)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (inst
                                                                   -5
                                                                   "env"
                                                                   "env!1"
                                                                   "LAMBDA (i: nat): IF i = 0 THEN car[real](p) + min(e!1, y - car[real](p)) / 2 ELSE env(i) ENDIF")
                                                                  (("2"
                                                                    (expand
                                                                     "between?"
                                                                     1)
                                                                    (("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (case
                                                                           "i_1=0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "env_2_vec_nth")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "k"
                                                                                     "env"
                                                                                     "0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "proj" 1)
                                        (("2"
                                          (inst 1 "env")
                                          (("2"
                                            (lemma "env_2_vec_nth")
                                            (("2"
                                              (inst -1 "k" "env" "0")
                                              (("2"
                                                (replace -3 -1)
                                                (("2"
                                                  (expand "nth" -1)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (projv const-decl "bool" chain_rule_re nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (not_one_element? const-decl "bool" differentiation nil)
    (proj const-decl "bool" differentiation nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (k skolem-const-decl "nat" chain_rule_re nil)
    (p skolem-const-decl "(projv(k, P))" chain_rule_re nil)
    (env!1 skolem-const-decl "(P)" chain_rule_re nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (< const-decl "bool" reals nil)
    (y skolem-const-decl "(proj(0)(P))" chain_rule_re nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (e!1 skolem-const-decl "posreal" chain_rule_re nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (below type-eq-decl nil naturalnumbers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_inf_e_scal formula-decl nil norms mv_analysis)
    (between? const-decl "bool" differentiation nil)
    (env!1 skolem-const-decl "(P)" chain_rule_re nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (env_2_vec_nth formula-decl nil chain_rule_re nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (nth def-decl "T" list_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (below type-eq-decl nil nat_types nil)
    (nth_sum formula-decl nil vector_arithmetic mv_analysis)
    (nth_e formula-decl nil vector_arithmetic mv_analysis)
    (nth_dist formula-decl nil vector_arithmetic mv_analysis)
    (list_extensionality formula-decl nil more_list_props structures)
    (env skolem-const-decl "(P)" chain_rule_re nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (connected? const-decl "bool" differentiation nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (norm? const-decl "bool" norms mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (dd_norm_equiv formula-decl nil derivative_domain_multi
     mv_analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (proj_projv_TCC1 0
  (proj_projv_TCC1-1 nil 3806834657 ("" (subtype-tcc) nil nil)
   ((proj const-decl "bool" differentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (proj_projv subtype "chain_rule_re.i"
    "{ii: naturalnumbers.nat | reals.<(ii, (number_fields.+)(1, chain_rule_re.k))}")))
 (proj_projv_TCC2 0
  (proj_projv_TCC2-1 nil 3806834657
   ("" (skeep*)
    (("" (typepred "p + c * e(1 + k, i)" "p" "c*e(1+k,i)" "e(1+k,i)")
      (("" (hide -1 -3 -6 -8)
        (("" (replace -2)
          (("" (replace -4)
            (("" (replace -5)
              (("" (expand "max") (("" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (< const-decl "bool" reals nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (connected? const-decl "bool" differentiation nil)
    (projv const-decl "bool" chain_rule_re nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (proj_projv subtype
    "(matrices.+)(chain_rule_re.p, matrices.*(chain_rule_re.c, vector_arithmetic.e((number_fields.+)(1, chain_rule_re.k), chain_rule_re.i)))"
    "matrices.VectorN((number_fields.+)(1, chain_rule_re.k))")))
 (proj_projv 0
  (proj_projv-1 nil 3806834751
   ("" (skeep*)
    (("" (expand "projv" 1 1)
      (("" (expand "proj" -1 1)
        (("" (skeep)
          (("" (typepred "p")
            (("" (expand "projv" -3)
              (("" (skeep)
                (("" (typepred "P")
                  (("" (hide -2)
                    (("" (expand "connected?" -1)
                      ((""
                        (inst 1
                         "LAMBDA(x:nat): IF x=i THEN env(i) ELSE env!1(x) ENDIF")
                        (("1" (assert)
                          (("1" (lemma "env_2_vec_nth")
                            (("1" (lemma "list_extensionality[real]")
                              (("1"
                                (inst
                                 -1
                                 "env_2_vec(k,
                        LAMBDA (x: nat): IF x = i THEN env(i) ELSE env!1(x) ENDIF)"
                                 " p + c * e(1 + k, i)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred
                                         "env_2_vec(k,
                                   LAMBDA (x: nat):
                                     IF x = i THEN env(i) ELSE env!1(x) ENDIF)")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (typepred
                                                 "p + c * e(1 + k, i)"
                                                 "p"
                                                 "c*e(1+k,i)"
                                                 "e(1+k,i)")
                                                (("1"
                                                  (hide -1 -3 -6 -8)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (replace -5)
                                                        (("1"
                                                          (expand
                                                           "max")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (inst
                                         -1
                                         "k"
                                         "LAMBDA (x: nat):
                                  IF x = i THEN env(i) ELSE env!1(x) ENDIF"
                                         "n")
                                        (("2"
                                          (replace -1 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case "n=i")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma "nth_sum")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst -1 "n")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("1"
                                                            (lemma
                                                             "nth_dist")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "nth_e")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "env_2_vec_nth")
                                                  (("2"
                                                    (lemma
                                                     "list_extensionality[real]")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "env_2_vec(k,env!1)"
                                                       "p")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "n")
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "k"
                                                                   "env!1"
                                                                   "n")
                                                                  (("1"
                                                                    (lemma
                                                                     "nth_dist")
                                                                    (("1"
                                                                      (lemma
                                                                       "nth_e")
                                                                      (("1"
                                                                        (lemma
                                                                         "nth_sum")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "n")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -2
                                                                                   "1+k"
                                                                                   "i"
                                                                                   "n")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -3
                                                                                       "e(1+k,i)"
                                                                                       "c"
                                                                                       "n")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -3)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "P")
                          (("2" (expand "connected?")
                            (("2"
                              (inst -1 "env!1" "env"
                               "(LAMBDA (x: nat): IF x = i THEN env(i) ELSE env!1(x) ENDIF)")
                              (("2"
                                (hide -1)
                                (("2"
                                  (expand "between?" 1)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (case "i_1=i")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((projv const-decl "bool" chain_rule_re nil)
    (between? const-decl "bool" differentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (nth_sum formula-decl nil vector_arithmetic mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nth_e formula-decl nil vector_arithmetic mv_analysis)
    (nth_dist formula-decl nil vector_arithmetic mv_analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (env_2_vec_nth formula-decl nil chain_rule_re nil)
    (P skolem-const-decl "(connected?)" chain_rule_re nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (< const-decl "bool" reals nil)
    (k skolem-const-decl "nat" chain_rule_re nil)
    (p skolem-const-decl "(projv(k, P))" chain_rule_re nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(length(p))" chain_rule_re nil)
    (env skolem-const-decl "(P)" chain_rule_re nil)
    (env!1 skolem-const-decl "(P)" chain_rule_re nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VectorN type-eq-decl nil matrices matrices)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (connected? const-decl "bool" differentiation nil)
    (proj const-decl "bool" differentiation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (projv_proj_TCC1 0
  (projv_proj_TCC1-1 nil 3806854900 ("" (subtype-tcc) nil nil) nil nil
   (projv_proj subtype "chain_rule_re.i"
    "{ii: naturalnumbers.nat | reals.<(ii, (number_fields.+)(1, chain_rule_re.k))}")))
 (projv_proj_TCC2 0
  (projv_proj_TCC2-1 nil 3806854900
   ("" (skeep)
    (("" (typepred "p+c*e(1+k,i)" "p" "c*e(1+k,i)" "e(1+k,i)")
      (("" (hide -1 -3 -5 -7)
        (("" (replace -1)
          (("" (replace -2)
            (("" (replace -3)
              (("" (replace -4)
                (("" (expand "max") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (< const-decl "bool" reals nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (projv_proj subtype
    "(matrices.+)(chain_rule_re.p, matrices.*(chain_rule_re.c, vector_arithmetic.e((number_fields.+)(1, chain_rule_re.k), chain_rule_re.i)))"
    "matrices.VectorN((number_fields.+)(1, chain_rule_re.k))")))
 (projv_proj 0
  (projv_proj-1 nil 3806860048
   ("" (skeep)
    (("" (expand "proj")
      (("" (expand "projv" -1)
        (("" (skeep)
          (("" (inst 1 "env")
            (("" (assert)
              (("" (lemma "list_extensionality[real]")
                (("" (inst?)
                  (("" (flatten)
                    (("" (hide -2)
                      (("" (split -1)
                        (("1" (flatten)
                          (("1" (inst -2 "i")
                            (("1" (lemma "env_2_vec_nth")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (case
                                     "nth(p, i) + c = nth(p + c * e(1 + k, i), i)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (lemma "nth_sum")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (lemma "nth_dist")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -2 "i")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (replace -2)
                                                    (("2"
                                                      (lemma "nth_e")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((proj const-decl "bool" differentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VectorN type-eq-decl nil matrices matrices)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (< const-decl "bool" reals nil)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (below type-eq-decl nil naturalnumbers nil)
    (env_2_vec_nth formula-decl nil chain_rule_re nil)
    (nth_sum formula-decl nil vector_arithmetic mv_analysis)
    (nth_dist formula-decl nil vector_arithmetic mv_analysis)
    (nth_e formula-decl nil vector_arithmetic mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (connected? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (projv const-decl "bool" chain_rule_re nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (ddl_dom_dom_dir 0
  (ddl_dom_dom_dir-1 nil 3806919719
   ("" (skeep*)
    (("" (expand "deriv_domain_partial?" 1 1)
      (("" (skeep)
        (("" (typepred "P")
          (("" (typepred "p")
            (("" (hide -1)
              (("" (expand "projv" -2)
                (("" (skeep)
                  (("" (expand "ddl_dom?" -3)
                    (("" (flatten)
                      (("" (expand "not_one_element?")
                        (("" (expand "not_one_element?")
                          (("" (inst -4 "nth(p,i)")
                            (("1" (skeep)
                              (("1"
                                (typepred "y")
                                (("1"
                                  (expand "proj" -1)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (case "nth(p,i) = env(i)")
                                      (("1"
                                        (case " y > nth(p,i)")
                                        (("1"
                                          (inst
                                           2
                                           "min(y-nth(p,i),e_1)/2")
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (split 1)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (lemma "proj_projv")
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "k"
                                                   "P"
                                                   "p"
                                                   "min(y - nth[real](p, i), e_1) / 2"
                                                   "i")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "connection_proj")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "P"
                                                         "i"
                                                         "nth(p,i)"
                                                         "y")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "nth(p, i) + min(y - nth[real](p, i), e_1) / 2")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "0 < min(y - nth[real](p, i), e_1) / 2")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "proj"
                                                           1)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "env")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case " y < nth(p,i)")
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (inst
                                               2
                                               "-min(nth(p,i)-y,e_1)/2")
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (split 1)
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (lemma "proj_projv")
                                                  (("2"
                                                    (hide 2)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "k"
                                                       "P"
                                                       "p"
                                                       "-min(nth(p,i)-y,e_1)/2"
                                                       "i")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "connection_proj")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "P"
                                                             "i"
                                                             "y"
                                                             "nth(p,i)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "nth(p, i) + -min(nth(p,i)-y,e_1)/2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "0 > -min(nth(p,i)-y,e_1)/2")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "proj"
                                                               1)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "env")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "env_2_vec_nth")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "proj" 1)
                              (("2"
                                (inst 1 "env")
                                (("2"
                                  (lemma "env_2_vec_nth")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_partial? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (e_1 skolem-const-decl "posreal" chain_rule_re nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (y skolem-const-decl "(proj(i)(P))" chain_rule_re nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (connected? const-decl "bool" differentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (proj_projv formula-decl nil chain_rule_re nil)
    (connection_proj formula-decl nil differentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (> const-decl "bool" reals nil)
    (env_2_vec_nth formula-decl nil chain_rule_re nil)
    (proj const-decl "bool" differentiation nil)
    (k skolem-const-decl "nat" chain_rule_re nil)
    (i skolem-const-decl "below(1 + k)" chain_rule_re nil)
    (P skolem-const-decl "(ddl_dom?(i))" chain_rule_re nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (p skolem-const-decl "(projv(k, P))" chain_rule_re nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (not_one_element? const-decl "bool" differentiation nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (projv const-decl "bool" chain_rule_re nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (dd_e_partial 0
  (dd_e_partial-1 nil 3853849475
   ("" (skeep)
    (("" (expand "deriv_domain_e_partial?")
      (("" (typepred "D")
        (("" (skeep)
          (("" (case "NOT i=0")
            (("1" (typepred "i") (("1" (assert) nil nil)) nil)
             ("2" (replace -1)
              (("2" (expand "lift_rd" 1)
                (("2" (expand "deriv_domain_partial?")
                  (("2" (skeep)
                    (("2" (typepred "e_1" "p")
                      (("2" (hide -3)
                        (("2" (expand "dd?" -6)
                          (("2" (split -6)
                            (("1" (skeep)
                              (("1"
                                (typepred "b")
                                (("1"
                                  (case "car(p)=b")
                                  (("1"
                                    (inst 1 "-min(b/2,e_1)/2")
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (expand "+" 1)
                                        (("2"
                                          (expand "add" 1)
                                          (("2"
                                            (expand "*" 1)
                                            (("2"
                                              (expand "scal" 1)
                                              (("2"
                                                (decompose-equality -4)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst 2 "min(b-car(p),e_1)/2")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (split 1)
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (replace -3 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (inst 1 "e_1/2")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (replace -1)
                                  (("2"
                                    (expand "hp" 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (hp const-decl "bool" interval_def ODEs)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (p skolem-const-decl "(LAMBDA (x: VectorN(1)): D(car(x)))"
     chain_rule_re nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (b skolem-const-decl "posreal" chain_rule_re nil)
    (e_1 skolem-const-decl "posreal" chain_rule_re nil)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil))
   nil))
 (vec_2_env_TCC1 0
  (vec_2_env_TCC1-1 nil 3798372614
   ("" (skeep) (("" (typepred "v") (("" (assert) nil nil)) nil)) nil)
   ((VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil (vec_2_env subtype "chain_rule_re.i" "below[length[real](v)]")))
 (vec_2_env_id 0
  (vec_2_env_id-1 nil 3798373574
   ("" (induct "k")
    (("1" (skeep)
      (("1" (expand "env_2_vec" 1 1)
        (("1" (decompose-equality 1)
          (("1" (case "x!1=0")
            (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (decompose-equality 1)
          (("2" (expand "vec_2_env" 1 1)
            (("2" (case "x!1<2+j")
              (("1" (assert)
                (("1" (lemma "env_2_vec_nth")
                  (("1" (inst -1 "1+j" "env" "x!1") nil nil)) nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (< const-decl "bool" reals nil)
    (env_2_vec_nth formula-decl nil chain_rule_re nil)
    (below type-eq-decl nil naturalnumbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Environment type-eq-decl nil hp_def nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (env_2_vec_id 0
  (env_2_vec_id-1 nil 3801826188
   ("" (induct "k")
    (("1" (skeep)
      (("1" (grind)
        (("1" (typepred "v") (("1" (decompose-equality 1) nil nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (assert)
          (("2" (lemma "list_extensionality")
            (("2"
              (inst -1 "v"
               "env_2_vec(1 + j, vec_2_env(1 + j, v, env))")
              (("2" (assert)
                (("2" (skeep)
                  (("2" (lemma "env_2_vec_nth")
                    (("2" (inst -1 "1+j" "vec_2_env(1+j,v,env)" "n")
                      (("2" (replace -1)
                        (("2" (replace -1 1 rl)
                          (("2" (replace -1 1)
                            (("2" (expand "vec_2_env" 1 1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (env_2_vec_nth formula-decl nil chain_rule_re nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (vec_2_env_plus_TCC1 0
  (vec_2_env_plus_TCC1-1 nil 3870961583
   ("" (skeep)
    (("" (typepred "v+w")
      (("" (typepred "v" "w")
        (("" (replace -2)
          (("" (assert)
            (("" (replace -4)
              (("" (replace -6)
                (("" (expand "max" 1) (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (vec_2_env_plus subtype
    "((matrices.+)(chain_rule_re.v, chain_rule_re.w))"
    "matrices.VectorN((number_fields.+)(1, chain_rule_re.k))")))
 (vec_2_env_plus_TCC2 0
  (vec_2_env_plus_TCC2-1 nil 3870965556
   ("" (skeep)
    (("" (typepred "v+w" "v" "w")
      (("" (replace -2)
        (("" (replace -4)
          (("" (replace -6)
            (("" (expand "max" 2) (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (vec_2_env_plus subtype
    "((matrices.+)(chain_rule_re.v, chain_rule_re.w))"
    "matrices.VectorN((number_fields.+)(1, chain_rule_re.k))")))
 (vec_2_env_plus 0
  (vec_2_env_plus-1 nil 3870961588
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "vec_2_env")
          (("1" (assert)
            (("1"
              (case "FORALL(k:nat,i:below(1+k), v,w:VectorN(1+k)): nth((v+w), i) = nth(v, i) + nth(w, i)")
              (("1" (inst?) nil nil)
               ("2" (hide 2 -1)
                (("2" (induct "k")
                  (("1" (skeep) (("1" (grind) nil nil)) nil)
                   ("2" (skeep)
                    (("2" (skeep)
                      (("2" (case "i!1=0")
                        (("1" (expand "nth" 1)
                          (("1" (assert)
                            (("1" (expand "+")
                              (("1"
                                (expand "add")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "nth" 2)
                          (("2" (assert)
                            (("2" (expand "+" 2)
                              (("2"
                                (expand "add")
                                (("2"
                                  (inst
                                   -1
                                   "i!1-1"
                                   "cdr(v!1)"
                                   "cdr(w!1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "+")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "w!1")
                                    (("2" (grind) nil nil))
                                    nil)
                                   ("3"
                                    (typepred "v!1")
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3"
                    (case "FORALL(k:nat, v,w:VectorN(1+k)): length(v+w) = 1+k")
                    (("1" (skeep)
                      (("1" (typepred "v!1")
                        (("1" (inst -3 "k!2" "v!1" "w!1")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (hide 2 3)
                      (("2" (induct "k")
                        (("1" (skeep)
                          (("1" (typepred "v!1")
                            (("1" (typepred "w!1")
                              (("1"
                                (expand "length")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (expand "+")
                                      (("1"
                                        (expand "add")
                                        (("1"
                                          (expand "add")
                                          (("1"
                                            (expand "length" (-2 -4))
                                            (("1"
                                              (lift-if)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (skeep)
                            (("2" (expand "+")
                              (("2"
                                (expand "add" 1)
                                (("2"
                                  (expand "length" 1)
                                  (("2"
                                    (inst -1 "cdr(v!1)" "cdr(w!1)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (typepred "w!1")
                                      (("2" (grind) nil nil))
                                      nil)
                                     ("3"
                                      (typepred "v!1")
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -1)
                (("3"
                  (case "FORALL(k:nat, v,w:VectorN(1+k)): length(v+w) = 1+k")
                  (("1" (skeep)
                    (("1" (typepred "v!1")
                      (("1" (inst -3 "k!1" "v!1" "w!1")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide 2 3)
                    (("2" (induct "k")
                      (("1" (skeep)
                        (("1" (typepred "v!1")
                          (("1" (typepred "w!1")
                            (("1" (expand "length")
                              (("1"
                                (assert)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (expand "+")
                                    (("1"
                                      (expand "add")
                                      (("1"
                                        (expand "add")
                                        (("1"
                                          (expand "length" (-2 -4))
                                          (("1"
                                            (lift-if)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (skeep)
                          (("2" (expand "+")
                            (("2" (expand "add" 1)
                              (("2"
                                (expand "length" 1)
                                (("2"
                                  (inst -1 "cdr(v!1)" "cdr(w!1)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (typepred "w!1")
                                    (("2" (grind) nil nil))
                                    nil)
                                   ("3"
                                    (typepred "v!1")
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "vec_2_env") (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((vec_2_env const-decl "Environment" chain_rule_re nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (j skolem-const-decl "nat" chain_rule_re nil)
    (v!1 skolem-const-decl "VectorN(2 + j)" chain_rule_re nil)
    (w!1 skolem-const-decl "VectorN(2 + j)" chain_rule_re nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (w!1 skolem-const-decl "VectorN(2 + j)" chain_rule_re nil)
    (v!1 skolem-const-decl "VectorN(2 + j)" chain_rule_re nil)
    (j skolem-const-decl "nat" chain_rule_re nil)
    (j skolem-const-decl "nat" chain_rule_re nil)
    (v!1 skolem-const-decl "VectorN(2 + j)" chain_rule_re nil)
    (w!1 skolem-const-decl "VectorN(2 + j)" chain_rule_re nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (differentiable_re_p?_TCC1 0
  (differentiable_re_p?_TCC1-1 nil 3852126449
   ("" (lemma "projv_dd") (("" (skeep) (("" (inst?) nil nil)) nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (projv_dd formula-decl nil chain_rule_re nil))
   nil
   (differentiable_re_p? subtype
    "chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(chain_rule_re.k, 1)].deriv_domain?)")))
 (differentiable_re_p?_TCC2 0
  (differentiable_re_p?_TCC2-1 nil 3852126449
   ("" (skeep)
    (("" (typepred "env")
      (("" (expand "projv") (("" (inst 1 "env") nil nil)) nil)) nil))
    nil)
   ((ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (projv const-decl "bool" chain_rule_re nil))
   nil
   (differentiable_re_p? subtype
    "chain_rule_re.env_2_vec(chain_rule_re.k, chain_rule_re.env)"
    "(chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P))")))
 (diff_env_change 0
  (diff_env_change-1 nil 3853330986
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "differentiable?")
          (("1" (skeep)
            (("1" (inst 1 "g")
              (("1" (expand "convergence_zero?")
                (("1" (skeep)
                  (("1" (inst -1 "epsilon")
                    (("1" (skeep -1)
                      (("1" (inst 1 "delta")
                        (("1" (skeep)
                          (("1" (inst -1 "x")
                            (("1" (assert)
                              (("1"
                                (case
                                 "vec_re(k, env1, re) = vec_re(k, env2, re)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (decompose-equality 1)
                                  (("2"
                                    (typepred "env2")
                                    (("2"
                                      (expand "vec_re" 1)
                                      (("2"
                                        (case
                                         "vec_2_env(k, x!1, env1) = vec_2_env(k, x!1, env2)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (decompose-equality 1)
                                          (("2"
                                            (expand "vec_2_env" 1)
                                            (("2"
                                              (case "x!2< 1+k")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "after_k?"
                                                   -2)
                                                  (("2"
                                                    (inst -2 "x!2")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "differentiable?")
          (("2" (skeep)
            (("2" (inst 1 "g")
              (("2" (case "vec_re(k, env1, re) = vec_re(k, env2, re)")
                (("1" (assert) nil nil)
                 ("2" (hide 2 -1)
                  (("2" (expand "vec_re" 1)
                    (("2" (decompose-equality 1)
                      (("2"
                        (case "vec_2_env(k, x!1, env1) = vec_2_env(k, x!1, env2)")
                        (("1" (assert) nil nil)
                         ("2" (hide 2)
                          (("2" (decompose-equality 1)
                            (("2" (expand "vec_2_env")
                              (("2"
                                (case "x!2 < 1 +k")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (typepred "env2")
                                    (("2"
                                      (expand "after_k?" -2)
                                      (("2" (inst -2 "x!2") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((differentiable? const-decl "bool" differentiable_def mv_analysis)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (after_k? const-decl "bool" chain_rule_re nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (/= const-decl "boolean" notequal nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (projv const-decl "bool" chain_rule_re nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (diff_re_diff_mv_TCC1 0
  (diff_re_diff_mv_TCC1-1 nil 3853415144
   ("" (skeep) (("" (lemma "projv_dd") (("" (inst?) nil nil)) nil))
    nil)
   ((projv_dd formula-decl nil chain_rule_re nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil))
   nil
   (diff_re_diff_mv subtype
    "chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(1, chain_rule_re.k)].deriv_domain?)")))
 (diff_re_diff_mv 0
  (diff_re_diff_mv-1 nil 3853415294
   ("" (skeep)
    (("" (skeep)
      (("" (split 1)
        (("1" (flatten)
          (("1" (skeep)
            (("1" (expand "diff_re?")
              (("1" (expand "differentiable_re_p?")
                (("1" (expand "differentiableD?")
                  (("1" (skeep)
                    (("1" (typepred "p")
                      (("1" (inst -4 "vec_2_env(k,p,env)")
                        (("1" (assert)
                          (("1" (lemma "env_2_vec_id")
                            (("1" (inst?)
                              (("1"
                                (replace -1)
                                (("1"
                                  (case
                                   "vec_re(k, vec_2_env(k, p, env),re) =  vec_re(k, env, re)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (decompose-equality 1)
                                    (("2"
                                      (expand "vec_re" 1)
                                      (("2"
                                        (expand "vec_2_env" 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "P")
                          (("2" (expand "ddl_dom?" -1)
                            (("2" (flatten)
                              (("2"
                                (expand "connected?" -1)
                                (("2"
                                  (expand "projv" -5)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst
                                       -1
                                       "env"
                                       "env!1"
                                       "vec_2_env(k,p,env)")
                                      (("2"
                                        (expand "between?" 1)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand "vec_2_env" +)
                                            (("2"
                                              (case "i < 1 + k")
                                              (("1"
                                                (lemma "env_2_vec_nth")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (replace -6 -1 lr)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst -1 "i")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "diff_re?")
            (("2" (skeep)
              (("2" (expand "differentiable_re_p?")
                (("2" (inst -1 "env")
                  (("2" (expand "differentiableD?")
                    (("2" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (differentiableD? const-decl "bool" differentiable_def mv_analysis)
    (ddl_dom? const-decl "bool" differentiation nil)
    (projv const-decl "bool" chain_rule_re nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (between? const-decl "bool" differentiation nil)
    (env!1 skolem-const-decl "(P)" chain_rule_re nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (env_2_vec_nth formula-decl nil chain_rule_re nil)
    (connected? const-decl "bool" differentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (env_2_vec_id formula-decl nil chain_rule_re nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (k skolem-const-decl "nat" chain_rule_re nil)
    (p skolem-const-decl "(projv(k, P))" chain_rule_re nil)
    (env skolem-const-decl "(P)" chain_rule_re nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil))
   shostak))
 (der_re_p_TCC1 0
  (der_re_p_TCC1-1 nil 3853405662 ("" (subtype-tcc) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (not_one_element? const-decl "bool" differentiation nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (/= const-decl "boolean" notequal nil)
    (connected? const-decl "bool" differentiation nil)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec_re const-decl "real" chain_rule_re nil)
    (* const-decl "real" matrices matrices)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (der_re_p subtype
    "chain_rule_re.vec_re(chain_rule_re.k, chain_rule_re.env, chain_rule_re.re)"
    "{ff: domain_vec2real_def[(number_fields.+)(1, chain_rule_re.k)].vec2real_f | differentiable_def[(number_fields.+)(1, chain_rule_re.k)].differentiable?(chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P), ff, chain_rule_re.env_2_vec(chain_rule_re.k, chain_rule_re.env))}")))
 (der_re_TCC1 0
  (der_re_TCC1-1 nil 3853408358 ("" (subtype-tcc) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (connected? const-decl "bool" differentiation nil)
    (/= const-decl "boolean" notequal nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" differentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (P!1 skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (env!1 skolem-const-decl "Environment" chain_rule_re nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (k!1 skolem-const-decl "nat" chain_rule_re nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (i!1 skolem-const-decl "nat" chain_rule_re nil)
    (x!1 skolem-const-decl "numfield" chain_rule_re nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (x1!1 skolem-const-decl "numfield" chain_rule_re nil)
    (x1!1 skolem-const-decl "numfield" chain_rule_re nil)
    (x!1 skolem-const-decl "numfield" chain_rule_re nil)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec_re const-decl "real" chain_rule_re nil)
    (* const-decl "real" matrices matrices)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (proj const-decl "bool" differentiation nil)
    (between? const-decl "bool" differentiation nil))
   nil
   (der_re subtype "chain_rule_re.re"
    "(chain_rule_re.differentiable_re_p?(chain_rule_re.k, chain_rule_re.P, chain_rule_re.env))")))
 (der_re_grad_TCC1 0
  (der_re_grad_TCC1-1 nil 3853408358
   ("" (expand "deriv_domain_e_partial?")
    (("" (skeep*)
      (("" (lemma "ddl_dom_dom_dir")
        (("" (inst?)
          (("" (assert)
            (("" (typepred "P")
              (("" (expand "ddl_dom?")
                (("" (flatten)
                  (("" (inst -2 "i") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (i skolem-const-decl "below(1 + k)" chain_rule_re nil)
    (k skolem-const-decl "nat" chain_rule_re nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ddl_dom_dom_dir formula-decl nil chain_rule_re nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     mv_analysis))
   nil
   (der_re_grad subtype
    "chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(1, chain_rule_re.k)].deriv_domain_e_partial?)")))
 (der_re_grad_TCC2 0
  (der_re_grad_TCC2-1 nil 3853408358
   ("" (skeep)
    (("" (lemma "diffD_imp_gradD[1+k]")
      (("" (inst?)
        (("" (assert)
          (("" (typepred "re")
            (("" (expand "diff_re?" -1)
              (("" (expand "differentiableD?" 1)
                (("" (skeep)
                  (("" (typepred "p")
                    (("" (expand "differentiable_re_p?")
                      (("" (expand "projv" -3)
                        (("" (skeep -3)
                          (("" (inst -4 "vec_2_env(k,p,env)")
                            (("1" (lemma "env_2_vec_id")
                              (("1"
                                (inst?)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (case
                                         "NOT vec_re(k, vec_2_env(k, p, env), re) = vec_re(k, env, re)")
                                        (("1"
                                          (decompose-equality 1)
                                          (("1"
                                            (expand "vec_re" 1)
                                            (("1"
                                              (case
                                               "vec_2_env(k, x!1, vec_2_env(k, p, env)) = vec_2_env(k, x!1, env)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (decompose-equality
                                                   1)
                                                  (("2"
                                                    (expand
                                                     "vec_2_env"
                                                     1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "env")
                              (("2"
                                (typepred "P")
                                (("2"
                                  (expand "ddl_dom?" -1)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "connected?" -1)
                                      (("2"
                                        (inst
                                         -1
                                         "env"
                                         "env!1"
                                         "vec_2_env(k, p, env)")
                                        (("2"
                                          (hide 2 3 4)
                                          (("2"
                                            (hide -3)
                                            (("2"
                                              (expand "between?" 1)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (expand
                                                       "vec_2_env"
                                                       +)
                                                      (("2"
                                                        (case
                                                         "i < 1+k")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "env_2_vec_nth")
                                                            (("1"
                                                              (inst-cp
                                                               -1
                                                               "k"
                                                               "env!1"
                                                               "i")
                                                              (("1"
                                                                (replace
                                                                 -7
                                                                 -2)
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (diffD_imp_gradD formula-decl nil gradient_def mv_analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (connected? const-decl "bool" differentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (env_2_vec_nth formula-decl nil chain_rule_re nil)
    (< const-decl "bool" reals nil)
    (env!1 skolem-const-decl "(P)" chain_rule_re nil)
    (between? const-decl "bool" differentiation nil)
    (env_2_vec_id formula-decl nil chain_rule_re nil)
    (p skolem-const-decl "(projv(k, P))" chain_rule_re nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (k skolem-const-decl "nat" chain_rule_re nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (env skolem-const-decl "(P)" chain_rule_re nil)
    (re skolem-const-decl "(diff_re?(k, P))" chain_rule_re nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (differentiableD? const-decl "bool" differentiable_def mv_analysis)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (ddl_dom? const-decl "bool" differentiation nil)
    (projv const-decl "bool" chain_rule_re nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil
   (der_re_grad subtype
    "chain_rule_re.vec_re(chain_rule_re.k, chain_rule_re.env, chain_rule_re.re)"
    "(gradient_def[(number_fields.+)(1, chain_rule_re.k)].gradientD?(chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P)))")))
 (der_re_grad 0
  (der_re_grad-1 nil 3853409572
   ("" (skeep)
    (("" (expand "der_re" 1)
      (("" (expand "der_re_p")
        (("" (lemma "der_f_is_grad_e[1+k]")
          (("" (inst -1 "projv(k,P)" "vec_re(k, env, re)")
            (("1" (decompose-equality -1)
              (("1" (inst -1 "env_2_vec(k,env)")
                (("1" (assert)
                  (("1" (expand "der_f" -1)
                    (("1" (assert)
                      (("1" (replace -1 1)
                        (("1" (assert)
                          (("1" (expand "gradient")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "re")
                (("2" (lemma "diff_re_diff_mv")
                  (("2" (inst?)
                    (("2" (assert) (("2" (inst?) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((der_re const-decl "Environment" chain_rule_re nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (der_f_is_grad_e formula-decl nil gradient_def mv_analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (diff_re_diff_mv formula-decl nil chain_rule_re nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (gradient const-decl "VectorN(n)" gradient_def mv_analysis)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def mv_analysis)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (gradient const-decl "VectorN(n)" gradient_def mv_analysis)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (k skolem-const-decl "nat" chain_rule_re nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (differentiableD? const-decl "bool" differentiable_def mv_analysis)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (projv const-decl "bool" chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (env skolem-const-decl "(P)" chain_rule_re nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (re skolem-const-decl "(diff_re?(k, P))" chain_rule_re nil)
    (der_re_p const-decl "Environment" chain_rule_re nil))
   shostak))
 (diff_re_init_partial_TCC1 0
  (diff_re_init_partial_TCC2-1 nil 3853426595
   ("" (skeep)
    (("" (lemma "ddl_dom_dom_dir")
      (("" (inst?)
        (("" (assert)
          (("" (typepred "P")
            (("" (expand "ddl_dom?")
              (("" (flatten)
                (("" (assert) (("" (inst -2 "i") nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ddl_dom_dom_dir formula-decl nil chain_rule_re nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (k skolem-const-decl "nat" chain_rule_re nil)
    (i skolem-const-decl "below(1 + k)" chain_rule_re nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (diff_re_init_partial subtype
    "chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(1, chain_rule_re.k)].deriv_domain_partial?(vector_arithmetic.e((number_fields.+)(1, chain_rule_re.k), chain_rule_re.i)))")))
 (diff_re_init_partial 0
  (diff_re_init_partial-1 nil 3853426663
   ("" (skeep)
    (("" (typepred "re")
      (("" (expand "diff_re?")
        (("" (inst -1 "env")
          (("" (expand "differentiable_re_p?" -1)
            (("" (lemma "diff_imp_init_partial2[1+k]")
              (("" (expand "init_partial?" 1)
                (("" (skeep)
                  ((""
                    (inst -1 "e(1+k,i)" "projv(k,P)" "vec_re(k,env,re)"
                     "p")
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (lemma "diff_re_diff_mv")
                          (("1" (inst -1 "k" "P" "re")
                            (("1" (assert)
                              (("1"
                                (inst -1 "env")
                                (("1"
                                  (expand "differentiableD?" -1)
                                  (("1" (inst -1 "p") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "e_not_zero") (("2" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_re? const-decl "bool" chain_rule_re nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (diff_imp_init_partial2 formula-decl nil init_partial_def
     mv_analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (e_not_zero formula-decl nil vector_arithmetic mv_analysis)
    (diff_re_diff_mv formula-decl nil chain_rule_re nil)
    (differentiableD? const-decl "bool" differentiable_def mv_analysis)
    (vec_re const-decl "real" chain_rule_re nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (projv const-decl "bool" chain_rule_re nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (list type-decl nil list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (k skolem-const-decl "nat" chain_rule_re nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(1 + k)" chain_rule_re nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (init_partial? const-decl "bool" init_partial_def mv_analysis)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil))
   nil))
 (der_re_partial_TCC1 0
  (der_re_partial_TCC2-1 nil 3853408461
   ("" (skeep)
    (("" (typepred "re")
      (("" (expand "diff_re?")
        (("" (inst -1 "env")
          (("" (expand "differentiable_re_p?" -1)
            (("" (lemma "diff_imp_init_partial2[1+k]")
              (("" (expand "init_partial?" 1)
                (("" (skeep)
                  ((""
                    (inst -1 "e(1+k,i)" "projv(k,P)" "vec_re(k,env,re)"
                     "p")
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (lemma "diff_re_diff_mv")
                          (("1" (inst -1 "k" "P" "re")
                            (("1" (assert)
                              (("1"
                                (inst -1 "env")
                                (("1"
                                  (expand "differentiableD?" -1)
                                  (("1" (inst -1 "p") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "e_not_zero") (("2" (inst?) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_re? const-decl "bool" chain_rule_re nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (diff_imp_init_partial2 formula-decl nil init_partial_def
     mv_analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (e_not_zero formula-decl nil vector_arithmetic mv_analysis)
    (diff_re_diff_mv formula-decl nil chain_rule_re nil)
    (differentiableD? const-decl "bool" differentiable_def mv_analysis)
    (vec_re const-decl "real" chain_rule_re nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (projv const-decl "bool" chain_rule_re nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (list type-decl nil list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (k skolem-const-decl "nat" chain_rule_re nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(1 + k)" chain_rule_re nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (init_partial? const-decl "bool" init_partial_def mv_analysis)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil))
   nil
   (der_re_partial subtype
    "chain_rule_re.vec_re(chain_rule_re.k, chain_rule_re.env, chain_rule_re.re)"
    "(init_partial_def[(number_fields.+)(1, chain_rule_re.k)].init_partial?(vector_arithmetic.e((number_fields.+)(chain_rule_re.k, 1), chain_rule_re.i), chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P)))")))
 (der_re_partial 0
  (der_re_partial-1 nil 3853426727
   ("" (skeep)
    (("" (lemma "der_re_grad")
      (("" (inst?)
        (("" (replace -1)
          (("" (expand "vec_2_env" 1)
            (("" (lemma "grad_nth[1+k]")
              (("" (hide -2) (("" (inst?) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((der_re_grad formula-decl nil chain_rule_re nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (grad_nth formula-decl nil gradient_def mv_analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (gradientD? const-decl "bool" gradient_def mv_analysis)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (projv const-decl "bool" chain_rule_re nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (re_diff_mv 0
  (re_diff_mv-1 nil 3852126815
   ("" (skeep)
    (("" (lemma "lift_diff_right")
      (("" (inst?)
        (("" (assert)
          (("" (expand "differentiable_re_p?" 1 1)
            (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((lift_diff_right formula-decl nil lift_real_fun_def mv_analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (ddl_dom? const-decl "bool" differentiation nil)
    (projv const-decl "bool" chain_rule_re nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (re_der_mv_TCC1 0
  (re_der_mv_TCC1-1 nil 3853927758
   ("" (skeep)
    (("" (lemma "re_diff_mv")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((re_diff_mv formula-decl nil chain_rule_re nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (re_der_mv subtype
    "lift_real_fun_def.liftr((number_fields.+)(chain_rule_re.k, 1), chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P), chain_rule_re.vec_re(chain_rule_re.k, chain_rule_re.env, chain_rule_re.re))"
    "{ff: domain_vec2real_def[(number_fields.+)(chain_rule_re.k, 1)].vec2vec(1) | convergence_vec2vec[(number_fields.+)(1, chain_rule_re.k)].differentiable?(1, chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P), ff, chain_rule_re.env_2_vec(chain_rule_re.k, chain_rule_re.env))}")))
 (re_der_mv 0
  (re_der_mv-1 nil 3853927923
   ("" (skeep)
    (("" (lemma "lift_der_right")
      (("" (inst?)
        (("1" (assert)
          (("1" (lemma "re_diff_mv")
            (("1" (inst?)
              (("1" (assert)
                (("1" (expand "differentiable_re_p?" -2)
                  (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "ddl_dom_dom_dir")
          (("2" (expand "deriv_domain_e_partial?")
            (("2" (skeep 1)
              (("2" (inst -1 "k" "i" "P")
                (("2" (typepred "P")
                  (("2" (expand "ddl_dom?")
                    (("2" (flatten)
                      (("2" (inst -2 "i") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lift_der_right formula-decl nil lift_real_fun_def mv_analysis)
    (ddl_dom_dom_dir formula-decl nil chain_rule_re nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (i skolem-const-decl "below(1 + k)" chain_rule_re nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (re_diff_mv formula-decl nil chain_rule_re nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (k skolem-const-decl "nat" chain_rule_re nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (projv const-decl "bool" chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (re_diff_mv_ll_TCC1 0
  (re_diff_mv_ll_TCC1-1 nil 3853923345
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (re_diff_mv_ll subtype "chain_rule_re.p" "(list_adt[real].cons?)")))
 (re_diff_mv_ll_TCC2 0
  (re_diff_mv_ll_TCC2-1 nil 3853923345 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (dLVar type-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (fullset const-decl "set" sets nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (env_at_t? const-decl "bool" hp_expr nil)
    (not_one_element? const-decl "bool" differentiation nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (/= const-decl "boolean" notequal nil)
    (connected? const-decl "bool" differentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (re_diff_mv_ll subtype "list_adt[real].car(chain_rule_re.p)"
    "(chain_rule_re.D)")))
 (re_diff_mv_ll_TCC3 0
  (re_diff_mv_ll_TCC4-1 nil 3853923345
   ("" (skeep)
    (("" (lemma "projv_dd") (("" (assert) (("" (inst?) nil nil)) nil))
      nil))
    nil)
   ((projv_dd formula-decl nil chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (dd? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (max_var const-decl "nat" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (re_diff_mv_ll subtype
    "chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].deriv_domain?)")))
 (re_diff_mv_ll_TCC4 0
  (re_diff_mv_ll_TCC5-1 nil 3853923345
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((length_singleton formula-decl nil more_list_props structures)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (re_diff_mv_ll subtype
    "(: chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), chain_rule_re.envi, chain_rule_re.R)(chain_rule_re.v) :)"
    "matrices.VectorN(1)")))
 (re_diff_mv_ll_TCC5 0
  (re_diff_mv_ll_TCC6-1 nil 3853923345
   ("" (skeep)
    (("" (expand "liftl" 1)
      (("" (typepred "p")
        (("" (expand "lift_rd" -3)
          (("" (assert)
            (("" (expand "projv") (("" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (projv const-decl "bool" chain_rule_re nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (dLVar type-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (dd? const-decl "bool" hp_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (re_diff_mv_ll subtype
    "lift_real_fun_def.liftl((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode)), chain_rule_re.D, LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt)))(chain_rule_re.p)"
    "(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P))")))
 (re_diff_mv_ll 0
  (re_diff_mv_ll-1 nil 3853924090
   ("" (skeep)
    (("" (lemma "re_diff_mv")
      (("" (inst?)
        (("" (assert)
          ((""
            (case " differentiable?[1 + max_var(ode)]
           (1, projv(max_var(ode), P),
            liftr(1 + max_var(ode), projv(max_var(ode), P),
                  vec_re(max_var(ode), env_sol(D, envi, ode)(car(p)), R)),
            env_2_vec(max_var(ode), env_sol(D, envi, ode)(car(p)))) IFF   differentiable?[1 + max_var(ode)]
            (1, projv(max_var(ode), P),
             LAMBDA (v: VectorN(1 + max_var(ode))):
               (: vec_re(max_var(ode), envi, R)(v) :),
             liftl(1 + max_var(ode), D,
                   LAMBDA (tt: (D)):
                     env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt)))
                  (p))")
            (("1" (flatten)
              (("1" (assert)
                (("1" (split 1)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (hide -1 -2)
                    (("2" (expand "liftl" 1)
                      (("2" (typepred "p")
                        (("2" (expand "lift_rd" -3)
                          (("2" (assert)
                            (("2" (split 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma "same_on_D_same_diff")
                                  (("1"
                                    (inst
                                     -1
                                     "1+max_var(ode)"
                                     "projv(max_var(ode),P)"
                                     "env_2_vec(max_var(ode), env_sol(D, envi, ode)(car(p)))"
                                     " liftr(1 + max_var(ode), projv(max_var(ode), P),
                 vec_re(max_var(ode), env_sol(D, envi, ode)(car(p)), R))"
                                     "LAMBDA (v: VectorN(1 + max_var(ode))):
             (: vec_re(max_var(ode), envi, R)(v) :)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skeep 1)
                                        (("1"
                                          (expand "liftr" 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "vec_re" 1)
                                              (("1"
                                                (decompose-equality 1)
                                                (("1"
                                                  (case
                                                   "vec_2_env(max_var(ode), x, env_sol(D, envi, ode)(car(p))) = vec_2_env(max_var(ode), x, envi)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "vec_2_env"
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (decompose-equality
                                                         1)
                                                        (("1"
                                                          (case
                                                           "x!1 < 1 + max_var(ode)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "env_sol"
                                                               2)
                                                              (("2"
                                                                (typepred
                                                                 "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                                                                (("2"
                                                                  (expand
                                                                   "env_at_t?"
                                                                   -1)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "x!1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         " nip_max_var")
                                                                        (("2"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (lemma "same_on_D_same_diff")
                                  (("2"
                                    (inst
                                     -1
                                     "1+max_var(ode)"
                                     "projv(max_var(ode),P)"
                                     "env_2_vec(max_var(ode), env_sol(D, envi, ode)(car(p)))"
                                     "LAMBDA (v: VectorN(1 + max_var(ode))):
             (: vec_re(max_var(ode), envi, R)(v) :)"
                                     " liftr(1 + max_var(ode), projv(max_var(ode), P),
                 vec_re(max_var(ode), env_sol(D, envi, ode)(car(p)), R))")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand "liftr" 1)
                                            (("2"
                                              (decompose-equality 1)
                                              (("2"
                                                (expand "vec_re" 1)
                                                (("2"
                                                  (case
                                                   "vec_2_env(max_var(ode), x, env_sol(D, envi, ode)(car(p))) = vec_2_env(max_var(ode), x, envi)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand
                                                       "vec_2_env"
                                                       1)
                                                      (("2"
                                                        (decompose-equality
                                                         1)
                                                        (("1"
                                                          (case
                                                           "x!1 < 1 + max_var(ode)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "env_sol")
                                                              (("2"
                                                                (typepred
                                                                 "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                                                                (("2"
                                                                  (expand
                                                                   "env_at_t?"
                                                                   -1)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "x!1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         " nip_max_var")
                                                                        (("2"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((re_diff_mv formula-decl nil chain_rule_re nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (same_on_D_same_diff formula-decl nil lift_real_fun_def
     mv_analysis)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (x!1 skolem-const-decl "nat" chain_rule_re nil)
    (above nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nip_max_var formula-decl nil hp_def nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (x skolem-const-decl "(projv(max_var(ode), P))" chain_rule_re nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (length_singleton formula-decl nil more_list_props structures)
    (x!1 skolem-const-decl "nat" chain_rule_re nil)
    (x skolem-const-decl "(projv(max_var(ode), P))" chain_rule_re nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (differentiable? const-decl "bool" convergence_vec2vec mv_analysis)
    (projv const-decl "bool" chain_rule_re nil)
    (liftr const-decl "vec2vec[k](1)" lift_real_fun_def mv_analysis)
    (vec_re const-decl "real" chain_rule_re nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (dd? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (max_var const-decl "nat" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (re_der_mv_ll_TCC1 0
  (re_der_mv_ll_TCC1-1 nil 3853928506
   ("" (skeep)
    (("" (lemma "re_diff_mv_ll")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((re_diff_mv_ll formula-decl nil chain_rule_re nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (re_der_mv_ll subtype
    "LAMBDA (v: matrices.VectorN((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1))): (: chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), chain_rule_re.envi, chain_rule_re.R)(v) :)"
    "{ff: domain_vec2real_def[(number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1)].vec2vec(1) | convergence_vec2vec[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].differentiable?(1, chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P), ff, lift_real_fun_def.liftl((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode)), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))(chain_rule_re.p))}")))
 (re_der_mv_ll_TCC2 0
  (re_der_mv_ll_TCC2-1 nil 3853928506
   ("" (skeep) (("" (lemma "projv_dd") (("" (inst?) nil nil)) nil))
    nil)
   ((projv_dd formula-decl nil chain_rule_re nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (max_var const-decl "nat" hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (dd? const-decl "bool" hp_expr nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (re_der_mv_ll subtype
    "chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1)].deriv_domain?)")))
 (re_der_mv_ll_TCC3 0
  (re_der_mv_ll_TCC3-1 nil 3853928506
   ("" (skeep)
    (("" (expand "projv" 1)
      (("" (expand "liftl" 1)
        (("" (typepred "p")
          (("" (expand "lift_rd" -3)
            (("" (assert) (("" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((projv const-decl "bool" chain_rule_re nil)
    (dd? const-decl "bool" hp_expr nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (dLVar type-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (re_der_mv_ll subtype
    "lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))(chain_rule_re.p)"
    "(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P))")))
 (re_der_mv_ll 0
  (re_der_mv_ll-1 nil 3853929286
   ("" (skeep)
    (("" (lemma "re_der_mv")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "same_on_D_same_der")
            ((""
              (case "NOT liftl(1 + max_var(ode), D,
                 LAMBDA (tt: (D)):
                   env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt)))
                (p) =  env_2_vec(max_var(ode), env_sol(D, envi, ode)(car(p)))")
              (("1" (expand "liftl" 1)
                (("1" (typepred "p")
                  (("1" (expand "lift_rd" -3) (("1" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -1 1 lr)
                (("2" (hide -1)
                  (("2"
                    (inst -1 "1+max_var(ode)" "projv(max_var(ode), P)"
                     "env_2_vec(max_var(ode), env_sol(D, envi, ode)(car(p)))"
                     " (liftr(1 + max_var(ode), projv(max_var(ode), P),
                 vec_re(max_var(ode), env_sol(D, envi, ode)(car(p)), R)))"
                     "(LAMBDA (v: VectorN(1 + max_var(ode))):
             (: vec_re(max_var(ode), envi, R)(v) :))")
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (split 1)
                          (("1" (skeep)
                            (("1" (expand "liftr")
                              (("1"
                                (expand "vec_re")
                                (("1"
                                  (case
                                   "vec_2_env(max_var(ode), x, env_sol(D, envi, ode)(car(p))) = (vec_2_env(max_var(ode), x, envi))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "vec_2_env")
                                      (("2"
                                        (decompose-equality 1)
                                        (("1"
                                          (case
                                           "x!1 <  1  + max_var(ode)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (expand "env_sol" 2 1)
                                              (("2"
                                                (typepred
                                                 "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                                                (("2"
                                                  (expand
                                                   "env_at_t?"
                                                   -1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "nip_max_var")
                                                        (("2"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "re_diff_mv")
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (lemma "ddl_dom_dom_dir")
                        (("2" (expand "deriv_domain_e_partial?")
                          (("2" (skeep)
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (typepred "P")
                                  (("2"
                                    (expand "ddl_dom?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (inst -2 "i")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((re_der_mv formula-decl nil chain_rule_re nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (i skolem-const-decl "below(1 + max_var(ode))" chain_rule_re nil)
    (ddl_dom_dom_dir formula-decl nil chain_rule_re nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (x!1 skolem-const-decl "nat" chain_rule_re nil)
    (above nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nip_max_var formula-decl nil hp_def nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (x skolem-const-decl "(projv(max_var(ode), P))" chain_rule_re nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (re_diff_mv formula-decl nil chain_rule_re nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (liftr const-decl "vec2vec[k](1)" lift_real_fun_def mv_analysis)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (projv const-decl "bool" chain_rule_re nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (same_on_D_same_der formula-decl nil lift_real_fun_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (dd? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (max_var const-decl "nat" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (with_e_vec_TCC1 0
  (with_e_vec_TCC1-1 nil 3801772333 ("" (subtype-tcc) nil nil) nil nil
   (with_e_vec subtype "chain_rule_re.i" "below[length[real](v)]")))
 (with_e_vec_TCC2 0
  (with_e_vec_TCC2-1 nil 3801772333
   ("" (skeep)
    (("" (typepred "v + x * e(k+1, i)" "v" "x * e(k+1, i)" "e(k+1, i)")
      (("" (replace -8)
        (("" (replace -6)
          (("" (replace -4)
            (("" (expand "max" -2) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (< const-decl "bool" reals nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (with_e_vec subtype
    "(matrices.+)(chain_rule_re.v, matrices.*(chain_rule_re.x, vector_arithmetic.e((number_fields.+)(chain_rule_re.k, 1), chain_rule_re.i)))"
    "matrices.VectorN((number_fields.+)(1, chain_rule_re.k))")))
 (with_e_vec 0
  (with_e_vec-1 nil 3801772395
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (expand "vec_2_env")
        (("" (case "x!1=i")
          (("1" (typepred "i")
            (("1" (assert)
              (("1" (lemma "nth_sum")
                (("1" (lemma "nth_dist")
                  (("1" (lemma "nth_e")
                    (("1" (inst?)
                      (("1" (inst?)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (inst -3 "i")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (case "NOT x!1<1+k")
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2" (lemma "nth_e")
                  (("2" (lemma "nth_dist")
                    (("2" (lemma "nth_sum")
                      (("2" (inst?)
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (replace -2)
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VectorN type-eq-decl nil matrices matrices)
    (Environment type-eq-decl nil hp_def nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_dist formula-decl nil vector_arithmetic mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth_e formula-decl nil vector_arithmetic mv_analysis)
    (nth_sum formula-decl nil vector_arithmetic mv_analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (derivable_partial_TCC1 0
  (derivable_partial_TCC2-1 nil 3801825817
   ("" (skeep)
    (("" (expand "projv")
      (("" (typepred "v")
        (("" (inst 1 "env")
          (("" (lemma "vec_2_env_id")
            (("" (inst?)
              (("" (lemma "env_2_vec_id")
                (("" (inst -1 "k" "env" "v") (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((projv const-decl "bool" chain_rule_re nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (env_2_vec_id formula-decl nil chain_rule_re nil)
    (vec_2_env_id formula-decl nil chain_rule_re nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VectorN type-eq-decl nil matrices matrices)
    (Environment type-eq-decl nil hp_def nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (derivable_partial subtype "chain_rule_re.v"
    "(chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P))")))
 (derivable_partial_TCC2 0
  (derivable_partial_TCC1-1 nil 3801777685
   ("" (lemma "ddl_dom_dom_dir")
    (("" (skeep) (("" (inst -1 "k" "i" "P") nil nil)) nil)) nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ddl_dom_dom_dir formula-decl nil chain_rule_re nil))
   nil
   (derivable_partial subtype
    "chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(1, chain_rule_re.k)].deriv_domain_partial?(vector_arithmetic.e((number_fields.+)(chain_rule_re.k, 1), chain_rule_re.i)))")))
 (derivable_partial_TCC3 0
  (derivable_partial_TCC3-1 nil 3801777685
   ("" (skeep)
    (("" (typepred "v")
      (("" (typepred "env")
        (("" (typepred "P")
          (("" (expand "projv" -6)
            (("" (skeep)
              (("" (expand "ddl_dom?")
                (("" (flatten)
                  (("" (expand "connected?")
                    ((""
                      (inst -1 "env" "env!1"
                       "LAMBDA(i:nat): IF i <= k THEN env!1(i) ELSE env(i) ENDIF")
                      (("1" (assert)
                        (("1"
                          (case "vec_2_env(k, v, env) = LAMBDA (i: nat): IF i <= k THEN env!1(i) ELSE env(i) ENDIF")
                          (("1" (assert) nil nil)
                           ("2" (decompose-equality 1)
                            (("2" (lift-if 1)
                              (("2"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "env_2_vec_nth")
                                      (("1"
                                        (inst -1 "k" "env!1" "x!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "list_extensionality")
                                            (("1"
                                              (inst
                                               -1
                                               "env_2_vec(k, env!1)"
                                               "v")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (inst -2 "x!1")
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (replace -12)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1
                                                             rl)
                                                            (("1"
                                                              (expand
                                                               "vec_2_env"
                                                               1
                                                               1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "vec_2_env" 2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "between?" 1)
                        (("2" (skeep)
                          (("2" (lift-if 1)
                            (("2" (split 1)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (Environment type-eq-decl nil hp_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (connected? const-decl "bool" differentiation nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (derivable_partial subtype
    "chain_rule_re.vec_2_env(chain_rule_re.k, chain_rule_re.v, chain_rule_re.env)"
    "(chain_rule_re.P)")))
 (derivable_partial 0
  (derivable_partial-1 nil 3801825137
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "derivable?")
          (("1" (expand "init_partial?")
            (("1" (expand "restrict" -1)
              (("1" (expand "vec_re" -1)
                (("1" (expand "derivable?")
                  (("1" (expand "convergent?")
                    (("1" (skeep)
                      (("1" (inst 1 "l")
                        (("1" (expand "convergence")
                          (("1" (expand "NQ")
                            (("1" (expand "convergence")
                              (("1"
                                (flatten)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (expand "adh")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst -1 "e!1")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (typepred "x")
                                            (("1"
                                              (expand "A" -2)
                                              (("1"
                                                (expand "D_down" -2)
                                                (("1"
                                                  (typepred "v")
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (inst 1 "x")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (typepred "x")
                                                        (("2"
                                                          (typepred
                                                           "v")
                                                          (("2"
                                                            (expand
                                                             "A")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "D_down"
                                                                 -5)
                                                                (("2"
                                                                  (typepred
                                                                   "v")
                                                                  (("2"
                                                                    (expand
                                                                     "projv"
                                                                     -8)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "projv_proj")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "k"
                                                                           "P"
                                                                           "v"
                                                                           "x"
                                                                           "i")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "P")
                                                                            (("2"
                                                                              (expand
                                                                               "ddl_dom?"
                                                                               -1)
                                                                              (("2"
                                                                                (flatten)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst -2 "epsilon")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst 1 "delta")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (lemma "with_e_vec")
                                                (("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (expand
                                                     "vec_2_env"
                                                     1
                                                     3)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst
                                                         -2
                                                         "k"
                                                         "env"
                                                         "i"
                                                         "x"
                                                         "re"
                                                         "v")
                                                        (("2"
                                                          (typepred
                                                           "v")
                                                          (("2"
                                                            (case
                                                             "vec_2_env(k, v + 0 * e(1 + k, i), env) = env")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "(LAMBDA (i: nat) -> real:
                                            IF i < 1 + k THEN nth(v, i) ELSE env(i) ENDIF)
                                           WITH [(i) := vec_2_env(k, v, env)(i)] = env")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "vec_2_env(k, v, env)
                                              WITH [(i) := vec_2_env(k, v, env)(i) + x] =vec_2_env(k, v + x * e(1 + k, i), env)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (inst
                                                                               -12
                                                                               "x")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "A"
                                                                                 1)
                                                                                (("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "D_down"
                                                                                     1
                                                                                     1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "x")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "A"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "proj_projv")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               "v")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "projv"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "env")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -3
                                                                                                       1
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "env_2_vec_id")
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (typepred
                                                                                                 "P")
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "ddl_dom?"
                                                                                                   -1)
                                                                                                  (("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "vec_2_env"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "vec_2_env"
                                                                               1)
                                                                              (("2"
                                                                                (replace
                                                                                 -5)
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("1"
                                                                                    (case
                                                                                     "x!1=i")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "nth_sum")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "i")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "nth_dist")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "nth_e")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "1+k"
                                                                                                             "i"
                                                                                                             "i")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (case
                                                                                           "x!1<1+k")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "nth_sum")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x!1")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "nth_dist")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "nth_e")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -3
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "v+x*e(1+k,i)"
                                                                                         "v"
                                                                                         "x*e(1+k,i)"
                                                                                         "e(1+k,i)")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (skeep)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("1"
                                                                        (case
                                                                         "x!1<1+k")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lift-if
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "x!1=i")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     -5)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vec_2_env"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide
                                                                   2)
                                                                  (("3"
                                                                    (skeep)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "v + 0 * e(1 + k, i) = v")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "mult_zero")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "e(1+k,i)")
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (lemma
                                                                           "zero_id")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "v")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              (("3"
                                                                (typepred
                                                                 "e(1+k,i)")
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (typepred
                                                                     "v + 0 * e(1 + k, i)"
                                                                     "v"
                                                                     " 0 * e(1 + k, i)"
                                                                     "e(1+k,i)")
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (replace
                                                                         -2)
                                                                        (("3"
                                                                          (replace
                                                                           -4)
                                                                          (("3"
                                                                            (replace
                                                                             -7)
                                                                            (("3"
                                                                              (hide
                                                                               -1
                                                                               -3
                                                                               -6
                                                                               -8)
                                                                              (("3"
                                                                                (replace
                                                                                 -5)
                                                                                (("3"
                                                                                  (expand
                                                                                   "max"
                                                                                   -1)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "derivable?" -1)
          (("2" (expand "init_partial?" 1 1)
            (("2" (expand "restrict" 1 1)
              (("2" (expand "derivable?" -1)
                (("2" (expand "derivable?" 1 1)
                  (("2" (expand "NQ")
                    (("2" (expand "convergent?")
                      (("2" (skeep)
                        (("2" (inst 1 "l")
                          (("2" (expand "convergence")
                            (("2" (expand "convergence")
                              (("2"
                                (flatten)
                                (("2"
                                  (split 1)
                                  (("1"
                                    (expand "adh" 1)
                                    (("1"
                                      (expand "adh" -1)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst -1 "e!1")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 1 "x")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (expand "A")
                                                (("2"
                                                  (typepred "x")
                                                  (("2"
                                                    (expand
                                                     "D_down"
                                                     1
                                                     1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand "A" -1)
                                                        (("2"
                                                          (expand
                                                           "vec_2_env"
                                                           -1)
                                                          (("2"
                                                            (lemma
                                                             "proj_projv")
                                                            (("2"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "projv"
                                                                 1)
                                                                (("2"
                                                                  (typepred
                                                                   "v")
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "env")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "env_2_vec_id")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (typepred
                                                                 "P")
                                                                (("3"
                                                                  (expand
                                                                   "ddl_dom?"
                                                                   -1)
                                                                  (("3"
                                                                    (flatten)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (inst -2 "epsilon")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst 1 "delta")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst -4 "x")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "vec_re" 1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "with_e_vec")
                                                      (("1"
                                                        (typepred "i")
                                                        (("1"
                                                          (expand
                                                           "vec_2_env"
                                                           -6
                                                           3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "k"
                                                               "env"
                                                               "i"
                                                               "x"
                                                               "re"
                                                               "v")
                                                              (("1"
                                                                (typepred
                                                                 "v")
                                                                (("1"
                                                                  (case
                                                                   "vec_2_env(k, v + 0 * e(1 + k, i), env) = env")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (case
                                                                       "(LAMBDA (i: nat) -> real:
                                              IF i < 1 + k THEN nth(v, i) ELSE env(i) ENDIF)
                                             WITH [(i) := vec_2_env(k, v, env)(i)] = env")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (case
                                                                           "vec_2_env(k, v, env)
                                                WITH [(i) := vec_2_env(k, v, env)(i) + x] =vec_2_env(k, v + x * e(1 + k, i), env)")
                                                                          (("1"
                                                                            (expand
                                                                             "vec_2_env"
                                                                             -12
                                                                             2)
                                                                            (("1"
                                                                              (replace
                                                                               -8
                                                                               -12)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "vec_2_env"
                                                                               1
                                                                               1)
                                                                              (("2"
                                                                                (assert
                                                                                 :flush?
                                                                                 T)
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("1"
                                                                                    (lift-if
                                                                                     1)
                                                                                    (("1"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "vec_2_env"
                                                                                             1
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "vec_2_env"
                                                                                               1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "nth_sum")
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "i")
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "nth_dist")
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "nth_e")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "1+k"
                                                                                                                 "i"
                                                                                                                 "i")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "x!1")
                                                                                          (("2"
                                                                                            (case
                                                                                             "x!1<1+k")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "nth_sum")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "vec_2_env")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "x!1")
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "nth_dist")
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "nth_e")
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -3
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert
                                                                         :flush?
                                                                         T)
                                                                        (("2"
                                                                          (decompose-equality
                                                                           1)
                                                                          (("1"
                                                                            (case
                                                                             "x!1<1+k")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide
                                                                                 -11)
                                                                                (("1"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (decompose-equality
                                                                                           -5)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "x!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "vec_2_env")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "v + 0 * e(1 + k, i) = v")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "mult_zero")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "e(1+k,i)")
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (lemma
                                                                             "zero_id")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "v")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "x")
                                                (("2"
                                                  (expand "A")
                                                  (("2"
                                                    (expand
                                                     "D_down"
                                                     -2)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (lemma
                                                         "projv_proj")
                                                        (("2"
                                                          (inst?)
                                                          (("1"
                                                            (expand
                                                             "vec_2_env"
                                                             2
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "P")
                                                            (("2"
                                                              (expand
                                                               "ddl_dom?"
                                                               -1)
                                                              (("2"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable? const-decl "bool" differentiation nil)
    (restrict const-decl "R" restrict nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (proj const-decl "bool" differentiation nil)
    (k skolem-const-decl "nat" chain_rule_re nil)
    (i skolem-const-decl "below(1 + k)" chain_rule_re nil)
    (P skolem-const-decl "(ddl_dom?(i))" chain_rule_re nil)
    (env skolem-const-decl "(P)" chain_rule_re nil)
    (v skolem-const-decl
     "{vv: VectorN(1 + k) | vec_2_env(k, vv, env) = env}" chain_rule_re
     nil)
    (x skolem-const-decl "(A(0))" chain_rule_re nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_is_complete name-judgement "metric_complete" real_topology
     metric_space)
    (fullset_is_clopen name-judgement
     "clopen[real, (metric_induced_topology)]" real_topology
     metric_space)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (connected? const-decl "bool" differentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (projv_proj formula-decl nil chain_rule_re nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (D_down const-decl "bool" init_partial_def mv_analysis)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (projv const-decl "bool" chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (zero_id formula-decl nil vector_arithmetic mv_analysis)
    (mult_zero formula-decl nil vector_arithmetic mv_analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth_sum formula-decl nil vector_arithmetic mv_analysis)
    (nth_e formula-decl nil vector_arithmetic mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nth_dist formula-decl nil vector_arithmetic mv_analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (x skolem-const-decl "(A(vec_2_env(k, v, env)(i)))" chain_rule_re
     nil)
    (proj_projv formula-decl nil chain_rule_re nil)
    (env_2_vec_id formula-decl nil chain_rule_re nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (RealExpr type-eq-decl nil hp_def nil)
    (with_e_vec formula-decl nil chain_rule_re nil)
    (NQ const-decl "real" derivatives_def analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (vec_re const-decl "real" chain_rule_re nil)
    (init_partial? const-decl "bool" init_partial_def mv_analysis)
    (x skolem-const-decl "(A(vec_2_env(k, v, env)(i)))" chain_rule_re
     nil)
    (x skolem-const-decl "(A(0))" chain_rule_re nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (derivable_partial_D_TCC1 0
  (derivable_partial_D_TCC1-1 nil 3806919202
   ("" (skeep)
    (("" (lemma "ddl_dom_dom_dir") (("" (inst?) nil nil)) nil)) nil)
   ((ddl_dom_dom_dir formula-decl nil chain_rule_re nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil))
   nil
   (derivable_partial_D subtype
    "chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(1, chain_rule_re.k)].deriv_domain_partial?(vector_arithmetic.e((number_fields.+)(chain_rule_re.k, 1), chain_rule_re.i)))")))
 (derivable_partial_D 0
  (derivable_partial_D-1 nil 3806918710
   ("" (skeep)
    (("" (lemma "derivable_partial")
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "derivable?" 1)
            (("1" (skeep)
              (("1" (inst -1 "env")
                (("1" (assert)
                  (("1" (inst?)
                    (("1" (inst -2 "env_2_vec(k,env)")
                      (("1" (assert)
                        (("1" (lemma "vec_2_env_id")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (hide 1)
                                (("1"
                                  (expand "init_partial?" -2)
                                  (("1"
                                    (inst -2 "env_2_vec(k,env)")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "vec_2_env_id")
                        (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (skeep)
            (("2" (expand "init_partial?" 1)
              (("2" (skeep)
                (("2" (typepred "p")
                  (("2" (hide -1)
                    (("2" (expand "projv" -2)
                      (("2" (typepred "P")
                        (("2" (expand "ddl_dom?" -1)
                          (("2" (flatten)
                            (("2" (expand "connected?" -1)
                              (("2"
                                (skeep -4)
                                (("2"
                                  (name
                                   "envwow"
                                   "LAMBDA(i:nat): IF i <= k THEN nth(p,i) ELSE env(i) ENDIF")
                                  (("1"
                                    (inst
                                     -7
                                     "k"
                                     "i"
                                     "P"
                                     "envwow"
                                     "p"
                                     "re")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "derivable?" -6)
                                          (("1"
                                            (inst
                                             -6
                                             "vec_2_env(k,p,envwow)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -7)
                                                (("1"
                                                  (case
                                                   "vec_re(k, envwow, re) = vec_re(k, env, re)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (decompose-equality
                                                     1)
                                                    (("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "vec_re"
                                                         1)
                                                        (("2"
                                                          (case
                                                           "vec_2_env(k, x!1, envwow) = vec_2_env(k, x!1, env)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (decompose-equality
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "vec_2_env"
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lift-if
                                                                     1)
                                                                    (("2"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -1
                                                                             2
                                                                             rl)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst
                                               -2
                                               "env!1"
                                               "env"
                                               "vec_2_env(k,p,envwow)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide 2 3)
                                                  (("2"
                                                    (expand
                                                     "between?"
                                                     1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (expand
                                                         "vec_2_env"
                                                         1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (lift-if 1)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "env_2_vec_nth")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "k"
                                                                       "env!1"
                                                                       "i!1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     2
                                                                     rl)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         " vec_2_env"
                                                                         3)
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           3
                                                                           rl)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (lift-if
                                                               1)
                                                              (("2"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "env_2_vec_nth")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "k"
                                                                         "env!1"
                                                                         "i!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "list_extensionality[real]")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "p"
                                                                               "env_2_vec(k,env!1)")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         "i!1")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2
                                                                                           1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -3
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "vec_2_env"
                                                                                               2
                                                                                               1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "vec_2_env"
                                                                                                   2
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       2
                                                                       rl)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (decompose-equality 1)
                                      (("2"
                                        (expand "vec_2_env" 1)
                                        (("2"
                                          (replace -1 1 rl)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if 1)
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (inst -2 "env!1" "env" "envwow")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (hide 2 3)
                                          (("3"
                                            (expand "between?" 1)
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (replace -1 1 rl)
                                                (("3"
                                                  (case "i!1<= k")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -2 2 rl)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "env_2_vec_nth")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "k"
                                                             "env!1"
                                                             "i!1")
                                                            (("1"
                                                              (lemma
                                                               "list_extensionality[real]")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p"
                                                                 "env_2_vec(k,env!1)")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (inst
                                                                           -2
                                                                           "i!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1 3 rl)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (typepred "i!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_partial formula-decl nil chain_rule_re nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (connected? const-decl "bool" differentiation nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (between? const-decl "bool" differentiation nil)
    (env!1 skolem-const-decl "(P)" chain_rule_re nil)
    (env skolem-const-decl "(P)" chain_rule_re nil)
    (env_2_vec_nth formula-decl nil chain_rule_re nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (vec_re const-decl "real" chain_rule_re nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (p skolem-const-decl "(projv(k, P))" chain_rule_re nil)
    (envwow skolem-const-decl "[nat -> real]" chain_rule_re nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (env skolem-const-decl "(P)" chain_rule_re nil)
    (P skolem-const-decl "(ddl_dom?(i))" chain_rule_re nil)
    (i skolem-const-decl "below(1 + k)" chain_rule_re nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (k skolem-const-decl "nat" chain_rule_re nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (vec_2_env_id formula-decl nil chain_rule_re nil)
    (init_partial? const-decl "bool" init_partial_def mv_analysis)
    (projv const-decl "bool" chain_rule_re nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable? const-decl "bool" differentiation nil))
   shostak))
 (deriv_partial_TCC1 0
  (deriv_partial_TCC3-1 nil 3806918673
   ("" (lemma "derivable_partial_D")
    (("" (skeep)
      (("" (inst -1 "k" "i" "P" "re")
        (("" (assert)
          (("" (flatten)
            (("" (split -2)
              (("1" (assert) (("1" (inst -1 "env") nil nil)) nil)
               ("2" (assert)
                (("2" (typepred "P") (("2" (postpone) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (derivable? const-decl "bool" differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_partial_D formula-decl nil chain_rule_re nil))
   nil
   (deriv_partial subtype
    "chain_rule_re.vec_re(chain_rule_re.k, chain_rule_re.env, chain_rule_re.re)"
    "(init_partial_def[(number_fields.+)(1, chain_rule_re.k)].init_partial?(vector_arithmetic.e((number_fields.+)(chain_rule_re.k, 1), chain_rule_re.i), chain_rule_re.projv(chain_rule_re.k, chain_rule_re.P)))")))
 (deriv_partial 0
  (deriv_partial-1 nil 3814887354
   ("" (skeep)
    (("" (expand "partial" 1)
      (("" (expand "partial_diff" 1)
        (("" (expand "partial" 1)
          (("" (expand "init_partial" 1)
            (("" (lemma "deriv_def[(proj(i)(P))]")
              (("1"
                (with-tccs
                 (name "l" "deriv[(D_down(projv(k, P), v, e(1 + k, i)))]
                                                  (restrict[real, (D_down(projv(k, P), v, e(1 + k, i))), real]
                                                       (LAMBDA (Delta: real):
                                                          vec_re(k, env, re)(v + Delta * e(1 + k, i))),
                                                   0)"))
                (("1" (replace -1 1)
                  (("1"
                    (inst -2
                     " (LAMBDA (x: (proj(i)(P))): re(env WITH [(i) := x]))"
                     "l" "env(i)")
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (expand "deriv" -1 1)
                          (("1" (expand "restrict" -1)
                            (("1"
                              (lemma
                               "lim_fun_lemma[(A[(D_down(projv(k, P), v, e(1 + k, i)))](0))]")
                              (("1"
                                (inst
                                 -1
                                 "NQ(LAMBDA (s: (D_down(projv(k, P), v, e(1 + k, i)))):
                                     vec_re(k, env, re)(v + s * e(1 + k, i)),
                                   0)"
                                 "0")
                                (("1"
                                  (replace -2 -1)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (expand "convergence")
                                      (("1"
                                        (expand "NQ")
                                        (("1"
                                          (expand "convergence")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (expand "adh")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst -1 "e!1")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (typepred "x")
                                                        (("1"
                                                          (expand
                                                           "A"
                                                           -2)
                                                          (("1"
                                                            (expand
                                                             "D_down"
                                                             -2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (typepred
                                                                 "v")
                                                                (("1"
                                                                  (hide
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     2
                                                                     "x")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "x")
                                                                      (("2"
                                                                        (typepred
                                                                         "v")
                                                                        (("2"
                                                                          (expand
                                                                           "A")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "D_down"
                                                                               -5)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "v")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "projv"
                                                                                     -7)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "projv_proj")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "k"
                                                                                           "P"
                                                                                           "v"
                                                                                           "x"
                                                                                           "i")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "nth(v,i)=env(i)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (decompose-equality
                                                                                                   -10)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "i")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "vec_2_env"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "P")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "ddl_dom?"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst -2 "epsilon")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "delta")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (lemma
                                                             "with_e_vec")
                                                            (("2"
                                                              (typepred
                                                               "i")
                                                              (("2"
                                                                (typepred
                                                                 "v")
                                                                (("2"
                                                                  (case
                                                                   "env WITH [(i) := env(i)] = env")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -10
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "vec_re"
                                                                             -10)
                                                                            (("1"
                                                                              (case
                                                                               "vec_2_env(k, v + 0 * e(1 + k, i), env) = env")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "env WITH [(i) := env(i) + x] = vec_2_env(k, v + x * e(1 + k, i), env)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "with_e_vec")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "k"
                                                                                           "env"
                                                                                           "i"
                                                                                           "x"
                                                                                           "re"
                                                                                           "v")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1
                                                                                               1
                                                                                               rl)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "env(i) = nth(v,i)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "vec_2_env"
                                                                                                     -6
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (decompose-equality
                                                                                                       -6)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "i")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (case
                                                                                     " v + 0 * e(1 + k, i) = v")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "mult_zero")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "e(1+k,i)")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "zero_id")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "v")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "A")
                                                                          (("2"
                                                                            (typepred
                                                                             "x")
                                                                            (("2"
                                                                              (expand
                                                                               "D_down"
                                                                               1
                                                                               1)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "A"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "proj_projv")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "nth(v,i) = env(i)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "vec_2_env"
                                                                                             -5)
                                                                                            (("2"
                                                                                              (decompose-equality
                                                                                               -5)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "i")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "projv"
                                                                                           1)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "v")
                                                                                            (("2"
                                                                                              (inst
                                                                                               1
                                                                                               "env")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "env_2_vec_id")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (typepred
                                                                                         "P")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "ddl_dom?"
                                                                                           -1)
                                                                                          (("3"
                                                                                            (flatten)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (decompose-equality
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "x!1=i")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "D_down_partial_not_one[k+1]")
                                  (("2"
                                    (inst
                                     -1
                                     "e(1+k,i)"
                                     "projv(k,P)"
                                     "v")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -2 2)
                                        (("1"
                                          (expand "not_one_element?")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 2 "y")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "v")
                                      (("2"
                                        (hide -4)
                                        (("2"
                                          (hide 2 3)
                                          (("2"
                                            (expand "projv" 1)
                                            (("2"
                                              (inst 1 "env")
                                              (("2"
                                                (lemma "env_2_vec_id")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma "ddl_dom_dom_dir")
                                      (("3"
                                        (inst?)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (lemma "D_down_partial[k+1]")
                                  (("3"
                                    (inst
                                     -1
                                     "e(1+k,i)"
                                     "projv(k,P)"
                                     "v")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -2 2)
                                        (("1"
                                          (expand "deriv_domain?")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst -1 "e!1" "x")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 1 "y")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "v")
                                      (("2"
                                        (hide -4)
                                        (("2"
                                          (hide 2 3)
                                          (("2"
                                            (expand "projv" 1)
                                            (("2"
                                              (inst 1 "env")
                                              (("2"
                                                (lemma "env_2_vec_id")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma "ddl_dom_dom_dir")
                                      (("3"
                                        (inst?)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (hide 2 -1)
                                  (("4"
                                    (skeep)
                                    (("4"
                                      (typepred
                                       "v + s * e(1 + k, i)"
                                       "v"
                                       "s * e(1 + k, i)"
                                       "e(1 + k, i)")
                                      (("4"
                                        (hide -1 -3 -6 -8)
                                        (("4"
                                          (replace -2)
                                          (("4"
                                            (replace -5)
                                            (("4"
                                              (assert)
                                              (("4"
                                                (replace -1)
                                                (("4"
                                                  (replace -4)
                                                  (("4"
                                                    (expand "max" 1)
                                                    (("4"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2 -1)
                                (("2"
                                  (lemma "D_down_partial_not_one[1+k]")
                                  (("2"
                                    (inst
                                     -1
                                     "e(1+k,i)"
                                     "projv(k,P)"
                                     "v")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "v")
                                        (("1"
                                          (expand "projv" 1)
                                          (("1"
                                            (inst 1 "env")
                                            (("1"
                                              (lemma "env_2_vec_id")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "ddl_dom_dom_dir")
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (assert)
                                (("3"
                                  (lemma "D_down_partial[k+1]")
                                  (("3"
                                    (inst
                                     -1
                                     "e(1+k,i)"
                                     "projv(k,P)"
                                     "v")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -2 2)
                                        (("1"
                                          (expand "deriv_domain?")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 1 "y")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "v")
                                      (("2"
                                        (hide -4)
                                        (("2"
                                          (hide 2 3)
                                          (("2"
                                            (expand "projv" 1)
                                            (("2"
                                              (inst 1 "env")
                                              (("2"
                                                (lemma "env_2_vec_id")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma "ddl_dom_dom_dir")
                                      (("3"
                                        (inst?)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (typepred "P")
                  (("2" (expand "ddl_dom?")
                    (("2" (flatten)
                      (("2" (expand "not_one_element?" -2)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (lemma "ddl_dom_dd")
                (("3" (inst -1 "i" "P") (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((partial const-decl "real" partial_def mv_analysis)
    (partial const-decl "real" partial_def mv_analysis)
    (ddl_dom? const-decl "bool" differentiation nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (proj const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_def formula-decl nil derivatives_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (lim_fun_lemma formula-decl nil lim_of_functions analysis)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (D_down_partial formula-decl nil init_partial_def mv_analysis)
    (D_down_partial_not_one formula-decl nil init_partial_def
     mv_analysis)
    (ddl_dom_dom_dir formula-decl nil chain_rule_re nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (connected? const-decl "bool" differentiation nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (projv_proj formula-decl nil chain_rule_re nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fullset_is_clopen name-judgement
     "clopen[real, (metric_induced_topology)]" real_topology
     metric_space)
    (real_is_complete name-judgement "metric_complete" real_topology
     metric_space)
    (x skolem-const-decl
     "(A[(D_down(projv(k, P), v, e(1 + k, i)))](0))" chain_rule_re nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (env_2_vec_id formula-decl nil chain_rule_re nil)
    (proj_projv formula-decl nil chain_rule_re nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (zero_id formula-decl nil vector_arithmetic mv_analysis)
    (mult_zero formula-decl nil vector_arithmetic mv_analysis)
    (x skolem-const-decl "(A(env(i)))" chain_rule_re nil)
    (with_e_vec formula-decl nil chain_rule_re nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (v skolem-const-decl
     "{vv: VectorN(1 + k) | vec_2_env(k, vv, env) = env}" chain_rule_re
     nil)
    (env skolem-const-decl "(P)" chain_rule_re nil)
    (P skolem-const-decl "(ddl_dom?(i))" chain_rule_re nil)
    (i skolem-const-decl "below(1 + k)" chain_rule_re nil)
    (k skolem-const-decl "nat" chain_rule_re nil)
    (deriv const-decl "real" derivatives_def analysis)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (RealExpr type-eq-decl nil hp_def nil)
    (derivable? const-decl "bool" differentiation nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (D_down const-decl "bool" init_partial_def mv_analysis)
    (projv const-decl "bool" chain_rule_re nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (restrict const-decl "R" restrict nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (not_one_element? const-decl "bool" differentiation nil)
    (ddl_dom_dd formula-decl nil differentiation nil)
    (init_partial const-decl "real" init_partial_def mv_analysis)
    (partial_diff const-decl "RealExpr" differentiation nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (diff_re_derivable_partial_TCC1 0
  (diff_re_derivable_partial_TCC1-1 nil 3853427499
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (proj const-decl "bool" differentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (env!1 skolem-const-decl "(P!1)" chain_rule_re nil)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (P!1 skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (* const-decl "real" matrices matrices)
    (vec_re const-decl "real" chain_rule_re nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (connected? const-decl "bool" differentiation nil)
    (/= const-decl "boolean" notequal nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" differentiation nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (between? const-decl "bool" differentiation nil))
   nil
   (diff_re_derivable_partial subtype "chain_rule_re.P"
    "(differentiation.ddl_dom?(chain_rule_re.i))")))
 (diff_re_derivable_partial 0
  (diff_re_derivable_partial-1 nil 3853427591
   ("" (skeep)
    (("" (lemma "derivable_partial_D")
      (("" (inst -1 "k" "i" "P" "re")
        (("" (assert)
          (("" (lemma "diff_re_init_partial")
            (("" (inst?)
              (("" (skeep) (("" (inst -1 "env" "re") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_partial_D formula-decl nil chain_rule_re nil)
    (diff_re_init_partial formula-decl nil chain_rule_re nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (diff_re_partialable_p_TCC1 0
  (diff_re_partialable_p_TCC1-1 nil 3853245071
   ("" (subtype-tcc) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (P!1 skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (env!1 skolem-const-decl "(P!1)" chain_rule_re nil)
    (env!2 skolem-const-decl "(P!1)" chain_rule_re nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (proj const-decl "bool" differentiation nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VectorN type-eq-decl nil matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec_re const-decl "real" chain_rule_re nil)
    (* const-decl "real" matrices matrices)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (connected? const-decl "bool" differentiation nil)
    (/= const-decl "boolean" notequal nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" differentiation nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (between? const-decl "bool" differentiation nil))
   nil
   (diff_re_partialable_p subtype "chain_rule_re.P"
    "(differentiation.ddl_dom?(chain_rule_re.i))")))
 (diff_re_partialable_p 0
  (diff_re_partialable_p-1 nil 3853245896
   ("" (skeep)
    (("" (lemma "derivable_partial")
      (("" (skeep)
        (("" (inst -1 "k" "i" "P" "env" "env_2_vec(k,env)" "re")
          (("1" (assert)
            (("1" (lemma "vec_2_env_id")
              (("1" (inst?)
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (hide -1)
                        (("1" (expand "differentiable_re_p?")
                          (("1" (lemma "diff_imp_init_partial2[1+k]")
                            (("1"
                              (inst -1 "e(1+k,i)" "projv(k,P)"
                               "vec_re(k,env,re)" "env_2_vec(k,env)")
                              (("1" (assert) nil nil)
                               ("2"
                                (lemma "e_not_zero")
                                (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "vec_2_env_id") (("2" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_partial formula-decl nil chain_rule_re nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (env skolem-const-decl "(P)" chain_rule_re nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (k skolem-const-decl "nat" chain_rule_re nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (vec_2_env_id formula-decl nil chain_rule_re nil)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (/= const-decl "boolean" notequal nil)
    (e def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (i skolem-const-decl "below(1 + k)" chain_rule_re nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (vec_re const-decl "real" chain_rule_re nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (projv const-decl "bool" chain_rule_re nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (e_not_zero formula-decl nil vector_arithmetic mv_analysis)
    (diff_imp_init_partial2 formula-decl nil init_partial_def
     mv_analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (diff_re_derivable_up_TCC1 0
  (diff_re_derivable_up_TCC1-1 nil 3853999301
   ("" (subtype-tcc) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (P!1 skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (env!1 skolem-const-decl "(P!1)" chain_rule_re nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (proj const-decl "bool" differentiation nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec_re const-decl "real" chain_rule_re nil)
    (* const-decl "real" matrices matrices)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (connected? const-decl "bool" differentiation nil)
    (/= const-decl "boolean" notequal nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" differentiation nil)
    (ddl_dom_upto? const-decl "bool" differentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (between? const-decl "bool" differentiation nil))
   nil
   (diff_re_derivable_up subtype "chain_rule_re.P"
    "(differentiation.ddl_dom_upto?(chain_rule_re.k))")))
 (diff_re_derivable_up 0
  (diff_re_derivable_up-1 nil 3853999466
   ("" (skeep)
    (("" (expand "derivable_up?")
      (("" (expand "diff_re?")
        (("" (skeep)
          (("" (expand "derivable?")
            (("" (lemma "diff_re_derivable_partial")
              (("" (inst?)
                (("" (inst -1 "P" "re" "i")
                  (("1" (expand "derivable?" -1)
                    (("1" (propax) nil nil)) nil)
                   ("2" (expand "diff_re?") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_up? const-decl "bool" differentiation nil)
    (diff_re_derivable_partial formula-decl nil chain_rule_re nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (re skolem-const-decl "RealExpr" chain_rule_re nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (k skolem-const-decl "nat" chain_rule_re nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable? const-decl "bool" differentiation nil)
    (diff_re? const-decl "bool" chain_rule_re nil))
   shostak))
 (der_re_partial_der_TCC1 0
  (der_re_partial_der_TCC1-1 nil 3853427499
   ("" (lemma "diff_re_derivable_partial")
    (("" (skeep) (("" (inst?) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (diff_re_derivable_partial formula-decl nil chain_rule_re nil))
   nil
   (der_re_partial_der subtype "chain_rule_re.re"
    "(differentiation.derivable?(chain_rule_re.i, chain_rule_re.P))")))
 (der_re_partial_der 0
  (der_re_partial_der-1 nil 3853427981
   ("" (skeep)
    (("" (lemma "deriv_partial")
      (("" (lemma "der_re_partial")
        (("" (inst?)
          (("" (replace -1)
            (("" (inst?)
              (("" (lemma "vec_2_env_id")
                (("" (inst -1 "k" "env") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_partial formula-decl nil chain_rule_re nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (ddl_dom? const-decl "bool" differentiation nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (derivable? const-decl "bool" differentiation nil)
    (env skolem-const-decl "(P)" chain_rule_re nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (k skolem-const-decl "nat" chain_rule_re nil)
    (vec_2_env_id formula-decl nil chain_rule_re nil)
    (der_re_partial formula-decl nil chain_rule_re nil))
   shostak))
 (der_ll_partial_der_TCC1 0
  (der_ll_partial_der_TCC1-1 nil 3853930613
   ("" (skeep)
    (("" (expand "diff_re?")
      (("" (inst -2 "env_sol(D, envi, ode)(car[real](p))")
        (("" (expand "differentiable_re_p?" -2) (("" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_re? const-decl "bool" chain_rule_re nil)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (dd? const-decl "bool" hp_expr nil)
    (dLVar type-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (p skolem-const-decl "(lift_rd(D))" chain_rule_re nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (der_ll_partial_der subtype
    "chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(list_adt[real].car(chain_rule_re.p)), chain_rule_re.R)"
    "{ff: domain_vec2real_def[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].vec2real_f | differentiable_def[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].differentiable?(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P), ff, chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(list_adt[real].car(chain_rule_re.p))))}")))
 (der_ll_partial_der_TCC2 0
  (der_ll_partial_der_TCC2-1 nil 3853930613
   ("" (skeep) (("" (expand "projv" 1) (("" (inst?) nil nil)) nil))
    nil)
   ((projv const-decl "bool" chain_rule_re nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (dd? const-decl "bool" hp_expr nil)
    (dLVar type-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (p skolem-const-decl "(lift_rd(D))" chain_rule_re nil)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (der_ll_partial_der subtype
    "chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(list_adt[real].car(chain_rule_re.p)))"
    "(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P))")))
 (der_ll_partial_der_TCC3 0
  (der_ll_partial_der_TCC3-1 nil 3853930613
   ("" (skeep)
    ((""
      (typepred "der_f[1 + max_var(ode)]
                (projv(max_var(ode), P),
                 env_2_vec(max_var(ode),
                           env_sol(D, envi, ode)(car[real](p))))
                (vec_re(max_var(ode), env_sol(D, envi, ode)(car[real](p)),
                        R))")
      (("" (assert) nil nil)) nil))
    nil)
   ((vec_re const-decl "real" chain_rule_re nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (projv const-decl "bool" chain_rule_re nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (der_f const-decl
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     differentiable_def mv_analysis)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (dd? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (max_var const-decl "nat" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (der_ll_partial_der subtype "chain_rule_re.i"
    "below[length[real](der_f[1 + max_var(ode)](projv(max_var(ode), P), env_2_vec(max_var(ode), env_sol(D, envi, ode)(car[real](p))))(vec_re(max_var(ode), env_sol(D, envi, ode)(car[real](p)), R)))]")))
 (der_ll_partial_der_TCC4 0
  (der_ll_partial_der_TCC4-1 nil 3853930613
   ("" (skeep)
    (("" (lemma "diff_re_partialable_p")
      (("" (inst -1 "max_var(ode)" "P" "R" _)
        (("" (expand "derivable?" 1)
          (("" (skeep)
            (("" (inst -1 "env")
              (("" (assert)
                (("" (split -1)
                  (("1" (inst -1 "i") nil nil)
                   ("2" (assert)
                    (("2" (expand "diff_re?")
                      (("2" (inst -2 "env") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_re_partialable_p formula-decl nil chain_rule_re nil)
    (derivable? const-decl "bool" differentiation nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (dd? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (max_var const-decl "nat" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (der_ll_partial_der subtype "chain_rule_re.R"
    "(differentiation.derivable?(chain_rule_re.i, chain_rule_re.P))")))
 (der_ll_partial_der_TCC5 0
  (der_ll_partial_der_TCC5-1 nil 3853930613 ("" (subtype-tcc) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (dLVar type-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (deriv const-decl "real" derivatives_def analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (env!1 skolem-const-decl "(P!1)" chain_rule_re nil)
    (l!1 skolem-const-decl "real" chain_rule_re nil)
    (x2!1 skolem-const-decl "(A(i!1))" chain_rule_re nil)
    (env!1 skolem-const-decl "(P!1)" chain_rule_re nil)
    (l!1 skolem-const-decl "real" chain_rule_re nil)
    (x2!1 skolem-const-decl "(A(i!1))" chain_rule_re nil)
    (P!1 skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (envi!1 skolem-const-decl "Environment" chain_rule_re nil)
    (proj const-decl "bool" differentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (D!1 skolem-const-decl "(dd?)" chain_rule_re nil)
    (ode!1 skolem-const-decl "(ODEs_s?(D!1, envi!1))" chain_rule_re
     nil)
    (i!1 skolem-const-decl "below(1 + max_var(ode!1))" chain_rule_re
     nil)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (x2!1 skolem-const-decl "(A(i!1))" chain_rule_re nil)
    (env!1 skolem-const-decl "(P!1)" chain_rule_re nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (l!1 skolem-const-decl "real" chain_rule_re nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (b!1 skolem-const-decl "posreal" chain_rule_re nil)
    (<= const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (env!1 skolem-const-decl "(P!1)" chain_rule_re nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (x2!1 skolem-const-decl "(A(i!1))" chain_rule_re nil)
    (l!1 skolem-const-decl "real" chain_rule_re nil)
    (b!1 skolem-const-decl "posreal" chain_rule_re nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (max_var const-decl "nat" hp_def nil)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec_re const-decl "real" chain_rule_re nil)
    (* const-decl "real" matrices matrices)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (connected? const-decl "bool" differentiation nil)
    (/= const-decl "boolean" notequal nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" differentiation nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (between? const-decl "bool" differentiation nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs))
   nil
   (der_ll_partial_der subtype "chain_rule_re.P"
    "(differentiation.ddl_dom?(chain_rule_re.i))")))
 (der_ll_partial_der 0
  (der_ll_partial_der-1 nil 3853931424
   ("" (skeep)
    (("" (lemma "der_re_partial_der")
      (("" (inst -1 "max_var(ode)" "P" _ _ _)
        (("" (inst -1 "env_sol(D,envi,ode)(car(p))" "R" "i")
          (("" (replace -1 1 rl)
            (("" (expand "der_re" 1)
              (("" (assert)
                (("" (expand "der_re_p" 1)
                  (("" (expand "vec_2_env" 1) (("" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((der_re_partial_der formula-decl nil chain_rule_re nil)
    (p skolem-const-decl "(lift_rd(D))" chain_rule_re nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (R skolem-const-decl "RealExpr" chain_rule_re nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (der_re const-decl "Environment" chain_rule_re nil)
    (der_re_p const-decl "Environment" chain_rule_re nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (dd? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (max_var const-decl "nat" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (eq_re_comp 0
  (eq_re_comp-1 nil 3798373313
   ("" (skeep*)
    (("" (decompose-equality 1)
      (("" (expand "vec_re" 1)
        (("" (lemma "vec_2_env_id")
          (("" (inst?)
            (("" (assert)
              ((""
                (case "vec_2_env(max_var(ode),
                       env_2_vec(max_var(ode), env_sol(D, envi, ode)(x!1)),
                       env_sol(D, envi, ode)(x!1)) = vec_2_env(max_var(ode),
                          env_2_vec(max_var(ode), env_sol(D, envi, ode)(x!1)),
                          envi)")
                (("1" (assert) nil nil)
                 ("2" (hide 2)
                  (("2" (decompose-equality 1)
                    (("2" (case "x!2<=max_var(ode)")
                      (("1" (decompose-equality -2)
                        (("1" (inst -1 "x!2")
                          (("1" (replace -1 1)
                            (("1" (expand "vec_2_env" 1 1)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "env_2_vec_nth")
                                  (("1"
                                    (inst
                                     -1
                                     "max_var(ode)"
                                     "env_sol(D, envi, ode)(x!1)"
                                     "x!2")
                                    (("1"
                                      (replace -1 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (decompose-equality -1)
                        (("2" (inst -1 "x!2")
                          (("2" (expand "vec_2_env" 2 1)
                            (("2" (assert)
                              (("2"
                                (expand "vec_2_env" 2 1)
                                (("2"
                                  (expand "env_sol" 2 1)
                                  (("2"
                                    (typepred
                                     "env_at_t(ode, fs_sol(D, envi, ode), envi)(x!1)")
                                    (("2"
                                      (expand "env_at_t?" -1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst -1 "x!2")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (lemma "nip_max_var")
                                            (("2"
                                              (inst -1 "ode" "x!2")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VectorN type-eq-decl nil matrices matrices)
    (vec_re const-decl "real" chain_rule_re nil)
    (max_var const-decl "nat" hp_def nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (vec_2_env_id formula-decl nil chain_rule_re nil)
    (<= const-decl "bool" reals nil)
    (env_2_vec_nth formula-decl nil chain_rule_re nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (x!2 skolem-const-decl "nat" chain_rule_re nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nip_max_var formula-decl nil hp_def nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (env_sol_env2vec 0
  (env_sol_env2vec-1 nil 3852214243
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (expand "env_sol")
        (("" (expand "vec_2_env")
          (("" (expand "env_at_t")
            (("" (lift-if 1)
              (("" (lift-if 1)
                (("" (split 1)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (lemma "env_2_vec_nth")
                          (("1" (inst?)
                            (("1" (replace -1) (("1" (assert) nil nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand "nonempty?")
                                  (("2"
                                    (expand "empty?")
                                    (("2"
                                      (expand "not_in_map")
                                      (("2"
                                        (skeep 1)
                                        (("2"
                                          (inst -2 "i_1")
                                          (("2"
                                            (expand "member")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (lift-if 2)
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (lemma "env_2_vec_nth")
                            (("1" (inst?)
                              (("1"
                                (replace -1)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (expand "nonempty?")
                                    (("2"
                                      (expand "empty?")
                                      (("2"
                                        (expand "not_in_map")
                                        (("2"
                                          (skeep 1)
                                          (("2"
                                            (inst -2 "i_1")
                                            (("2"
                                              (expand "member")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (lemma "nip_max_var")
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (max_var const-decl "nat" hp_def nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (env_2_vec_nth formula-decl nil chain_rule_re nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (x!1 skolem-const-decl "nat" chain_rule_re nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nip_max_var formula-decl nil hp_def nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (e2v_diff_p_TCC1 0
  (e2v_diff_p_TCC1-1 nil 3798447050
   ("" (skeep)
    (("" (lemma "dd_lift_dd")
      (("" (inst?)
        (("" (assert)
          (("" (typepred "D")
            (("" (lemma "dd_deriv_domain") (("" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd_lift_dd formula-decl nil lift_real_fun_def mv_analysis)
    (dd_deriv_domain formula-decl nil hp_expr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (e2v_diff_p subtype "lift_real_fun_def.lift_rd(chain_rule_re.D)"
    "(derivative_domain_multi[1].deriv_domain?)")))
 (e2v_diff_p 0
  (e2v_diff_p-3 nil 3853854063
   ("" (skeep)
    (("" (lemma "derivable_nth_mat_point[1]")
      ((""
        (inst -1 "max_var(ode) + 1" "lift_rd(D)"
         "           liftl(max_var(ode) + 1, D,
                     LAMBDA (tt: (D)):
                       env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt)))"
         "p")
        (("" (assert)
          (("" (hide 2)
            (("" (skeep)
              (("" (case "not_in_map(ode)(i)")
                (("1" (expand "differentiable?")
                  (("1" (inst 1 "(: 0 :)")
                    (("1" (expand "convergence_zero?")
                      (("1" (skeep)
                        (("1" (inst 1 "1")
                          (("1" (skeep)
                            (("1" (expand "NQ" 1)
                              (("1"
                                (expand "nth" 1)
                                (("1"
                                  (expand "liftl" 1)
                                  (("1"
                                    (typepred "p")
                                    (("1"
                                      (expand "lift_rd" -3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "x")
                                          (("1"
                                            (expand "NQ" -3)
                                            (("1"
                                              (expand "lift_rd" -3)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "env_2_vec_nth")
                                                      (("1"
                                                        (inst-cp
                                                         -1
                                                         "max_var(ode)"
                                                         "env_sol(D, envi, ode)(car(p + x))"
                                                         "i")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "max_var(ode)"
                                                             "env_sol(D, envi, ode)(car(p))"
                                                             "i")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "(env_sol(D, envi, ode)(car(p + x))(i) - (: 0 :) * x -
                                env_sol(D, envi, ode)(car(p))(i)) = 0")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     "*"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "dot"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "dot"
                                                                         1
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "env_sol"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "env_sol"
                                                                             1)
                                                                            (("2"
                                                                              (typepred
                                                                               "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p + x))")
                                                                              (("2"
                                                                                (typepred
                                                                                 " env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                                                                                (("2"
                                                                                  (expand
                                                                                   "env_at_t?"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "env_at_t?"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -4
                                                                                         "i")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "i")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "nth" 2 1)
                  (("2" (expand "liftl" 2 1)
                    (("2" (lemma "env_2_vec_nth")
                      (("2" (inst -1 "max_var(ode)" _ "i")
                        (("2" (expand "env_sol" 2 1)
                          (("2"
                            (typepred "env_at_t
                                                     (ode,
                                                      fs_sol(D, envi, ode),
                                                      envi)
                                                     (car(p))")
                            (("2" (expand "env_at_t?" -1)
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "not_in_map" 1 1)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst -2 "i_1")
                                      (("2"
                                        (typepred
                                         "fs_sol(D, envi, ode)")
                                        (("2"
                                          (expand
                                           "solution_odes_u?"
                                           -1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (expand
                                                 "solution_odes?"
                                                 -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide -3)
                                                    (("2"
                                                      (expand
                                                       "derivable_odes?"
                                                       -1)
                                                      (("2"
                                                        (inst -1 "i_1")
                                                        (("2"
                                                          (expand
                                                           "derivable?"
                                                           -1)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "car(p)")
                                                            (("1"
                                                              (expand
                                                               "restrict"
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "derivable?"
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (hide
                                                                     -4)
                                                                    (("1"
                                                                      (expand
                                                                       "differentiable?")
                                                                      (("1"
                                                                        (expand
                                                                         "convergent?"
                                                                         -1)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (inst
                                                                             1
                                                                             "(: l :)")
                                                                            (("1"
                                                                              (expand
                                                                               "convergence_zero?"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "convergence")
                                                                                (("1"
                                                                                  (expand
                                                                                   "convergence")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         "epsilon")
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (inst
                                                                                             1
                                                                                             "delta")
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -2
                                                                                                 "car(x)")
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "NQ")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "x")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "NQ"
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "lift_rd"
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "p")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "lift_rd"
                                                                                                                       -3)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1
                                                                                                                           -4)
                                                                                                                          (("1"
                                                                                                                            (inst-cp
                                                                                                                             -9
                                                                                                                             "env_at_t(ode, fs_sol(D, envi, ode), envi)
                                                       (car(p + x))")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -9
                                                                                                                               "                          env_at_t(ode, fs_sol(D, envi, ode), envi)
                                                        (car(p))")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -9)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -10)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -8)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -7)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -10
                                                                                                                                         -7)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -7
                                                                                                                                           2
                                                                                                                                           rl)
                                                                                                                                          (("1"
                                                                                                                                            (typepred
                                                                                                                                             "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p + x))")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "env_at_t?"
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -2
                                                                                                                                                   "i_1")
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -13
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -2
                                                                                                                                                       2
                                                                                                                                                       rl)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -13
                                                                                                                                                         -8)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -10
                                                                                                                                                           -8
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "+"
                                                                                                                                                               2
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "add"
                                                                                                                                                                 2
                                                                                                                                                                 1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "*"
                                                                                                                                                                     2)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "dot"
                                                                                                                                                                       2
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "dot"
                                                                                                                                                                           2
                                                                                                                                                                           1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             -1
                                                                                                                                                                             -2
                                                                                                                                                                             -3
                                                                                                                                                                             -4
                                                                                                                                                                             -5
                                                                                                                                                                             -6
                                                                                                                                                                             -7)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (hide
                                                                                                                                                                               -2
                                                                                                                                                                               -3
                                                                                                                                                                               -4
                                                                                                                                                                               -5
                                                                                                                                                                               -6
                                                                                                                                                                               -7)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "abs_div")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -1
                                                                                                                                                                                   "norm_inf(1)(x)"
                                                                                                                                                                                   "(fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                  fs_sol(D, envi, ode)(i_1)(car(p))
                                  - l * car(x))")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "norm_inf"
                                                                                                                                                                                     2
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "norm_inf"
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "abs"
                                                                                                                                                                                         2
                                                                                                                                                                                         2)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "max"
                                                                                                                                                                                           2)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "length"
                                                                                                                                                                                             2)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (hide
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                   "abs_div")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (case
                                                                                                                                                                                                     "NOT (fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                            fs_sol(D, envi, ode)(i_1)(car(p)))
                                           / car(x)
                                           - l = ((fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                            fs_sol(D, envi, ode)(i_1)(car(p)))
                                           - l*car(x))/car(x)")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil)
                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                      (replace
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (inst
                                                                                                                                                                                                         -2
                                                                                                                                                                                                         "car(x)"
                                                                                                                                                                                                         "(fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                       fs_sol(D, envi, ode)(i_1)(car(p)))
                                      - l * car(x)")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -2
                                                                                                                                                                                                           -3)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (hide
                                                                                                                                                                                                               -1)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                 "abs_div")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                   "abs(car(x))"
                                                                                                                                                                                                                   "(fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                      fs_sol(D, envi, ode)(i_1)(car(p))
                                      - l * car(x))")
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                     -1
                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                       "abs"
                                                                                                                                                                                                                       2
                                                                                                                                                                                                                       2)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "fullset")
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "-"
                                                                                                       -6)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "sub"
                                                                                                         -6)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "zero_vec"
                                                                                                           -6)
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "zero_vec"
                                                                                                             -6)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "scal"
                                                                                                               -6)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "scal"
                                                                                                                 -6)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "add"
                                                                                                                   -6)
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "add"
                                                                                                                     -6)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (typepred
                                                                                                                         "x")
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "length"
                                                                                                                           -2)
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "length"
                                                                                                                             -2)
                                                                                                                            (("3"
                                                                                                                              (lift-if
                                                                                                                               -2)
                                                                                                                              (("3"
                                                                                                                                (flatten)
                                                                                                                                (("3"
                                                                                                                                  (split
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "norm_inf")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "norm_inf")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "abs")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "length")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "max")
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "length")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "x")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "zero_vec"
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "zero_vec"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (decompose-equality
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "A"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "p")
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "x")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "NQ"
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "lift_rd"
                                                                                                               -3)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "x")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "+"
                                                                                                                       -7)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "add"
                                                                                                                           -7)
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (typepred
                                                                 "p")
                                                                (("2"
                                                                  (expand
                                                                   "lift_rd"
                                                                   -3)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_nth_mat_point formula-decl nil convergence_vec2vec
     mv_analysis)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (derivable? const-decl "bool" derivatives analysis)
    (restrict const-decl "R" restrict nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (fullset_is_clopen name-judgement
     "clopen[real, (metric_induced_topology)]" real_topology
     metric_space)
    (real_is_complete name-judgement "metric_complete" real_topology
     metric_space)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (norm? const-decl "bool" norms mv_analysis)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (abs_div formula-decl nil real_props nil)
    (NQ const-decl "real" derivatives_def analysis)
    (fullset const-decl "set" sets nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (x skolem-const-decl
     "{xx: (NQ(lift_rd(D), p)) | xx /= zero_vec(1)}" chain_rule_re nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (p skolem-const-decl "(lift_rd(D))" chain_rule_re nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (env_2_vec_nth formula-decl nil chain_rule_re nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (dot def-decl "real" matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         mv_analysis)
    (max def-decl "real" norms mv_analysis)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (nth def-decl "T" list_props nil)
    (* const-decl "real" matrices matrices)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth const-decl "vec2real_f" convergence_vec2vec mv_analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (dd? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (max_var const-decl "nat" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dLVar type-decl nil hp_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil)
  (e2v_diff_p-2 nil 3853853725
   ("" (skeep)
    (("" (lemma "derivable_nth_mat_point[1]")
      ((""
        (inst -1 "max_var(ode) + 1" "lift_rd(D)"
         "           liftl(max_var(ode) + 1, D,
                     LAMBDA (tt: (D)):
                       env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt)))"
         "p")
        (("" (assert)
          (("" (hide 2)
            (("" (skeep)
              (("" (case "not_in_map(ode)(i)")
                (("1" (expand "differentiable?")
                  (("1" (inst 1 "(: 0 :)")
                    (("1" (expand "convergence_zero?")
                      (("1" (skeep)
                        (("1" (inst 1 "1")
                          (("1" (skeep)
                            (("1" (expand "NQ" 1)
                              (("1"
                                (expand "nth" 1)
                                (("1"
                                  (expand "liftl" 1)
                                  (("1"
                                    (typepred "p")
                                    (("1"
                                      (expand "lift_rd" -3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "x")
                                          (("1"
                                            (expand "NQ" -3)
                                            (("1"
                                              (expand "lift_rd" -3)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "env_2_vec_nth")
                                                      (("1"
                                                        (inst-cp
                                                         -1
                                                         "max_var(ode)"
                                                         "env_sol(D, envi, ode)(car(p + x))"
                                                         "i")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "max_var(ode)"
                                                             "env_sol(D, envi, ode)(car(p))"
                                                             "i")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "(env_sol(D, envi, ode)(car(p + x))(i) - (: 0 :) * x -
                                env_sol(D, envi, ode)(car(p))(i)) = 0")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     "*"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "dot"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "dot"
                                                                         1
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "env_sol"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "env_sol"
                                                                             1)
                                                                            (("2"
                                                                              (typepred
                                                                               "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p + x))")
                                                                              (("2"
                                                                                (typepred
                                                                                 " env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                                                                                (("2"
                                                                                  (expand
                                                                                   "env_at_t?"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "env_at_t?"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -4
                                                                                         "i")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "i")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "nth" 2 1)
                  (("2" (expand "liftl" 2 1)
                    (("2" (lemma "env_2_vec_nth")
                      (("2" (inst -1 "max_var(ode)" _ "i")
                        (("2" (expand "env_sol" 2 1)
                          (("2"
                            (typepred "env_at_t
                                                     (ode,
                                                      fs_sol(D, envi, ode),
                                                      envi)
                                                     (car(p))")
                            (("2" (expand "env_at_t?" -1)
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "not_in_map" 1 1)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst -2 "i_1")
                                      (("2"
                                        (typepred
                                         "fs_sol(D, envi, ode)")
                                        (("2"
                                          (expand
                                           "solution_odes_u?"
                                           -1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (expand
                                                 "solution_odes?"
                                                 -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide -3)
                                                    (("2"
                                                      (expand
                                                       "derivable_odes?"
                                                       -1)
                                                      (("2"
                                                        (inst -1 "i_1")
                                                        (("2"
                                                          (expand
                                                           "derivable?"
                                                           -1)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "car(p)")
                                                            (("1"
                                                              (expand
                                                               "restrict"
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "derivable?"
                                                                 -1)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (hide
                                                                     -4)
                                                                    (("1"
                                                                      (expand
                                                                       "differentiable?")
                                                                      (("1"
                                                                        (expand
                                                                         "convergent?"
                                                                         -1)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (inst
                                                                             1
                                                                             "(: l :)")
                                                                            (("1"
                                                                              (expand
                                                                               "convergence_zero?"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "convergence")
                                                                                (("1"
                                                                                  (expand
                                                                                   "convergence")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         "epsilon")
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (inst
                                                                                             1
                                                                                             "delta")
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -2
                                                                                                 "car(x)")
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "NQ")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "x")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "NQ"
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "lift_rd"
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "p")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "lift_rd"
                                                                                                                       -3)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1
                                                                                                                           -4)
                                                                                                                          (("1"
                                                                                                                            (inst-cp
                                                                                                                             -9
                                                                                                                             "env_at_t(ode, fs_sol(D, envi, ode), envi)
                                                       (car(p + x))")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -9
                                                                                                                               "                          env_at_t(ode, fs_sol(D, envi, ode), envi)
                                                        (car(p))")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -9)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -10)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -8)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -7)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -10
                                                                                                                                         -7)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -7
                                                                                                                                           2
                                                                                                                                           rl)
                                                                                                                                          (("1"
                                                                                                                                            (typepred
                                                                                                                                             "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p + x))")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "env_at_t?"
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -2
                                                                                                                                                   "i_1")
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -13
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -2
                                                                                                                                                       2
                                                                                                                                                       rl)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -13
                                                                                                                                                         -8)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -10
                                                                                                                                                           -8
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "+"
                                                                                                                                                               2
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "add"
                                                                                                                                                                 2
                                                                                                                                                                 1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "*"
                                                                                                                                                                     2)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "dot"
                                                                                                                                                                       2
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "dot"
                                                                                                                                                                           2
                                                                                                                                                                           1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (hide
                                                                                                                                                                             -1
                                                                                                                                                                             -2
                                                                                                                                                                             -3
                                                                                                                                                                             -4
                                                                                                                                                                             -5
                                                                                                                                                                             -6
                                                                                                                                                                             -7)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (hide
                                                                                                                                                                               -2
                                                                                                                                                                               -3
                                                                                                                                                                               -4
                                                                                                                                                                               -5
                                                                                                                                                                               -6
                                                                                                                                                                               -7)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "abs_div")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -1
                                                                                                                                                                                   "norm_inf(1)(x)"
                                                                                                                                                                                   "(fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                  fs_sol(D, envi, ode)(i_1)(car(p))
                                  - l * car(x))")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "norm_inf"
                                                                                                                                                                                     2
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "norm_inf"
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "abs"
                                                                                                                                                                                         2
                                                                                                                                                                                         2)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "max"
                                                                                                                                                                                           2)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "length"
                                                                                                                                                                                             2)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (hide
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                   "abs_div")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (case
                                                                                                                                                                                                     "NOT (fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                            fs_sol(D, envi, ode)(i_1)(car(p)))
                                           / car(x)
                                           - l = ((fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                            fs_sol(D, envi, ode)(i_1)(car(p)))
                                           - l*car(x))/car(x)")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil)
                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                      (replace
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (inst
                                                                                                                                                                                                         -2
                                                                                                                                                                                                         "car(x)"
                                                                                                                                                                                                         "(fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                       fs_sol(D, envi, ode)(i_1)(car(p)))
                                      - l * car(x)")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -2
                                                                                                                                                                                                           -3)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (hide
                                                                                                                                                                                                               -1)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                 "abs_div")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                   "abs(car(x))"
                                                                                                                                                                                                                   "(fs_sol(D, envi, ode)(i_1)(car(p) + car(x)) -
                                      fs_sol(D, envi, ode)(i_1)(car(p))
                                      - l * car(x))")
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                     -1
                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                       "abs"
                                                                                                                                                                                                                       2
                                                                                                                                                                                                                       2)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "fullset")
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "-"
                                                                                                       -6)
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "sub"
                                                                                                         -6)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "zero_vec"
                                                                                                           -6)
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "zero_vec"
                                                                                                             -6)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "scal"
                                                                                                               -6)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "scal"
                                                                                                                 -6)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "add"
                                                                                                                   -6)
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "add"
                                                                                                                     -6)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (typepred
                                                                                                                         "x")
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "length"
                                                                                                                           -2)
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "length"
                                                                                                                             -2)
                                                                                                                            (("3"
                                                                                                                              (lift-if
                                                                                                                               -2)
                                                                                                                              (("3"
                                                                                                                                (flatten)
                                                                                                                                (("3"
                                                                                                                                  (split
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "norm_inf")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "norm_inf")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "abs")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "length")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "max")
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "length")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "x")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "zero_vec"
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "zero_vec"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (decompose-equality
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "A"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "p")
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "x")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "NQ"
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "lift_rd"
                                                                                                               -3)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "x")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "+"
                                                                                                                       -7)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "add"
                                                                                                                           -7)
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (typepred
                                                                 "p")
                                                                (("2"
                                                                  (expand
                                                                   "lift_rd"
                                                                   -3)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (max_var const-decl "nat" hp_def nil)
    (dd? const-decl "bool" hp_expr nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nth const-decl "vec2real_f" convergence_vec2vec mv_analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" matrices matrices)
    (nth def-decl "T" list_props nil)
    (max def-decl "real" norms mv_analysis)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         mv_analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (dot def-decl "real" matrices matrices)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (env_2_vec_nth formula-decl nil chain_rule_re nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (/= const-decl "boolean" notequal nil)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (solution_odes? const-decl "bool" hp_expr nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (fullset const-decl "set" sets nil)
    (NQ const-decl "real" derivatives_def analysis)
    (abs_div formula-decl nil real_props nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (norm? const-decl "bool" norms mv_analysis)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_is_complete name-judgement "metric_complete" real_topology
     metric_space)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (derivable_nth_mat_point formula-decl nil convergence_vec2vec
     mv_analysis))
   nil)
  (e2v_diff_p-1 nil 3798447110
   ("" (skeep)
    (("" (lemma "derivable_nth_mat_point[1]")
      ((""
        (inst -1 "max_var(ode) + 1" "lift_rd(D)"
         "           liftl(max_var(ode) + 1, D,
                     LAMBDA (tt: (D)):
                       env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt)))"
         "p")
        (("" (assert)
          (("" (hide 2)
            (("" (skeep)
              (("" (case "not_in_map(ode)(i)")
                (("1" (expand "differentiable?")
                  (("1" (inst 1 "(: 0 :)")
                    (("1" (expand "convergence_zero?")
                      (("1" (skeep)
                        (("1" (inst 1 "1")
                          (("1" (skeep)
                            (("1" (expand "NQ" 1)
                              (("1"
                                (expand "nth" 1)
                                (("1"
                                  (expand "liftl" 1)
                                  (("1"
                                    (typepred "p")
                                    (("1"
                                      (expand "lift_rd" -3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "x")
                                          (("1"
                                            (expand "NQ" -3)
                                            (("1"
                                              (expand "lift_rd" -3)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "env_2_vec_nth")
                                                      (("1"
                                                        (inst-cp
                                                         -1
                                                         "max_var(ode)"
                                                         "env_sol(D, envi, ode)(car(p + x))"
                                                         "i")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "max_var(ode)"
                                                             "env_sol(D, envi, ode)(car(p))"
                                                             "i")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "(env_sol(D, envi, ode)(car(p + x))(i) - (: 0 :) * x -
                                env_sol(D, envi, ode)(car(p))(i)) = 0")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     "*"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "dot"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "dot"
                                                                         1
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "env_sol"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "env_sol"
                                                                             1)
                                                                            (("2"
                                                                              (typepred
                                                                               "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p + x))")
                                                                              (("2"
                                                                                (typepred
                                                                                 " env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                                                                                (("2"
                                                                                  (expand
                                                                                   "env_at_t?"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "env_at_t?"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -4
                                                                                         "i")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "i")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "nth" 2 1)
                  (("2" (expand "liftl" 2 1)
                    (("2" (lemma "env_2_vec_nth")
                      (("2" (inst -1 "max_var(ode)" _ "i")
                        (("2" (expand "env_sol" 2 1)
                          (("2"
                            (typepred "env_at_t
                                                     (ode,
                                                      fs_sol(D, envi, ode),
                                                      envi)
                                                     (car(p))")
                            (("2" (expand "env_at_t?" -1)
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "not_in_map" 1 1)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst -2 "i_1")
                                      (("2"
                                        (typepred
                                         "fs_sol(D, envi, ode)")
                                        (("2"
                                          (expand
                                           "solution_odes_u?"
                                           -1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (expand
                                                 "solution_odes?"
                                                 -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (hide -3)
                                                    (("2"
                                                      (expand
                                                       "derivable_odes?"
                                                       -1)
                                                      (("2"
                                                        (inst -1 "i_1")
                                                        (("2"
                                                          (expand
                                                           "derivable?"
                                                           -1)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "car(p)")
                                                            (("1"
                                                              (expand
                                                               "restrict"
                                                               -1)
                                                              (("1"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_nth_mat_point formula-decl nil convergence_vec2vec
     mv_analysis)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (derivable? const-decl "bool" derivatives analysis)
    (restrict const-decl "R" restrict nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_is_complete name-judgement "metric_complete" real_topology
     metric_space)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (norm? const-decl "bool" norms mv_analysis)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (abs_div formula-decl nil real_props nil)
    (NQ const-decl "real" derivatives_def analysis)
    (fullset const-decl "set" sets nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (solution_odes? const-decl "bool" hp_expr nil)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (env_2_vec_nth formula-decl nil chain_rule_re nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (dot def-decl "real" matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         mv_analysis)
    (max def-decl "real" norms mv_analysis)
    (nth def-decl "T" list_props nil)
    (* const-decl "real" matrices matrices)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth const-decl "vec2real_f" convergence_vec2vec mv_analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (dd? const-decl "bool" hp_expr nil)
    (max_var const-decl "nat" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (e2v_der_p_TCC1 0
  (e2v_der_p_TCC1-1 nil 3853843328
   ("" (skeep)
    (("" (lemma "e2v_diff_p")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((e2v_diff_p formula-decl nil chain_rule_re nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (e2v_der_p subtype
    "lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))"
    "{ff: domain_vec2real_def[1].vec2vec((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))) | convergence_vec2vec[1].differentiable?((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode)), lift_real_fun_def.lift_rd(chain_rule_re.D), ff, chain_rule_re.p)}")))
 (e2v_der_p_TCC2 0
  (e2v_der_p_TCC2-1 nil 3853843328 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (fullset const-decl "set" sets nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (env_at_t? const-decl "bool" hp_expr nil)
    (/= const-decl "boolean" notequal nil)
    (max_var const-decl "nat" hp_def nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec mv_analysis)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (e2v_der_p subtype "chain_rule_re.i"
    "below[length[list[real]](der_f[1](1 + max_var(ode), lift_rd(D), p)(liftl(1 + max_var(ode), D, (LAMBDA (tt: (D)): env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt))))))]")))
 (e2v_der_p_TCC3 0
  (e2v_der_p_TCC3-1 nil 3853843328
   ("" (skeep)
    (("" (lemma "e2v_diff_p")
      (("" (inst?)
        (("" (inst -1 "p")
          (("" (lemma "derivable_nth_mat_point[1]")
            (("" (inst?)
              (("" (assert)
                (("" (inst -1 "i")
                  (("" (assert)
                    (("" (hide -2)
                      (("" (expand "differentiable?")
                        (("" (assert)
                          (("" (skeep -1)
                            (("" (inst 1 "g")
                              ((""
                                (assert)
                                ((""
                                  (case
                                   "nth(1 + max_var(ode),
                 liftl(1 + max_var(ode), D,
                       LAMBDA (tt: (D)):
                         env_2_vec(max_var(ode),
                                   env_sol(D, envi, ode)(tt))),
                 i) = nth[1]
                 (1 + max_var(ode),
                  liftl(1 + max_var(ode), D,
                        LAMBDA (tt: (D)):
                          env_2_vec(max_var(ode),
                                    env_sol(D, envi, ode)(tt))),i)")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (replace -1 1 rl)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (expand "convergence_zero?")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst -1 "epsilon")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 1 "delta")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst -1 "x")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "nth")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((e2v_diff_p formula-decl nil chain_rule_re nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max_var const-decl "nat" hp_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (constraints type-eq-decl nil domain_vec2real_def mv_analysis)
    (nth const-decl "vec2real_f" fundamentals_constrained_optimization
         mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (/= const-decl "boolean" notequal nil)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (nth const-decl "vec2real_f" convergence_vec2vec mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (derivable_nth_mat_point formula-decl nil convergence_vec2vec
     mv_analysis)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (e2v_der_p subtype
    "fundamentals_constrained_optimization[1].nth((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt)))), chain_rule_re.i)"
    "{ff: domain_vec2real_def[1].vec2real_f | differentiable_def[1].differentiable?(lift_real_fun_def.lift_rd(chain_rule_re.D), ff, chain_rule_re.p)}")))
 (e2v_der_p 0
  (e2v_der_p-1 nil 3853844519
   ("" (skeep)
    (("" (lemma "e2v_diff_p")
      (("" (inst?)
        (("" (lemma "der_nth_mat_point[1]")
          (("" (inst?)
            (("1" (assert)
              (("1" (inst -2 "p")
                (("1" (assert)
                  (("1" (inst -1 "i")
                    (("1" (assert)
                      (("1" (replace -1 1 lr)
                        (("1" (expand "nth" 1) (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (hide -1)
                (("2" (lemma "dd_e_partial") (("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((e2v_diff_p formula-decl nil chain_rule_re nil)
    (der_nth_mat_point formula-decl nil convergence_vec2vec
     mv_analysis)
    (dd_e_partial formula-decl nil chain_rule_re nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth const-decl "vec2real_f" fundamentals_constrained_optimization
         mv_analysis)
    (nth const-decl "vec2real_f" convergence_vec2vec mv_analysis)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (max_var const-decl "nat" hp_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (e2v_der_p_not_in_map 0
  (e2v_der_p_not_in_map-1 nil 3853850092
   ("" (lemma "e2v_der_p")
    (("" (skeep)
      (("" (inst?)
        (("" (replace -1)
          (("" (hide -1)
            (("" (lemma "init_partial_def[1].der_f_unique")
              ((""
                (inst -1 "lift_rd(D)" "p" " (nth[1]
                    (max_var(ode) + 1,
                     liftl(max_var(ode) + 1, D,
                           LAMBDA (tt: (D)):
                             env_2_vec(max_var(ode),
                                       env_sol(D, envi, ode)(tt))),
                     i))" "(: 0 :)")
                (("1" (assert)
                  (("1" (hide 2)
                    (("1" (expand "convergence_zero?")
                      (("1" (skeep)
                        (("1" (inst 1 "1")
                          (("1" (skeep)
                            (("1" (expand "NQ" 1)
                              (("1"
                                (expand "nth" 1)
                                (("1"
                                  (expand "liftl" 1)
                                  (("1"
                                    (typepred "p")
                                    (("1"
                                      (expand "lift_rd" -3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "x")
                                          (("1"
                                            (expand "NQ" -3)
                                            (("1"
                                              (expand "lift_rd" -3)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "env_2_vec_nth")
                                                      (("1"
                                                        (inst-cp
                                                         -1
                                                         "max_var(ode)"
                                                         "env_sol(D, envi, ode)(car(p + x))"
                                                         "i")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "max_var(ode)"
                                                             "env_sol(D, envi, ode)(car(p))"
                                                             "i")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "(env_sol(D, envi, ode)(car(p + x))(i) - (: 0 :) * x -
                                         env_sol(D, envi, ode)(car(p))(i)) = 0")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   3)
                                                                  (("2"
                                                                    (expand
                                                                     "*"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "dot"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "dot"
                                                                         1
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "env_sol"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "env_sol"
                                                                             1)
                                                                            (("2"
                                                                              (typepred
                                                                               "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p + x))")
                                                                              (("2"
                                                                                (typepred
                                                                                 " env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                                                                                (("2"
                                                                                  (expand
                                                                                   "env_at_t?"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "env_at_t?"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -4
                                                                                         "i")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "i")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "dd_e_partial") (("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (der_f_unique formula-decl nil init_partial_def mv_analysis)
    (dd_e_partial formula-decl nil chain_rule_re nil)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (env_2_vec_nth formula-decl nil chain_rule_re nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (dot def-decl "real" matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         mv_analysis)
    (max def-decl "real" norms mv_analysis)
    (not_in_map const-decl "bool" hp_def nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (nth def-decl "T" list_props nil)
    (* const-decl "real" matrices matrices)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (nth const-decl "vec2real_f" fundamentals_constrained_optimization
         mv_analysis)
    (constraints type-eq-decl nil domain_vec2real_def mv_analysis)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (length_singleton formula-decl nil more_list_props structures)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (max_var const-decl "nat" hp_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (e2v_der_p formula-decl nil chain_rule_re nil))
   shostak))
 (e2v_der_p_in_map 0
  (e2v_der_p_in_map-1 nil 3853853798
   ("" (skeep)
    (("" (skoletin*)
      (("" (lemma "e2v_der_p")
        (("" (inst?)
          (("" (replace -1)
            (("" (lemma "init_partial_def[1].der_f_unique")
              ((""
                (inst -1 "lift_rd(D)" "p" " (nth[1]
                    (max_var(ode) + 1,
                     liftl(max_var(ode) + 1, D,
                           LAMBDA (tt: (D)):
                             env_2_vec(max_var(ode),
                                       env_sol(D, envi, ode)(tt))),
                     i))"
                 "(: deriv[(D)](restrict[real, (D), real](fs(k)))(car(p)) :)")
                (("1" (assert)
                  (("1" (hide 2)
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1" (expand "deriv" 1)
                          (("1" (expand "deriv" 1)
                            (("1"
                              (typepred
                               "lim(NQ(restrict[real, (D), real](fs(k)),
                                              car(p)),
                                           0)")
                              (("1"
                                (expand "nth" 1 1)
                                (("1"
                                  (expand "liftl" 1 1)
                                  (("1"
                                    (lemma "env_2_vec_nth")
                                    (("1"
                                      (inst -1 "max_var(ode)" _ "i")
                                      (("1"
                                        (expand "env_sol" 1 1)
                                        (("1"
                                          (typepred
                                           "env_at_t
                                                                     (ode,
                                                                      fs_sol(D, envi, ode),
                                                                      envi)
                                                                     (car(p))")
                                          (("1"
                                            (expand "env_at_t?" -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst -2 "k")
                                                (("1"
                                                  (typepred
                                                   "fs_sol(D, envi, ode)")
                                                  (("1"
                                                    (expand
                                                     "solution_odes_u?"
                                                     -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (expand
                                                           "solution_odes?"
                                                           -1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "restrict"
                                                               -8)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (hide
                                                                   -4)
                                                                  (("1"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     -3
                                                                     -4
                                                                     -5)
                                                                    (("1"
                                                                      (expand
                                                                       "convergence")
                                                                      (("1"
                                                                        (expand
                                                                         "convergence_zero?"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "convergence")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "epsilon")
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (inst
                                                                                     1
                                                                                     "delta")
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         "car(x)")
                                                                                        (("1"
                                                                                          (split
                                                                                           -2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "NQ")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "x")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "NQ"
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "lift_rd"
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (typepred
                                                                                                             "p")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "lift_rd"
                                                                                                               -3)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   -4)
                                                                                                                  (("1"
                                                                                                                    (reveal
                                                                                                                     -)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -19)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -18
                                                                                                                         -17)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -16)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             -15)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -12)
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -1
                                                                                                                                 -2
                                                                                                                                 -3
                                                                                                                                 -4)
                                                                                                                                (("1"
                                                                                                                                  (hide
                                                                                                                                   -3)
                                                                                                                                  (("1"
                                                                                                                                    (inst-cp
                                                                                                                                     -4
                                                                                                                                     "env_at_t(ode, fs_sol(D, envi, ode), envi)
                                                                                     (car(p + x))")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -4
                                                                                                                                       "                          env_at_t(ode, fs_sol(D, envi, ode), envi)
                                                                                      (car(p))")
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -4)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -5)
                                                                                                                                          (("1"
                                                                                                                                            (case
                                                                                                                                             "i = dlvar_index(nth(ode, k)`1)")
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1
                                                                                                                                               -7
                                                                                                                                               rl)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -7
                                                                                                                                                 2
                                                                                                                                                 rl)
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   -7)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide
                                                                                                                                                     -7)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -16
                                                                                                                                                       2)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -16
                                                                                                                                                         2
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "restrict")
                                                                                                                                                            (("1"
                                                                                                                                                              (typepred
                                                                                                                                                               "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p + x))")
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "env_at_t?"
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -2
                                                                                                                                                                     "k")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -4
                                                                                                                                                                       -2
                                                                                                                                                                       rl)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -19
                                                                                                                                                                         -2
                                                                                                                                                                         rl)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (replace
                                                                                                                                                                           -2
                                                                                                                                                                           2
                                                                                                                                                                           rl)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             "+"
                                                                                                                                                                             2
                                                                                                                                                                             1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "add"
                                                                                                                                                                               2
                                                                                                                                                                               1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -1
                                                                                                                                                                                 -2
                                                                                                                                                                                 -3
                                                                                                                                                                                 -4
                                                                                                                                                                                 -5
                                                                                                                                                                                 -6
                                                                                                                                                                                 -7
                                                                                                                                                                                 -8
                                                                                                                                                                                 -9
                                                                                                                                                                                 -10
                                                                                                                                                                                 -11
                                                                                                                                                                                 -12
                                                                                                                                                                                 -13
                                                                                                                                                                                 -14
                                                                                                                                                                                 -15)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -2)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "abs_div")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "*"
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "dot"
                                                                                                                                                                                         2
                                                                                                                                                                                         1)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "dot"
                                                                                                                                                                                           2
                                                                                                                                                                                           1)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "norm_inf"
                                                                                                                                                                                             2
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "norm_inf")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "abs"
                                                                                                                                                                                                 2
                                                                                                                                                                                                 2)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "max"
                                                                                                                                                                                                   2
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "length"
                                                                                                                                                                                                     2)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (grind)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide
                                                                                                                                               3)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 -1
                                                                                                                                                 -2
                                                                                                                                                 -3
                                                                                                                                                 -4
                                                                                                                                                 -5
                                                                                                                                                 -6
                                                                                                                                                 -7
                                                                                                                                                 -8
                                                                                                                                                 -9
                                                                                                                                                 -10
                                                                                                                                                 -11
                                                                                                                                                 -12
                                                                                                                                                 -13
                                                                                                                                                 -14
                                                                                                                                                 -15
                                                                                                                                                 -16
                                                                                                                                                 -17)
                                                                                                                                                (("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "k")
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "extend"
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (split
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "index_of"
                                                                                                                                                             -2)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (propax)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "x")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "fullset")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (hide
                                                                                             2)
                                                                                            (("3"
                                                                                              (hide
                                                                                               -3
                                                                                               -4)
                                                                                              (("3"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (case
                                                                                                   "x = (: car(x) :)")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "zero_vec"
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "zero_vec"
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "-"
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "add"
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (grind)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "add"
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (typepred
                                                                                                     "x")
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -3
                                                                                                       -4
                                                                                                       -5)
                                                                                                      (("2"
                                                                                                        (decompose-equality
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -4)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "x")
                                                                                                (("2"
                                                                                                  (split
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "car(x) = 0")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "NOT x = zero_vec(1)")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "zero_vec"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "zero_vec"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (decompose-equality
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     -3)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "A"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "NQ"
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "lift_rd")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "+"
                                                                                                           -)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "add"
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (lemma "dd_noe")
                                  (("2" (inst?) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (lemma "dd_deriv_domain")
                                  (("3" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (lemma "dd_noe") (("2" (inst -1 "D") nil nil))
                    nil))
                  nil)
                 ("3" (lemma "dd_deriv_domain")
                  (("3" (inst -1 "D") nil nil)) nil)
                 ("4" (lemma "dd_e_partial")
                  (("4" (inst -1 "D") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_var const-decl "nat" hp_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (index_of const-decl "bool" hp_def nil)
    (in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (dd? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil) (< const-decl "bool" reals nil)
    (singleton? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (singleton_extend application-judgement "(singleton?[T])"
     extend_set_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (the const-decl "(p)" sets nil)
    (fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (differentiable? const-decl "bool" convergence_vec2vec mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (Matrix type-eq-decl nil matrices matrices)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (NQ const-decl "real" convergence_vec2vec mv_analysis)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec mv_analysis)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (index_of_j application-judgement
     "(singleton?[below(length[MapExpr](me))])" hp_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (restrict const-decl "R" restrict nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (der_f_unique formula-decl nil init_partial_def mv_analysis)
    (dd_e_partial formula-decl nil chain_rule_re nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (lim const-decl "{l: real | convergence(f, x0, l)}"
     lim_of_functions analysis)
    (env_at_t? const-decl "bool" hp_expr nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (fullset_is_clopen name-judgement
     "clopen[real, (metric_induced_topology)]" real_topology
     metric_space)
    (real_is_complete name-judgement "metric_complete" real_topology
     metric_space)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (* const-decl "real" matrices matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (max def-decl "real" norms mv_analysis)
    (fullset const-decl "set" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (x!1 skolem-const-decl "(D)" chain_rule_re nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (i skolem-const-decl
       "{i: below(1 + max_var(ode)) | in_map(ode)(i)}" chain_rule_re
       nil)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (dot def-decl "real" matrices matrices)
    (abs_div formula-decl nil real_props nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (x skolem-const-decl
     "{xx: (NQ(lift_rd(D), p)) | xx /= zero_vec(1)}" chain_rule_re nil)
    (p skolem-const-decl "(lift_rd(D))" chain_rule_re nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (env_2_vec_nth formula-decl nil chain_rule_re nil)
    (dd_noe formula-decl nil hp_expr nil)
    (dd_deriv_domain formula-decl nil hp_expr nil)
    (deriv const-decl "real" derivatives_def analysis)
    (length_singleton formula-decl nil more_list_props structures)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (constraints type-eq-decl nil domain_vec2real_def mv_analysis)
    (nth const-decl "vec2real_f" fundamentals_constrained_optimization
         mv_analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (e2v_der_p formula-decl nil chain_rule_re nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (e2v_der_p_in_map_ode 0
  (e2v_der_p_in_map_ode-1 nil 3853933662
   ("" (lemma "e2v_der_p_in_map")
    (("" (skeep)
      (("" (inst?)
        (("" (skoletin*)
          (("" (replace -4)
            (("" (expand "env_sol" 1 1)
              ((""
                (typepred
                 "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                (("" (expand "env_at_t?" -1)
                  (("" (flatten)
                    (("" (inst -2 "k")
                      (("" (decompose-equality 1)
                        (("" (replace -5 1 lr)
                          (("" (expand "expr" 1 1)
                            (("" (expand "extend" -9)
                              ((""
                                (assert)
                                ((""
                                  (typepred "k")
                                  ((""
                                    (expand "extend" -1)
                                    ((""
                                      (case
                                       " sets
                           [naturalnumbers.below(list_props[hp_def.MapExpr].length
                                                 (ode))].the
                           (hp_def.index_of(ode, i)) = k")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred "fs")
                                            (("1"
                                              (expand
                                               "solution_odes_u?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (expand
                                                     "solution_odes?"
                                                     -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "expr"
                                                         -10)
                                                        (("1"
                                                          (replace
                                                           -4
                                                           -10)
                                                          (("1"
                                                            (replace
                                                             -10
                                                             1
                                                             rl)
                                                            (("1"
                                                              (case
                                                               "dlvar_index(nth(ode,k)`1) = i")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "car(p)"
                                                                   "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                                                                  (("1"
                                                                    (expand
                                                                     "sol_at_t?"
                                                                     -4)
                                                                    (("1"
                                                                      (inst
                                                                       -4
                                                                       "k")
                                                                      (("1"
                                                                        (replace
                                                                         -4
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "index_of"
                                                                     -5)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred
                                             "sets[below(list_props[hp_def.MapExpr].length(ode))].the
              (hp_def.index_of(ode, i))")
                                            (("2"
                                              (expand "index_of")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred "ode")
                                                  (("2"
                                                    (expand
                                                     "mapexpr_inj")
                                                    (("2"
                                                      (lemma
                                                       "mapexpr_inj_eq")
                                                      (("2"
                                                        (hide -2)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "k"
                                                               "sets[below(list_props[hp_def.MapExpr].length(ode))].the
              (LAMBDA (k: below(length(ode))): dlvar_index(nth(ode, k)`1) = i)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (lemma
                                                                       "dlvar_inj")
                                                                      (("1"
                                                                        (with-tccs
                                                                         (inst?
                                                                          -1
                                                                          :where
                                                                          1))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "singleton?")
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "k")
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (typepred
                                                                         "y")
                                                                        (("2"
                                                                          (lemma
                                                                           "mapexpr_inj_eq")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "ode")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "k"
                                                                                 "y")
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((e2v_der_p_in_map formula-decl nil chain_rule_re nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max_var const-decl "nat" hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (in_map const-decl "bool" hp_def nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (k skolem-const-decl
     "(extend[nat, below(length[MapExpr](ode)), bool, FALSE](index_of(ode, i)))"
     chain_rule_re nil)
    (dLVar_dlvar_extensionality formula-decl nil hp_def nil)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (dlvar_inj formula-decl nil hp_def nil)
    (i skolem-const-decl
       "{i: below(1 + max_var(ode)) | in_map(ode)(i)}" chain_rule_re
       nil)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (mapexpr_inj_eq formula-decl nil hp_def nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (dlvar_index adt-accessor-decl "[dLVar -> nat]" hp_def nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (restrict const-decl "R" restrict nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (index_of_j application-judgement
     "(singleton?[below(length[MapExpr](me))])" hp_def nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec mv_analysis)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (NQ const-decl "real" convergence_vec2vec mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (Matrix type-eq-decl nil matrices matrices)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (differentiable? const-decl "bool" convergence_vec2vec mv_analysis)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (posnat nonempty-type-eq-decl nil integers nil)
    (fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     nil)
    (the const-decl "(p)" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (singleton_extend application-judgement "(singleton?[T])"
     extend_set_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (index_of const-decl "bool" hp_def nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (singleton? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (expr const-decl "RealExpr" hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (e2v_re_diff_p_TCC1 0
  (e2v_re_diff_p_TCC1-1 nil 3853923565
   ("" (skeep) (("" (assert) (("" (inst?) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (e2v_re_diff_p subtype
    "ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(list_adt[real].car(chain_rule_re.p))"
    "(chain_rule_re.P)")))
 (e2v_re_diff_p_TCC2 0
  (e2v_re_diff_p_TCC3-1 nil 3852129151
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((length_singleton formula-decl nil more_list_props structures)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (e2v_re_diff_p subtype
    "(: chain_rule_re.R(ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(chain_rule_re.tt)) :)"
    "matrices.VectorN(1)")))
 (e2v_re_diff_p 0
  (e2v_re_diff_p-1 nil 3852129216
   ("" (skeep)
    (("" (lemma "e2v_diff_p")
      (("" (inst?)
        (("" (inst -1 "p")
          (("" (lemma "chain_rule_multi[1,max_var(ode)+1,1]")
            ((""
              (inst -1 "projv(max_var(ode),P)" "lift_rd(D)"
               "LAMBDA(v:VectorN(max_var(ode)+1)): (: vec_re(max_var(ode), envi, R)(v) :)"
               "liftl(max_var(ode)+1,D,
           (LAMBDA(tt:(D)):env_2_vec(max_var(ode),env_sol(D,envi,ode)(tt))))"
               "p")
              (("1"
                (case "NOT comp_dom[1,max_var(ode)+1,1](projv(max_var(ode), P), lift_rd(D),
                                                liftl(max_var(ode) + 1, D,
                                                      (LAMBDA (tt: (D)):
                                                         env_2_vec(max_var(ode),
                                                                   env_sol(D, envi, ode)(tt))))) = lift_rd(D)")
                (("1" (expand "comp_dom" 1)
                  (("1" (hide -)
                    (("1" (decompose-equality 1)
                      (("1" (iff 1)
                        (("1" (split 1)
                          (("1" (flatten) nil nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (expand "projv" 1)
                                  (("2"
                                    (expand "liftl" 1)
                                    (("2"
                                      (reveal -)
                                      (("2"
                                        (hide -8 -7 -6 -5 -3 -2 -1)
                                        (("2"
                                          (expand "lift_rd" -2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -1 "car(x!1)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   1
                                                   "env_sol(D, envi, ode)(car(x!1))")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split -2)
                  (("1" (lemma "same_on_D_same_diff")
                    (("1"
                      (inst -1 "1" "lift_rd(D)" "p"
                       "comp(LAMBDA (v: VectorN(max_var(ode) + 1)):
                          (: vec_re(max_var(ode), envi, R)(v) :),
                        liftl(max_var(ode) + 1, D,
                              (LAMBDA (tt: (D)):
                                 env_2_vec(max_var(ode),
                                           env_sol(D, envi, ode)(tt)))))"
                       " liftl(1, D,
                         LAMBDA (tt: (D)): (: R(env_sol(D, envi, ode)(tt)) :))")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (skeep)
                            (("1" (expand "comp" 1)
                              (("1"
                                (expand "liftl" 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (typepred "x")
                                    (("1"
                                      (expand "lift_rd" -3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (decompose-equality 1)
                                          (("1"
                                            (lemma "eq_re_comp")
                                            (("1"
                                              (inst
                                               -1
                                               "D"
                                               "envi"
                                               "ode"
                                               "R")
                                              (("1"
                                                (decompose-equality -1)
                                                (("1"
                                                  (inst -1 "car(x)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "re_diff_mv")
                    (("2" (assert)
                      (("2" (hide -5)
                        (("2" (hide 2)
                          (("2" (hide -3)
                            (("2"
                              (inst -1 "max_var(ode)" "P" "R"
                               "env_sol(D, envi, ode)(car(p))")
                              (("1"
                                (assert)
                                (("1"
                                  (hide -3)
                                  (("1"
                                    (lemma "same_on_D_same_diff")
                                    (("1"
                                      (inst
                                       -1
                                       "max_var(ode)+1"
                                       "projv(max_var(ode), P)"
                                       "(env_2_vec(max_var(ode), env_sol(D, envi, ode)(car(p))))"
                                       "liftr(1 + max_var(ode), projv(max_var(ode), P),
                         vec_re(max_var(ode), envi, R))"
                                       " LAMBDA (v: VectorN(max_var(ode) + 1)):
                     (: vec_re(max_var(ode), envi, R)(v) :)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (case
                                             " (env_2_vec(max_var(ode), env_sol(D, envi, ode)(car(p)))) = liftl(1 + max_var(ode), D,
                                (LAMBDA (tt: (D)):
                                   env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt))))
                               (p)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "liftl" 1)
                                                (("2"
                                                  (typepred "p")
                                                  (("2"
                                                    (expand
                                                     "lift_rd"
                                                     -3)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (expand "liftr" 1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide -2)
                                            (("3"
                                              (hide 2)
                                              (("3"
                                                (lemma
                                                 "diff_env_change")
                                                (("3"
                                                  (case
                                                   "vec_re(max_var(ode), env_sol(D, envi, ode)(car(p)),R)=   vec_re(max_var(ode), envi, R)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (decompose-equality
                                                     1)
                                                    (("2"
                                                      (hide 2 -2 -1)
                                                      (("2"
                                                        (expand
                                                         "vec_re"
                                                         1)
                                                        (("2"
                                                          (case
                                                           "vec_2_env(max_var(ode), x!1, env_sol(D, envi, ode)(car(p))) = vec_2_env(max_var(ode), x!1, envi)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (decompose-equality
                                                             1)
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "vec_2_env"
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (case
                                                                     "x!2 < 1 + max_var(ode)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "env_sol"
                                                                         2)
                                                                        (("2"
                                                                          (typepred
                                                                           "env_at_t(ode, fs_sol(D, envi, ode), envi)(car(p))")
                                                                          (("2"
                                                                            (expand
                                                                             "env_at_t?"
                                                                             -1)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "x!2")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "nip_max_var")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2" (inst?) nil nil))
                                nil)
                               ("3"
                                (assert)
                                (("3"
                                  (typepred "p")
                                  (("3"
                                    (expand "lift_rd" -3)
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (propax) nil nil)
                   ("4" (replace -1)
                    (("4" (assert)
                      (("4" (typepred "D")
                        (("4" (lemma "dd_deriv_domain")
                          (("4" (inst -1 "D")
                            (("4" (hide -3 -4 -5 -6)
                              (("4"
                                (lemma "dd_norm_equiv[1]")
                                (("4"
                                  (assert)
                                  (("4"
                                    (inst -1 "lift_rd(D)")
                                    (("4"
                                      (assert)
                                      (("4"
                                        (inst 1 "norm_inf(1)")
                                        (("4"
                                          (hide 2)
                                          (("4"
                                            (expand "deriv_domain?")
                                            (("4"
                                              (skeep)
                                              (("4"
                                                (inst
                                                 -1
                                                 "e!1"
                                                 "car(p!1)")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst 1 "(: y :)")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (typepred "y")
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "zero_vec"
                                                             -2)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "p!1")
                                                          (("2"
                                                            (expand
                                                             "lift_rd"
                                                             -3)
                                                            (("2"
                                                              (expand
                                                               "lift_rd"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "+"
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "add"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "p!1")
                                                  (("2"
                                                    (expand
                                                     "lift_rd"
                                                     -3)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -)
                  (("3" (typepred "P")
                    (("3" (hide 2)
                      (("3" (lemma "projv_dd")
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (hide 2)
                  (("2" (expand "projv" 1)
                    (("2" (expand "liftl")
                      (("2" (typepred "p")
                        (("2" (expand "lift_rd" -3)
                          (("2" (assert) (("2" (inst? 1) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert)
                (("3" (assert)
                  (("3" (hide -)
                    (("3" (typepred "P")
                      (("3" (hide 2)
                        (("3" (lemma "projv_dd")
                          (("3" (inst?) (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((e2v_diff_p formula-decl nil chain_rule_re nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (BoolExpr type-eq-decl nil hp_def nil)
    (projv const-decl "bool" chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (p skolem-const-decl "(lift_rd(D))" chain_rule_re nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (length_singleton formula-decl nil more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (projv_dd formula-decl nil chain_rule_re nil)
    (comp const-decl "vec2vec[n](m2)" chain_rule_multi mv_analysis)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (eq_re_comp formula-decl nil chain_rule_re nil)
    (same_on_D_same_diff formula-decl nil lift_real_fun_def
     mv_analysis)
    (liftr const-decl "vec2vec[k](1)" lift_real_fun_def mv_analysis)
    (vec_2_env const-decl "Environment" chain_rule_re nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (nip_max_var formula-decl nil hp_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (above nonempty-type-eq-decl nil integers nil)
    (x!2 skolem-const-decl "nat" chain_rule_re nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (diff_env_change formula-decl nil chain_rule_re nil)
    (re_diff_mv formula-decl nil chain_rule_re nil)
    (dd_deriv_domain formula-decl nil hp_expr nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (differentiable? const-decl "bool" convergence_vec2vec mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (NQ const-decl "real" convergence_vec2vec mv_analysis)
    (* const-decl "VectorN(rows(A))" mat_vec_mult mv_analysis)
    (matvec def-decl "VectorN(m)" mat_vec_mult mv_analysis)
    (* const-decl "real" matrices matrices)
    (rows const-decl "nat" matrices matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (max def-decl "real" norms mv_analysis)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         mv_analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (y skolem-const-decl "{u: nzreal | D(u + car(p!1))}" chain_rule_re
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (p!1 skolem-const-decl "(lift_rd(D))" chain_rule_re nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (dd_norm_equiv formula-decl nil derivative_domain_multi
     mv_analysis)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (comp_dom const-decl "[VectorN(n) -> bool]" chain_rule_multi
     mv_analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_var const-decl "nat" hp_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (chain_rule_multi formula-decl nil chain_rule_multi mv_analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (e2v_re_der_p_TCC1 0
  (e2v_re_der_p_TCC1-1 nil 3853863442
   ("" (skeep)
    (("" (lemma "e2v_re_diff_p")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((e2v_re_diff_p formula-decl nil chain_rule_re nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (e2v_re_der_p subtype
    "lift_real_fun_def.liftl(1, chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): (: chain_rule_re.R(ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt)) :)))"
    "{ff: domain_vec2real_def[1].vec2vec(1) | convergence_vec2vec[1].differentiable?(1, lift_real_fun_def.lift_rd(chain_rule_re.D), ff, chain_rule_re.p)}")))
 (e2v_re_der_p_TCC2 0
  (e2v_re_der_p_TCC2-1 nil 3853923565
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((length_singleton formula-decl nil more_list_props structures)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (e2v_re_der_p subtype
    "(: chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), chain_rule_re.envi, chain_rule_re.R)(chain_rule_re.v) :)"
    "matrices.VectorN(1)")))
 (e2v_re_der_p_TCC3 0
  (e2v_re_der_p_TCC3-1 nil 3853881805
   ("" (skeep)
    (("" (lemma "re_diff_mv_ll")
      (("" (inst?) (("" (assert) (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((re_diff_mv_ll formula-decl nil chain_rule_re nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (e2v_re_der_p subtype
    "LAMBDA (v: matrices.VectorN((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1))): (: chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), chain_rule_re.envi, chain_rule_re.R)(v) :)"
    "{ff: domain_vec2real_def[(number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1)].vec2vec(1) | convergence_vec2vec[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].differentiable?(1, chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P), ff, lift_real_fun_def.liftl((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode)), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))(chain_rule_re.p))}")))
 (e2v_re_der_p_TCC4 0
  (e2v_re_der_p_TCC4-1 nil 3853881805
   ("" (skeep) (("" (lemma "projv_dd") (("" (inst?) nil nil)) nil))
    nil)
   ((projv_dd formula-decl nil chain_rule_re nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (max_var const-decl "nat" hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (dd? const-decl "bool" hp_expr nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (e2v_re_der_p subtype
    "chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1)].deriv_domain?)")))
 (e2v_re_der_p_TCC5 0
  (e2v_re_der_p_TCC5-1 nil 3853881805
   ("" (skeep)
    (("" (expand "projv" 1)
      (("" (expand "liftl" 1)
        (("" (typepred "p")
          (("" (expand "lift_rd" -3)
            (("" (assert)
              (("" (inst 1 "env_sol(D,envi,ode)(car(p))") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((projv const-decl "bool" chain_rule_re nil)
    (dd? const-decl "bool" hp_expr nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (e2v_re_der_p subtype
    "lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))(chain_rule_re.p)"
    "(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P))")))
 (e2v_re_der_p_TCC6 0
  (e2v_re_der_p_TCC6-1 nil 3853881805
   ("" (skeep)
    (("" (lemma "e2v_diff_p")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((e2v_diff_p formula-decl nil chain_rule_re nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (e2v_re_der_p subtype
    "lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))"
    "{ff: domain_vec2real_def[1].vec2vec((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))) | convergence_vec2vec[1].differentiable?((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode)), lift_real_fun_def.lift_rd(chain_rule_re.D), ff, chain_rule_re.p)}")))
 (e2v_re_der_p 0
  (e2v_re_der_p-1 nil 3853865557
   ("" (skeep)
    (("" (lemma "e2v_diff_p")
      (("" (inst?)
        (("" (inst -1 "p")
          (("" (lemma "chain_rule_multi_der_is[1,max_var(ode)+1,1]")
            ((""
              (inst -1 "projv(max_var(ode),P)" "lift_rd(D)"
               "LAMBDA(v:VectorN(max_var(ode)+1)): (: vec_re(max_var(ode), envi, R)(v) :)"
               "liftl(max_var(ode)+1,D,
               (LAMBDA(tt:(D)):env_2_vec(max_var(ode),env_sol(D,envi,ode)(tt))))"
               "p")
              (("1"
                (case "NOT comp_dom[1,max_var(ode)+1,1](projv(max_var(ode), P), lift_rd(D),
                                                                  liftl(max_var(ode) + 1, D,
                                                                        (LAMBDA (tt: (D)):
                                                                           env_2_vec(max_var(ode),
                                                                                     env_sol(D, envi, ode)(tt))))) = lift_rd(D)")
                (("1" (expand "comp_dom" 1)
                  (("1" (hide -)
                    (("1" (decompose-equality 1)
                      (("1" (iff 1)
                        (("1" (split 1)
                          (("1" (flatten) nil nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (expand "projv" 1)
                                  (("2"
                                    (expand "liftl" 1)
                                    (("2"
                                      (reveal -)
                                      (("2"
                                        (hide -8 -7 -6 -5 -3 -2 -1)
                                        (("2"
                                          (expand "lift_rd" -2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -1 "car(x!1)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   1
                                                   "env_sol(D, envi, ode)(car(x!1))")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split -2)
                  (("1" (lemma "same_on_D_same_der")
                    (("1"
                      (inst -1 "1" "lift_rd(D)" "p"
                       "comp(LAMBDA (v: VectorN(max_var(ode) + 1)):
                                          (: vec_re(max_var(ode), envi, R)(v) :),
                                        liftl(max_var(ode) + 1, D,
                                              (LAMBDA (tt: (D)):
                                                 env_2_vec(max_var(ode),
                                                           env_sol(D, envi, ode)(tt)))))"
                       " liftl(1, D,
                                         LAMBDA (tt: (D)): (: R(env_sol(D, envi, ode)(tt)) :))")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (assert)
                            (("1" (replace -1 1 rl)
                              (("1"
                                (replace -2 1 rl)
                                (("1"
                                  (replace -3 1 lr)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (skeep)
                              (("2"
                                (expand "comp" 1)
                                (("2"
                                  (expand "liftl" 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "x")
                                      (("2"
                                        (expand "lift_rd" -3)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (decompose-equality 1)
                                            (("2"
                                              (lemma "eq_re_comp")
                                              (("2"
                                                (inst
                                                 -1
                                                 "D"
                                                 "envi"
                                                 "ode"
                                                 "R")
                                                (("2"
                                                  (decompose-equality
                                                   -1)
                                                  (("2"
                                                    (inst -1 "car(x)")
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (hide -1)
                              (("3"
                                (assert)
                                (("3"
                                  (lemma "e2v_re_diff_p")
                                  (("3"
                                    (inst?)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (split -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "same_on_D_same_diff")
                                            (("1"
                                              (inst
                                               -1
                                               "1"
                                               "lift_rd(D)"
                                               "p"
                                               "liftl(1, D,
                 LAMBDA (tt: (D)): (: R(env_sol(D, envi, ode)(tt)) :))"
                                               " comp(LAMBDA (v: VectorN(max_var(ode) + 1)):
                  (: vec_re(max_var(ode), envi, R)(v) :),
                liftl(1 + max_var(ode), D,
                      (LAMBDA (tt: (D)):
                         env_2_vec(max_var(ode),
                                   env_sol(D, envi, ode)(tt)))))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (expand "comp" 1)
                                                      (("1"
                                                        (expand
                                                         "liftl"
                                                         1)
                                                        (("1"
                                                          (typepred
                                                           "x")
                                                          (("1"
                                                            (expand
                                                             "lift_rd"
                                                             -3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "eq_re_comp")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (decompose-equality
                                                                     -1)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (typepred "D")
                          (("2" (lemma "dd_e_partial")
                            (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (hide 2)
                      (("2" (lemma "re_diff_mv_ll")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (inst -4 "car[real](p)")
                              (("2"
                                (assert)
                                (("2"
                                  (hide -2 -3 -4 -5)
                                  (("2"
                                    (name
                                     "tt"
                                     " LAMBDA (v: VectorN(1 + max_var(ode))):
             (: vec_re(max_var(ode), envi, R)(v) :)")
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (name
                                           "lft"
                                           " liftl(1 + max_var(ode), D,
                 LAMBDA (tt: (D)):
                   env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt)))")
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand
                                                 "differentiable?")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst 1 "T")
                                                      (("2"
                                                        (expand
                                                         "convergence_zero?")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "epsilon")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "delta")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     -3
                                                                     "x")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "NQ")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "x")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "NQ")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (propax) nil nil)
                   ("4" (hide 2)
                    (("4" (replace -1)
                      (("4" (lemma "dd_e_partial")
                        (("4" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (lemma "projv_dd")
                    (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "projv" 1)
                  (("2" (expand "liftl" 1)
                    (("2" (typepred "p")
                      (("2" (expand "lift_rd" -3)
                        (("2" (assert) (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (lemma "projv_dd")
                  (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((e2v_diff_p formula-decl nil chain_rule_re nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (BoolExpr type-eq-decl nil hp_def nil)
    (projv const-decl "bool" chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (p skolem-const-decl "(lift_rd(D))" chain_rule_re nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (length_singleton formula-decl nil more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (projv_dd formula-decl nil chain_rule_re nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (comp const-decl "vec2vec[n](m2)" chain_rule_multi mv_analysis)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (eq_re_comp formula-decl nil chain_rule_re nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (e2v_re_diff_p formula-decl nil chain_rule_re nil)
    (same_on_D_same_diff formula-decl nil lift_real_fun_def
     mv_analysis)
    (dd_e_partial formula-decl nil chain_rule_re nil)
    (same_on_D_same_der formula-decl nil lift_real_fun_def mv_analysis)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NQ const-decl "real" convergence_vec2vec mv_analysis)
    (x skolem-const-decl "{xx: (NQ(projv(max_var(ode), P), lft(p))) |
   xx /= zero_vec(1 + max_var(ode))}" chain_rule_re nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (/= const-decl "boolean" notequal nil)
    (lft skolem-const-decl "vec2vec[1](1 + max_var(ode))" chain_rule_re
     nil)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (differentiable? const-decl "bool" convergence_vec2vec mv_analysis)
    (re_diff_mv_ll formula-decl nil chain_rule_re nil)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (comp_dom const-decl "[VectorN(n) -> bool]" chain_rule_multi
     mv_analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max_var const-decl "nat" hp_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (chain_rule_multi_der_is formula-decl nil chain_rule_multi
     mv_analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (re_diff_chain_TCC1 0
  (re_diff_chain_TCC1-1 nil 3852144486
   ("" (skeep)
    (("" (lemma "env_sol_env2vec")
      (("" (inst?)
        (("" (inst -1 "P" "(: t:)")
          (("1" (assert)
            (("1" (inst -2 "t") (("1" (assert) nil nil)) nil)) nil)
           ("2" (expand "lift_rd" 1) (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((env_sol_env2vec formula-decl nil chain_rule_re nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (t skolem-const-decl "(D)" chain_rule_re nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (length_singleton formula-decl nil more_list_props structures)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (re_diff_chain subtype
    "ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(chain_rule_re.t)"
    "(chain_rule_re.P)")))
 (re_diff_chain_TCC2 0
  (re_diff_chain_TCC2-1 nil 3852144486
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_deriv_domain") (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dd_deriv_domain formula-decl nil hp_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (re_diff_chain assuming
    "analysis@derivatives_def[(chain_rule_re.D)].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (re_diff_chain_TCC3 0
  (re_diff_chain_TCC3-1 nil 3852144486
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_noe") (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dd_noe formula-decl nil hp_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (re_diff_chain assuming
    "analysis@derivatives_def[(chain_rule_re.D)].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (re_diff_chain 0
  (re_diff_chain-1 nil 3852144615
   ("" (skeep)
    (("" (lemma "e2v_re_diff_p")
      (("" (lemma "lift_diff")
        (("" (assert)
          (("" (inst -2 "D" "P" "(: t :)" "envi" "ode" "R")
            (("1" (assert)
              (("1" (split -2)
                (("1"
                  (inst -2 "D" "t"
                   "(LAMBDA (tt: (D)): R(env_sol(D, envi, ode)(tt)))")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (lemma "same_on_D_same_diff")
                        (("1"
                          (inst -1 "1" "lift_rd(D)" "(: t :) "
                           "liftl(1, D,
              LAMBDA (tt: (D)): (: R(env_sol(D, envi, ode)(tt)) :))"
                           "lift_re(D, (LAMBDA (tt: (D)): R(env_sol(D, envi, ode)(tt))))")
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (skeep)
                                (("1"
                                  (typepred "x")
                                  (("1"
                                    (expand "lift_re")
                                    (("1"
                                      (expand "liftl")
                                      (("1"
                                        (expand "lift_rd" -3)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "D")
                    (("2" (lemma "dd_deriv_domain")
                      (("2" (inst?) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil)
             ("2" (expand "lift_rd" 1) (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((e2v_re_diff_p formula-decl nil chain_rule_re nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (lift_re const-decl "vec2vec[1](1)" lift_real_fun_def mv_analysis)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (same_on_D_same_diff formula-decl nil lift_real_fun_def
     mv_analysis)
    (dd_deriv_domain formula-decl nil hp_expr nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (length_singleton formula-decl nil more_list_props structures)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (dd? const-decl "bool" hp_expr nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (t skolem-const-decl "(D)" chain_rule_re nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (lift_diff formula-decl nil lift_real_fun_def mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (init_re_der_chain_TCC1 0
  (init_re_der_chain_TCC1-1 nil 3853937274
   ("" (skeep)
    (("" (lemma "re_diff_chain")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((re_diff_chain formula-decl nil chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init_re_der_chain subtype "chain_rule_re.t"
    "{x | derivatives_def[(chain_rule_re.D)].derivable?(LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.R(ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt)), x)}")))
 (init_re_der_chain_TCC2 0
  (init_re_der_chain_TCC2-1 nil 3853937274
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((length_singleton formula-decl nil more_list_props structures)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init_re_der_chain subtype
    "(: chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), chain_rule_re.envi, chain_rule_re.R)(chain_rule_re.v) :)"
    "matrices.VectorN(1)")))
 (init_re_der_chain_TCC3 0
  (init_re_der_chain_TCC3-1 nil 3853937274
   ("" (skeep)
    (("" (assert)
      (("" (lemma "re_diff_mv_ll")
        (("" (inst?)
          (("1" (assert) (("1" (inst -1 "t") nil nil)) nil)
           ("2" (expand "lift_rd" 1) (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (t skolem-const-decl "(D)" chain_rule_re nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (dd? const-decl "bool" hp_expr nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (dLVar type-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (re_diff_mv_ll formula-decl nil chain_rule_re nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init_re_der_chain subtype
    "LAMBDA (v: matrices.VectorN((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1))): (: chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), chain_rule_re.envi, chain_rule_re.R)(v) :)"
    "{ff: domain_vec2real_def[(number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1)].vec2vec(1) | convergence_vec2vec[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].differentiable?(1, chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P), ff, lift_real_fun_def.liftl((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode)), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))((: chain_rule_re.t :)))}")))
 (init_re_der_chain_TCC4 0
  (init_re_der_chain_TCC4-1 nil 3853937274
   ("" (skeep) (("" (lemma "projv_dd") (("" (inst?) nil nil)) nil))
    nil)
   ((projv_dd formula-decl nil chain_rule_re nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (max_var const-decl "nat" hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (dd? const-decl "bool" hp_expr nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init_re_der_chain subtype
    "chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1)].deriv_domain?)")))
 (init_re_der_chain_TCC5 0
  (init_re_der_chain_TCC5-1 nil 3853937274
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((length_singleton formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init_re_der_chain subtype "(: chain_rule_re.t :)"
    "matrices.VectorN(1)")))
 (init_re_der_chain_TCC6 0
  (init_re_der_chain_TCC6-1 nil 3853937274
   ("" (skeep)
    (("" (expand "projv" 1)
      (("" (expand "liftl" 1)
        (("" (inst?)
          (("" (assert)
            (("" (inst 1 "env_sol(D,envi,ode)(t)") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((projv const-decl "bool" chain_rule_re nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (dLVar type-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init_re_der_chain subtype
    "lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))((: chain_rule_re.t :))"
    "(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P))")))
 (init_re_der_chain_TCC7 0
  (init_re_der_chain_TCC7-1 nil 3853937274
   ("" (skeep)
    (("" (lemma "e2v_diff_p")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((e2v_diff_p formula-decl nil chain_rule_re nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init_re_der_chain subtype
    "lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))"
    "{ff: domain_vec2real_def[1].vec2vec((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))) | convergence_vec2vec[1].differentiable?((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode)), lift_real_fun_def.lift_rd(chain_rule_re.D), ff, (: chain_rule_re.t :))}")))
 (init_re_der_chain_TCC8 0
  (init_re_der_chain_TCC8-1 nil 3853937274
   ("" (lemma "projv_dd")
    (("" (skeep)
      (("" (typepred "D")
        (("" (lemma "dd_deriv_domain")
          (("" (lemma "dd_lift_dd")
            (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (dd_deriv_domain formula-decl nil hp_expr nil)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (dd_lift_dd formula-decl nil lift_real_fun_def mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (projv_dd formula-decl nil chain_rule_re nil))
   nil
   (init_re_der_chain subtype
    "lift_real_fun_def.lift_rd(chain_rule_re.D)"
    "(derivative_domain_multi[1].deriv_domain?)")))
 (init_re_der_chain_TCC9 0
  (init_re_der_chain_TCC9-1 nil 3853937274
   ("" (skeep)
    (("" (assert)
      (("" (expand "lift_rd" 1) (("" (propax) nil nil)) nil)) nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (length_singleton formula-decl nil more_list_props structures)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init_re_der_chain subtype "(: chain_rule_re.t :)"
    "(lift_real_fun_def.lift_rd(chain_rule_re.D))")))
 (init_re_der_chain_TCC10 0
  (init_re_der_chain_TCC10-1 nil 3853937274
   ("" (skeep)
    (("" (assert)
      ((""
        (typepred "der_f[1 + max_var(ode)]
               (1, projv(max_var(ode), P),
                liftl(1 + max_var(ode), D,
                      LAMBDA (tt: (D)):
                        env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt)))
                     ((: t :)))
               (LAMBDA (v: VectorN(1 + max_var(ode))):
                  (: vec_re(max_var(ode), envi, R)(v) :))
            *
            der_f[1]
                (1 + max_var(ode), lift_rd(D), (: t :))
                (liftl(1 + max_var(ode), D,
                       LAMBDA (tt: (D)):
                         env_2_vec(max_var(ode),
                                   env_sol(D, envi, ode)(tt))))")
        (("1" (assert)
          (("1" (hide -5)
            (("1" (hide -4)
              (("1" (hide -3)
                (("1" (expand "rows")
                  (("1" (hide -1)
                    (("1"
                      (typepred "der_f[1 + max_var(ode)]
                  (1, projv(max_var(ode), P),
                   liftl(1 + max_var(ode), D,
                         LAMBDA (tt: (D)):
                           env_2_vec(max_var(ode),
                                     env_sol(D, envi, ode)(tt)))
                        ((: t :)))
                  (LAMBDA (v: VectorN(1 + max_var(ode))):
                     (: vec_re(max_var(ode), envi, R)(v) :))")
                      (("1" (assert)
                        (("1" (expand "length" -5 1)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "re_diff_mv_ll")
          (("2" (inst?)
            (("2" (assert) (("2" (inst -1 "t") nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (re_diff_mv_ll formula-decl nil chain_rule_re nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (rows const-decl "nat" matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil) (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (entry const-decl "real" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (* const-decl "real" matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
       matrices)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (max_var const-decl "nat" hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (dd? const-decl "bool" hp_expr nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (differentiable? const-decl "bool" convergence_vec2vec mv_analysis)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (NQ const-decl "real" convergence_vec2vec mv_analysis)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec mv_analysis)
    (BoolExpr type-eq-decl nil hp_def nil)
    (projv const-decl "bool" chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init_re_der_chain subtype
    "matrices.*(convergence_vec2vec[(number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1)].der_f(1, chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P), lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))((: chain_rule_re.t :)))(LAMBDA (v: matrices.VectorN((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1))): (: chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), chain_rule_re.envi, chain_rule_re.R)(v) :)), convergence_vec2vec[1].der_f((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), lift_real_fun_def.lift_rd(chain_rule_re.D), (: chain_rule_re.t :))(lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))))"
    "(list_adt[list[real]].cons?)")))
 (init_re_der_chain_TCC11 0
  (init_re_der_chain_TCC11-1 nil 3853937274
   ("" (skeep)
    ((""
      (typepred "der_f[1 + max_var(ode)]
               (1, projv(max_var(ode), P),
                liftl(1 + max_var(ode), D,
                      LAMBDA (tt: (D)):
                        env_2_vec(max_var(ode), env_sol(D, envi, ode)(tt)))
                     ((: t :)))
               (LAMBDA (v: VectorN(1 + max_var(ode))):
                  (: vec_re(max_var(ode), envi, R)(v) :))
            *
            der_f[1]
                (1 + max_var(ode), lift_rd(D), (: t :))
                (liftl(1 + max_var(ode), D,
                       LAMBDA (tt: (D)):
                         env_2_vec(max_var(ode),
                                   env_sol(D, envi, ode)(tt))))")
      (("1" (inst -3 "0")
        (("1" (assert)
          (("1" (expand "nth" -3 1)
            (("1" (expand "length" -3)
              (("1" (hide -5)
                (("1" (hide -4)
                  (("1" (hide -2)
                    (("1" (hide -1)
                      (("1" (lemma "columns_mn")
                        (("1" (inst?)
                          (("1"
                            (inst -1 "1 + max_var(ode)" "1" "der_f[1]
                   (1 + max_var(ode), lift_rd(D), (: t :))
                   (liftl(1 + max_var(ode), D,
                          LAMBDA (tt: (D)):
                            env_2_vec(max_var(ode),
                                      env_sol(D, envi, ode)(tt))))")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (assert)
            (("2" (hide -4)
              (("2" (hide -3)
                (("2" (expand "rows" -2)
                  (("2"
                    (typepred "der_f[1 + max_var(ode)]
                  (1, projv(max_var(ode), P),
                   liftl(1 + max_var(ode), D,
                         LAMBDA (tt: (D)):
                           env_2_vec(max_var(ode),
                                     env_sol(D, envi, ode)(tt)))
                        ((: t :)))
                  (LAMBDA (v: VectorN(1 + max_var(ode))):
                     (: vec_re(max_var(ode), envi, R)(v) :))")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma "e2v_diff_p")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (hide 2)
        (("3" (expand "liftl")
          (("3" (expand "projv")
            (("3" (inst 1 "env_sol(D,envi,ode)(t)") nil nil)) nil))
          nil))
        nil)
       ("4" (hide 2)
        (("4" (assert)
          (("4" (lemma "re_diff_mv_ll")
            (("4" (inst?)
              (("1" (assert) (("1" (inst -1 "t") nil nil)) nil)
               ("2" (expand "lift_rd" 1) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (vec_re const-decl "real" chain_rule_re nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (ddl_dom? const-decl "bool" differentiation nil)
    (projv const-decl "bool" chain_rule_re nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec mv_analysis)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (NQ const-decl "real" convergence_vec2vec mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (differentiable? const-decl "bool" convergence_vec2vec mv_analysis)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (dd? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (max_var const-decl "nat" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
       matrices)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (* const-decl "real" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (entry const-decl "real" matrices matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (rows const-decl "nat" matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (columns_mn formula-decl nil matrices matrices)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (t skolem-const-decl "(D)" chain_rule_re nil)
    (R skolem-const-decl "RealExpr" chain_rule_re nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (e2v_diff_p formula-decl nil chain_rule_re nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (re_diff_mv_ll formula-decl nil chain_rule_re nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init_re_der_chain subtype
    "list_adt[list[real]].car(matrices.*(convergence_vec2vec[(number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1)].der_f(1, chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P), lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))((: chain_rule_re.t :)))(LAMBDA (v: matrices.VectorN((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1))): (: chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), chain_rule_re.envi, chain_rule_re.R)(v) :)), convergence_vec2vec[1].der_f((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), lift_real_fun_def.lift_rd(chain_rule_re.D), (: chain_rule_re.t :))(lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt)))))))"
    "(list_adt[real].cons?)")))
 (init_re_der_chain 0
  (init_re_der_chain-1 nil 3853938195
   ("" (skeep)
    (("" (lemma "e2v_re_der_p")
      (("" (lemma "lift_der")
        (("" (assert)
          (("" (inst -2 "D" "P" "(: t :)" "envi" "ode" "R")
            (("" (assert)
              (("" (split -2)
                (("1"
                  (inst -2 "D" "t"
                   "(LAMBDA (tt: (D)): R(env_sol(D, envi, ode)(tt)))")
                  (("1" (assert)
                    (("1" (split -2)
                      (("1" (replace -2 1 rl)
                        (("1" (expand "lift_re" -1 1)
                          (("1" (expand "liftl" -2 1)
                            (("1" (expand "zero_vec" -2 1)
                              (("1"
                                (expand "zero_vec" -2 1)
                                (("1"
                                  (expand "liftl" 1)
                                  (("1"
                                    (expand "zero_vec" 1)
                                    (("1"
                                      (expand "zero_vec" 1)
                                      (("1"
                                        (replace -1 1 rl)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "re_diff_chain")
                          (("2" (inst -1 "D" "envi" "ode" "P" "R" "t")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (lemma "dd_e_partial")
                          (("3" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "D")
                    (("2" (lemma "dd_deriv_domain")
                      (("2" (inst?) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((e2v_re_der_p formula-decl nil chain_rule_re nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (lift_re const-decl "vec2vec[1](1)" lift_real_fun_def mv_analysis)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (re_diff_chain formula-decl nil chain_rule_re nil)
    (dd_e_partial formula-decl nil chain_rule_re nil)
    (dd_deriv_domain formula-decl nil hp_expr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lift_der formula-decl nil lift_real_fun_def mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (init2_re_der_chain_TCC1 0
  (init2_re_der_chain_TCC1-1 nil 3853939157
   ("" (skeep)
    (("" (expand "differentiable_re_p?") (("" (propax) nil nil)) nil))
    nil)
   ((differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init2_re_der_chain subtype
    "chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(chain_rule_re.t), chain_rule_re.R)"
    "{ff: domain_vec2real_def[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].vec2real_f | differentiable_def[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].differentiable?(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P), ff, chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(chain_rule_re.t)))}")))
 (init2_re_der_chain_TCC2 0
  (init2_re_der_chain_TCC2-1 nil 3853939157
   ("" (skeep) (("" (lemma "projv_dd") (("" (inst?) nil nil)) nil))
    nil)
   ((projv_dd formula-decl nil chain_rule_re nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (max_var const-decl "nat" hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (dd? const-decl "bool" hp_expr nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init2_re_der_chain subtype
    "chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].deriv_domain?)")))
 (init2_re_der_chain_TCC3 0
  (init2_re_der_chain_TCC3-1 nil 3853939157
   ("" (skeep)
    (("" (expand "projv" 1)
      (("" (inst?) (("" (inst 1 "env_sol(D,envi,ode)(t)") nil nil))
        nil))
      nil))
    nil)
   ((projv const-decl "bool" chain_rule_re nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (dLVar type-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init2_re_der_chain subtype
    "chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(chain_rule_re.t))"
    "(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P))")))
 (init2_re_der_chain 0
  (init2_re_der_chain-1 nil 3853939405
   ("" (skeep)
    (("" (lemma "init_re_der_chain")
      (("" (inst?)
        (("" (assert)
          (("" (split -1)
            (("1" (replace -1)
              (("1" (lemma "re_der_mv_ll")
                (("1" (inst?)
                  (("1" (split -1)
                    (("1" (replace -1 1 lr)
                      (("1" (assert)
                        (("1" (hide -)
                          (("1"
                            (typepred "(: der_f(projv(max_var(ode), P),
                       env_2_vec(max_var(ode), env_sol(D, envi, ode)(t)))
                      (vec_re(max_var(ode), env_sol(D, envi, ode)(t),
                              R)) :)
               *
               der_f[1]
                   (1 + max_var(ode), lift_rd(D), (: t :))
                   (liftl(1 + max_var(ode), D,
                          LAMBDA (tt: (D)):
                            env_2_vec(max_var(ode),
                                      env_sol(D, envi, ode)(tt))))")
                            (("1" (hide -5)
                              (("1"
                                (inst -4 "0" "0")
                                (("1"
                                  (expand "entry" -4)
                                  (("1"
                                    (expand "access" -4)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "row" -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lift-if -2)
                                                  (("1"
                                                    (hide -5)
                                                    (("1"
                                                      (hide -4)
                                                      (("1"
                                                        (hide -3)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (typepred
                                                             "((: der_f(projv(max_var(ode), P),
                       env_2_vec(max_var(ode), env_sol(D, envi, ode)(t)))
                      (vec_re(max_var(ode), env_sol(D, envi, ode)(t),
                              R)) :)
               *
               der_f[1]
                   (1 + max_var(ode), lift_rd(D), (: t :))
                   (liftl(1 + max_var(ode), D,
                          LAMBDA (tt: (D)):
                            env_2_vec(max_var(ode),
                                      env_sol(D, envi, ode)(tt)))))")
                                                            (("1"
                                                              (expand
                                                               "rows"
                                                               -2)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -2
                                                                 2)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide -2)
                                                              (("2"
                                                                (hide
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   -1
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     -1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide -4)
                                                (("2"
                                                  (hide -3)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (typepred
                                                         "((: der_f(projv(max_var(ode), P),
                       env_2_vec(max_var(ode), env_sol(D, envi, ode)(t)))
                      (vec_re(max_var(ode), env_sol(D, envi, ode)(t),
                              R)) :)
               *
               der_f[1]
                   (1 + max_var(ode), lift_rd(D), (: t :))
                   (liftl(1 + max_var(ode), D,
                          LAMBDA (tt: (D)):
                            env_2_vec(max_var(ode),
                                      env_sol(D, envi, ode)(tt)))))")
                                                        (("2"
                                                          (hide -5)
                                                          (("2"
                                                            (hide -4)
                                                            (("2"
                                                              (inst
                                                               -3
                                                               "0")
                                                              (("1"
                                                                (expand
                                                                 "row"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lift-if
                                                                     1)
                                                                    (("1"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "rows"
                                                                           -3)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -3
                                                                             2)
                                                                            (("2"
                                                                              (hide
                                                                               -)
                                                                              (("2"
                                                                                (lemma
                                                                                 "columns_mn")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "1 + max_var(ode)"
                                                                                   "1"
                                                                                   "der_f[1]
                   (1 + max_var(ode), lift_rd(D), (: t :))
                   (liftl(1 + max_var(ode), D,
                          LAMBDA (tt: (D)):
                            env_2_vec(max_var(ode),
                                      env_sol(D, envi, ode)(tt))))")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "rows"
                                                                   -)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -2 "t") (("2" (assert) nil nil)) nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((init_re_der_chain formula-decl nil chain_rule_re nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (t skolem-const-decl "(D)" chain_rule_re nil)
    (R skolem-const-decl "RealExpr" chain_rule_re nil)
    (length_null formula-decl nil more_list_props structures)
    (length_singleton formula-decl nil more_list_props structures)
    (columns_mn formula-decl nil matrices matrices)
    (access const-decl "real" matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (rows const-decl "nat" matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil) (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (entry const-decl "real" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (* const-decl "real" matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
       matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max_var const-decl "nat" hp_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (der_f const-decl
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     differentiable_def mv_analysis)
    (projv const-decl "bool" chain_rule_re nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (differentiable? const-decl "bool" convergence_vec2vec mv_analysis)
    (NQ const-decl "real" convergence_vec2vec mv_analysis)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec mv_analysis)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (re_der_mv_ll formula-decl nil chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (init3_re_der_chain_TCC1 0
  (init3_re_der_chain_TCC1-1 nil 3853940404
   ("" (skeep)
    (("" (typepred "t")
      (("" (expand "differentiable_re_p?" -3) (("" (propax) nil nil))
        nil))
      nil))
    nil)
   ((max_var const-decl "nat" hp_def nil)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init3_re_der_chain subtype
    "chain_rule_re.vec_re(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(chain_rule_re.t), chain_rule_re.R)"
    "{ff: domain_vec2real_def[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].vec2real_f | differentiable_def[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].differentiable?(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P), ff, chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(chain_rule_re.t)))}")))
 (init3_re_der_chain_TCC2 0
  (init3_re_der_chain_TCC2-1 nil 3853940404
   ("" (skeep) (("" (lemma "projv_dd") (("" (inst?) nil nil)) nil))
    nil)
   ((projv_dd formula-decl nil chain_rule_re nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (max_var const-decl "nat" hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (dd? const-decl "bool" hp_expr nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init3_re_der_chain subtype
    "chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P)"
    "(derivative_domain_multi[(number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))].deriv_domain?)")))
 (init3_re_der_chain_TCC3 0
  (init3_re_der_chain_TCC3-1 nil 3853940404
   ("" (skeep)
    (("" (expand "projv" 1)
      (("" (inst 1 "env_sol(D,envi,ode)(t)")
        (("" (assert)
          (("" (typepred "t") (("" (inst -2 "t") nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((projv const-decl "bool" chain_rule_re nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (R skolem-const-decl "RealExpr" chain_rule_re nil)
    (t skolem-const-decl "{t: (D) |
   (FORALL (tt: (D)): P(env_sol(D, envi, ode)(tt))) AND
    differentiable_re_p?(max_var(ode), P, env_sol(D, envi, ode)(t))(R)}"
     chain_rule_re nil)
    (max_var const-decl "nat" hp_def nil)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (dd? const-decl "bool" hp_expr nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init3_re_der_chain subtype
    "chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(chain_rule_re.t))"
    "(chain_rule_re.projv(hp_def.max_var(chain_rule_re.ode), chain_rule_re.P))")))
 (init3_re_der_chain_TCC4 0
  (init3_re_der_chain_TCC4-1 nil 3853940404
   ("" (skeep)
    (("" (lemma "e2v_diff_p")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((e2v_diff_p formula-decl nil chain_rule_re nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (max_var const-decl "nat" hp_def nil)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init3_re_der_chain subtype
    "lift_real_fun_def.liftl((number_fields.+)(hp_def.max_var(chain_rule_re.ode), 1), chain_rule_re.D, (LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.env_2_vec(hp_def.max_var(chain_rule_re.ode), ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt))))"
    "{ff: domain_vec2real_def[1].vec2vec((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode))) | convergence_vec2vec[1].differentiable?((number_fields.+)(1, hp_def.max_var(chain_rule_re.ode)), lift_real_fun_def.lift_rd(chain_rule_re.D), ff, (: chain_rule_re.t :))}")))
 (init3_re_der_chain_TCC5 0
  (init3_re_der_chain_TCC5-1 nil 3853940404
   ("" (skeep)
    (("" (lemma "dd_lift_dd")
      (("" (inst?)
        (("" (assert)
          (("" (typepred "D")
            (("" (lemma "dd_deriv_domain") (("" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd_lift_dd formula-decl nil lift_real_fun_def mv_analysis)
    (dd_deriv_domain formula-decl nil hp_expr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init3_re_der_chain subtype
    "lift_real_fun_def.lift_rd(chain_rule_re.D)"
    "(derivative_domain_multi[1].deriv_domain?)")))
 (init3_re_der_chain_TCC6 0
  (init3_re_der_chain_TCC6-1 nil 3853940404
   ("" (skeep)
    (("" (assert)
      (("" (expand "lift_rd" 1) (("" (propax) nil nil)) nil)) nil))
    nil)
   ((length_singleton formula-decl nil more_list_props structures)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init3_re_der_chain subtype "(: chain_rule_re.t :)"
    "(lift_real_fun_def.lift_rd(chain_rule_re.D))")))
 (init3_re_der_chain_TCC7 0
  (init3_re_der_chain_TCC7-1 nil 3853940404
   ("" (skeep) (("" (skeep) (("" (assert) nil nil)) nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init3_re_der_chain subtype "chain_rule_re.i"
    "below[length[real](A)]")))
 (init3_re_der_chain_TCC8 0
  (init3_re_der_chain_TCC8-1 nil 3853940404
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (typepred "B")
          (("" (typepred "i")
            (("" (expand "rows" -3 1) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (dd? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (max_var const-decl "nat" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec mv_analysis)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (NQ const-decl "real" convergence_vec2vec mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (differentiable? const-decl "bool" convergence_vec2vec mv_analysis)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (rows const-decl "nat" matrices matrices)
    (Matrix type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init3_re_der_chain subtype "chain_rule_re.i"
    "below[length[real](B)]")))
 (init3_re_der_chain_TCC9 0
  (init3_re_der_chain_TCC9-1 nil 3853940404
   ("" (skeep)
    (("" (lemma "re_diff_chain")
      (("" (inst?)
        (("" (assert)
          (("" (inst -1 "P")
            (("" (typepred "t") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((re_diff_chain formula-decl nil chain_rule_re nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max_var const-decl "nat" hp_def nil)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init3_re_der_chain subtype "chain_rule_re.t"
    "{x | derivatives_def[(chain_rule_re.D)].derivable?(LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.R(ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt)), x)}")))
 (init3_re_der_chain_TCC10 0
  (init3_re_der_chain_TCC10-1 nil 3853940404
   ("" (skeep)
    (("" (lemma "dd_deriv_domain") (("" (inst?) nil nil)) nil)) nil)
   ((dd_deriv_domain formula-decl nil hp_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init3_re_der_chain assuming
    "analysis@derivatives_def[(chain_rule_re.D)].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (init3_re_der_chain_TCC11 0
  (init3_re_der_chain_TCC11-1 nil 3853940404
   ("" (skeep) (("" (lemma "dd_noe") (("" (inst?) nil nil)) nil)) nil)
   ((dd_noe formula-decl nil hp_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (init3_re_der_chain assuming
    "analysis@derivatives_def[(chain_rule_re.D)].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (init3_re_der_chain 0
  (init3_re_der_chain-1 nil 3853940489
   ("" (skeep)
    (("" (skoletin*)
      (("" (lemma "init2_re_der_chain")
        (("" (inst?)
          (("" (assert)
            (("" (split -1)
              (("1" (replace -1 1 lr)
                (("1" (replace -3 1 rl)
                  (("1" (replace -4 1 rl)
                    (("1" (lemma "dot_is_sigma")
                      (("1" (inst -1 "A_1" "B")
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (replace -1 1)
                              (("1"
                                (typepred "A_1")
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "sumf = LAMBDA (i: nat):
              IF i < 1 + max_var(ode) THEN nth(A_1, i) * nth(B, i)
              ELSE 0
              ENDIF")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (decompose-equality 1)
                                            (("1"
                                              (case
                                               "x!1 < 1 + max_var(ode)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "sumf" 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (expand "sumf" 2)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide -5)
                                                  (("2"
                                                    (hide -3)
                                                    (("2"
                                                      (hide -3)
                                                      (("2"
                                                        (typepred "B")
                                                        (("2"
                                                          (expand
                                                           "rows"
                                                           -2
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3"
                                            (skeep)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (typepred "B")
                                                (("3"
                                                  (expand "rows" -2)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (hide 2)
                                          (("4"
                                            (skeep)
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (typepred "A_1" "B")
                                (("2"
                                  (expand "rows" -5 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "B")
                          (("2" (expand "rows" -2)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (reveal -) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (projv const-decl "bool" chain_rule_re nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (dd? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (max_var const-decl "nat" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (der_f const-decl
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     differentiable_def mv_analysis)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (differentiable? const-decl "bool" convergence_vec2vec mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Matrix type-eq-decl nil matrices matrices)
    (rows const-decl "nat" matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (NQ const-decl "real" convergence_vec2vec mv_analysis)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec mv_analysis)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dot_is_sigma formula-decl nil vector_arithmetic mv_analysis)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sumf skolem-const-decl "[nat -> number_field]" chain_rule_re nil)
    (A_1 skolem-const-decl "{gg: VectorN(1 + max_var(ode)) |
   convergence_zero?[1 + max_var(ode)]
       (NQ[1 + max_var(ode)]
            (projv(max_var(ode), P),
             env_2_vec(max_var(ode), env_sol(D, envi, ode)(t))),
        NQ[1 + max_var(ode)]
            (vec_re(max_var(ode), env_sol(D, envi, ode)(t), R), gg,
             env_2_vec(max_var(ode), env_sol(D, envi, ode)(t))),
        zero_vec(1 + max_var(ode)))}" chain_rule_re nil)
    (B skolem-const-decl "VectorN(rows(der_f[1]
                 (1 + max_var(ode), lift_rd(D), (: t :))
                 (liftl(1 + max_var(ode), D,
                        LAMBDA (tt: (D)):
                          env_2_vec(max_var(ode),
                                    env_sol(D, envi, ode)(tt))))))"
     chain_rule_re nil)
    (t skolem-const-decl "{t: (D) |
   (FORALL (tt: (D)): P(env_sol(D, envi, ode)(tt))) AND
    differentiable_re_p?(max_var(ode), P, env_sol(D, envi, ode)(t))(R)}"
     chain_rule_re nil)
    (R skolem-const-decl "RealExpr" chain_rule_re nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (init2_re_der_chain formula-decl nil chain_rule_re nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (SUB_DIFTRe_sig_TCC1 0
  (SUB_DIFTRe_sig_TCC1-1 nil 3853942588
   ("" (skeep)
    (("" (lemma "re_diff_chain")
      (("" (inst?)
        (("" (inst -1 "P")
          (("" (assert)
            (("" (typepred "t")
              (("" (typepred "R")
                (("" (expand "diff_re?" -1)
                  (("" (inst?)
                    (("1" (assert) nil nil)
                     ("2" (inst -2 "t") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((re_diff_chain formula-decl nil chain_rule_re nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (t skolem-const-decl "(D)" chain_rule_re nil)
    (max_var const-decl "nat" hp_def nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (SUB_DIFTRe_sig subtype "chain_rule_re.t"
    "{x | derivatives_def[(chain_rule_re.D)].derivable?(LAMBDA (tt: (chain_rule_re.D)): chain_rule_re.R(ODEs_equiv.env_sol(chain_rule_re.D, chain_rule_re.envi, chain_rule_re.ode)(tt)), x)}")))
 (SUB_DIFTRe_sig_TCC2 0
  (SUB_DIFTRe_sig_TCC2-1 nil 3853942588
   ("" (skeep)
    (("" (lemma "dd_deriv_domain") (("" (inst?) nil nil)) nil)) nil)
   ((dd_deriv_domain formula-decl nil hp_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (SUB_DIFTRe_sig assuming
    "analysis@derivatives_def[(chain_rule_re.D)].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (SUB_DIFTRe_sig_TCC3 0
  (SUB_DIFTRe_sig_TCC3-1 nil 3853942588
   ("" (skeep) (("" (lemma "dd_noe") (("" (inst?) nil nil)) nil)) nil)
   ((dd_noe formula-decl nil hp_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (SUB_DIFTRe_sig assuming
    "analysis@derivatives_def[(chain_rule_re.D)].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (SUB_DIFTRe_sig 0
  (SUB_DIFTRe_sig-1 nil 3853942621
   ("" (lemma "init3_re_der_chain")
    (("" (skeep)
      (("" (inst?)
        (("" (inst -1 "P" "t")
          (("1" (skoletin*)
            (("1" (expand "SUB_DIFTRe" 1)
              (("1" (expand "DIFT_Re" 1)
                (("1" (lemma " sum_it_sigma")
                  (("1" (expand "sum_it" 1)
                    (("1"
                      (inst -1 "LAMBDA (i_1: nat):
                       IF derivable?(i_1, P)(R)
                         THEN (partial_diff(i_1, P)(R) * ddt(ode)(i_1))
                                  (env_sol(D, envi, ode)(t))
                       ELSE cnst(0)(env_sol(D, envi, ode)(t))
                       ENDIF" "max_var(ode)" "0")
                      (("1" (replace -1 1)
                        (("1" (replace -2 1)
                          (("1" (lemma " sigma_eq ")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (typepred "n")
                                      (("1"
                                        (lemma
                                         "diff_re_derivable_partial")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "sumf" 1)
                                              (("1"
                                                (lemma
                                                 "der_ll_partial_der")
                                                (("1"
                                                  (typepred "ode")
                                                  (("1"
                                                    (inst
                                                     -3
                                                     "D"
                                                     "P"
                                                     "(: t:)"
                                                     "envi"
                                                     "ode"
                                                     "R"
                                                     "n")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -3)
                                                        (("1"
                                                          (replace
                                                           -11
                                                           -1
                                                           rl)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1
                                                             lr)
                                                            (("1"
                                                              (expand
                                                               "*"
                                                               1
                                                               1)
                                                              (("1"
                                                                (typepred
                                                                 "n")
                                                                (("1"
                                                                  (case
                                                                   "null?(ode)")
                                                                  (("1"
                                                                    (expand
                                                                     "max_var"
                                                                     -3)
                                                                    (("1"
                                                                      (expand
                                                                       "max_var_rec"
                                                                       -3)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "ddt"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "cnst"
                                                                             1
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "e2v_der_p_not_in_map")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "D"
                                                                                   "(: t :)"
                                                                                   "envi"
                                                                                   "ode"
                                                                                   "n")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "NOT not_in_map(ode)(n)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "not_in_map"
                                                                                         1
                                                                                         1)
                                                                                        (("1"
                                                                                          (skeep
                                                                                           1)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "i")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "length"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -15
                                                                                           1)
                                                                                          (("2"
                                                                                            (case
                                                                                             " nth((col(der_f[1]
                                        (1 + max_var(ode), lift_rd(D), (: t :))
                                        (liftl(1 + max_var(ode), D,
                                               LAMBDA (tt: (D)):
                                                 env_2_vec(max_var(ode),
                                                           env_sol(D, envi, ode)(tt)))))
                                   (0)),n) = 0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -15)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -12)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "col_def")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -2
                                                                                                           "0")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "NOT n=0")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -3
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (lift-if
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -6
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "nth"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "rows"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "ddt_not_in_map")
                                                                      (("2"
                                                                        (case
                                                                         "not_in_map(ode)(n)")
                                                                        (("1"
                                                                          (inst
                                                                           -2
                                                                           "ode"
                                                                           "n")
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (expand
                                                                               "cnst"
                                                                               2)
                                                                              (("1"
                                                                                (lemma
                                                                                 "e2v_der_p_not_in_map")
                                                                                (("1"
                                                                                  (hide
                                                                                   -12)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "D"
                                                                                     "(: t :)"
                                                                                     "envi"
                                                                                     "ode"
                                                                                     "n")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "col_def")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -2
                                                                                                 "n")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -16
                                                                                                   2
                                                                                                   lr)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -2
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (lift-if
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -4
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "nth"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "rows"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "ddt_in_map")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "ode"
                                                                             "n")
                                                                            (("1"
                                                                              (skoletin*)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "e2v_der_p_in_map_ode")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -13)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -14)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "D"
                                                                                         "(: t :)"
                                                                                         "envi"
                                                                                         "ode"
                                                                                         "n")
                                                                                        (("1"
                                                                                          (skoletin*)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "expr"
                                                                                             -3)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "col_def")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "n")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -18
                                                                                                       3)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         3)
                                                                                                        (("1"
                                                                                                          (lift-if
                                                                                                           3)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             3)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -3
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "nth"
                                                                                                                     1
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         " nth(ode, k)`2(env_sol(D, envi, ode)(t)) =   re(env_sol(D, envi, ode)(t))")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             -1
                                                                                                                             -2
                                                                                                                             -3)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "k")
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -17
                                                                                                                                 -18)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -7)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -9)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -9
                                                                                                                                       -10
                                                                                                                                       -11
                                                                                                                                       -12
                                                                                                                                       -13
                                                                                                                                       -14
                                                                                                                                       -15)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "ode")
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           "mapexpr_inj_eq")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "ode")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "k"
                                                                                                                                                 "k_1")
                                                                                                                                                (("1"
                                                                                                                                                  (split
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       -7
                                                                                                                                                       rl)
                                                                                                                                                      (("2"
                                                                                                                                                        (name
                                                                                                                                                         "th1"
                                                                                                                                                         " sets
                                                   [naturalnumbers.below(list_props[hp_def.MapExpr].length
                                                                         (ode))].the
                                                   (hp_def.index_of(ode, n))")
                                                                                                                                                        (("2"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (typepred
                                                                                                                                                             "th1")
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "index_of"
                                                                                                                                                               -2)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (case
                                                                                                                                                                   "th1 = k")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide
                                                                                                                                                                     2)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "mapexpr_inj_eq")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         -1
                                                                                                                                                                         "ode")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst
                                                                                                                                                                             -1
                                                                                                                                                                             "th1"
                                                                                                                                                                             "k")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (typepred
                                                                                                                                                                                   "k")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "extend"
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (split
                                                                                                                                                                                       -1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "index_of"
                                                                                                                                                                                             -2)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (decompose-equality
                                                                                                                                                                                               1)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "k_1")
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "extend"
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -2
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "rows"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide
                                                                                 -)
                                                                                (("2"
                                                                                  (expand
                                                                                   "in_map"
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "not_in_map"
                                                                                     2)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "i")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           -11
                                                           "t")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (typepred " P")
                                    (("2"
                                      (expand "ddl_dom?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst -2 "i_1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide -)
                                (("3"
                                  (typepred "P")
                                  (("3"
                                    (skeep)
                                    (("3"
                                      (expand "ddl_dom?")
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (inst -2 "i_1")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (skeep)
                          (("2" (typepred "P")
                            (("2" (expand "ddl_dom?")
                              (("2"
                                (flatten)
                                (("2"
                                  (inst -2 "i_1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide -)
                        (("3" (hide 2)
                          (("3" (skeep)
                            (("3" (typepred "P")
                              (("3"
                                (expand "ddl_dom?")
                                (("3"
                                  (flatten)
                                  (("3"
                                    (inst -2 "i_1")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (assert)
              (("2" (split 1)
                (("1" (propax) nil nil)
                 ("2" (typepred "R")
                  (("2" (expand "diff_re?" -1) (("2" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (R skolem-const-decl "(diff_re?(max_var(ode), P))" chain_rule_re
     nil)
    (t skolem-const-decl "(D)" chain_rule_re nil)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (ode skolem-const-decl "(ODEs_s?(D, envi))" chain_rule_re nil)
    (envi skolem-const-decl "Environment" chain_rule_re nil)
    (env_sol const-decl "Environment" ODEs_equiv nil)
    (P skolem-const-decl "(ddl_dom?)" chain_rule_re nil)
    (D skolem-const-decl "(dd?)" chain_rule_re nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (SUB_DIFTRe const-decl "RealExpr" differentiation nil)
    (sum_it_sigma formula-decl nil sigma reals)
    (ddl_dom? const-decl "bool" differentiation nil)
    (derivable? const-decl "bool" differentiation nil)
    (cnst const-decl "real" hp_def nil)
    (ddt def-decl "RealExpr" differentiation nil)
    (partial_diff const-decl "RealExpr" differentiation nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (subrange type-eq-decl nil integers nil)
    (sumf skolem-const-decl "[nat -> number_field]" chain_rule_re nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (max_var_rec def-decl "nat" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (col_def formula-decl nil matrices matrices)
    (e2v_der_p_not_in_map formula-decl nil chain_rule_re nil)
    (ddt_not_in_map formula-decl nil differentiation nil)
    (ddt_in_map formula-decl nil differentiation nil)
    (set type-eq-decl nil sets nil)
    (singleton? const-decl "bool" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (index_of const-decl "bool" hp_def nil)
    (singleton_extend application-judgement "(singleton?[T])"
     extend_set_props nil)
    (the const-decl "(p)" sets nil)
    (index_of_j application-judgement
     "(singleton?[below(length[MapExpr](me))])" hp_def nil)
    (e2v_der_p_in_map_ode formula-decl nil chain_rule_re nil)
    (fs_sol const-decl "(solution_odes_u?(D, odes, envi))" ODEs_equiv
     nil)
    (expr const-decl "RealExpr" hp_def nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (mapexpr_inj_eq formula-decl nil hp_def nil)
    (dLVar_dlvar_extensionality formula-decl nil hp_def nil)
    (dlvar? adt-recognizer-decl "[dLVar -> boolean]" hp_def nil)
    (k_1 skolem-const-decl
     "(extend[nat, below(length[MapExpr](ode)), bool, FALSE](index_of(ode, n)))"
     chain_rule_re nil)
    (in_map const-decl "bool" hp_def nil)
    (n skolem-const-decl "subrange(0, max_var(ode))" chain_rule_re nil)
    (der_ll_partial_der formula-decl nil chain_rule_re nil)
    (diff_re_derivable_partial formula-decl nil chain_rule_re nil)
    (sigma_eq formula-decl nil sigma reals)
    (sum_it const-decl "real" differentiation nil)
    (DIFT_Re const-decl "RealExpr" differentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma def-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (deriv const-decl "real" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec mv_analysis)
    (NQ const-decl "real" convergence_vec2vec mv_analysis)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (rows const-decl "nat" matrices matrices)
    (Matrix type-eq-decl nil matrices matrices)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (liftl const-decl "vec2vec[1](k)" lift_real_fun_def mv_analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def mv_analysis)
    (real_dom type-eq-decl nil lift_real_fun_def mv_analysis)
    (differentiable? const-decl "bool" convergence_vec2vec mv_analysis)
    (vec2vec type-eq-decl nil domain_vec2real_def mv_analysis)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (der_f const-decl
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     differentiable_def mv_analysis)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (NQ const-decl "bool" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (deriv_domain? const-decl "bool" derivative_domain_multi
     mv_analysis)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (projv const-decl "bool" chain_rule_re nil)
    (vec_re const-decl "real" chain_rule_re nil)
    (env_2_vec def-decl "VectorN(k + 1)" chain_rule_re nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (max_var const-decl "nat" hp_def nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ODEs_s? const-decl "bool" ODEs_equiv nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (dLVar type-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (dd? const-decl "bool" hp_expr nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (init3_re_der_chain formula-decl nil chain_rule_re nil))
   shostak))
 (derivable_M_nqbool?_TCC1 0
  (derivable_M_nqbool?_TCC1-1 nil 3854016436 ("" (subtype-tcc) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec_re const-decl "real" chain_rule_re nil)
    (* const-decl "real" matrices matrices)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (derivable_M_nqbool? subtype "chain_rule_re.nqbe"
    "{x: NQBool_adt.NQBool | booleans.OR(NQBool_adt.nqb_and?(x), NQBool_adt.nqb_or?(x))}")))
 (derivable_M_nqbool?_TCC2 0
  (derivable_M_nqbool?_TCC2-1 nil 3854016436 ("" (subtype-tcc) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec_re const-decl "real" chain_rule_re nil)
    (* const-decl "real" matrices matrices)
    (NQ const-decl "real" differentiable_def mv_analysis)
    (convergence_zero? const-decl "bool" vector_sequences mv_analysis)
    (differentiable? const-decl "bool" differentiable_def mv_analysis)
    (differentiable_re_p? const-decl "bool" chain_rule_re nil)
    (diff_re? const-decl "bool" chain_rule_re nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (derivable_M_nqbool? subtype "chain_rule_re.nqbe"
    "{x: NQBool_adt.NQBool | booleans.OR(NQBool_adt.nqb_and?(x), NQBool_adt.nqb_or?(x))}")))
 (derivable_M_normalize_rec 0
  (derivable_M_normalize_rec-1 nil 3854016570
   ("" (skeep)
    (("" (induct "nqbe")
      (("1" (assert) nil nil)
       ("2" (skeep*)
        (("2" (expand "normalize_rec")
          (("2" (ground)
            (("2" (expand "derivable_M_nqbool?")
              (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (skeep*)
        (("3" (expand "normalize_rec" 1)
          (("3" (expand "derivable_M_nqbool?" 1)
            (("3" (expand "derivable_M_nqbool?" -3)
              (("3" (flatten)
                (("3" (assert)
                  (("3" (ground)
                    (("1" (inst? -2) nil nil) ("2" (inst? -3) nil nil)
                     ("3" (inst? -1) nil nil) ("4" (inst? -2) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep*)
        (("4" (expand "derivable_M_nqbool?" -3)
          (("4" (flatten)
            (("4" (assert)
              (("4" (expand "normalize_rec" 1)
                (("4" (expand "derivable_M_nqbool?" 1)
                  (("4" (ground)
                    (("1" (inst? -2) nil nil) ("2" (inst? -3) nil nil)
                     ("3" (inst? -1) nil nil) ("4" (inst? -2) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep*)
        (("5" (expand "derivable_M_nqbool?" -2)
          (("5" (assert)
            (("5" (expand "normalize_rec" 1) (("5" (inst? -1) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NQBool type-decl nil NQBool_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (derivable_M_nqbool? inductive-decl "bool" chain_rule_re nil)
    (nqb_normal? inductive-decl "bool" bool_expr nil)
    (NormNQBool type-eq-decl nil bool_expr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nqb_to_be def-decl "BoolExpr" bool_expr nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (normalize_rec def-decl "{nnqbe: NormNQBool |
   FORALL (env: Environment):
     nqb_to_be(nnqbe)(env) = (pos IFF nqb_to_be(nqbe)(env))}" bool_expr
     nil)
    (NQBool_induction formula-decl nil NQBool_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (derivable_M_normalize 0
  (derivable_M_normalize-1 nil 3854016658
   ("" (skeep*)
    (("" (expand "normalize")
      (("" (rewrite "derivable_M_normalize_rec") nil nil)) nil))
    nil)
   ((normalize const-decl
     "{nnqbe: NormNQBool | nqb_to_be(nnqbe) = nqb_to_be(nqbe)}"
     bool_expr nil)
    (derivable_M_nqbool? inductive-decl "bool" chain_rule_re nil)
    (NQBool type-decl nil NQBool_adt nil)
    (ddl_dom? const-decl "bool" differentiation nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_M_normalize_rec formula-decl nil chain_rule_re nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)))