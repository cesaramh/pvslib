(bounded_star_semantics
 (semantic_rel_bounded_star_TCC1 0
  (semantic_rel_bounded_star_TCC1-1 nil 3870722345
   ("" (lemma "wf_nat") (("" (propax) nil nil)) nil)
   ((wf_nat formula-decl nil naturalnumbers nil)) nil
   (semantic_rel_bounded_star subtype
    "LAMBDA (a, b: naturalnumbers.nat): reals.<(a, b)"
    "(orders[nat].well_founded?)")))
 (semantic_rel_bounded_star_TCC2 0
  (semantic_rel_bounded_star_TCC1-2 nil 3795589968
   ("" (use "lt_lex2_wf")
    (("1" (assert) (("1" (grind) nil nil)) nil)
     ("2" (lemma "wf_nat") (("2" (propax) nil nil)) nil))
    nil)
   ((wf_nat formula-decl nil naturalnumbers nil)
    (lt_lex2 const-decl "bool" lex2_generic orders)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[HP])" HP_adt nil)
    (HP type-decl nil HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_lex2_wf judgement-tcc nil lex2_generic orders))
   nil
   (semantic_rel_bounded_star well-founded
    "lex2_generic[nat, HP_adt.HP].lt_lex2(LAMBDA (a, b: naturalnumbers.nat): reals.<(a, b), HP_adt.<<)"
    "nil"))
  (semantic_rel_bounded_star_TCC1-1 nil 3795589881
   ("" (well-founded-tcc) nil nil) nil nil
   (semantic_rel_bounded_star well-founded
    "lex2_generic[nat, HP_adt.HP].lt_lex2(LAMBDA (a, b: naturalnumbers.nat): reals.<(a, b), HP_adt.<<)"
    "nil")))
 (semantic_rel_bounded_star_TCC3 0
  (semantic_rel_bounded_star_TCC2-1 nil 3795589881
   ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[HP])" HP_adt nil)
    (HP type-decl nil HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_lex2 const-decl "bool" lex2_generic orders))
   nil
   (semantic_rel_bounded_star termination
    "bounded_star_semantics.semantic_rel_bounded_star(bounded_star_semantics.i)(bounded_star_semantics.stm1)"
    "nil")))
 (semantic_rel_bounded_star_TCC4 0
  (semantic_rel_bounded_star_TCC3-1 nil 3795589881
   ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (<< adt-def-decl "(strict_well_founded?[HP])" HP_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (HP type-decl nil HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_lex2 const-decl "bool" lex2_generic orders))
   nil
   (semantic_rel_bounded_star termination
    "bounded_star_semantics.semantic_rel_bounded_star(bounded_star_semantics.i)(bounded_star_semantics.stm2)"
    "nil")))
 (semantic_rel_bounded_star_TCC5 0
  (semantic_rel_bounded_star_TCC4-1 nil 3795589881
   ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[HP])" HP_adt nil)
    (HP type-decl nil HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_lex2 const-decl "bool" lex2_generic orders))
   nil
   (semantic_rel_bounded_star termination
    "bounded_star_semantics.semantic_rel_bounded_star(bounded_star_semantics.i)(bounded_star_semantics.stm1)"
    "nil")))
 (semantic_rel_bounded_star_TCC6 0
  (semantic_rel_bounded_star_TCC5-1 nil 3795589881
   ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[HP])" HP_adt nil)
    (HP type-decl nil HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_lex2 const-decl "bool" lex2_generic orders))
   nil
   (semantic_rel_bounded_star termination
    "bounded_star_semantics.semantic_rel_bounded_star(bounded_star_semantics.i)(bounded_star_semantics.stm2)"
    "nil")))
 (semantic_rel_bounded_star_TCC7 0
  (semantic_rel_bounded_star_TCC6-1 nil 3795589881
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (semantic_rel_bounded_star subtype
    "(number_fields.-)(bounded_star_semantics.i, 1)" "nat")))
 (semantic_rel_bounded_star_TCC8 0
  (semantic_rel_bounded_star_TCC7-1 nil 3795589881
   ("" (termination-tcc) nil nil)
   ((HP type-decl nil HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_lex2 const-decl "bool" lex2_generic orders)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (semantic_rel_bounded_star termination
    "bounded_star_semantics.semantic_rel_bounded_star((number_fields.-)(bounded_star_semantics.i, 1))(HP_adt.STAR(bounded_star_semantics.stm))"
    "nil")))
 (semantic_rel_bounded_star_inc 0
  (semantic_rel_bounded_star_inc-2 nil 3795590005
   ("" (measure-induct+ "i + size(hp)" ("i" "hp"))
    (("" (name-replace "i" "x!1")
      (("" (name-replace "hp" "x!2")
        (("" (skeep 1)
          (("" (skeep 1)
            (("" (expand "semantic_rel_bounded_star" -2)
              (("" (lift-if -2)
                (("" (split -)
                  (("1" (flatten)
                    (("1" (expand "semantic_rel_bounded_star" +)
                      (("1" (assert)
                        (("1" (skeep -2)
                          (("1" (inst 1 "env")
                            (("1" (split 1)
                              (("1"
                                (inst -4 "i" "stm1(hp)")
                                (("1"
                                  (inst -4 "envi" "env")
                                  (("1"
                                    (split -)
                                    (("1"
                                      (typepred "j")
                                      (("1"
                                        (inst -2 "j")
                                        (("1"
                                          (expand "i")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (expand "size" 1 2)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -4 "i" "stm2(hp)")
                                (("2"
                                  (inst -4 "env" "envo")
                                  (("2"
                                    (split -)
                                    (("1"
                                      (inst -1 "j")
                                      (("1"
                                        (typepred "j")
                                        (("1"
                                          (expand "i")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil)
                                     ("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (expand "semantic_rel_bounded_star" +)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (split)
                                (("1"
                                  (inst -3 "i" "stm1(hp)")
                                  (("1"
                                    (inst -3 "envi" "envo")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (inst -1 "j")
                                          (("1"
                                            (typepred "j")
                                            (("1"
                                              (expand "i")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "size" 1 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -3 "i" "stm2(hp)")
                                  (("2"
                                    (inst -3 "envi" "envo")
                                    (("2"
                                      (split)
                                      (("1"
                                        (inst -1 "j")
                                        (("1"
                                          (typepred "j")
                                          (("1"
                                            (expand "i")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil)
                                       ("3"
                                        (expand "size" 1 2)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1"
                                (expand "semantic_rel_bounded_star" +)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand
                                   "semantic_rel_bounded_star"
                                   +)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (split 4)
                                        (("1"
                                          (typepred "j")
                                          (("1"
                                            (expand "i")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (insteep)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -5 "i-1" "hp")
                                                (("2"
                                                  (inst
                                                   -5
                                                   "env"
                                                   "envo")
                                                  (("2"
                                                    (split -)
                                                    (("1"
                                                      (inst -1 "j-1")
                                                      (("1"
                                                        (case
                                                         "STAR(stm(hp)) = hp")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (apply-extensionality)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred "j")
                                                        (("2"
                                                          (expand "i")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "STAR(stm(hp)) = hp")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (apply-extensionality)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2"
                              (expand "semantic_rel_bounded_star" 4)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (stm1 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (stm2 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (HP_STAR_extensionality formula-decl nil HP_adt nil)
    (stm adt-accessor-decl "[(star?) -> HP]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Environment type-eq-decl nil hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (semantic_rel_bounded_star def-decl "bool" bounded_star_semantics
     nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "posnat" hp_expr nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (HP type-decl nil HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (semantic_rel_bounded_star_inc-1 nil 3795589992
   ("" (measure-induct+ "i + size(hp)" ("i" "hp"))
    (("" (name-replace "i" "x!1")
      (("" (name-replace "hp" "x!2")
        (("" (skeep 1)
          (("" (skeep 1)
            (("" (expand "semantic_rel_bounded_star" -2)
              (("" (lift-if -2)
                (("" (split -)
                  (("1" (flatten)
                    (("1" (expand "semantic_rel_bounded_star" +)
                      (("1" (assert)
                        (("1" (skeep -2)
                          (("1" (inst 1 "env")
                            (("1" (split 1)
                              (("1"
                                (inst -4 "i" "stm1(hp)")
                                (("1"
                                  (inst -4 "envi" "env")
                                  (("1"
                                    (split -)
                                    (("1"
                                      (typepred "j")
                                      (("1"
                                        (inst -2 "j")
                                        (("1"
                                          (expand "i")
                                          (("1" (propax) nil)))))))
                                     ("2" (propax) nil)
                                     ("3"
                                      (expand "size" 1 2)
                                      (("3" (assert) nil)))))))))
                               ("2"
                                (inst -4 "i" "stm2(hp)")
                                (("2"
                                  (inst -4 "env" "envo")
                                  (("2"
                                    (split -)
                                    (("1"
                                      (inst -1 "j")
                                      (("1"
                                        (typepred "j")
                                        (("1"
                                          (expand "i")
                                          (("1" (propax) nil)))))))
                                     ("2" (propax) nil)
                                     ("3"
                                      (grind)
                                      nil)))))))))))))))))))
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (expand "semantic_rel_bounded_star" +)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (split)
                                (("1"
                                  (inst -3 "i" "stm1(hp)")
                                  (("1"
                                    (inst -3 "envi" "envo")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (inst -1 "j")
                                          (("1"
                                            (typepred "j")
                                            (("1"
                                              (expand "i")
                                              (("1" (propax) nil)))))))
                                         ("2"
                                          (expand "size" 1 2)
                                          (("2" (assert) nil)))))))))))
                                 ("2"
                                  (inst -3 "i" "stm2(hp)")
                                  (("2"
                                    (inst -3 "envi" "envo")
                                    (("2"
                                      (split)
                                      (("1"
                                        (inst -1 "j")
                                        (("1"
                                          (typepred "j")
                                          (("1"
                                            (expand "i")
                                            (("1" (propax) nil)))))))
                                       ("2" (propax) nil)
                                       ("3"
                                        (expand "size" 1 2)
                                        (("3"
                                          (assert)
                                          nil)))))))))))))))))))
                       ("2" (flatten)
                        (("2" (split -)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1"
                                (expand "semantic_rel_bounded_star" +)
                                (("1" (assert) nil)))
                               ("2"
                                (flatten)
                                (("2"
                                  (expand
                                   "semantic_rel_bounded_star"
                                   +)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (split 4)
                                        (("1"
                                          (typepred "j")
                                          (("1"
                                            (expand "i")
                                            (("1" (assert) nil)))))
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (insteep)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -5 "i-1" "hp")
                                                (("2"
                                                  (inst
                                                   -5
                                                   "env"
                                                   "envo")
                                                  (("2"
                                                    (split -)
                                                    (("1"
                                                      (inst -1 "j-1")
                                                      (("1"
                                                        (case
                                                         "STAR(stm(hp)) = hp")
                                                        (("1"
                                                          (assert)
                                                          nil)
                                                         ("2"
                                                          (apply-extensionality)
                                                          nil)))
                                                       ("2"
                                                        (typepred "j")
                                                        (("2"
                                                          (expand "i")
                                                          (("2"
                                                            (assert)
                                                            nil)))))))
                                                     ("2"
                                                      (case
                                                       "STAR(stm(hp)) = hp")
                                                      (("1"
                                                        (assert)
                                                        nil)
                                                       ("2"
                                                        (apply-extensionality)
                                                        nil)))
                                                     ("3"
                                                      (assert)
                                                      nil)))))))))))))))))))))))))))
                           ("2" (flatten)
                            (("2"
                              (expand "semantic_rel_bounded_star" 4)
                              (("2"
                                (assert)
                                nil))))))))))))))))))))))))))))
    nil)
   nil nil))
 (semantic_rel_implies_bounded 0
  (semantic_rel_implies_bounded-1 nil 3795590509
   ("" (skeep*)
    (("" (lemma "semantic_rel_induction")
      ((""
        (inst -1
         "LAMBDA(hp:HP)(envi:Environment)(envo:Environment): EXISTS (i: nat): semantic_rel_bounded_star(i)(hp)(envi)(envo)")
        (("" (split -)
          (("1" (inst?) (("1" (assert) nil nil)) nil)
           ("2" (hide-all-but 1)
            (("2" (skolem 1 ("prg" "ein" "eout"))
              (("2" (flatten)
                (("2" (split -)
                  (("1" (flatten)
                    (("1" (inst 1 "0")
                      (("1" (expand "semantic_rel_bounded_star")
                        (("1" (assert)
                          (("1" (expand "semantic_rel")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (inst 1 "0")
                      (("2" (expand "semantic_rel_bounded_star")
                        (("2" (assert)
                          (("2" (expand "semantic_rel")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (flatten)
                    (("3" (inst 1 "0")
                      (("3" (expand "semantic_rel_bounded_star")
                        (("3" (assert)
                          (("3" (expand "semantic_rel")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (flatten)
                    (("4" (skeep)
                      (("4" (expand "semantic_rel_bounded_star" 1)
                        (("4" (assert)
                          (("4" (skolem -3 "i1")
                            (("4" (skolem -5 "i2")
                              (("4"
                                (inst 1 "max(i1,i2)")
                                (("4"
                                  (inst 1 "env")
                                  (("4"
                                    (split 1)
                                    (("1"
                                      (lemma
                                       "semantic_rel_bounded_star_inc")
                                      (("1"
                                        (inst
                                         -1
                                         "stm1(prg)"
                                         "ein"
                                         "env"
                                         "i1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -1 "max(i1,i2)")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "semantic_rel_bounded_star_inc")
                                      (("2"
                                        (inst
                                         -1
                                         "stm2(prg)"
                                         "env"
                                         "eout"
                                         "i2")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -1 "max(i1,i2)")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (flatten)
                    (("5" (split -)
                      (("1" (flatten)
                        (("1" (skeep -)
                          (("1" (inst 1 "i")
                            (("1"
                              (expand "semantic_rel_bounded_star" 1)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (skeep)
                          (("2" (insteep)
                            (("2"
                              (expand "semantic_rel_bounded_star" 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (flatten)
                    (("6" (case "eout = ein")
                      (("1" (assert)
                        (("1" (hide -3)
                          (("1" (inst 1 "0")
                            (("1" (expand "semantic_rel_bounded_star")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "semantic_rel_bounded_star" +)
                          (("2" (skeep -)
                            (("2" (skeep -5)
                              (("2"
                                (inst 2 "i+1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (case "STAR(stm(prg)) = prg")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst + "env")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply-extensionality)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (flatten)
                    (("7" (inst 1 "0")
                      (("7" (expand "semantic_rel_bounded_star" 1)
                        (("7" (assert)
                          (("7" (expand "semantic_rel" 1)
                            (("7" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel_induction formula-decl nil hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (stm2 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (semantic_rel_bounded_star_inc formula-decl nil
     bounded_star_semantics nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (stm1 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (HP_STAR_extensionality formula-decl nil HP_adt nil)
    (stm adt-accessor-decl "[(star?) -> HP]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (semantic_rel_bounded_star def-decl "bool" bounded_star_semantics
     nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (HP type-decl nil HP_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (bounded_implies_semantic_rel 0
  (bounded_implies_semantic_rel-1 nil 3795590527
   ("" (measure-induct+ "i+size(hp)" ("i" "hp"))
    (("" (skeep)
      (("" (expand "semantic_rel_bounded_star" -2)
        (("" (lift-if)
          (("" (split)
            (("1" (expand "semantic_rel" 1)
              (("1" (flatten -1)
                (("1" (assert)
                  (("1" (skeep)
                    (("1" (inst 1 "env")
                      (("1" (split)
                        (("1" (inst -4 "x!1" "stm1(x!2)")
                          (("1" (inst -4 "envi" "env")
                            (("1" (split)
                              (("1" (propax) nil nil)
                               ("2" (propax) nil nil)
                               ("3"
                                (expand "size" 1 2)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst -4 "x!1" "stm2(x!2)")
                          (("2" (inst -4 "env" "envo")
                            (("2" (split)
                              (("1" (propax) nil nil)
                               ("2" (propax) nil nil)
                               ("3"
                                (expand "size" 1 2)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (flatten)
                  (("1" (hide 1)
                    (("1" (expand "semantic_rel" 1)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (split)
                            (("1" (hide 2)
                              (("1"
                                (inst -3 "x!1" "stm1(x!2)")
                                (("1"
                                  (inst -3 "envi" "envo")
                                  (("1"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (expand "size" 1 2)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 1)
                              (("2"
                                (inst -3 "x!1" "stm2(x!2)")
                                (("2"
                                  (inst -3 "envi" "envo")
                                  (("2"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (expand "size" 1 2)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (hide 1 2)
                      (("1" (expand "semantic_rel" 1)
                        (("1" (flatten)
                          (("1" (hide 1 2 3 4 5 7)
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (split -2)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst 2 "env")
                                        (("2"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (inst
                                             -5
                                             "x!1 - 1"
                                             "STAR(stm(x!2))")
                                            (("1"
                                              (inst -5 "env" "envo")
                                              (("1"
                                                (split -5)
                                                (("1"
                                                  (case
                                                   "x!2=STAR(stm(x!2))")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply-extensionality)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (propax) nil nil)
                                                 ("3" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (HP_STAR_extensionality formula-decl nil HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (stm adt-accessor-decl "[(star?) -> HP]" HP_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (stm2 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (stm1 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Environment type-eq-decl nil hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (semantic_rel_bounded_star def-decl "bool" bounded_star_semantics
     nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "posnat" hp_expr nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (HP type-decl nil HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (BSTAR_TCC1 0
  (BSTAR_TCC1-1 nil 3795792855 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (BSTAR subtype "(number_fields.-)(bounded_star_semantics.n, 1)"
    "nat")))
 (BSTAR_TCC2 0
  (BSTAR_TCC2-1 nil 3795792855 ("" (termination-tcc) nil nil) nil nil
   (BSTAR termination
    "bounded_star_semantics.BSTAR(bounded_star_semantics.stm, (number_fields.-)(bounded_star_semantics.n, 1))"
    "nil")))
 (semantic_rel_bstar_reflexive 0
  (semantic_rel_bstar_reflexive-1 nil 3795794098
   ("" (induct "i")
    (("1" (expand "BSTAR")
      (("1" (expand "semantic_rel")
        (("1" (expand "DLBOOL") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "BSTAR" 1)
          (("2" (expand "semantic_rel" 1)
            (("2" (flatten) (("2" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((DLBOOL const-decl "bool" bool_expr nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (HP type-decl nil HP_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (semantic_rel_bounded_bstar_semantic_rel_bstar 0
  (semantic_rel_bounded_bstar_semantic_rel_bstar-1 nil 3795793216
   ("" (induct "i")
    (("1" (skeep)
      (("1" (expand "BSTAR")
        (("1" (expand "semantic_rel_bounded_star")
          (("1" (expand "semantic_rel")
            (("1" (expand "DLBOOL") (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "semantic_rel_bounded_star" -2)
          (("2" (split -2)
            (("1" (replace -1 :hide? t)
              (("1" (hide-all-but 1)
                (("1" (rewrite "semantic_rel_bstar_reflexive") nil
                  nil))
                nil))
              nil)
             ("2" (skolem -1 "env_")
              (("2" (flatten)
                (("2" (expand "BSTAR" 1)
                  (("2" (expand "semantic_rel" 1)
                    (("2" (flatten)
                      (("2" (expand "semantic_rel" 1)
                        (("2" (inst 1 "env_")
                          (("2" (assert)
                            (("2" (inst? - :where 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (semantic_rel_bstar_reflexive formula-decl nil
     bounded_star_semantics nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (semantic_rel_bounded_star def-decl "bool" bounded_star_semantics
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def nil)
    (HP type-decl nil HP_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (semantic_rel_star_bounded_star 0
  (semantic_rel_star_bounded_star-1 nil 3795792863
   ("" (skeep)
    (("" (use "semantic_rel_implies_bounded")
      (("" (assert)
        (("" (skeep -1)
          (("" (use "semantic_rel_bounded_bstar_semantic_rel_bstar")
            (("" (assert) (("" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel_implies_bounded formula-decl nil
     bounded_star_semantics nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (HP type-decl nil HP_adt nil)
    (semantic_rel_bounded_bstar_semantic_rel_bstar formula-decl nil
     bounded_star_semantics nil))
   shostak))
 (semantic_rel_star_bounded_star_con 0
  (semantic_rel_star_bounded_star_con-1 nil 3870722350
   ("" (induct "i")
    (("1" (skeep)
      (("1" (expand "BSTAR" -1)
        (("1" (expand "semantic_rel") (("1" (flatten) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "BSTAR" -2)
          (("2" (expand "semantic_rel" -2)
            (("2" (split -2)
              (("1" (expand "semantic_rel" 1)
                (("1" (flatten)
                  (("1" (expand "semantic_rel" -1)
                    (("1" (skeep)
                      (("1" (inst 2 "env")
                        (("1" (assert)
                          (("1" (inst -3 "hp" "env" "envo")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -2 "hp" "envi" "envo")
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat_induction formula-decl nil naturalnumbers nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def nil)
    (HP type-decl nil HP_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (semantic_rel_bounded_star_seq_switch 0
  (semantic_rel_bounded_star_seq_switch-1 nil 3872852291
   ("" (induct "i")
    (("1" (skeep)
      (("1" (expand "BSTAR")
        (("1" (expand "semantic_rel")
          (("1" (expand "semantic_rel" 1 2)
            (("1" (expand "semantic_rel" 1 2)
              (("1" (split)
                (("1" (flatten)
                  (("1" (skeep)
                    (("1" (replace -3)
                      (("1" (inst 1 "envi")
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (skeep)
                    (("2" (replace -2)
                      (("2" (inst 1 "envo") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (split)
          (("1" (flatten)
            (("1" (expand "semantic_rel" 1)
              (("1" (expand "semantic_rel" -1)
                (("1" (skeep)
                  (("1" (expand "semantic_rel" -2)
                    (("1" (expand "BSTAR" -2)
                      (("1" (split)
                        (("1" (expand "semantic_rel" 1 1)
                          (("1" (expand "BSTAR" 1)
                            (("1" (inst -3 "stm" "env" "envo")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "semantic_rel" -1)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (expand "semantic_rel" -4)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "env_1!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand
                                                 "semantic_rel"
                                                 1)
                                                (("1"
                                                  (inst 1 "env")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "semantic_rel" 1 1)
                          (("2" (expand "BSTAR" 1)
                            (("2" (expand "semantic_rel" -3)
                              (("2"
                                (inst -3 "stm" "envi" "envo")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (split -3)
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "env!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst 1 "env")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "BSTAR" 1)
            (("2" (expand "semantic_rel" 1)
              (("2" (flatten)
                (("2" (skeep)
                  (("2" (expand "semantic_rel" -1)
                    (("2" (split)
                      (("1" (expand "semantic_rel" -1)
                        (("1" (skeep)
                          (("1" (inst 1 "env_1")
                            (("1" (assert)
                              (("1"
                                (expand "semantic_rel" 1)
                                (("1"
                                  (expand "semantic_rel" -4)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "semantic_rel" 1)
                                      (("1"
                                        (inst -4 "stm" "env_1" "envo")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -4)
                                            (("1"
                                              (split)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (inst 1 "env")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "semantic_rel" 1 2)
                        (("2" (inst -3 "stm" "envi" "envo")
                          (("2" (expand "semantic_rel" -3)
                            (("2" (flatten)
                              (("2"
                                (hide -3)
                                (("2"
                                  (split)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 1 "env!1")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst 1 "env")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLBOOL const-decl "bool" bool_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def nil)
    (HP type-decl nil HP_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (semantic_rel_star_seq_switch 0
  (semantic_rel_star_seq_switch-1 nil 3873562119
   ("" (skeep)
    (("" (lemma "semantic_rel_bounded_star_seq_switch")
      (("" (split)
        (("1" (flatten)
          (("1" (expand "semantic_rel" -1)
            (("1" (skeep)
              (("1" (expand "semantic_rel" 1)
                (("1" (expand "semantic_rel" -3)
                  (("1" (lemma "semantic_rel_star_bounded_star")
                    (("1" (inst? -1)
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (inst -4 "stm" "envi" "envo" "i")
                            (("1" (flatten)
                              (("1"
                                (split -4)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 1 "env!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma
                                         "semantic_rel_star_bounded_star_con")
                                        (("1"
                                          (inst
                                           -1
                                           "stm"
                                           "envi"
                                           "env!1"
                                           "i")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (inst 1 "env")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "semantic_rel")
            (("2" (skeep)
              (("2" (lemma "semantic_rel_star_bounded_star")
                (("2" (inst? -1)
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (hide -2)
                        (("2" (inst -3 "stm" "envi" "envo" "i")
                          (("2" (flatten)
                            (("2" (hide -3)
                              (("2"
                                (split)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (lemma
                                     "semantic_rel_star_bounded_star_con")
                                    (("1"
                                      (inst
                                       -1
                                       "stm"
                                       "env!1"
                                       "envo"
                                       "i")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst 1 "env!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst 1 "env")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel_bounded_star_seq_switch formula-decl nil
     bounded_star_semantics nil)
    (HP type-decl nil HP_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (semantic_rel_star_bounded_star_con formula-decl nil
     bounded_star_semantics nil)
    (semantic_rel_star_bounded_star formula-decl nil
     bounded_star_semantics nil)
    (semantic_rel inductive-decl "bool" hp_expr nil))
   shostak))
 (semantic_rel_bounded_star_iter 0
  (semantic_rel_bounded_star_iter-1 nil 3872847869
   ("" (skeep)
    (("" (expand "BSTAR" 1)
      (("" (expand "semantic_rel" 1)
        (("" (flatten)
          (("" (lemma "semantic_rel_bounded_star_seq_switch")
            (("" (inst? -1)
              (("" (assert)
                (("" (hide 2 3)
                  (("" (expand "semantic_rel" 1)
                    (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((BSTAR def-decl "HP" bounded_star_semantics nil)
    (HP type-decl nil HP_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (semantic_rel_bounded_star_seq_switch formula-decl nil
     bounded_star_semantics nil)
    (semantic_rel inductive-decl "bool" hp_expr nil))
   shostak))
 (semantic_rel_bounded_star_iter_con_TCC1 0
  (semantic_rel_bounded_star_iter_con_TCC1-1 nil 3873558759
   ("" (subtype-tcc) nil nil) nil nil
   (semantic_rel_bounded_star_iter_con subtype
    "(number_fields.-)(bounded_star_semantics.i, 1)" "nat")))
 (semantic_rel_bounded_star_iter_con 0
  (semantic_rel_bounded_star_iter_con-1 nil 3873560454
   ("" (skeep)
    (("" (expand "BSTAR" -1)
      (("" (expand "semantic_rel" -1)
        (("" (split)
          (("1" (lemma "semantic_rel_bounded_star_seq_switch")
            (("1" (inst?)
              (("1" (assert)
                (("1" (expand "semantic_rel" -1)
                  (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((BSTAR def-decl "HP" bounded_star_semantics nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (HP type-decl nil HP_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (semantic_rel_bounded_star_seq_switch formula-decl nil
     bounded_star_semantics nil)
    (semantic_rel inductive-decl "bool" hp_expr nil))
   shostak))
 (semantic_rel_star_iter 0
  (semantic_rel_star_iter-1 nil 3872855239
   ("" (skeep)
    (("" (lemma "semantic_rel_bounded_star_iter")
      (("" (lemma "semantic_rel_star_bounded_star")
        (("" (inst? -1)
          (("" (assert)
            (("" (skeep)
              (("" (hide -3)
                (("" (inst? -2)
                  (("" (inst -2 "envo")
                    (("" (assert)
                      (("" (lemma "semantic_rel_star_bounded_star_con")
                        (("" (hide -2 -4)
                          (("" (inst? -1) (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel_bounded_star_iter formula-decl nil
     bounded_star_semantics nil)
    (HP type-decl nil HP_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (semantic_rel_star_bounded_star_con formula-decl nil
     bounded_star_semantics nil)
    (semantic_rel_star_bounded_star formula-decl nil
     bounded_star_semantics nil))
   shostak))
 (semantic_rel_star_iter_con 0
  (semantic_rel_star_iter_con-1 nil 3873561997
   ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak)))