(csv_reader_test
 (ex1_TCC1 0
  (ex1_TCC1-3 nil 3897754665
   ("" (skeep* :preds? t)
    (("" (expand "length" -1)
      (("" (lift-if -1)
        (("" (split -1)
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (ex1 subtype "csv_reader_test.data"
    "(list_adt[csv_reader.CSVData].cons?)"))
  (ex1_TCC1-2 nil 3897754484
   ("" (skeep*)
    (("" (typepred "data")
      (("" (replaces -4)
        (("" (eval-expr (! -1 2)) (("" (assert) nil))))))))
    nil)
   nil nil
   (ex1 subtype "csv_reader_test.data"
    "(list_adt[csv_reader.CSVData].cons?)"))
  (ex1_TCC1-1 nil 3897754430 ("" (subtype-tcc) nil nil) nil nil
   (ex1 subtype "csv_reader_test.data"
    "(list_adt[csv_reader.CSVData].cons?)")))
 (ex1_TCC2 0
  (ex1_TCC2-2 nil 3897754520
   ("" (skeep*)
    (("" (typepred "data")
      (("" (replaces -5)
        (("" (eval-expr (! -1 2)) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (bool? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Boolean adt-constructor-decl "(Boolean?)" csv_reader nil)
    (Boolean? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (rat? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Rational adt-constructor-decl "(Rational?)" csv_reader nil)
    (Rational? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (int? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Integer adt-constructor-decl "(Integer?)" csv_reader nil)
    (Integer? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (str? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (String adt-constructor-decl "(String?)" csv_reader nil)
    (String? adt-recognizer-decl "[CSVFieldSpec -> boolean]" csv_reader
     nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list type-decl nil list_adt nil)
    (CSVData type-decl nil csv_reader nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (ex1 subtype "1" "below[length[CSVData](data)]"))
  (ex1_TCC2-1 nil 3897754430 ("" (subtype-tcc) nil nil) nil nil
   (ex1 subtype "1" "below[length[CSVData](data)]")))
 (ex1_TCC3 0
  (ex1_TCC3-2 nil 3897754629
   ("" (skeep*)
    (("" (typepred "data")
      (("" (replaces -5)
        (("" (eval-expr (! -1 2)) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVData type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (String? adt-recognizer-decl "[CSVFieldSpec -> boolean]" csv_reader
     nil)
    (String adt-constructor-decl "(String?)" csv_reader nil)
    (str? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Integer? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (Integer adt-constructor-decl "(Integer?)" csv_reader nil)
    (int? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Rational? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (Rational adt-constructor-decl "(Rational?)" csv_reader nil)
    (rat? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Boolean? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (Boolean adt-constructor-decl "(Boolean?)" csv_reader nil)
    (bool? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil))
   nil (ex1 subtype "2" "below[length[CSVData](data)]"))
  (ex1_TCC3-1 nil 3897754430 ("" (subtype-tcc) nil nil) nil nil
   (ex1 subtype "2" "below[length[CSVData](data)]")))
 (ex1_TCC4 0
  (ex1_TCC4-2 nil 3897754637
   ("" (skeep*)
    (("" (typepred "data")
      (("" (replaces -5)
        (("" (eval-expr (! -1 2)) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVData type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (String? adt-recognizer-decl "[CSVFieldSpec -> boolean]" csv_reader
     nil)
    (String adt-constructor-decl "(String?)" csv_reader nil)
    (str? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Integer? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (Integer adt-constructor-decl "(Integer?)" csv_reader nil)
    (int? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Rational? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (Rational adt-constructor-decl "(Rational?)" csv_reader nil)
    (rat? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Boolean? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (Boolean adt-constructor-decl "(Boolean?)" csv_reader nil)
    (bool? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil))
   nil (ex1 subtype "3" "below[length[CSVData](data)]"))
  (ex1_TCC4-1 nil 3897754430 ("" (subtype-tcc) nil nil) nil nil
   (ex1 subtype "3" "below[length[CSVData](data)]"))))

