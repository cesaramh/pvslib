(csv_reader
 (CSVDataFromSpec_TCC1 0
  (CSVDataFromSpec_TCC1-1 nil 3778337968 ("" (subtype-tcc) nil nil) nil
   nil
   (CSVDataFromSpec subtype "csv_reader.i"
    "below[length[CSVData](l)]")))
 (CSVDataFromSpec_TCC2 0
  (CSVDataFromSpec_TCC2-1 "" 3898286883
   ("" (induct "spec")
    (("1" (inst 1 "null") (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("x" "xs"))
      (("2" (flatten)
        (("2" (skolem -1 "data" :skolem-typepreds? t)
          (("2"
            (inst 1 "cons( CASES x
                                    OF String: str_field(\"\"),
                 		       StringOrNull: str_field(\"\"),
                                       Integer: int_field(0),
                 		       IntegerOrNull: int_field(0),
                                       Rational: rat_field(0),
                 		       RationalOrNull: rat_field(0),
				       Decimal: dec_field(0,0),
				       DecimalOrNull: dec_field(0,0),
                      		       Boolean: bool_field(FALSE),
                 		       BooleanOrNull: bool_field(FALSE)
                                    ENDCASES , data)")
            (("2" (split 1)
              (("1" (grind) nil nil)
               ("2" (skeep* :preds? t)
                (("2" (case "i=0")
                  (("1" (replace -1 :hide? t)
                    (("1" (expand "nth" 1)
                      (("1" (hide -) (("1" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand "nth" 2)
                    (("2" (assert) (("2" (inst -3 "i-1") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x skolem-const-decl "CSVFieldSpec" csv_reader nil)
    (xs skolem-const-decl "list[CSVFieldSpec]" csv_reader nil)
    (data skolem-const-decl
     "{l: listn[CSVData](length[CSVFieldSpec](xs)) |
   FORALL (i: below(length[CSVFieldSpec](xs))):
     wf_CSVData?(nth[CSVFieldSpec](xs, i))(nth[CSVData](l, i))}"
     csv_reader nil)
    (BooleanOrNull adt-constructor-decl "(BooleanOrNull?)" csv_reader
     nil)
    (BooleanOrNull? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (FALSE const-decl "bool" booleans nil)
    (bool_field adt-constructor-decl "[boolean -> (bool?)]" csv_reader
     nil)
    (bool? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Boolean adt-constructor-decl "(Boolean?)" csv_reader nil)
    (Boolean? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (DecimalOrNull adt-constructor-decl "(DecimalOrNull?)" csv_reader
     nil)
    (DecimalOrNull? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (dec_field adt-constructor-decl "[[rat, nat] -> (dec?)]" csv_reader
     nil)
    (dec? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Decimal adt-constructor-decl "(Decimal?)" csv_reader nil)
    (Decimal? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (RationalOrNull adt-constructor-decl "(RationalOrNull?)" csv_reader
     nil)
    (RationalOrNull? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (rat_field adt-constructor-decl "[rat -> (rat?)]" csv_reader nil)
    (rat? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (Rational adt-constructor-decl "(Rational?)" csv_reader nil)
    (Rational? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (IntegerOrNull adt-constructor-decl "(IntegerOrNull?)" csv_reader
     nil)
    (IntegerOrNull? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (int_field adt-constructor-decl "[int -> (int?)]" csv_reader nil)
    (int? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (Integer adt-constructor-decl "(Integer?)" csv_reader nil)
    (Integer? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (StringOrNull adt-constructor-decl "(StringOrNull?)" csv_reader
     nil)
    (StringOrNull? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (str_field adt-constructor-decl "[string -> (str?)]" csv_reader
     nil)
    (str? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (String adt-constructor-decl "(String?)" csv_reader nil)
    (String? adt-recognizer-decl "[CSVFieldSpec -> boolean]" csv_reader
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (TRUE const-decl "bool" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (wf_CSVData? const-decl "bool" csv_reader nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (listn type-eq-decl nil listn structures)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (CSVData type-decl nil csv_reader nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak
   (CSVDataFromSpec existence ""
    "{l: listn[csv_reader.CSVData].listn(list_props[csv_reader.CSVFieldSpec].length(csv_reader.spec)) | FORALL (i: naturalnumbers.below(list_props[csv_reader.CSVFieldSpec].length(csv_reader.spec))): csv_reader.wf_CSVData?(list_props[csv_reader.CSVFieldSpec].nth(csv_reader.spec, i))(list_props[csv_reader.CSVData].nth(l, i))}")))
 (getField_TCC1 0
  (getField_TCC1-1 nil 3778340295 ("" (subtype-tcc) nil nil) nil nil
   (getField subtype "csv_reader.i"
    "below[length[CSVFieldSpec](spec)]")))
 (getField_TCC2 0
  (getField_TCC2-1 nil 3778340295 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVData type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (listn type-eq-decl nil listn structures)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wf_CSVData? const-decl "bool" csv_reader nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (getField subtype
    "list_props[csv_reader.CSVData].nth(csv_reader.data, csv_reader.i)"
    "(csv_reader.wf_CSVData?(list_props[csv_reader.CSVFieldSpec].nth(csv_reader.spec, csv_reader.i)))")))
 (csv_data_from_spec_field_bool 0
  (csv_data_from_spec_field_bool-1 nil 3897750604 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVData type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (listn type-eq-decl nil listn structures)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wf_CSVData? const-decl "bool" csv_reader nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (getField const-decl "(wf_CSVData?(nth(spec, i)))" csv_reader nil))
   shostak))
 (csv_data_from_spec_field_bool_OR_null 0
  (csv_data_from_spec_field_bool_OR_null-1 nil 3898288795
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVData type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (listn type-eq-decl nil listn structures)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wf_CSVData? const-decl "bool" csv_reader nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (getField const-decl "(wf_CSVData?(nth(spec, i)))" csv_reader nil))
   shostak))
 (csv_data_from_spec_field_rat 0
  (csv_data_from_spec_field_rat-1 nil 3778341814 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVData type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (listn type-eq-decl nil listn structures)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wf_CSVData? const-decl "bool" csv_reader nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (getField const-decl "(wf_CSVData?(nth(spec, i)))" csv_reader nil))
   shostak))
 (csv_data_from_spec_field_rat_OR_null 0
  (csv_data_from_spec_field_rat_OR_null-1 nil 3898288802
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVData type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (listn type-eq-decl nil listn structures)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wf_CSVData? const-decl "bool" csv_reader nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (getField const-decl "(wf_CSVData?(nth(spec, i)))" csv_reader nil))
   shostak))
 (csv_data_from_spec_field_dec 0
  (csv_data_from_spec_field_dec-1 nil 3898358856 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVData type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (listn type-eq-decl nil listn structures)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wf_CSVData? const-decl "bool" csv_reader nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (getField const-decl "(wf_CSVData?(nth(spec, i)))" csv_reader nil))
   shostak))
 (csv_data_from_spec_field_dec_OR_null 0
  (csv_data_from_spec_field_dec_OR_null-1 nil 3898358861
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVData type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (listn type-eq-decl nil listn structures)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wf_CSVData? const-decl "bool" csv_reader nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (getField const-decl "(wf_CSVData?(nth(spec, i)))" csv_reader nil))
   shostak))
 (csv_data_from_spec_field_int 0
  (csv_data_from_spec_field_int-1 nil 3778342003 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVData type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (listn type-eq-decl nil listn structures)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wf_CSVData? const-decl "bool" csv_reader nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (getField const-decl "(wf_CSVData?(nth(spec, i)))" csv_reader nil))
   shostak))
 (csv_data_from_spec_field_int_OR_null 0
  (csv_data_from_spec_field_int_OR_null-1 nil 3898288812
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVData type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (listn type-eq-decl nil listn structures)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wf_CSVData? const-decl "bool" csv_reader nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (getField const-decl "(wf_CSVData?(nth(spec, i)))" csv_reader nil))
   shostak))
 (csv_data_from_spec_field_str 0
  (csv_data_from_spec_field_str-1 nil 3778342008 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVData type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (listn type-eq-decl nil listn structures)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wf_CSVData? const-decl "bool" csv_reader nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (getField const-decl "(wf_CSVData?(nth(spec, i)))" csv_reader nil))
   shostak))
 (csv_data_from_spec_field_str_OR_null 0
  (csv_data_from_spec_field_str_OR_null-1 nil 3898288818
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVData type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (listn type-eq-decl nil listn structures)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wf_CSVData? const-decl "bool" csv_reader nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (getField const-decl "(wf_CSVData?(nth(spec, i)))" csv_reader nil))
   shostak))
 (processCSVField_TCC1 0
  (processCSVField_TCC3-1 nil 3898359842 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (StringChar type-eq-decl nil stdstr_util pvsio_utils)
    (wf_CSVData? const-decl "bool" csv_reader nil))
   nil
   (processCSVField subtype "csv_reader.null_field"
    "(csv_reader.wf_CSVData?(csv_reader.fieldspec))")))
 (processCSVField_TCC2 0
  (processCSVField_TCC1-1 nil 3898286460 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (StringChar type-eq-decl nil stdstr_util pvsio_utils)
    (wf_CSVData? const-decl "bool" csv_reader nil))
   nil
   (processCSVField subtype
    "csv_reader.int_field(stdstr.str2int(csv_reader.token))"
    "(csv_reader.wf_CSVData?(csv_reader.fieldspec))")))
 (processCSVField_TCC3 0
  (processCSVField_TCC2-1 nil 3898286460 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (StringChar type-eq-decl nil stdstr_util pvsio_utils)
    (wf_CSVData? const-decl "bool" csv_reader nil))
   nil
   (processCSVField subtype
    "csv_reader.rat_field(stdstr.str2real(csv_reader.token))"
    "(csv_reader.wf_CSVData?(csv_reader.fieldspec))")))
 (processCSVField_TCC4 0
  (processCSVField_TCC4-1 nil 3898359842 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (StringChar type-eq-decl nil stdstr_util pvsio_utils)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil
   (processCSVField subtype
    "real_defs.max(0, (number_fields.-)(csv_reader.len, csv_reader.decpos))"
    "nat")))
 (processCSVField_TCC5 0
  (processCSVField_TCC6-1 nil 3898286460 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (StringChar type-eq-decl nil stdstr_util pvsio_utils)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (wf_CSVData? const-decl "bool" csv_reader nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil))
   nil
   (processCSVField subtype
    "csv_reader.dec_field(stdmath_util.rational(stdstr.decstr2rat(csv_reader.token)), real_defs.max(0, (number_fields.-)(csv_reader.len, csv_reader.decpos)))"
    "(csv_reader.wf_CSVData?(csv_reader.fieldspec))")))
 (processCSVField_TCC6 0
  (processCSVField_TCC3-1 nil 3898286460 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (StringChar type-eq-decl nil stdstr_util pvsio_utils)
    (wf_CSVData? const-decl "bool" csv_reader nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (str2bool const-decl "bool" stdstr nil))
   nil
   (processCSVField subtype
    "csv_reader.bool_field(stdstr_util.str2boolean(csv_reader.token))"
    "(csv_reader.wf_CSVData?(csv_reader.fieldspec))")))
 (processCSVField_TCC7 0
  (processCSVField_TCC4-1 nil 3898286460
   ("" (skeep)
    (("" (case "fieldspec = String OR fieldspec = StringOrNull")
      (("1" (subtype-tcc) nil nil)
       ("2" (flatten) (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((StringOrNull adt-constructor-decl "(StringOrNull?)" csv_reader
     nil)
    (StringOrNull? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (String adt-constructor-decl "(String?)" csv_reader nil)
    (String? adt-recognizer-decl "[CSVFieldSpec -> boolean]" csv_reader
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (quotedstring? const-decl "bool" csv_util nil)
    (unquote_string const-decl "string" csv_util nil)
    (wf_CSVData? const-decl "bool" csv_reader nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (processCSVField subtype
    "csv_reader.str_field(csv_util.unquote_string(csv_reader.qchar)(csv_reader.token))"
    "(csv_reader.wf_CSVData?(csv_reader.fieldspec))")))
 (processCSVField_TCC8 0
  (processCSVField_TCC5-1 nil 3898286460
   ("" (skeep)
    (("" (case "fieldspec = String OR fieldspec = StringOrNull")
      (("1" (hide-all-but (-1 11))
        (("1" (split)
          (("1" (inst 1 "str_field(\"\")") (("1" (grind) nil nil)) nil)
           ("2" (inst 1 "null_field") (("2" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (flatten) (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((StringOrNull adt-constructor-decl "(StringOrNull?)" csv_reader
     nil)
    (StringOrNull? adt-recognizer-decl "[CSVFieldSpec -> boolean]"
     csv_reader nil)
    (String adt-constructor-decl "(String?)" csv_reader nil)
    (String? adt-recognizer-decl "[CSVFieldSpec -> boolean]" csv_reader
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length def-decl "nat" list_props nil)
    (fieldspec skolem-const-decl "CSVFieldSpec" csv_reader nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (str_field adt-constructor-decl "[string -> (str?)]" csv_reader
     nil)
    (str? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_CSVData? const-decl "bool" csv_reader nil)
    (CSVData type-decl nil csv_reader nil)
    (null? adt-recognizer-decl "[CSVData -> boolean]" csv_reader nil)
    (null_field adt-constructor-decl "(null?)" csv_reader nil))
   nil
   (processCSVField existence ""
    "(csv_reader.wf_CSVData?(csv_reader.fieldspec))")))
 (processCSVLine_TCC1 0
  (processCSVLine_TCC1-1 nil 3778255305 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (StringChar type-eq-decl nil stdstr_util pvsio_utils)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (wf_CSVData? const-decl "bool" csv_reader nil))
   nil
   (processCSVLine subtype "list_adt[csv_reader.CSVData].null"
    "csv_reader.CSVDataFromSpec(csv_reader.spec)")))
 (processCSVLine_TCC2 0
  (processCSVLine_TCC2-1 nil 3778255305 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (StringChar type-eq-decl nil stdstr_util pvsio_utils)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (processCSVLine subtype "csv_reader.tokens"
    "(list_adt[string].cons?)")))
 (processCSVLine_TCC3 0
  (processCSVLine_TCC3-2 "" 3790105618 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (StringChar type-eq-decl nil stdstr_util pvsio_utils)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (processCSVLine subtype "csv_reader.spec"
    "(list_adt[csv_reader.CSVFieldSpec].cons?)"))
  (processCSVLine_TCC3-1 nil 3778255305
   ("" (skeep* :preds? t)
    (("" (expand "length" -1)
      (("" (assert)
        (("" (lift-if -1)
          (("" (split -1)
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (processCSVLine subtype "csv_reader.spec"
    "(list_adt[csv_reader.CSVFieldSpec].cons?)")))
 (processCSVLine_TCC4 0
  (processCSVLine_TCC4-1 nil 3778255305
   ("" (skeep* :preds? t)
    (("" (expand "length" -1)
      (("" (assert) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (processCSVLine subtype "list_adt[string].cdr(csv_reader.tokens)"
    "{tokens: list_adt[string].list | reals.<=(list_props[csv_reader.CSVFieldSpec].length(list_adt[csv_reader.CSVFieldSpec].cdr(csv_reader.spec)), list_props[string].length(tokens))}")))
 (processCSVLine_TCC5 0
  (processCSVLine_TCC5-1 nil 3778255305
   ("" (skeep* :preds? t)
    (("" (expand "<<") (("" (grind) nil nil)) nil)) nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (processCSVLine termination
    "csv_reader.processCSVLine(csv_reader.fin, list_adt[csv_reader.CSVFieldSpec].cdr(csv_reader.spec), list_adt[string].cdr(csv_reader.tokens), csv_reader.qchar, (number_fields.+)(csv_reader.field, 1))"
    "nil")))
 (processCSVLine_TCC6 0
  (processCSVLine_TCC6-1 nil 3778327599
   ("" (skeep* :preds? t)
    (("" (typepred "v(fin, cdr(spec), cdr(tokens), qchar, field+1)")
      (("1" (split 2)
        (("1" (expand "length" 1) (("1" (assert) nil nil)) nil)
         ("2" (skeep :preds? t)
          (("2" (case "i=0")
            (("1" (replace -1 :hide? t)
              (("1" (expand "nth" 1)
                (("1" (hide -3)
                  (("1"
                    (typepred
                     "processCSVField(fin, fieldspec, token, qchar, field)")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "nth" 2)
              (("2" (assert)
                (("2" (inst -3 "i-1") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 3)
        (("2" (expand "length" -2)
          (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (CSVDataFromSpec nonempty-type-eq-decl nil csv_reader nil)
    (nth def-decl "T" list_props nil)
    (wf_CSVData? const-decl "bool" csv_reader nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (listn type-eq-decl nil listn structures)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (StringChar type-eq-decl nil stdstr_util pvsio_utils)
    (<= const-decl "bool" reals nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (IStream nonempty-type-from-decl nil stdio nil)
    (IStream_pred const-decl "[Stream -> boolean]" stdio nil)
    (Stream nonempty-type-decl nil stdio nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list type-decl nil list_adt nil)
    (CSVData type-decl nil csv_reader nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (processCSVField const-decl "(wf_CSVData?(fieldspec))" csv_reader
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (processCSVLine subtype
    "list_adt[csv_reader.CSVData].cons(csv_reader.processCSVField(csv_reader.fin, csv_reader.fieldspec, csv_reader.token, csv_reader.qchar, csv_reader.field), csv_reader.rest)"
    "csv_reader.CSVDataFromSpec(csv_reader.spec)")))
 (processCSVLine_TCC7 0
  (processCSVLine_TCC7-1 nil 3778327599 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (CSVFieldSpec type-decl nil csv_reader nil)
    (list type-decl nil list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (StringChar type-eq-decl nil stdstr_util pvsio_utils)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (processCSVLine subtype "csv_reader.spec"
    "(list_adt[csv_reader.CSVFieldSpec].cons?)")))
 (readCSVRecordln_TCC1 0
  (readCSVRecordln_TCC1-1 nil 3898286460 ("" (subtype-tcc) nil nil)
   ((int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IStream nonempty-type-from-decl nil stdio nil)
    (IStream_pred const-decl "[Stream -> boolean]" stdio nil)
    (Stream nonempty-type-decl nil stdio nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (empty_line const-decl "bool" csv_reader nil)
    (skip const-decl "void" stdlang nil)
    (val const-decl "T" stdprog nil)
    (set const-decl "void" stdprog nil)
    (ClosedStream const-decl "ExceptionTag[string]" stdio nil)
    (make_exc const-decl "Exception" stdexc nil)
    (EndOfFile const-decl "ExceptionTag[string]" stdio nil)
    (fcheck const-decl "bool" stdio nil)
    (prog const-decl
          "T"
     stdprog nil)
    (fread_line const-decl "string" stdio nil)
    (fail const-decl "void" stdlang nil)
    (return const-decl "void" stdprog nil)
    (PVSioCSVError const-decl "ExceptionTag[string]" csv_reader nil)
    ({\|\|} const-decl "Lisp" stdprog nil)
    (readln_csv const-decl "string" csv_reader nil)
    (strsplit_with_quotechar const-decl "list[string]" csv_util nil))
   nil
   (readCSVRecordln subtype "csv_reader.tokens"
    "{tokens: list_adt[string].list | reals.<=(list_props[csv_reader.CSVFieldSpec].length(csv_reader.data_spec), list_props[string].length(tokens))}"))))

