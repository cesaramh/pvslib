(time_fun
 (hms_TCC1 0
  (hms_TCC1-1 nil 3612198575
   ("" (skeep*) (("" (inst 1 "(h,m,s)") nil nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (nil application-judgement "below(m)" mod nil))
   nil
   (hms existence ""
    "[{i | booleans.&(reals.<=(floor_ceil.i, number_fields./(time_fun.ts, 3600)), reals.<(number_fields./(time_fun.ts, 3600), (number_fields.+)(1, floor_ceil.i)))}, {i | booleans.&(reals.<=(floor_ceil.i, number_fields./(mod.mod(time_fun.ts, 3600), 60)), reals.<(number_fields./(mod.mod(time_fun.ts, 3600), 60), (number_fields.+)(1, floor_ceil.i)))}, real]"))))

