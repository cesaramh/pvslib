(pvsio_checker
 (print_etc_TCC1 0
  (print_etc_TCC1-1 nil 3612563578
   ("" (skeep*) (("" (inst 1 "(per,0,0,newline)") nil nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_safe const-decl "real" reals_safe_ops reals)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt nil)
    (char type-eq-decl nil strings nil) (string type-eq-decl nil strings nil)
    (newline const-decl "string" stdstr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (print_etc existence ""
    "[{i | booleans.&(reals.<=(floor_ceil.i, number_fields.*(100, reals_safe_ops.div_safe(1, pvsio_checker.is))), reals.<(number_fields.*(100, reals_safe_ops.div_safe(1, pvsio_checker.is)), (number_fields.+)(1, floor_ceil.i)))}, nat, nat, string]"))))

