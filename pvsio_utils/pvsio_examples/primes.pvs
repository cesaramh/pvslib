% Naive primality test. 
primes : THEORY
BEGIN

  IMPORTING reals@sqrt
  
  prime?(n:nat) : bool =
    LET k = floor(sqrt(n)) IN 
    n > 1 AND (n = 2 OR FORALL (j:subrange(2,k)) : mod(n,j) /= 0)

  prime_factorization_rec(n:posnat,N:posnat,(k:nat | 2 <= k <= N)) :
    RECURSIVE list[posnat] =
    IF prime?(n) THEN (: n :)
    ELSIF mod(n,k) = 0 THEN
      cons(k,prime_factorization_rec(ndiv(n,k),N,k))
    ELSIF k < N THEN
      prime_factorization_rec(n,N,k+1)
    ELSE (::)
    ENDIF
    MEASURE lex2(N-k,n)

  prime_factorization(n:posnat) : list[posnat] =
    IF n <= 3 THEN (: n :)
    ELSE 
      prime_factorization_rec(n,ndiv(n,2),2)
    ENDIF

END primes
