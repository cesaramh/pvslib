(defstruct indent stack n prefix)

(attachments |stdindent|

(defattach |create_indent| (n s) 
  "Creates an ident structure with indentation N and prefix S"
  (make-indent :stack nil :n n :prefix s))

(defattach |pop_indent| (i)
  "Pops one element of indent I"
  (or (setf (indent-stack i) (cdr (indent-stack i))) t))

(defattach |top_indent| (i)
  "Top of I"
  (or (car (indent-stack i)) 0))

(defattach |push_indent| (i n) 
  "Pushes a N-indentation in indent I"
  (setf (indent-stack i)
	(cons (+ n (or (car (indent-stack i)) 0))
	      (indent-stack i))))

(defattach |get_indent| (i) 
  "Gets current indentation value of indent I"
  (indent-n i))
  
(defattach |set_indent| (i n) 
  "Sets a new indentation value to indent I"
  (setf (indent-n i) n))

(defattach |get_prefix| (i)
  "Gets prefix of indent I"
  (indent-prefix i))

(defattach |set_prefix| (i s) 
  "Sets prefix S to indent I"
  (setf (indent-prefix i) s))

)

(attachments
 |stdprog_utils|

 (defattach |to_lisp_| (pvs)
   "Translates PVS object to Lisp"
   pvs)

 )

(attachments
 |stdio_utils|

 (defattach |fwrite_lisp| (f typ pvs)
   "Writes a PVS object to output stream, so that it can be retrieved afterwards by fread"
   (or (format f "~s~%" (cons typ pvs)) t))

)

(attachments
 |stdpvs_utils|
 
 (defattach |fread_lisp| (f typ)
   "Reads an PVS object of type T from an input stream written by fwrite"
   (let* ((type-pvs (read f))
	  (the-type1 (pc-typecheck (pc-parse (car type-pvs) 'type-expr)))
	  (the-type2 (pc-typecheck (pc-parse typ 'type-expr))))
     (if (subtype-of? the-type1 the-type2)
	 (cdr type-pvs)
       (throw-pvsio-exc
	"CantTranslateBack"
	(format nil "Read value has type ~a, which is not a sub-type of ~a" the-type1 the-type2)))))

)
