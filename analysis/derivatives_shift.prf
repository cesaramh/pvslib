(derivatives_shift
 (shft_TCC1 0
  (shft_TCC1-1 nil 3901039361 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (shft const-decl "bool" derivatives_shift nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (shft subtype
    "(number_fields.+)(derivatives_shift.x, derivatives_shift.a)"
    "(derivatives_shift.d)")))
 (shift_dd 0
  (shift_dd-1 nil 3901052199
   ("" (skeep)
    (("" (expand "deriv_domain?")
      (("" (skeep)
        (("" (inst -1 "e" "_")
          (("" (typepred "x")
            (("" (expand "shft" -1)
              (("" (inst -2 "a+x")
                (("" (skeep)
                  (("" (inst 1 "y")
                    (("" (expand "shft" 1)
                      (("" (typepred "y") (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (y skolem-const-decl "{u: nzreal | d(u + a + x)}" derivatives_shift
     nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (x skolem-const-decl "(shft(d, a))" derivatives_shift nil)
    (a skolem-const-decl "real" derivatives_shift nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (d skolem-const-decl "[real -> bool]" derivatives_shift nil)
    (shft const-decl "bool" derivatives_shift nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (shift_noe 0
  (shift_noe-1 nil 3901052522
   ("" (skeep)
    (("" (expand "not_one_element?")
      (("" (skeep)
        (("" (typepred "x")
          (("" (expand "shft" -1)
            (("" (inst -2 "a+x")
              (("" (skeep)
                (("" (inst 2 "y-a")
                  (("1" (assert) nil nil)
                   ("2" (expand "shft" 1) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def nil)
    (shft const-decl "bool" derivatives_shift nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "(shft(d, a))" derivatives_shift nil)
    (a skolem-const-decl "real" derivatives_shift nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (d skolem-const-decl "[real -> bool]" derivatives_shift nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (y skolem-const-decl "(d)" derivatives_shift nil))
   shostak))
 (derivable_shift_TCC1 0
  (derivable_shift_TCC1-1 nil 3901039361 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (derivable_shift assuming
    "derivatives_def[(derivatives_shift.d)].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (derivable_shift_TCC2 0
  (derivable_shift_TCC2-1 nil 3901039361
   ("" (lemma "deriv_domain_noe")
    (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)
   ((PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_noe formula-decl nil deriv_domain nil))
   nil
   (derivable_shift assuming
    "derivatives_def[(derivatives_shift.d)].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (derivable_shift_TCC3 0
  (derivable_shift_TCC3-1 nil 3901039361 ("" (subtype-tcc) nil nil)
   ((deriv_domain? const-decl "bool" deriv_domain_def nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (NQ const-decl "real" derivatives_def nil)
    (convergence const-decl "bool" convergence_functions nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (convergent? const-decl "bool" lim_of_functions nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (shft const-decl "bool" derivatives_shift nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (derivable_shift subtype
    "(number_fields.-)(derivatives_shift.x, derivatives_shift.a)"
    "(derivatives_shift.shft(derivatives_shift.d, derivatives_shift.a))")))
 (derivable_shift_TCC4 0
  (derivable_shift_TCC4-1 nil 3901039361
   ("" (skeep) (("" (rewrite "shift_dd") nil nil)) nil)
   ((shift_dd formula-decl nil derivatives_shift nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   nil
   (derivable_shift assuming
    "derivatives_def[(derivatives_shift.shft(derivatives_shift.d, derivatives_shift.a))].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (derivable_shift_TCC5 0
  (derivable_shift_TCC5-1 nil 3901039361
   ("" (skeep)
    (("" (rewrite "deriv_domain_noe")
      (("" (lemma "deriv_domain_noe")
        (("" (inst?)
          (("" (assert) (("" (rewrite "shift_dd") nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((deriv_domain_noe formula-decl nil deriv_domain nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (shft const-decl "bool" derivatives_shift nil)
    (shift_dd formula-decl nil derivatives_shift nil))
   nil
   (derivable_shift assuming
    "derivatives_def[(derivatives_shift.shft(derivatives_shift.d, derivatives_shift.a))].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (derivable_shift 0
  (derivable_shift-1 nil 3901052890
   ("" (skeep)
    (("" (expand "derivable?")
      (("" (expand "convergent?")
        (("" (skeep)
          (("" (inst 1 "l")
            (("" (expand "convergence")
              (("" (expand "convergence")
                (("" (flatten)
                  (("" (split 1)
                    (("1" (expand "adh" 1)
                      (("1" (expand "adh" -2)
                        (("1" (skeep)
                          (("1" (inst -2 "e")
                            (("1" (skeep)
                              (("1"
                                (inst 1 "x2")
                                (("1"
                                  (expand "fullset" 1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (expand "A" 1)
                                  (("2"
                                    (expand "shft" 1)
                                    (("2"
                                      (typepred "x2")
                                      (("2"
                                        (expand "A" -2)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (inst -3 "epsilon")
                        (("2" (skeep)
                          (("2" (inst 1 "delta")
                            (("2" (skeep)
                              (("2"
                                (inst -5 "x2")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "shft" 1)
                                    (("1"
                                      (expand "NQ")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "x2")
                                  (("2"
                                    (expand "A")
                                    (("2"
                                      (expand "shft" -2)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable? const-decl "bool" derivatives_def nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" derivatives_def nil)
    (shft const-decl "real" derivatives_shift nil)
    (x2 skolem-const-decl "(A(x - a))" derivatives_shift nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fullset const-decl "set" sets nil)
    (shft const-decl "bool" derivatives_shift nil)
    (d skolem-const-decl "[real -> bool]" derivatives_shift nil)
    (a skolem-const-decl "real" derivatives_shift nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x skolem-const-decl "(d)" derivatives_shift nil)
    (x2 skolem-const-decl "(A(x))" derivatives_shift nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (convergence const-decl "bool" convergence_functions nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (convergent? const-decl "bool" lim_of_functions nil))
   shostak))
 (deriv_shift_TCC1 0
  (deriv_shift_TCC1-1 nil 3901053633
   ("" (lemma "derivable_shift")
    (("" (skeep)
      (("" (inst?)
        (("" (assert)
          (("" (typepred "x")
            (("" (expand "shft" 1) (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (shft const-decl "bool" derivatives_shift nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_shift formula-decl nil derivatives_shift nil))
   nil
   (deriv_shift subtype
    "(number_fields.-)(derivatives_shift.x, derivatives_shift.a)"
    "{x | derivatives_def[(derivatives_shift.shft(derivatives_shift.d, derivatives_shift.a))].derivable?(derivatives_shift.shft(derivatives_shift.d, derivatives_shift.a, derivatives_shift.f), x)}")))
 (deriv_shift 0
  (deriv_shift-1 nil 3901053732
   ("" (skeep)
    (("" (lemma "deriv_def[(d)]")
      (("1" (inst?)
        (("1" (assert)
          (("1" (hide 2)
            (("1" (expand "convergence" 1)
              (("1"
                (with-tccs
                 (name "F"
                       "deriv[(shft(d, a))](shft(d, a, f), x - a)"))
                (("1" (replace -1)
                  (("1" (expand "deriv" -1)
                    (("1"
                      (with-tccs
                       (typepred "lim(NQ(shft(d, a, f), x - a), 0)"))
                      (("1" (expand "convergence" -1)
                        (("1" (replace -2)
                          (("1" (expand "convergence")
                            (("1" (split 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "adh")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -1 "e")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "x2")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (typepred "x2")
                                            (("2"
                                              (expand "A")
                                              (("2"
                                                (expand "shft" -2)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst -2 "epsilon")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst 1 "delta")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst -4 "x2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "shft" -4)
                                                (("1"
                                                  (expand "NQ")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "x2")
                                              (("2"
                                                (expand "A")
                                                (("2"
                                                  (expand "shft")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "shift_noe")
          (("2" (inst?)
            (("2" (inst -1 "a")
              (("2" (assert)
                (("2" (lemma "deriv_domain_noe")
                  (("2" (inst -1 "(d)") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (lemma "shift_dd")
          (("3" (inst -1 "d" "a") (("3" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (lemma "deriv_domain_noe")
        (("2" (inst -1 "(d)") (("2" (assert) nil nil)) nil)) nil)
       ("3" (propax) nil nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_def formula-decl nil derivatives_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def nil)
    (shift_dd formula-decl nil derivatives_shift nil)
    (shift_noe formula-decl nil derivatives_shift nil)
    (deriv_domain_noe formula-decl nil deriv_domain nil)
    (PRED type-eq-decl nil defined_types nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (lim const-decl "{l: real | convergence(f, x0, l)}"
     lim_of_functions nil)
    (convergent? const-decl "bool" lim_of_functions nil)
    (NQ const-decl "real" derivatives_def nil)
    (A const-decl "setof[nzreal]" derivatives_def nil)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (x skolem-const-decl "(d)" derivatives_shift nil)
    (x2 skolem-const-decl "(A(x - a))" derivatives_shift nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (x2 skolem-const-decl "(A(x))" derivatives_shift nil)
    (convergence const-decl "bool" convergence_functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (shft const-decl "real" derivatives_shift nil)
    (deriv const-decl "real" derivatives_def nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (shft const-decl "bool" derivatives_shift nil)
    (d skolem-const-decl "[real -> bool]" derivatives_shift nil)
    (a skolem-const-decl "real" derivatives_shift nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (deriv_shift_f_TCC1 0
  (deriv_shift_f_TCC1-1 nil 3901054485 ("" (assuming-tcc) nil nil)
   ((deriv_domain? const-decl "bool" deriv_domain_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (deriv_shift_f assuming
    "derivatives[(derivatives_shift.d)].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (deriv_shift_f_TCC2 0
  (deriv_shift_f_TCC2-1 nil 3901054485
   ("" (lemma "deriv_domain_noe") (("" (propax) nil nil)) nil)
   ((deriv_domain_noe formula-decl nil deriv_domain nil)) nil
   (deriv_shift_f assuming
    "derivatives[(derivatives_shift.d)].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (deriv_shift_f_TCC3 0
  (deriv_shift_f_TCC2-1 nil 3901053633
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "shift_dd")
        (("" (inst?) (("" (assert) (("" (inst -1 "a") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((shift_dd formula-decl nil derivatives_shift nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (deriv_shift_f assuming
    "derivatives[(derivatives_shift.shft(derivatives_shift.d, derivatives_shift.a))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (deriv_shift_f_TCC4 0
  (deriv_shift_f_TCC3-1 nil 3901053633
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "shift_noe")
        (("" (inst?)
          (("" (inst -1 "a")
            (("" (assert)
              (("" (lemma "deriv_domain_noe")
                (("" (inst -1 "(d)") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((shift_noe formula-decl nil derivatives_shift nil)
    (deriv_domain_noe formula-decl nil deriv_domain nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (deriv_shift_f assuming
    "derivatives[(derivatives_shift.shft(derivatives_shift.d, derivatives_shift.a))].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (deriv_shift_f_TCC5 0
  (deriv_shift_f_TCC4-1 nil 3901053633 ("" (subtype-tcc) nil nil)
   ((deriv_domain? const-decl "bool" deriv_domain_def nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (NQ const-decl "real" derivatives_def nil)
    (convergence const-decl "bool" convergence_functions nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (convergent? const-decl "bool" lim_of_functions nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (derivable? const-decl "bool" derivatives nil)
    (shft const-decl "real" derivatives_shift nil)
    (shft const-decl "bool" derivatives_shift nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (deriv_shift_f subtype
    "(number_fields.-)(derivatives_shift.x, derivatives_shift.a)"
    "(derivatives_shift.shft(derivatives_shift.d, derivatives_shift.a))")))
 (deriv_shift_f 0
  (deriv_shift_f-1 nil 3901055202
   ("" (skeep)
    (("" (splash 1)
      (("1" (with-tccs (decompose-equality 1))
        (("1" (lemma "deriv_shift")
          (("1" (inst?)
            (("1" (inst -1 "x!1")
              (("1" (assert)
                (("1" (expand "derivable?" -4)
                  (("1" (inst -4 "x!1")
                    (("1" (assert)
                      (("1" (expand "deriv" 1) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "derivable_shift")
        (("2" (inst?)
          (("2" (expand "derivable?" 1)
            (("2" (skeep)
              (("2" (typepred "x")
                (("2" (expand "shft" -1)
                  (("2" (inst -2 "a+x")
                    (("2" (assert)
                      (("2" (expand "derivable?" -3)
                        (("2" (inst -3 "a+x") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (shft const-decl "bool" derivatives_shift nil)
    (deriv_domain? const-decl "bool" deriv_domain_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (derivable? const-decl "bool" derivatives nil)
    (shft const-decl "real" derivatives_shift nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_shift formula-decl nil derivatives_shift nil)
    (d skolem-const-decl "[real -> bool]" derivatives_shift nil)
    (a skolem-const-decl "real" derivatives_shift nil)
    (f skolem-const-decl "[(d) -> real]" derivatives_shift nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (x skolem-const-decl "(shft(d, a))" derivatives_shift nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (derivable_shift formula-decl nil derivatives_shift nil))
   shostak)))

