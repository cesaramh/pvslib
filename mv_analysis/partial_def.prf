(partial_def
 (partial_TCC1 0
  (partial_TCC1-1 nil 3852107808 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i!1 skolem-const-decl "below(n)" partial_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (D!1 skolem-const-decl "(deriv_domain_partial?[n](e(n, i!1)))"
     partial_def nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (n formal-const-decl "posnat" partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (partial subtype "partial_def.p"
    "(init_partial_def[partial_def.n].init_partial?(vector_arithmetic.e(partial_def.n, partial_def.i), partial_def.D, partial_def.f))")))
 (F_partials_TCC1 0
  (F_partials_TCC1-1 nil 3741526087
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_e_partial_implies_dd")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dd_e_partial_implies_dd formula-decl nil derivative_domain_multi
     nil))
   nil
   (F_partials subtype "partial_def.D"
    "(derivative_domain_multi[partial_def.n].deriv_domain?)")))
 (F_partials_TCC2 0
  (F_partials_TCC2-1 nil 3741526087 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" partial_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil))
   nil (F_partials subtype "partial_def.i" "below[length[real](v)]")))
 (F_partials_TCC3 0
  (F_partials_TCC3-1 nil 3741526087
   ("" (skeep)
    (("" (lemma "dd_epartial_implies_dd_partial")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((n formal-const-decl "posnat" partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_epartial_implies_dd_partial formula-decl nil
     derivative_domain_multi nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (F_partials subtype "partial_def.D"
    "(derivative_domain_multi[partial_def.n].deriv_domain_partial?(vector_arithmetic.e(partial_def.n, partial_def.i)))")))
 (F_partials_TCC4 0
  (F_partials_TCC4-1 nil 3789815183
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "init_partial?" 1)
        (("" (skeep)
          (("" (lemma "frech_diff_imp_init_partial")
            (("" (inst -1 "e(n,i)" "D" "f" "p!1")
              (("" (assert)
                (("" (flatten)
                  (("" (assert)
                    (("" (expand "differentiableD?")
                      (("" (inst -1 "p!1") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (frech_diff_imp_init_partial formula-decl nil init_partial_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (F_partials subtype "partial_def.f"
    "(init_partial_def[partial_def.n].init_partial?(vector_arithmetic.e(partial_def.n, partial_def.i), partial_def.D))")))
 (F_partials_e_TCC1 0
  (F_partials_e_TCC1-1 nil 3853422215 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "real" differentiable_def nil)
    (* const-decl "real" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (n formal-const-decl "posnat" partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil))
   nil
   (F_partials_e subtype "partial_def.D"
    "(derivative_domain_multi[partial_def.n].deriv_domain_partial?(vector_arithmetic.e(partial_def.n, partial_def.i)))")))
 (F_partials_e_TCC2 0
  (F_partials_e_TCC2-1 nil 3853422215
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "init_partial?" 1)
        (("" (skeep)
          (("" (lemma "diff_imp_init_partial2")
            (("" (inst -1 "e(n,i)" "D" "f" "p!1")
              (("1" (assert)
                (("1" (expand "differentiableD?" -1)
                  (("1" (inst -1 "p!1") nil nil)) nil))
                nil)
               ("2" (lemma "e_not_zero") (("2" (inst?) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(n)" partial_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (e_not_zero formula-decl nil vector_arithmetic nil)
    (diff_imp_init_partial2 formula-decl nil init_partial_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (F_partials_e subtype "partial_def.f"
    "(init_partial_def[partial_def.n].init_partial?(vector_arithmetic.e(partial_def.n, partial_def.i), partial_def.D))")))
 (F_partials_e 0
  (F_partials_e-1 nil 3853422405
   ("" (skeep)
    (("" (decompose-equality 1)
      (("1" (case "x!1 = i ")
        (("1" (assert)
          (("1" (expand "F_partials" 1 1)
            (("1" (replace -1)
              (("1" (lemma "nth_e")
                (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (expand "F_partials" 2)
            (("2" (assert)
              (("2" (case "x!1 < n ")
                (("1" (assert)
                  (("1" (lemma "nth_e")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (lemma "F_partials_e_TCC2")
          (("2" (inst?) (("2" (inst -1 "p" "i") nil nil)) nil)) nil))
        nil)
       ("3" (typepred "D")
        (("3" (expand "deriv_domain_e_partial?" -1)
          (("3" (skeep) (("3" (inst -1 "i") nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((D skolem-const-decl "(deriv_domain_e_partial?)" partial_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (i skolem-const-decl "below(n)" partial_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "posnat" partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (f skolem-const-decl "(differentiableD?(D))" partial_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (F_partials const-decl "real" partial_def nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (partial const-decl "real" partial_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nth_e formula-decl nil vector_arithmetic nil)
    (F_partials_e_TCC2 subtype-tcc nil partial_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (directional_deriv_pre1_TCC1 0
  (directional_deriv_pre1_TCC1-1 nil 3741526603
   ("" (skeep)
    (("" (typepred "D")
      ((""
        (lemma "
dd_all_partial_implies_dd")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dd_all_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_pre1 subtype "partial_def.D"
    "(derivative_domain_multi[partial_def.n].deriv_domain?)")))
 (directional_deriv_pre1_TCC2 0
  (directional_deriv_pre1_TCC6-1 nil 3741526603
   ("" (skeep)
    (("" (typepred "D")
      (("" (typepred "f")
        (("" (lemma "diff_imp_init_partial2")
          (("" (inst -1 "Standard_sum[n](v, i)" "D" "f" "_")
            (("1" (assert)
              (("1" (expand "init_partial?" 1)
                (("1" (inst -1 "p")
                  (("1" (assert)
                    (("1" (expand "differentiableD?" -1)
                      (("1" (inst -1 "p") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (lemma "init_partial_zero_derivable")
                (("2" (inst -1 "D" "f")
                  (("2" (expand "init_partial?" -1)
                    (("2" (inst -1 "p") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (diff_imp_init_partial2 formula-decl nil init_partial_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (init_partial_zero_derivable formula-decl nil init_partial_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (/= const-decl "boolean" notequal nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (Standard_sum def-decl "{vv: list |
   (length(vv) = length(v) AND FORALL (j: upto(i)): nth(v, j) = nth(vv, j))
    AND FORALL (j: subrange(i + 1, length(v) - 1)): 0 = nth(vv, j)}"
     sum_vecs nil)
    (v skolem-const-decl "VectorN(n)" partial_def nil)
    (i skolem-const-decl "below(n)" partial_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_pre1 subtype "partial_def.p"
    "(init_partial_def[partial_def.n].init_partial?(sum_vecs[partial_def.n].Standard_sum(partial_def.v, partial_def.i), partial_def.D, partial_def.f))")))
 (directional_deriv_pre1_TCC3 0
  (directional_deriv_pre1_TCC2-1 nil 3741526603
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" partial_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "real" differentiable_def nil)
    (* const-decl "real" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil))
   nil
   (directional_deriv_pre1 subtype "partial_def.v"
    "(list_adt[real].cons?)")))
 (directional_deriv_pre1_TCC4 0
  (directional_deriv_pre1_TCC3-1 nil 3741526603
   ("" (subtype-tcc) nil nil) nil nil
   (directional_deriv_pre1 subtype "partial_def.i"
    "naturalnumbers.below(list_props[real].length(partial_def.v))")))
 (directional_deriv_pre1_TCC5 0
  (directional_deriv_pre1_TCC4-1 nil 3741526603
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" partial_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "real" differentiable_def nil)
    (* const-decl "real" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil))
   nil
   (directional_deriv_pre1 subtype
    "sum_vecs[partial_def.n].Standard_sum(partial_def.v, partial_def.i)"
    "matrices.VectorN(partial_def.n)")))
 (directional_deriv_pre1_TCC6 0
  (directional_deriv_pre1_TCC5-1 nil 3741526603
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "deriv_domain_all_partial?")
        (("" (inst -1 "Standard_sum[n](v,i)")
          (("" (expand "deriv_domain_partial?") (("" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (Standard_sum def-decl "{vv: list |
   (length(vv) = length(v) AND FORALL (j: upto(i)): nth(v, j) = nth(vv, j))
    AND FORALL (j: subrange(i + 1, length(v) - 1)): 0 = nth(vv, j)}"
     sum_vecs nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_pre1 subtype "partial_def.D"
    "(derivative_domain_multi[partial_def.n].deriv_domain_partial?(sum_vecs[partial_def.n].Standard_sum(partial_def.v, partial_def.i)))")))
 (directional_deriv_pre1_TCC7 0
  (directional_deriv_pre1_TCC7-1 nil 3741526603
   ("" (skeep)
    (("" (lemma "dd_partial_implies_dd_e_direction")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((n formal-const-decl "posnat" partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_partial_implies_dd_e_direction formula-decl nil
     derivative_domain_multi nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_pre1 subtype "partial_def.D"
    "(derivative_domain_multi[partial_def.n].deriv_domain_e_partial?)")))
 (directional_deriv_pre1 0
  (directional_deriv_pre1-2 nil 3741526845
   ("" (skeep)
    (("" (induct "i")
      (("1" (assert)
        (("1" (assert)
          (("1" (expand "sigma" 1)
            (("1" (expand "sigma" 1)
              (("1" (expand "Standard_sum" 1)
                (("1" (expand "F_partials" 1)
                  (("1" (typepred "v")
                    (("1" (replace -2 1)
                      (("1" (hide -1 -2)
                        (("1" (lemma "init_partial_scalar")
                          (("1"
                            (inst -1 "e(n,0)" "D" "f" "p" "nth(v,0)")
                            (("1" (assert)
                              (("1"
                                (expand "partial" 1 1)
                                (("1"
                                  (expand "partial" 1)
                                  (("1"
                                    (expand "init_partial" 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "D")
                                        (("1"
                                          (expand
                                           "deriv_domain_all_partial?")
                                          (("1"
                                            (inst-cp -1 "e(n,0)")
                                            (("1"
                                              (inst -1 "-1*e(n,0)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "restrict")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "init_partial")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "-1 * e(n, 0)"
                                                 "e(n,0)")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "e_not_zero")
                              (("2" (inst?) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (assert)
          (("2" (expand "sigma" 1)
            (("2" (expand "F_partials" 1 1)
              (("2" (expand "Standard_sum" 1 1)
                (("2" (lemma "init_partial_additive")
                  (("2"
                    (inst -1 "nth(v, 1 + jb) * e(length(v), 1 + jb)"
                     "Standard_sum(v, jb)" "D" "f" "p")
                    (("1" (replace -1 1)
                      (("1" (hide -1)
                        (("1" (assert)
                          (("1" (replace -2 1)
                            (("1" (assert)
                              (("1"
                                (lemma "init_partial_scalar")
                                (("1"
                                  (typepred "v")
                                  (("1"
                                    (replace -2 1)
                                    (("1"
                                      (hide -1 -2)
                                      (("1"
                                        (inst
                                         -1
                                         "e(n, 1 + jb)"
                                         "D"
                                         "f"
                                         "p"
                                         "nth(v, 1 + jb)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "partial")
                                            (("1"
                                              (expand "partial")
                                              (("1"
                                                (expand "init_partial")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (lemma "e_not_zero")
                                            (("2" (inst?) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "D")
                      (("2" (expand "deriv_domain_all_partial?")
                        (("2"
                          (inst-cp -1
                           "nth[real](v, 1 + jb) * e(length[real](v), 1 + jb)")
                          (("1" (split)
                            (("1" (assert)
                              (("1"
                                (expand "deriv_domain_partial?" -2)
                                (("1"
                                  (inst-cp
                                   -1
                                   "nth[real](v, 1 + jb) * e(length[real](v), 1 + jb)")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand
                                         "deriv_domain_partial?")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst -1 "Standard_sum[n](v, jb)")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "deriv_domain_partial?")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3"
                              (inst -1
                               "nth[real](v, 1 + jb) * e(length[real](v), 1 + jb) +
            Standard_sum[n](v, jb)")
                              (("3"
                                (assert)
                                (("3"
                                  (expand "deriv_domain_partial?")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (typepred
                             "nth[real](v, 1 + jb) * e(length[real](v), 1 + jb)"
                             "e(length[real](v), 1 + jb)")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide -)
                      (("3" (hide 2)
                        (("3"
                          (typepred
                           "nth[real](v, 1 + jb) * e(length[real](v), 1 + jb)"
                           "e(length[real](v), 1 + jb)")
                          (("3" (assert)
                            (("3" (hide -)
                              (("3"
                                (reveal -)
                                (("3"
                                  (reveal +)
                                  (("3"
                                    (case "nth[real](v, 1 + jb)=0")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (replace -3 1 rl)
                                                  (("1"
                                                    (case
                                                     "0 * e(length(v), 1 + jb) + Standard_sum(v, jb) = Standard_sum(v, jb)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2 3)
                                                      (("2"
                                                        (hide -)
                                                        (("2"
                                                          (lemma
                                                           "mult_zero")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "e(length(v), 1 + jb)")
                                                            (("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (lemma
                                                                 "zero_id")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "Standard_sum(v, jb)")
                                                                  (("2"
                                                                    (lemma
                                                                     "add_commute")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "zero_vec(length(e(length(v), 1 + jb)))"
                                                                       "Standard_sum(v, jb)")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (hide -)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (lemma
                                             "list_extensionality[real]")
                                            (("2"
                                              (inst
                                               -1
                                               "nth[real](v, 1 + jb) * e(length[real](v), 1 + jb)"
                                               "zero_vec(n)")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (lemma "nth_e")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "length(v)"
                                                           "1+jb"
                                                           "1+jb")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -3
                                                               "1+jb")
                                                              (("1"
                                                                (lemma
                                                                 "nth_dist")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   " e(length[real](v), 1 + jb)"
                                                                   "nth[real](v, 1 + jb)"
                                                                   "1+jb")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "nth_zero")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "n"
                                                                           "1+jb")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (lemma "dd_partial_implies_dd_e_direction")
          (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
        nil)
       ("4" (typepred "D")
        (("4" (skeep)
          (("4" (expand "deriv_domain_all_partial?")
            (("4" (inst -1 "Standard_sum[n](v, i)")
              (("4" (assert)
                (("4" (expand "deriv_domain_partial?")
                  (("4" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (typepred "Standard_sum[n](v, i)")
          (("5" (assert) nil nil)) nil))
        nil)
       ("6" (skeep)
        (("6" (hide 2)
          (("6" (typepred "Standard_sum[n](v, i)")
            (("6" (typepred "v")
              (("6" (assert)
                (("6" (lemma "directional_deriv_pre1_TCC2")
                  (("6" (inst?) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p skolem-const-decl "(D)" partial_def nil)
    (f skolem-const-decl "(differentiableD?(D))" partial_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (D skolem-const-decl "(deriv_domain_all_partial?)" partial_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (v skolem-const-decl "VectorN(n)" partial_def nil)
    (Standard_sum def-decl "{vv: list |
   (length(vv) = length(v) AND FORALL (j: upto(i)): nth(v, j) = nth(vv, j))
    AND FORALL (j: subrange(i + 1, length(v) - 1)): 0 = nth(vv, j)}"
     sum_vecs nil)
    (subrange type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (VectorN type-eq-decl nil matrices matrices)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (pred type-eq-decl nil defined_types nil)
    (init_partial const-decl "real" init_partial_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (F_partials const-decl "real" partial_def nil)
    (n formal-const-decl "posnat" partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (init_partial_scalar formula-decl nil init_partial_def nil)
    (e_not_zero formula-decl nil vector_arithmetic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (partial const-decl "real" partial_def nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Vector type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (partial const-decl "real" partial_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (init_partial_additive formula-decl nil init_partial_def nil)
    (nth_zero formula-decl nil vector_arithmetic nil)
    (nth_dist formula-decl nil vector_arithmetic nil)
    (nth_e formula-decl nil vector_arithmetic nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (add_commute formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (jb skolem-const-decl "below(n)" partial_def nil)
    (dd_partial_implies_dd_e_direction formula-decl nil
     derivative_domain_multi nil)
    (directional_deriv_pre1_TCC2 subtype-tcc nil partial_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil)
  (directional_deriv_pre1-1 nil 3741526834 ("" (postpone) nil nil) nil
   shostak))
 (directional_deriv_sum_partials_TCC1 0
  (directional_deriv_sum_partials_TCC2-1 nil 3741530314
   ("" (skeep)
    (("" (lemma "diff_imp_init_partial")
      (("" (inst -1 "D" "f" "p")
        (("" (assert)
          (("" (typepred "f")
            (("" (expand "differentiableD?")
              (("" (inst -1 "p")
                (("" (assert) (("" (inst -2 "v") nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (diff_imp_init_partial formula-decl nil init_partial_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_sum_partials subtype "partial_def.p"
    "(init_partial_def[partial_def.n].init_partial?(partial_def.v, partial_def.D, partial_def.f))")))
 (directional_deriv_sum_partials_TCC2 0
  (directional_deriv_sum_partials_TCC1-1 nil 3741530314
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "deriv_domain_all_partial?")
        (("" (inst -1 "v")
          (("" (assert)
            (("" (expand "deriv_domain_partial?")
              (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_sum_partials subtype "partial_def.D"
    "(derivative_domain_multi[partial_def.n].deriv_domain_partial?(partial_def.v))")))
 (directional_deriv_sum_partials_TCC3 0
  (directional_deriv_sum_partials_TCC3-1 nil 3741530314
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_partial_implies_dd_e_direction")
        (("" (inst -1 "D") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dd_partial_implies_dd_e_direction formula-decl nil
     derivative_domain_multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_sum_partials subtype "partial_def.D"
    "(derivative_domain_multi[partial_def.n].deriv_domain_e_partial?)")))
 (directional_deriv_sum_partials 0
  (directional_deriv_sum_partials-2 nil 3741530485
   ("" (lemma "directional_deriv_pre1")
    (("" (skeep)
      (("" (inst -1 "D" "v" "f" "p" "n-1")
        (("1" (lemma "Standard_id")
          (("1" (inst -1 "n" "v") (("1" (assert) nil nil)) nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (Standard_id formula-decl nil sum_vecs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" partial_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (directional_deriv_pre1 formula-decl nil partial_def nil))
   nil)
  (directional_deriv_sum_partials-1 nil 3741530448
   ("" (postpone) nil nil) nil shostak)))