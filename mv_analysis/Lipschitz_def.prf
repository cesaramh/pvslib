(Lipschitz_def
 (LipD?_TCC1 0
  (LipD?_TCC1-1 nil 3787579970
   ("" (skeep)
    (("" (typepred "p1-p2" "p1" "p2") (("" (assert) nil nil)) nil))
    nil)
   ((domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" Lipschitz_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (LipD? subtype "(matrices.-)(Lipschitz_def.p1, Lipschitz_def.p2)"
    "(list_adt[real].cons?)")))
 (LipD?_TCC2 0
  (LipD?_TCC2-1 nil 3787579970
   ("" (skeep)
    (("" (typepred "f(p1)" "f(p2)")
      (("" (assert)
        (("" (typepred "m")
          (("" (assert)
            (("" (typepred "f(p1)-f(p2)") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Lipschitz_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (LipD? subtype
    "(matrices.-)(Lipschitz_def.f(Lipschitz_def.p1), Lipschitz_def.f(Lipschitz_def.p2))"
    "(list_adt[real].cons?)")))
 (Lip_cont_v2f 0
  (Lip_cont_v2f-1 nil 3787580032
   ("" (skeep)
    (("" (expand "LipD?" -1)
      (("" (expand "contD?" 1)
        (("" (expand "contp?" 1 1)
          (("" (skeep)
            (("" (skeep)
              (("" (inst -1 "nn")
                (("" (skeep)
                  (("" (skeep -1)
                    (("" (case "L=0")
                      (("1" (inst 1 "eps")
                        (("1" (skeep)
                          (("1" (inst -2 "x" "p")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (inst 2 "eps/(2*L)")
                          (("1" (skeep)
                            (("1" (inst -1 "x" "p")
                              (("1"
                                (assert)
                                (("1"
                                  (mult-by -2 "2*L")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (split 1)
                              (("1"
                                (assert)
                                (("1"
                                  (mult-by 1 "(2*L)")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (mult-by 1 "(2*L)")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (LipD? const-decl "bool" Lipschitz_def nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (abs_nat formula-decl nil abs_lems reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (eps skolem-const-decl "posreal" Lipschitz_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (L skolem-const-decl "{LL: real | LL >= 0}" Lipschitz_def nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (n formal-const-decl "posnat" Lipschitz_def nil)
    (norm? const-decl "bool" norms nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (contD? const-decl "bool" continuity_multivar nil))
   shostak))
 (Lip_cont_v2v 0
  (Lip_cont_v2v-1 nil 3787580448
   ("" (skeep)
    (("" (expand "LipD?" -1)
      (("" (expand "contD?" 1)
        (("" (skeep)
          (("" (expand "contp?" 1)
            (("" (skeep)
              (("" (inst -1 "n1" "n2")
                (("" (skeep)
                  (("" (skeep -1)
                    (("" (case "L=0")
                      (("1" (inst 1 "eps")
                        (("1" (skeep)
                          (("1" (assert)
                            (("1" (inst -2 "x" "p")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst 2 "eps/(2*L)")
                        (("1" (skeep)
                          (("1" (inst -1 "x" "p")
                            (("1" (assert)
                              (("1"
                                (mult-by -2 "2*L")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (split 1)
                          (("1" (mult-by 1 "(2*L)")
                            (("1" (assert) nil nil)) nil)
                           ("2" (mult-by 1 "(2*L)")
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((LipD? const-decl "bool" Lipschitz_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (eps skolem-const-decl "posreal" Lipschitz_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (L skolem-const-decl "{LL: real | LL >= 0}" Lipschitz_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (n formal-const-decl "posnat" Lipschitz_def nil)
    (norm? const-decl "bool" norms nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (contD? const-decl "bool" continuity_multivar nil))
   shostak))
 (Lip_norm_v2f 0
  (Lip_norm_v2f-1 nil 3787580810
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "LipD?" -1)
          (("1" (expand "LipD_E?" 1)
            (("1" (inst 1 "norm_1(n)")
              (("1" (inst -1 "norm_1(n)") nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "LipD_E?" -1)
          (("2" (expand "LipD?" 1)
            (("2" (skeep)
              (("2" (skeep -1)
                (("2" (lemma "equiv_norm")
                  (("2" (inst -1 "n1" "n1!1")
                    (("2" (expand "equiv?" -1)
                      (("2" (skeep -1)
                        (("2" (skeep -2)
                          (("2" (inst 1 "L*c2")
                            (("2" (skeep)
                              (("2"
                                (inst -2 "p1" "p2")
                                (("2"
                                  (inst -1 "p1-p2")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (mult-by -2 "L")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "p1" "p2" "p1-p2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide -1 -4 -7)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (replace -3)
                                              (("2"
                                                (expand "max" -5)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (LipD? const-decl "bool" Lipschitz_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (norm? const-decl "bool" norms nil)
    (n formal-const-decl "posnat" Lipschitz_def nil)
    (norm_1 const-decl "(norm?(m))" norms nil)
    (LipD_E? const-decl "bool" Lipschitz_def nil)
    (equiv_norm formula-decl nil norms_equiv nil)
    (equiv? const-decl "bool" norms_equiv nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (D skolem-const-decl "domain[n]" Lipschitz_def nil)
    (p1 skolem-const-decl "(D)" Lipschitz_def nil)
    (p2 skolem-const-decl "(D)" Lipschitz_def nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (Lip_norm_v2v 0
  (Lip_norm_v2v-1 nil 3787581110
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "LipD?" -1)
          (("1" (expand "LipD_E?" 1)
            (("1" (inst 1 "norm_2(n)" "norm_2(m)")
              (("1" (inst -1 "norm_2(n)" "norm_2(m)") nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "LipD_E?" -1)
          (("2" (expand "LipD?" 1)
            (("2" (skeep)
              (("2" (skeep -1)
                (("2" (lemma "equiv_norm")
                  (("2" (lemma "equiv_norm_m")
                    (("2" (typepred "n1")
                      (("2" (typepred "n1!1")
                        (("2" (inst -4 "n1" "n1!1")
                          (("2" (typepred "n2" "n2!1")
                            (("2" (inst -5 "m" "n2" "n2!1")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "equiv_m?" -5)
                                  (("2"
                                    (skeep -5)
                                    (("2"
                                      (expand "equiv?" -6)
                                      (("2"
                                        (skeep -6)
                                        (("2"
                                          (skeep -7)
                                          (("2"
                                            (inst 1 "(L*c2!1)/c1")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -7 "p1" "p2")
                                                (("2"
                                                  (inst -6 "p1-p2")
                                                  (("1"
                                                    (inst
                                                     -5
                                                     "f(p1)-f(p2)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (div-by
                                                             -5
                                                             "c1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (div-by
                                                                 -9
                                                                 "c1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (mult-by
                                                                     -8
                                                                     "L")
                                                                    (("1"
                                                                      (div-by
                                                                       -1
                                                                       "c1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred
                                                       "f(p1)-f(p2)"
                                                       "p1"
                                                       "p2")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "max"
                                                           -2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred
                                                     "p1-p2"
                                                     "p1"
                                                     "p2")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "max"
                                                         -2)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((LipD? const-decl "bool" Lipschitz_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (norm? const-decl "bool" norms nil)
    (n formal-const-decl "posnat" Lipschitz_def nil)
    (norm_2 const-decl "(norm?(m))" norms nil)
    (LipD_E? const-decl "bool" Lipschitz_def nil)
    (equiv_norm formula-decl nil norms_equiv nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (equiv_m? const-decl "bool" norms_equiv nil)
    (equiv? const-decl "bool" norms_equiv nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (D skolem-const-decl "domain[n]" Lipschitz_def nil)
    (p1 skolem-const-decl "(D)" Lipschitz_def nil)
    (p2 skolem-const-decl "(D)" Lipschitz_def nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (f skolem-const-decl "[(D) -> VectorN(m)]" Lipschitz_def nil)
    (m skolem-const-decl "posnat" Lipschitz_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (equiv_norm_m formula-decl nil norms_equiv_general nil))
   shostak)))