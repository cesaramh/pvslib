(unconstrained_local_extrema
 (is_loc_minimizer?_TCC1 0
  (is_loc_minimizer?_TCC1-1 nil 3742419231
   ("" (skeep)
    (("" (assert)
      (("" (typepred "v-v2" "v" "v2") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" unconstrained_local_extrema nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (loc_minimizer_equiv 0
  (loc_minimizer_equiv-2 nil 3742889733
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "is_loc_minimizer?")
          (("1" (skeep)
            (("1" (skeep)
              (("1" (lemma "equiv_norm[n]")
                (("1" (inst -1 "nn!1" "nn")
                  (("1" (expand "equiv?" -1)
                    (("1" (skeep)
                      (("1" (skeep)
                        (("1" (inst 1 "epsilon*c1")
                          (("1" (skeep)
                            (("1" (inst -2 "v2")
                              (("1"
                                (assert)
                                (("1"
                                  (div-by -3 "c1")
                                  (("1"
                                    (inst -1 "v-v2")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (div-by -1 "c1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "v-v2" "v" "v2")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "max" -)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "is_loc_minimizer?")
          (("2" (inst -1 "norm_inf(n)")
            (("2" (inst 1 "norm_inf(n)") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((is_loc_minimizer? const-decl "bool" unconstrained_local_extrema
     nil)
    (is_loc_minimizer? const-decl "bool" unconstrained_local_extrema
     nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (domain type-eq-decl nil domain_vec2real_def nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (v2 skolem-const-decl "VectorN(n)" unconstrained_local_extrema nil)
    (v skolem-const-decl "(D)" unconstrained_local_extrema nil)
    (D skolem-const-decl "domain[n]" unconstrained_local_extrema nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (equiv? const-decl "bool" norms_equiv nil)
    (equiv_norm formula-decl nil norms_equiv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" unconstrained_local_extrema nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil)
  (loc_minimizer_equiv-1 nil 3742889593
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "is_loc_minimizer?")
          (("1" (skeep)
            (("1" (skeep)
              (("1" (lemma "equiv_norm[n]")
                (("1" (inst -1 "nn!1" "nn")
                  (("1" (expand "equiv?" -1)
                    (("1" (skeep)
                      (("1" (skeep)
                        (("1" (inst 1 "epsilon/c1")
                          (("1" (skeep)
                            (("1" (inst -2 "v2")
                              (("1"
                                (assert)
                                (("1" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (loc_min_equiv 0
  (loc_min_equiv-1 nil 3742889976
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "is_loc_min?")
            (("1" (skeep)
              (("1" (lemma "equiv_norm[n]")
                (("1" (inst -1 "nn" "nn!1")
                  (("1" (expand "equiv?")
                    (("1" (skeep)
                      (("1" (skeep)
                        (("1" (inst 1 "epsilon*c1" "v")
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (inst -3 "v2")
                                (("1"
                                  (inst -1 "v-v2")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (div-by -5 "c1")
                                        (("1"
                                          (div-by -1 "c1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "v-v2" "v" "v2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "max" -)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "is_loc_min?")
          (("2" (inst -1 "norm_inf(n)")
            (("2" (inst 1 "norm_inf(n)") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (domain type-eq-decl nil domain_vec2real_def nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (D skolem-const-decl "domain[n]" unconstrained_local_extrema nil)
    (v skolem-const-decl "(D)" unconstrained_local_extrema nil)
    (v2 skolem-const-decl "VectorN(n)" unconstrained_local_extrema nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (equiv? const-decl "bool" norms_equiv nil)
    (equiv_norm formula-decl nil norms_equiv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" unconstrained_local_extrema nil)
    (is_loc_min? const-decl "bool" unconstrained_local_extrema nil)
    (is_loc_min? const-decl "bool" unconstrained_local_extrema nil)
    (norm_inf const-decl "(norm?(m))" norms nil))
   shostak))
 (loc_maximizer_equiv 0
  (loc_maximizer_equiv-1 nil 3742889811
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "equiv_norm[n]")
          (("1" (skeep)
            (("1" (expand "is_loc_maximizer?")
              (("1" (skeep)
                (("1" (inst -1 "nn!1" "nn")
                  (("1" (skeep)
                    (("1" (expand "equiv?")
                      (("1" (skeep)
                        (("1" (inst 1 "epsilon/c2")
                          (("1" (skeep)
                            (("1" (inst -2 "v2")
                              (("1"
                                (inst -1 "v-v2")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (mult-by -5 "c2")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "v-v2" "v" "v2")
                                  (("2"
                                    (expand "max" -)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "is_loc_maximizer?")
          (("2" (inst -1 "norm_inf(n)")
            (("2" (inst 1 "norm_inf(n)") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" unconstrained_local_extrema nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (equiv_norm formula-decl nil norms_equiv nil)
    (is_loc_maximizer? const-decl "bool" unconstrained_local_extrema
     nil)
    (is_loc_maximizer? const-decl "bool" unconstrained_local_extrema
     nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (equiv? const-decl "bool" norms_equiv nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (v2 skolem-const-decl "VectorN(n)" unconstrained_local_extrema nil)
    (v skolem-const-decl "(D)" unconstrained_local_extrema nil)
    (D skolem-const-decl "domain[n]" unconstrained_local_extrema nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (norm_inf const-decl "(norm?(m))" norms nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (loc_max_equiv 0
  (loc_max_equiv-1 nil 3742890097
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "is_loc_max?")
          (("1" (skeep)
            (("1" (skeep)
              (("1" (lemma "equiv_norm[n]")
                (("1" (inst -1 "nn!1" "nn")
                  (("1" (expand "equiv?")
                    (("1" (skeep)
                      (("1" (skeep)
                        (("1" (inst 1 "epsilon*c1" "v")
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (inst -3 "v2")
                                (("1"
                                  (inst -1 "v-v2")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (div-by -5 "c1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (div-by -1 "c1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "v-v2" "v" "v2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "max" -)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "is_loc_max?")
          (("2" (inst -1 "norm_inf(n)")
            (("2" (inst 1 "norm_inf(n)") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((is_loc_max? const-decl "bool" unconstrained_local_extrema nil)
    (is_loc_max? const-decl "bool" unconstrained_local_extrema nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (domain type-eq-decl nil domain_vec2real_def nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (D skolem-const-decl "domain[n]" unconstrained_local_extrema nil)
    (v skolem-const-decl "(D)" unconstrained_local_extrema nil)
    (v2 skolem-const-decl "VectorN(n)" unconstrained_local_extrema nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (equiv? const-decl "bool" norms_equiv nil)
    (equiv_norm formula-decl nil norms_equiv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" unconstrained_local_extrema nil)
    (norm_inf const-decl "(norm?(m))" norms nil))
   shostak))
 (zero_loc_5_TCC1 0
  (zero_loc_5_TCC1-1 nil 3742419231 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (length_singleton formula-decl nil more_list_props "structures/"))
   nil))
 (zero_loc_5_TCC2 0
  (zero_loc_5_TCC2-1 nil 3742419231 ("" (subtype-tcc) nil nil) nil
   nil))
 (zero_loc_5_TCC3 0
  (zero_loc_5_TCC3-1 nil 3742419231 ("" (subtype-tcc) nil nil) nil
   nil))
 (zero_loc_5 0
  (zero_loc_5-2 nil 3742419463
   ("" (expand "is_loc_minimizer?")
    (("" (expand "nth" 1 1) (("" (propax) nil nil)) nil)) nil)
   ((nth def-decl "T" list_props nil)
    (is_loc_minimizer? const-decl "bool" unconstrained_local_extrema
     nil))
   nil)
  (zero_loc_5-1 nil 3742419449 ("" (postpone) nil nil) nil shostak)))