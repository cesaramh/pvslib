(sequential_criterian
 (sequential_criterian1 0
  (sequential_criterian1-1 nil 3742803224
   ("" (lemma "sequential_1")
    (("" (skeep)
      (("" (inst -1 "D" "f")
        (("" (assert)
          (("" (expand "contD?")
            (("" (expand "norm_1_contD?")
              (("" (skeep)
                (("" (split)
                  (("1" (inst -1 "V" "L")
                    (("1" (assert)
                      (("1" (expand "norm_1_convergence?")
                        (("1" (expand "convergence?")
                          (("1" (expand "convergence?")
                            (("1" (inst -2 "norm_1(n)") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (inst -1 "p")
                      (("2" (expand "contp?")
                        (("2" (expand "norm_1_contp?")
                          (("2" (inst -1 "norm_1(n)") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_1_contD? const-decl "bool" norm_1_defs nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (norm_1 const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (norm_1_convergence? const-decl "bool" norm_1_defs nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (norm_1_contp? const-decl "bool" norm_1_defs nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (sequential_1 formula-decl nil norm_1_sequential_criterian nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" sequential_criterian nil))
   shostak))
 (sequentialcriterian2 0
  (sequentialcriterian2-1 nil 3742806821
   ("" (lemma "sequential_criterian1")
    (("" (skeep)
      (("" (inst -1 "D" "f")
        (("" (assert)
          (("" (skeep)
            (("" (assert)
              (("" (inst -1 "V" "L")
                (("1" (assert) nil nil)
                 ("2" (typepred "D")
                  (("2" (expand "closed_domain?")
                    (("2" (inst -1 "V" "L") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (L skolem-const-decl "VectorN(n)" sequential_criterian nil)
    (D skolem-const-decl "(closed_domain?)" sequential_criterian nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (closed_domain? const-decl "bool" closed_bounded_domain nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" sequential_criterian nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (sequential_criterian1 formula-decl nil sequential_criterian nil))
   shostak)))