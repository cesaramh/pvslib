(norm_1_bolzano_weierstrass
 (B_W_m_TCC1 0
  (B_W_m_TCC1-1 nil 3742115391 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (B_W_m 0
  (B_W_m-1 nil 3742115401
   ("" (induct "m")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (case "j=0")
        (("1" (hide -2)
          (("1" (assert)
            (("1" (skeep)
              (("1" (replace -1 1)
                (("1" (assert)
                  (("1" (typepred "V")
                    (("1" (replace -2 -1)
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (expand "norm_1" -1)
                            (("1" (expand "norm_1" -1)
                              (("1"
                                (typepred "V")
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (lemma "bolzano_weierstrass3")
                                    (("1"
                                      (inst
                                       -1
                                       "Lambda(i:nat): car(V(i))")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand "subseq" -1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (typepred "f")
                                              (("1"
                                                (expand
                                                 "convergent?"
                                                 -3)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst
                                                     1
                                                     "LAMBDA(i:nat): (: car(V(f(i))) :)"
                                                     "(:l:)")
                                                    (("1"
                                                      (expand
                                                       "norm_1_convergence?")
                                                      (("1"
                                                        (expand
                                                         "convergence"
                                                         -3)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (inst
                                                             -3
                                                             "epsilon")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "n!1+1")
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst
                                                                     -3
                                                                     "NN")
                                                                    (("1"
                                                                      (expand
                                                                       "-"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "sub"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "add"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "scal"
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "add"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "scal"
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "norm_1"
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "norm_1"
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs"
                                                                                       1)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length"
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "entry_sum"
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -2
                                                                                                       "NN")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "subsequence?")
                                                      (("2"
                                                        (inst 1 "f")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (decompose-equality
                                                               1)
                                                              (("2"
                                                                (hide
                                                                 -)
                                                                (("2"
                                                                  (grind)
                                                                  (("2"
                                                                    (typepred
                                                                     "V")
                                                                    (("2"
                                                                      (typepred
                                                                       "j")
                                                                      (("2"
                                                                        (typepred
                                                                         "V(f(i_1))")
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (typepred
                                                           "V(f(i))")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (split)
                                          (("1"
                                            (expand "bounded_above?" 1)
                                            (("1"
                                              (inst 1 "M")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst -1 "x")
                                                  (("1"
                                                    (grind)
                                                    (("1"
                                                      (expand "abs" -1)
                                                      (("1"
                                                        (expand
                                                         "abs"
                                                         -1)
                                                        (("1"
                                                          (expand
                                                           "entry_sum"
                                                           -1)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             -)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "bounded_below?" 1)
                                            (("2"
                                              (inst 1 "-M")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -1 "x")
                                                  (("2"
                                                    (grind)
                                                    (("2"
                                                      (expand "abs" -1)
                                                      (("2"
                                                        (expand
                                                         "abs"
                                                         -1)
                                                        (("2"
                                                          (expand
                                                           "entry_sum"
                                                           -1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (typepred "V(i)")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (skeep)
            (("2" (lemma "bolzano_weierstrass3")
              (("2" (inst -1 "Lambda(i:nat): car(V(i))")
                (("1" (skeep)
                  (("1" (expand "subseq" -1)
                    (("1" (skeep)
                      (("1" (inst -3 "LAMBDA(i:nat): cdr(V(f(i)))")
                        (("1" (skeep)
                          (("1" (expand "convergent?" -2)
                            (("1" (skeep -2)
                              (("1"
                                (expand "norm_1_convergence?" -3)
                                (("1"
                                  (typepred "V2")
                                  (("1"
                                    (expand "subsequence?" -1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst
                                         2
                                         "LAMBDA(i:nat): cons( car(V(f(s(i)))), cdr(V(f(s(i)))))"
                                         "cons( l, L)")
                                        (("1"
                                          (expand
                                           "norm_1_convergence?"
                                           2)
                                          (("1"
                                            (lemma "norm_one_recurse")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (expand
                                                 "convergence"
                                                 -4)
                                                (("1"
                                                  (inst -4 "epsilon/2")
                                                  (("1"
                                                    (inst
                                                     -5
                                                     "epsilon/2")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst
                                                           2
                                                           "max(n!1,N) +1")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               -4
                                                               "NN")
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "NN")
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "NN")
                                                                  (("1"
                                                                    (inst
                                                                     -3
                                                                     "NN")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "1+j"
                                                                       "cons(car(V(f(s(NN)))), cdr(V(f(s(NN))))) - cons(l, L)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "-"
                                                                                 2)
                                                                                (("1"
                                                                                  (expand
                                                                                   "sub"
                                                                                   2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "add"
                                                                                     2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "scal"
                                                                                       2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "-"
                                                                                           -5)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "sub"
                                                                                             -5)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (reveal
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (reveal
                                                                                                   -5)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "s(NN)")
                                                                                                    (("1"
                                                                                                      (reveal
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "s(NN)")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "increase_seq_fact")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "s"
                                                                                                                 "NN")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "NN")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "NN")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "cdr(cons[real](car[real](V(f(s(NN)))), cdr[real](V(f(s(NN)))))
                  - cons[real](l, L))")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "-"
                                                                                         2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "sub"
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "add"
                                                                                             2)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "scal"
                                                                                               2)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "add(cdr[real](V(f(s(NN)))), scal(-1, L))")
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "V(f(s(NN)))"
                                                                                                     "scal(-1, L)"
                                                                                                     "L")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "max"
                                                                                                         -)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "NN")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "length" 1)
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (expand "subsequence?")
                                          (("3"
                                            (inst
                                             1
                                             "LAMBDA(i:nat): f(s(i))")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (decompose-equality 1)
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "s")
                                              (("2"
                                                (typepred "f")
                                                (("2"
                                                  (expand
                                                   "strict_increasing?"
                                                   1)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (expand
                                                       "strict_increasing?")
                                                      (("2"
                                                        (inst
                                                         -2
                                                         "x"
                                                         "y")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "s(x)"
                                                           "s(y)")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skeep)
                                          (("4"
                                            (expand "length" 1)
                                            (("4"
                                              (typepred "V(f(s(i)))")
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (expand "length" -2)
                                                  (("4"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (skeep)
                                          (("5"
                                            (typepred "V(f(s(i)))")
                                            (("5" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "V")
                          (("2" (skeep)
                            (("2" (inst 1 "M")
                              (("2"
                                (skeep)
                                (("2"
                                  (inst -1 "i_1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma "norm_one_recurse")
                                      (("2"
                                        (inst -1 "j+1" "V(f(i_1))")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (reveal -2)
                                            (("2"
                                              (inst -1 "f(i_1)")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skeep)
                          (("3" (typepred "V")
                            (("3" (typepred "V(f(i))")
                              (("3"
                                (expand "length" -2)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (skeep)
                          (("4" (typepred "V(f(i))")
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split)
                  (("1" (expand "bounded_above?")
                    (("1" (typepred "V")
                      (("1" (skeep)
                        (("1" (inst 1 "M")
                          (("1" (skeep)
                            (("1" (inst -1 "x")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "norm_one_recurse")
                                  (("1"
                                    (inst -1 "1+j" "V(x)")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "bounded_below?" 1)
                    (("2" (typepred "V")
                      (("2" (skeep)
                        (("2" (inst 1 "-M")
                          (("2" (skeep)
                            (("2" (inst -1 "x")
                              (("2"
                                (lemma "norm_one_recurse")
                                (("2"
                                  (inst -1 "1+j" "V(x)")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep)
                  (("3" (typepred "V(i)") (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (typepred "VV(i)") (("4" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (increase_seq_fact formula-decl nil subsequences nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NN skolem-const-decl "above(1 + max(n!1, N))"
     norm_1_bolzano_weierstrass nil)
    (N skolem-const-decl "posnat" norm_1_bolzano_weierstrass nil)
    (n!1 skolem-const-decl "nat" norm_1_bolzano_weierstrass nil)
    (norm_one_recurse formula-decl nil norms nil)
    (L skolem-const-decl "VectorN(j)" norm_1_bolzano_weierstrass nil)
    (l skolem-const-decl "real" norm_1_bolzano_weierstrass nil)
    (s skolem-const-decl "{ss: sequence[nat] | strict_increasing?(ss)}"
     norm_1_bolzano_weierstrass nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (f skolem-const-decl "extraction" norm_1_bolzano_weierstrass nil)
    (V skolem-const-decl "{VV: vec_seq(1 + j) |
         EXISTS (M: posreal): FORALL (i: nat): norm_1(1 + j)(VV(i)) < M}"
     norm_1_bolzano_weierstrass nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (norm_1 const-decl "[(cons?) -> nonneg_real]" norms nil)
    (j skolem-const-decl "nat" norm_1_bolzano_weierstrass nil)
    (V skolem-const-decl "{VV: vec_seq(1 + j) |
         EXISTS (M: posreal): FORALL (i: nat): norm_1(1 + j)(VV(i)) < M}"
     norm_1_bolzano_weierstrass nil)
    (bounded_above? const-decl "bool" real_fun_preds "reals/")
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (bounded_below? const-decl "bool" real_fun_preds "reals/")
    (sequence type-eq-decl nil sequences nil)
    (subseq const-decl "bool" sequence_props "analysis/")
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (extraction type-eq-decl nil sequence_props "analysis/")
    (list_cons_extensionality formula-decl nil list_adt nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     "matrices/")
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (entry_sum def-decl "real" norms nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (scal def-decl "VectorN(length(v2))" matrices "matrices/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     "matrices/")
    (above nonempty-type-eq-decl nil integers nil)
    (convergence const-decl "bool" convergence_sequences "analysis/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (f skolem-const-decl "extraction" norm_1_bolzano_weierstrass nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (convergent? const-decl "bool" convergence_sequences "analysis/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (bolzano_weierstrass3 formula-decl nil convergence_sequences
     "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (norm_1_convergence? const-decl "bool" norm_1_defs nil)
    (subsequence? const-decl "bool" subsequences nil)
    (norm_1 const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil) (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" norm_1_bolzano_weierstrass nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (B_W_TCC1 0
  (B_W_TCC1-1 nil 3742115138
   ("" (skeep) (("" (typepred "VV(i)") (("" (assert) nil nil)) nil))
    nil)
   ((vec_seq type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" norm_1_bolzano_weierstrass nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (B_W 0
  (B_W-1 nil 3742126656
   ("" (skeep)
    (("" (lemma "B_W_m")
      (("" (inst -1 "n" "V")
        (("" (assert)
          (("" (skeep)
            (("" (assert)
              (("" (inst 1 "V2" "L")
                (("" (assert)
                  (("" (typepred "V2")
                    (("" (expand "subsequence?")
                      (("" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((B_W_m formula-decl nil norm_1_bolzano_weierstrass nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (V skolem-const-decl "{VV: vec_seq(n) |
         EXISTS (M: posreal): FORALL (i: nat): norm_1(n)(VV(i)) < M}"
     norm_1_bolzano_weierstrass nil)
    (V2 skolem-const-decl "(subsequence?(n)(V))"
     norm_1_bolzano_weierstrass nil)
    (subsequence? const-decl "bool" subsequences nil)
    (subsequence? const-decl "bool" subsequences nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (norm_1 const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "posnat" norm_1_bolzano_weierstrass nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (B_W_m_le 0
  (B_W_m_le-2 nil 3742128025
   ("" (induct "m")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (case "j=0")
        (("1" (hide -2)
          (("1" (assert)
            (("1" (skeep)
              (("1" (replace -1 1)
                (("1" (assert)
                  (("1" (typepred "V")
                    (("1" (replace -2 -1)
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (expand "norm_1" -1)
                            (("1" (expand "norm_1" -1)
                              (("1"
                                (typepred "V")
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (lemma "bolzano_weierstrass3")
                                    (("1"
                                      (inst
                                       -1
                                       "Lambda(i:nat): car(V(i))")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand "subseq" -1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (typepred "f")
                                              (("1"
                                                (expand
                                                 "convergent?"
                                                 -3)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst
                                                     1
                                                     "LAMBDA(i:nat): (: car(V(f(i))) :)"
                                                     "(:l:)")
                                                    (("1"
                                                      (expand
                                                       "norm_1_convergence?")
                                                      (("1"
                                                        (expand
                                                         "convergence"
                                                         -3)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (inst
                                                             -3
                                                             "epsilon/2")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "n!1+1")
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst
                                                                     -3
                                                                     "NN")
                                                                    (("1"
                                                                      (expand
                                                                       "-"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "sub"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "add"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "scal"
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "add"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "scal"
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "norm_1"
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "norm_1"
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs"
                                                                                       1)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length"
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "entry_sum"
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -2
                                                                                                       "NN")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "subsequence?")
                                                      (("2"
                                                        (inst 1 "f")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (decompose-equality
                                                               1)
                                                              (("2"
                                                                (hide
                                                                 -)
                                                                (("2"
                                                                  (grind)
                                                                  (("2"
                                                                    (typepred
                                                                     "V")
                                                                    (("2"
                                                                      (typepred
                                                                       "j")
                                                                      (("2"
                                                                        (typepred
                                                                         "V(f(i_1))")
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (typepred
                                                           "V(f(i))")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (split)
                                          (("1"
                                            (expand "bounded_above?" 1)
                                            (("1"
                                              (inst 1 "M")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst -1 "x")
                                                  (("1"
                                                    (grind)
                                                    (("1"
                                                      (expand "abs" -1)
                                                      (("1"
                                                        (expand
                                                         "abs"
                                                         -1)
                                                        (("1"
                                                          (expand
                                                           "entry_sum"
                                                           -1)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "bounded_below?" 1)
                                            (("2"
                                              (inst 1 "-M")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -1 "x")
                                                  (("2"
                                                    (grind)
                                                    (("2"
                                                      (expand "abs" -1)
                                                      (("2"
                                                        (expand
                                                         "abs"
                                                         -1)
                                                        (("2"
                                                          (expand
                                                           "entry_sum"
                                                           -1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (typepred "V(i)")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (skeep)
            (("2" (lemma "bolzano_weierstrass3")
              (("2" (inst -1 "Lambda(i:nat): car(V(i))")
                (("1" (skeep)
                  (("1" (expand "subseq" -1)
                    (("1" (skeep)
                      (("1" (inst -3 "LAMBDA(i:nat): cdr(V(f(i)))")
                        (("1" (skeep)
                          (("1" (expand "convergent?" -2)
                            (("1" (skeep -2)
                              (("1"
                                (expand "norm_1_convergence?" -3)
                                (("1"
                                  (typepred "V2")
                                  (("1"
                                    (expand "subsequence?" -1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst
                                         2
                                         "LAMBDA(i:nat): cons( car(V(f(s(i)))), cdr(V(f(s(i)))))"
                                         "cons( l, L)")
                                        (("1"
                                          (expand
                                           "norm_1_convergence?"
                                           2)
                                          (("1"
                                            (lemma "norm_one_recurse")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (expand
                                                 "convergence"
                                                 -4)
                                                (("1"
                                                  (inst -4 "epsilon/2")
                                                  (("1"
                                                    (inst
                                                     -5
                                                     "epsilon/2")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst
                                                           2
                                                           "max(n!1,N) +1")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               -4
                                                               "NN")
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "NN")
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "NN")
                                                                  (("1"
                                                                    (inst
                                                                     -3
                                                                     "NN")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "1+j"
                                                                       "cons(car(V(f(s(NN)))), cdr(V(f(s(NN))))) - cons(l, L)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "-"
                                                                                 2)
                                                                                (("1"
                                                                                  (expand
                                                                                   "sub"
                                                                                   2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "add"
                                                                                     2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "scal"
                                                                                       2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "-"
                                                                                           -5)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "sub"
                                                                                             -5)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -3
                                                                                               -5)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (reveal
                                                                                                   -5)
                                                                                                  (("1"
                                                                                                    (reveal
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "s(NN)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -2
                                                                                                           "s(NN)")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "increase_seq_fact")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "s"
                                                                                                                   "NN")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "NN")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "NN")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "cons[real](car[real](V(f(s(NN)))), cdr[real](V(f(s(NN))))) -
                                            cons[real](l, L)"
                                                                         "cons[real](car[real](V(f(s(NN)))), cdr[real](V(f(s(NN)))))"
                                                                         "cons[real](l, L)")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "max"
                                                                             -)
                                                                            (("2"
                                                                              (hide
                                                                               2
                                                                               3)
                                                                              (("2"
                                                                                (typepred
                                                                                 "cons[real](l, L)"
                                                                                 "L")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "cons[real]
                                                       (car[real](V(f(s(NN)))), cdr[real](V(f(s(NN)))))"
                                                                                     "V(f(s(NN)))")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "cons[real](car[real](V(f(s(NN)))), cdr[real](V(f(s(NN))))) -
                                            cons[real](l, L)")
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "cons[real](l, L)"
                                                                                             "L")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length"
                                                                                               -6
                                                                                               3)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "-"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "sub"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "add"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "scal"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "cdr[real](V(f(s(NN))))")
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "V(f(s(NN)))")
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "scal(-1, L)")
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "L")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     -6)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "max"
                                                                                                                         -)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "add(cdr[real](V(f(s(NN)))), scal(-1, L))")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "max"
                                                                                                                             -)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "NN")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "length" 1)
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (expand "subsequence?")
                                          (("3"
                                            (inst
                                             1
                                             "LAMBDA(i:nat): f(s(i))")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (decompose-equality 1)
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "s")
                                              (("2"
                                                (typepred "f")
                                                (("2"
                                                  (expand
                                                   "strict_increasing?"
                                                   1)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (expand
                                                       "strict_increasing?")
                                                      (("2"
                                                        (inst
                                                         -2
                                                         "x"
                                                         "y")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "s(x)"
                                                           "s(y)")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skeep)
                                          (("4"
                                            (expand "length" 1)
                                            (("4"
                                              (typepred "V(f(s(i)))")
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (expand "length" -2)
                                                  (("4"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (skeep)
                                          (("5"
                                            (typepred "V(f(s(i)))")
                                            (("5" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "V")
                          (("2" (skeep)
                            (("2" (inst 1 "M")
                              (("2"
                                (skeep)
                                (("2"
                                  (inst -1 "i_1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (reveal -2)
                                      (("2"
                                        (lemma "norm_one_recurse")
                                        (("2"
                                          (inst -1 "j+1" "V(f(i_1))")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (reveal -2)
                                              (("2"
                                                (inst -1 "f(i_1)")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skeep)
                          (("3" (typepred "V")
                            (("3" (typepred "V(f(i))")
                              (("3"
                                (expand "length" -2)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (skeep)
                          (("4" (typepred "V(f(i))")
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split)
                  (("1" (expand "bounded_above?")
                    (("1" (typepred "V")
                      (("1" (skeep)
                        (("1" (inst 1 "M")
                          (("1" (skeep)
                            (("1" (inst -1 "x")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "norm_one_recurse")
                                  (("1"
                                    (inst -1 "1+j" "V(x)")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "bounded_below?" 1)
                    (("2" (typepred "V")
                      (("2" (skeep)
                        (("2" (inst 1 "-M")
                          (("2" (skeep)
                            (("2" (inst -1 "x")
                              (("2"
                                (lemma "norm_one_recurse")
                                (("2"
                                  (inst -1 "1+j" "V(x)")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep)
                  (("3" (typepred "V(i)") (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (typepred "VV(i)") (("4" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (increase_seq_fact formula-decl nil subsequences nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NN skolem-const-decl "above(1 + max(n!1, N))"
     norm_1_bolzano_weierstrass nil)
    (N skolem-const-decl "posnat" norm_1_bolzano_weierstrass nil)
    (n!1 skolem-const-decl "nat" norm_1_bolzano_weierstrass nil)
    (norm_one_recurse formula-decl nil norms nil)
    (L skolem-const-decl "VectorN(j)" norm_1_bolzano_weierstrass nil)
    (l skolem-const-decl "real" norm_1_bolzano_weierstrass nil)
    (s skolem-const-decl "{ss: sequence[nat] | strict_increasing?(ss)}"
     norm_1_bolzano_weierstrass nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (f skolem-const-decl "extraction" norm_1_bolzano_weierstrass nil)
    (V skolem-const-decl "{VV: vec_seq(1 + j) |
         EXISTS (M: posreal): FORALL (i: nat): norm_1(1 + j)(VV(i)) <= M}"
     norm_1_bolzano_weierstrass nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (norm_1 const-decl "[(cons?) -> nonneg_real]" norms nil)
    (j skolem-const-decl "nat" norm_1_bolzano_weierstrass nil)
    (V skolem-const-decl "{VV: vec_seq(1 + j) |
         EXISTS (M: posreal): FORALL (i: nat): norm_1(1 + j)(VV(i)) <= M}"
     norm_1_bolzano_weierstrass nil)
    (bounded_above? const-decl "bool" real_fun_preds "reals/")
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (bounded_below? const-decl "bool" real_fun_preds "reals/")
    (sequence type-eq-decl nil sequences nil)
    (subseq const-decl "bool" sequence_props "analysis/")
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (extraction type-eq-decl nil sequence_props "analysis/")
    (list_cons_extensionality formula-decl nil list_adt nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     "matrices/")
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (entry_sum def-decl "real" norms nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (scal def-decl "VectorN(length(v2))" matrices "matrices/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     "matrices/")
    (above nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (convergence const-decl "bool" convergence_sequences "analysis/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (f skolem-const-decl "extraction" norm_1_bolzano_weierstrass nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (convergent? const-decl "bool" convergence_sequences "analysis/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (bolzano_weierstrass3 formula-decl nil convergence_sequences
     "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (norm_1_convergence? const-decl "bool" norm_1_defs nil)
    (subsequence? const-decl "bool" subsequences nil)
    (norm_1 const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" norm_1_bolzano_weierstrass nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   nil)
  (B_W_m_le-1 nil 3742128013 ("" (postpone) nil nil) nil shostak))
 (B_W_le 0
  (B_W_le-2 nil 3742128071
   ("" (skeep)
    (("" (lemma "B_W_m_le")
      (("" (inst -1 "n" "V")
        (("" (assert)
          (("" (skeep)
            (("" (assert)
              (("" (inst 1 "V2" "L")
                (("" (assert)
                  (("" (typepred "V2")
                    (("" (expand "subsequence?")
                      (("" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((B_W_m_le formula-decl nil norm_1_bolzano_weierstrass nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (V skolem-const-decl "{VV: vec_seq(n) |
         EXISTS (M: posreal): FORALL (i: nat): norm_1(n)(VV(i)) <= M}"
     norm_1_bolzano_weierstrass nil)
    (V2 skolem-const-decl "(subsequence?(n)(V))"
     norm_1_bolzano_weierstrass nil)
    (subsequence? const-decl "bool" subsequences nil)
    (subsequence? const-decl "bool" subsequences nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (norm_1 const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "posnat" norm_1_bolzano_weierstrass nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (B_W_le-1 nil 3742128050 ("" (postpone) nil nil) nil shostak)))