(differentiable_def
 (NQ_TCC1 0
  (NQ_TCC1-2 nil 3741425424
   ("" (skeep)
    (("" (typepred "p+h")
      (("" (expand "max" -2)
        (("" (typepred "p") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" differentiable_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (NQ subtype
    "(matrices.+)(differentiable_def.p, differentiable_def.h)"
    "matrices.VectorN(differentiable_def.n)"))
  (NQ_TCC1-1 nil 3741425175 ("" (subtype-tcc) nil nil) nil nil
   (NQ subtype
    "(matrices.+)(differentiable_def.p, differentiable_def.h)"
    "matrices.VectorN(differentiable_def.n)")))
 (NQ_TCC2 0
  (NQ_TCC2-1 nil 3741425175 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" differentiable_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (/= const-decl "boolean" notequal nil))
   nil (NQ subtype "differentiable_def.h" "(list_adt[real].cons?)")))
 (NQ_TCC3 0
  (NQ_TCC3-2 nil 3741425465
   ("" (skeep)
    (("" (typepred "norm_inf(n)")
      (("" (expand "norm?")
        (("" (flatten) (("" (inst -3 "h") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_inf const-decl "(norm?(m))" norms nil)
    (n formal-const-decl "posnat" differentiable_def nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (NQ subtype
    "norms.norm_inf(differentiable_def.n)(differentiable_def.h)"
    "nznum"))
  (NQ_TCC3-1 nil 3741425175 ("" (subtype-tcc) nil nil) nil nil
   (NQ subtype
    "norms.norm_inf(differentiable_def.n)(differentiable_def.h)"
    "nznum")))
 (NQ_TCC4 0
  (NQ_TCC4-1 nil 3741436433
   ("" (skeep)
    (("" (typepred "p+h" "p" "h")
      (("" (assert) (("" (expand "max" -) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" differentiable_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (NQ subtype
    "(matrices.+)(differentiable_def.p, differentiable_def.h)"
    "matrices.VectorN(differentiable_def.n)")))
 (der_f_TCC1 0
  (der_f_TCC2-1 nil 3797524922
   (""
    (inst 1
     "LAMBDA(D:(deriv_domain?), p:(D)): LAMBDA(f: {ff: vec2real_f[n] |
                         differentiable?(D, ff, p)}):  choose({ g:VectorN(n) |convergence_zero?(NQ(D,p),NQ(f,g,p),zero_vec(n))})")
    (("" (skeep)
      ((""
        (typepred "choose[VectorN(n)]
                                       ({g: VectorN(n) |
                                           convergence_zero?(NQ(D,p),NQ(f, g, p),
                                                             zero_vec(n))})")
        (("1" (typepred "f")
          (("1" (expand "differentiable?")
            (("1" (skeep)
              (("1" (expand "nonempty?")
                (("1" (expand "empty?")
                  (("1" (inst -5 "g")
                    (("1" (expand "member" 1) (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "f")
          (("2" (expand "differentiable?" -1)
            (("2" (skeep)
              (("2" (expand "nonempty?" 1)
                (("2" (expand "empty?" -2)
                  (("2" (inst -2 "g")
                    (("2" (expand "member" 1) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" differentiable_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" differentiable_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (der_f existence ""
    "[d: [D: (derivative_domain_multi[differentiable_def.n].deriv_domain?), (D)] -> [f: {ff: domain_vec2real_def[differentiable_def.n].vec2real_f | differentiable_def.differentiable?(d`1, ff, d`2)} -> {gg: matrices.VectorN(differentiable_def.n) | vector_sequences[differentiable_def.n].convergence_zero?(differentiable_def.NQ(d`1, d`2), differentiable_def.NQ(f, gg, d`2), vector_arithmetic.zero_vec(differentiable_def.n))}]]")))
 (der_f_TCC2 0
  (der_f_TCC1-4 nil 3741426155
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "differentiableD?") (("" (inst?) nil nil)) nil))
      nil))
    nil)
   ((differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" differentiable_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (der_f subtype "differentiable_def.f"
    "{ff: domain_vec2real_def[differentiable_def.n].vec2real_f | differentiable_def.differentiable?(differentiable_def.D, ff, differentiable_def.p)}"))
  (der_f_TCC1-3 nil 3741426114
   (""
    (inst 1
     "LAMBDA(D:(deriv_domain?): LAMBDA(f:(differentiableD?(D))): LAMBDA(p: (D)): choose({ g:VectorN(n) |convergence_zero?(D,NQ(f,g,p),zero_vec(n))})")
    (("1" (skeep)
      (("1" (skeep)
        (("1"
          (typepred "choose[VectorN(n)]
                                   ({g: VectorN(n) |
                                       convergence_zero?(D,NQ(f, g, p_1),
                                                         zero_vec(n))})")
          (("1" (propax) nil)
           ("2" (typepred "f")
            (("2" (expand "differentiableD?")
              (("2" (inst -1 "p_1")
                (("2" (expand "differentiable?")
                  (("2" (expand "nonempty?")
                    (("2" (skeep)
                      (("2" (expand "empty?")
                        (("2" (inst -2 "g")
                          (("2" (expand "member" 1)
                            (("2" (propax) nil)))))))))))))))))))))))))
     ("2" (skeep)
      (("2" (typepred "f")
        (("2" (expand "differentiableD?")
          (("2" (inst -1 "p")
            (("2" (expand "differentiable?" -1)
              (("2" (skeep)
                (("2" (expand "nonempty?" 1)
                  (("2" (expand "empty?" -2)
                    (("2" (inst -2 "g")
                      (("2" (expand "member" 1)
                        (("2" (propax) nil))))))))))))))))))))))
    nil)
   nil nil
   (der_f subtype "differentiable_def.f"
    "{ff: domain_vec2real_def[differentiable_def.n].vec2real_f | differentiable_def.differentiable?(differentiable_def.D, ff, differentiable_def.p)}"))
  (der_f_TCC1-2 nil 3741425973
   (""
    (inst 1
     "LAMBDA(D:domain): LAMBDA(f:(differentiableD?(D))): LAMBDA(p: (D)): choose({ g:VectorN(n) |convergence_zero?(NQ(f,g,p),zero_vec(n))})")
    (("1" (skeep)
      (("1" (skeep)
        (("1"
          (typepred "choose[VectorN(n)]
                                   ({g: VectorN(n) |
                                       convergence_zero?(D,NQ(f, g, p_1),
                                                         zero_vec(n))})")
          (("1" (propax) nil)
           ("2" (typepred "f")
            (("2" (expand "differentiableD?")
              (("2" (inst -1 "p_1")
                (("2" (expand "differentiable?")
                  (("2" (expand "nonempty?")
                    (("2" (skeep)
                      (("2" (expand "empty?")
                        (("2" (inst -2 "g")
                          (("2" (expand "member" 1)
                            (("2" (propax) nil)))))))))))))))))))))))))
     ("2" (skeep)
      (("2" (typepred "f")
        (("2" (expand "differentiableD?")
          (("2" (inst -1 "p")
            (("2" (expand "differentiable?" -1)
              (("2" (skeep)
                (("2" (expand "nonempty?" 1)
                  (("2" (expand "empty?" -2)
                    (("2" (inst -2 "g")
                      (("2" (expand "member" 1)
                        (("2" (propax) nil))))))))))))))))))))))
    nil)
   nil nil
   (der_f subtype "differentiable_def.f"
    "{ff: domain_vec2real_def[differentiable_def.n].vec2real_f | differentiable_def.differentiable?(differentiable_def.D, ff, differentiable_def.p)}"))
  (der_f_TCC1-1 nil 3741425934 ("" (existence-tcc) nil nil) nil nil
   (der_f subtype "differentiable_def.f"
    "{ff: domain_vec2real_def[differentiable_def.n].vec2real_f | differentiable_def.differentiable?(differentiable_def.D, ff, differentiable_def.p)}")))
 (der_f_TCC3 0
  (der_f_TCC3-1 nil 3853412493
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "der_f(D,p_1)(f)") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" differentiable_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "bool" differentiable_def nil)
    (NQ const-decl "real" differentiable_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (der_f const-decl
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     differentiable_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil))
   nil
   (der_f subtype
    "LAMBDA (p: (differentiable_def.D)): differentiable_def.der_f(differentiable_def.D, p)(differentiable_def.f)"
    "{gg: [(differentiable_def.D) -> matrices.VectorN(differentiable_def.n)] | FORALL (p: (differentiable_def.D)): vector_sequences[differentiable_def.n].convergence_zero?(differentiable_def.NQ(differentiable_def.D, p), differentiable_def.NQ(differentiable_def.f, gg(p), p), vector_arithmetic.zero_vec(differentiable_def.n))}"))))