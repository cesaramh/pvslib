(Taylor_Thrm_Multi
 (g_thm_TCC1 0
  (g_thm_TCC2-1 nil 3740470694
   ("" (skeep)
    (("" (typepred "p2-p1" "p2" "p1") (("" (grind) nil nil)) nil)) nil)
   ((n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm subtype
    "(matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1)"
    "matrices.VectorN(Taylor_Thrm_Multi.n)")))
 (g_thm_TCC2 0
  (g_thm_TCC1-1 nil 3740470694
   ("" (skeep)
    (("" (lemma "dd_directionv_implies_dd")
      (("" (inst?)
        (("" (assert)
          (("" (inst 1 "e(n,0)")
            (("1" (typepred "D")
              (("1" (expand "deriv_domain_all_direction?" -1)
                (("1" (inst -1 "e(n,0)") nil nil)) nil))
              nil)
             ("2" (assert)
              (("2" (lemma "e_not_zero") (("2" (inst?) nil nil)) nil))
              nil)
             ("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_directionv_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (e_not_zero formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm subtype "Taylor_Thrm_Multi.D"
    "(derivative_domain_multi[Taylor_Thrm_Multi.n].deriv_domain?)")))
 (g_thm_TCC3 0
  (g_thm_TCC3-1 nil 3740915449
   ("" (skeep)
    ((""
      (typepred "p1 + t * (p2 - p1)" "p1" "t * (p2 - p1)" "p2-p1" "p2")
      (("" (grind) nil nil)) nil))
    nil)
   ((< const-decl "bool" reals nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (D_down const-decl "bool" init_partial_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm subtype
    "(matrices.+)(Taylor_Thrm_Multi.p1, matrices.*(Taylor_Thrm_Multi.t, ((matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1))))"
    "matrices.VectorN(Taylor_Thrm_Multi.n)")))
 (g_thm_TCC4 0
  (g_thm_TCC4-1 nil 3741595757
   ("" (skeep)
    (("" (lemma "D_down_domain_unit")
      (("" (inst -1 "p2-p1" "D" "p1")
        (("" (typepred "p2-p1" "p2" "p1")
          (("" (assert) (("" (hide 2) (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (D_down_domain_unit formula-decl nil init_partial_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (p2 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (p1 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm assuming
    "analysis@nth_derivatives[{t: (init_partial_def[Taylor_Thrm_Multi.n].D_down(Taylor_Thrm_Multi.D, Taylor_Thrm_Multi.p1, (matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1))) | booleans.AND(reals.>(t, 0), reals.<(t, 1))}].nth_derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (g_thm_TCC5 0
  (g_thm_TCC5-1 nil 3789833405
   ("" (skeep)
    (("" (lemma "D_down_not_one_unit")
      (("" (inst -1 "p2-p1" "D" "p1")
        (("" (assert)
          (("" (typepred "p2-p1" "p2" "p1") (("" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (D_down_not_one_unit formula-decl nil init_partial_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (/= const-decl "boolean" notequal nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (p2 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (p1 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm assuming
    "analysis@nth_derivatives[{t: (init_partial_def[Taylor_Thrm_Multi.n].D_down(Taylor_Thrm_Multi.D, Taylor_Thrm_Multi.p1, (matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1))) | booleans.AND(reals.>(t, 0), reals.<(t, 1))}].nth_derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (g_thm 0
  (g_thm-1 nil 3740470898
   ("" (skeep)
    (("" (typepred "f" "D")
      (("" (expand "derivable_n_times?")
        (("" (expand "derivable_n_times?")
          (("" (lemma "frech_diff_imp_init_partial")
            (("" (expand "derivable?" 1)
              (("" (skeep)
                (("" (expand "derivable?")
                  (("" (expand "NQ" 1)
                    (("" (expand "convergent?" 1)
                      (("" (inst -1 "p2-p1" "D" "f" "p1+x*(p2-p1)")
                        (("1" (flatten)
                          (("1" (case "p2 - p1 /= zero_vec(n)")
                            (("1" (assert)
                              (("1"
                                (hide -3)
                                (("1"
                                  (expand "differentiableD?")
                                  (("1"
                                    (inst -3 "p1 + x * (p2 - p1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "init_partial?" -2)
                                        (("1"
                                          (expand "derivable?" -2)
                                          (("1"
                                            (expand "NQ" -2)
                                            (("1"
                                              (expand "restrict" -2)
                                              (("1"
                                                (expand "convergent?")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst 2 "l")
                                                    (("1"
                                                      (expand
                                                       "convergence")
                                                      (("1"
                                                        (expand
                                                         "convergence")
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "adh")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (typepred
                                                                   "D")
                                                                  (("1"
                                                                    (expand
                                                                     "deriv_domain_all_direction?")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "p2-p1")
                                                                      (("1"
                                                                        (expand
                                                                         "deriv_domain_direction?"
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "min(e,1-x)/2"
                                                                           "p1+x*(p2-p1)")
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "delta")
                                                                              (("1"
                                                                                (expand
                                                                                 "fullset"
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "A"
                                                                                 1)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "D_down"
                                                                                     1)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "delta")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -3
                                                                                           -4
                                                                                           -5
                                                                                           -6
                                                                                           -7
                                                                                           -8
                                                                                           -9)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "x")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "D_down"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "delta")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "asso_add")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "dist_scalar")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "x"
                                                                                                         "delta"
                                                                                                         "p2-p1")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -2
                                                                                                             "p1"
                                                                                                             "x * (p2 - p1)"
                                                                                                             "delta * (p2 - p1)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "p1"
                                                                                                                 "p2"
                                                                                                                 "p2-p1"
                                                                                                                 "x*(p2-p1)")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "max"
                                                                                                                   -)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (typepred
                                                                                                               "delta*(p2-p1)"
                                                                                                               "p2-p1"
                                                                                                               "p2"
                                                                                                               "p1")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "max"
                                                                                                                 -)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (typepred
                                                                                                               "x*(p2-p1)"
                                                                                                               "p2-p1"
                                                                                                               "p2"
                                                                                                               "p1")
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (typepred
                                                                                                           "p2-p1"
                                                                                                           "p2"
                                                                                                           "p1")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (split)
                                                                            (("1"
                                                                              (hide
                                                                               -)
                                                                              (("1"
                                                                                (hide
                                                                                 2
                                                                                 3)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "p2-p1"
                                                                         "p2"
                                                                         "p1")
                                                                        (("2"
                                                                          (hide
                                                                           -1
                                                                           -3
                                                                           -5)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               -4
                                                                               -5
                                                                               -6
                                                                               -7
                                                                               -8
                                                                               -9)
                                                                              (("2"
                                                                                (hide
                                                                                 2
                                                                                 3)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "epsilon")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "delta")
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (inst
                                                                         -4
                                                                         "x2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "mult_zero")
                                                                            (("1"
                                                                              (lemma
                                                                               "dist_scalar")
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "p2-p1")
                                                                                (("1"
                                                                                  (typepred
                                                                                   "p2-p1"
                                                                                   "p2"
                                                                                   "p1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "max"
                                                                                     -)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -4
                                                                                       -2)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1
                                                                                         -3
                                                                                         -4
                                                                                         -5)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           -4)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -4
                                                                                             -8)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1
                                                                                               -2)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "zero_id")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "p1 + x * (p2 - p1)")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "p1 + x * (p2 - p1)"
                                                                                                     "p1"
                                                                                                     "x * (p2 - p1)"
                                                                                                     "p2-p1"
                                                                                                     "p2"
                                                                                                     "p1")
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1
                                                                                                       -3
                                                                                                       -5
                                                                                                       -7
                                                                                                       -9)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "max"
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               -8)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -8
                                                                                                                 -14)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   -2
                                                                                                                   -3
                                                                                                                   -4
                                                                                                                   -5
                                                                                                                   -6
                                                                                                                   -7
                                                                                                                   -8)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "x"
                                                                                                                     "x2"
                                                                                                                     "p2-p1")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "asso_add")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "p1"
                                                                                                                             "x * (p2 - p1)"
                                                                                                                             "x2 * (p2 - p1)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "p2-p1"
                                                                                   "p2"
                                                                                   "p1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "max"
                                                                                     -)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "A"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "D_down"
                                                                             1)
                                                                            (("2"
                                                                              (typepred
                                                                               "x2")
                                                                              (("2"
                                                                                (expand
                                                                                 "A"
                                                                                 -2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "D_down"
                                                                                   -2)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "dist_scalar")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "x"
                                                                                           "x2"
                                                                                           "p2-p1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               -2)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "asso_add")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "p1"
                                                                                                   "x * (p2 - p1)"
                                                                                                   "x2 * (p2 - p1)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "p1"
                                                                                                       "p2"
                                                                                                       "p2-p1"
                                                                                                       "x*(p2-p1)")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "max"
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (typepred
                                                                                                     "x2*(p2-p1)"
                                                                                                     "p2-p1"
                                                                                                     "p2"
                                                                                                     "p1")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "max"
                                                                                                       -)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (typepred
                                                                                                     "x*(p2-p1)"
                                                                                                     "p2"
                                                                                                     "p1"
                                                                                                     "p2-p1")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "max"
                                                                                                       -)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "p1"
                                                                                             "p2"
                                                                                             "p2-p1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "max"
                                                                                               -)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (typepred
                                         "p1 + x * (p2 - p1)"
                                         "x * (p2 - p1)"
                                         "p2-p1"
                                         "p2"
                                         "p1")
                                        (("2"
                                          (expand "max" -)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide -)
                                              (("2"
                                                (typepred "x")
                                                (("2"
                                                  (expand "D_down" -1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide -1)
                                (("2"
                                  (case "NOT p2-p1 = zero_vec(n)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (replace -1 2)
                                    (("2"
                                      (inst 2 "0")
                                      (("2"
                                        (expand "convergence" 2)
                                        (("2"
                                          (expand "convergence" 2)
                                          (("2"
                                            (split)
                                            (("1"
                                              (expand "adh" 1)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst
                                                   1
                                                   "min(e,1-x)/2")
                                                  (("1"
                                                    (expand
                                                     "fullset"
                                                     1)
                                                    (("1"
                                                      (hide -)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (expand "A")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (expand
                                                             "D_down"
                                                             1)
                                                            (("1"
                                                              (case
                                                               "NOT p2-p1 = zero_vec(n)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "scal_zero")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "(min(e, 1 - x) / 2 + x)"
                                                                     "n")
                                                                    (("2"
                                                                      (lemma
                                                                       "zero_id")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "p1")
                                                                        (("2"
                                                                          (replace
                                                                           -2
                                                                           1)
                                                                          (("2"
                                                                            (typepred
                                                                             "p1")
                                                                            (("2"
                                                                              (replace
                                                                               -2
                                                                               -3)
                                                                              (("2"
                                                                                (replace
                                                                                 -3
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (inst 1 "1")
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (hide -)
                                                    (("2"
                                                      (lemma
                                                       "scal_zero")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "x2+x"
                                                         "n")
                                                        (("2"
                                                          (lemma
                                                           "scal_zero")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "x"
                                                             "n")
                                                            (("2"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("2"
                                                                (replace
                                                                 -2
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (typepred "p1 + x * (p2 - p1)" "p1"
                           "x * (p2 - p1)" "p2-p1" "p1" "p2")
                          (("2" (expand "max" -)
                            (("2" (assert)
                              (("2"
                                (hide -)
                                (("2"
                                  (typepred "x")
                                  (("2"
                                    (expand "D_down" -1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "deriv_domain_all_direction?" -2)
                          (("3" (inst -2 "p2-p1")
                            (("3" (hide 2)
                              (("3"
                                (expand "deriv_domain_direction?" -2)
                                (("3"
                                  (hide -1 -2 -3)
                                  (("3"
                                    (typepred "p2-p1" "p2" "p1")
                                    (("3"
                                      (typepred "D")
                                      (("3"
                                        (lemma
                                         "dd_direction_implies_dd_partial")
                                        (("3"
                                          (inst?)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (typepred "p2-p1" "p2" "p1")
                          (("4" (replace -4)
                            (("4" (replace -6)
                              (("4"
                                (expand "max" -2)
                                (("4" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (dd_direction_implies_dd_partial formula-decl nil
     derivative_domain_multi nil)
    (abs_0 formula-decl nil abs_lems reals)
    (e skolem-const-decl "posreal" Taylor_Thrm_Multi nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (restrict const-decl "R" restrict nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" Taylor_Thrm_Multi nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (delta skolem-const-decl
     "{delta: posreal | D(p1 + x * (p2 - p1) + delta * (p2 - p1))}"
     Taylor_Thrm_Multi nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fullset const-decl "set" sets nil)
    (dist_scalar formula-decl nil vector_arithmetic nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (x2 skolem-const-decl "(A(x))" Taylor_Thrm_Multi nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (x skolem-const-decl
     "{t: (D_down(D, p1, p2 - p1)) | t > 0 AND t < 1}"
     Taylor_Thrm_Multi nil)
    (< const-decl "bool" reals nil)
    (D_down const-decl "bool" init_partial_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (D skolem-const-decl "{DD: (deriv_domain_all_direction?) | DD(p1)}"
     Taylor_Thrm_Multi nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (p1 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (p2 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (NQ const-decl "real" derivatives_def analysis)
    (frech_diff_imp_init_partial formula-decl nil init_partial_def nil)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (g_thm_connect_TCC1 0
  (g_thm_connect_TCC1-1 nil 3741690640
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_directionv_implies_dd")
        (("" (inst?)
          (("" (assert)
            (("" (expand "deriv_domain_all_direction?" -2)
              (("" (inst 1 "e(n,0)")
                (("1" (inst -2 "e(n,0)") nil nil)
                 ("2" (lemma "e_not_zero") (("2" (inst?) nil nil)) nil)
                 ("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (e_not_zero formula-decl nil vector_arithmetic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dd_directionv_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm_connect subtype "Taylor_Thrm_Multi.D"
    "(derivative_domain_multi[Taylor_Thrm_Multi.n].deriv_domain?)")))
 (g_thm_connect_TCC2 0
  (g_thm_connect_TCC2-1 nil 3741690640
   ("" (skeep)
    (("" (typepred "p1 + t * (p2 - p1)" "p1" "p2" "p2-p1" "t*(p2-p1)")
      (("" (grind) nil nil)) nil))
    nil)
   ((- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (D_down const-decl "bool" init_partial_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm_connect subtype
    "(matrices.+)(Taylor_Thrm_Multi.p1, matrices.*(Taylor_Thrm_Multi.t, ((matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1))))"
    "matrices.VectorN(Taylor_Thrm_Multi.n)")))
 (g_thm_connect_TCC3 0
  (g_thm_connect_TCC3-1 nil 3741690640
   ("" (lemma "D_down_domain")
    (("" (skeep)
      (("" (inst -1 "p2-p1" "D" "p1")
        (("1" (typepred "D")
          (("1" (assert)
            (("1" (expand "domain_connect?" -1)
              (("1" (inst -1 "0")
                (("1" (assert)
                  (("1" (lemma "mult_zero")
                    (("1" (inst -1 "p2-p1")
                      (("1" (replace -1)
                        (("1" (lemma "zero_id")
                          (("1" (inst -1 "p1") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (lemma "mult_zero")
                          (("2" (typepred "p2-p1" "p1" "p2")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "p2-p1" "p2" "p1") (("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (<= const-decl "bool" reals nil)
    (D skolem-const-decl
     "({DD: (domain_connect?[n](p1, p2)) | deriv_domain_all_direction?[n](DD)})"
     Taylor_Thrm_Multi nil)
    (p2 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (p1 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (D_down_domain formula-decl nil init_partial_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil))
   nil
   (g_thm_connect assuming
    "analysis@nth_derivatives[(init_partial_def[Taylor_Thrm_Multi.n].D_down(Taylor_Thrm_Multi.D, Taylor_Thrm_Multi.p1, (matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1)))].nth_derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (g_thm_connect_TCC4 0
  (g_thm_connect_TCC4-1 nil 3789833405
   ("" (skeep)
    (("" (lemma "D_down_not_one")
      (("" (inst -1 "p2-p1" "D" "p1")
        (("1" (typepred "D")
          (("1" (expand "domain_connect?" -1)
            (("1" (inst -1 "0")
              (("1" (lemma "mult_zero")
                (("1" (lemma "zero_id")
                  (("1" (inst -2 "p2-p1")
                    (("1" (assert)
                      (("1" (replace -2)
                        (("1" (inst -1 "p1") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "p2-p1" "p1" "p2")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "p2-p1" "p1" "p2") (("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (D_down_not_one formula-decl nil init_partial_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (/= const-decl "boolean" notequal nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (D skolem-const-decl
     "({DD: (domain_connect?[n](p1, p2)) | deriv_domain_all_direction?[n](DD)})"
     Taylor_Thrm_Multi nil)
    (p2 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (p1 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm_connect assuming
    "analysis@nth_derivatives[(init_partial_def[Taylor_Thrm_Multi.n].D_down(Taylor_Thrm_Multi.D, Taylor_Thrm_Multi.p1, (matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1)))].nth_derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (g_thm_connect 0
  (g_thm_connect-1 nil 3741691556
   ("" (skeep)
    (("" (typepred "f" "D")
      (("" (expand "derivable_n_times?")
        (("" (expand "derivable_n_times?")
          (("" (expand "derivable?" 1)
            (("" (skeep)
              (("" (expand "derivable?")
                (("" (expand "NQ" 1)
                  (("" (expand "convergent?" 1)
                    (("" (lemma "frech_diff_imp_init_partial")
                      (("" (inst -1 "p2-p1" "D" "f" "p1+x*(p2-p1)")
                        (("1" (flatten)
                          (("1" (case "p2 - p1 /= zero_vec(n)")
                            (("1" (assert)
                              (("1"
                                (hide -3)
                                (("1"
                                  (expand "differentiableD?")
                                  (("1"
                                    (inst -3 "p1 + x * (p2 - p1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "init_partial?" -2)
                                        (("1"
                                          (expand "derivable?" -2)
                                          (("1"
                                            (expand "NQ" -2)
                                            (("1"
                                              (expand "restrict" -2)
                                              (("1"
                                                (expand "convergent?")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst 2 "l")
                                                    (("1"
                                                      (expand
                                                       "convergence")
                                                      (("1"
                                                        (expand
                                                         "convergence")
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "adh")
                                                              (("1"
                                                                (case
                                                                 "x=1")
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "-min(e/2,1/2)")
                                                                    (("1"
                                                                      (expand
                                                                       "fullset"
                                                                       1)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "A"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "D_down"
                                                                         1)
                                                                        (("2"
                                                                          (typepred
                                                                           "D")
                                                                          (("2"
                                                                            (expand
                                                                             "domain_connect?"
                                                                             -1)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "(-min(e / 2, 1/2) + x)")
                                                                              (("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (hide
                                                                                   2
                                                                                   3)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1
                                                                                     -3
                                                                                     -4
                                                                                     -5
                                                                                     -6
                                                                                     -7)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "min")
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -3
                                                                                   -4
                                                                                   -5
                                                                                   -6
                                                                                   -7
                                                                                   2
                                                                                   3)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "min"
                                                                                     1)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (split
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "min(e,abs(1-x))/2")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst
                                                                         2
                                                                         "x_1")
                                                                        (("1"
                                                                          (expand
                                                                           "fullset")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "A")
                                                                          (("2"
                                                                            (expand
                                                                             "D_down")
                                                                            (("2"
                                                                              (typepred
                                                                               "x_1")
                                                                              (("2"
                                                                                (expand
                                                                                 "A"
                                                                                 -2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "D_down"
                                                                                   -2)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1
                                                                                     -3
                                                                                     -4
                                                                                     -5
                                                                                     -6
                                                                                     -7
                                                                                     -8)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "dist_scalar")
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "asso_add")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -2
                                                                                           "x"
                                                                                           "x_1"
                                                                                           "p2-p1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2
                                                                                               1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "p1"
                                                                                                 "x * (p2 - p1)"
                                                                                                 "x_1 * (p2 - p1)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "p1"
                                                                                                     "p2"
                                                                                                     "(p2-p1)"
                                                                                                     "x * (p2 - p1)")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "max"
                                                                                                       -)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (typepred
                                                                                                   "x_1 * (p2 - p1)"
                                                                                                   "p2-p1"
                                                                                                   "p2"
                                                                                                   "p1")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "max"
                                                                                                     -)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (typepred
                                                                                                   "x * (p2 - p1)"
                                                                                                   "p2-p1"
                                                                                                   "p2"
                                                                                                   "p1")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "max"
                                                                                                     -)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "p1"
                                                                                             "p2"
                                                                                             "p2-p1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "max"
                                                                                               -)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "min"
                                                                       1)
                                                                      (("2"
                                                                        (lift-if
                                                                         1)
                                                                        (("2"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "epsilon")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "delta")
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (inst
                                                                         -4
                                                                         "x2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "mult_zero")
                                                                            (("1"
                                                                              (lemma
                                                                               "dist_scalar")
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "p2-p1")
                                                                                (("1"
                                                                                  (typepred
                                                                                   "p2-p1"
                                                                                   "p2"
                                                                                   "p1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "max"
                                                                                     -)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -4
                                                                                       -2)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1
                                                                                         -3
                                                                                         -4
                                                                                         -5)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           -4)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -4
                                                                                             -8)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1
                                                                                               -2)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "zero_id")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "p1 + x * (p2 - p1)")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "p1 + x * (p2 - p1)"
                                                                                                     "p1"
                                                                                                     "x * (p2 - p1)"
                                                                                                     "p2-p1"
                                                                                                     "p2"
                                                                                                     "p1")
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1
                                                                                                       -3
                                                                                                       -5
                                                                                                       -7
                                                                                                       -9)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "max"
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               -8)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -8
                                                                                                                 -14)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   -2
                                                                                                                   -3
                                                                                                                   -4
                                                                                                                   -5
                                                                                                                   -6
                                                                                                                   -7
                                                                                                                   -8)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "x"
                                                                                                                     "x2"
                                                                                                                     "p2-p1")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "asso_add")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "p1"
                                                                                                                             "x * (p2 - p1)"
                                                                                                                             "x2 * (p2 - p1)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "p2-p1"
                                                                                   "p2"
                                                                                   "p1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "max"
                                                                                     -)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "A"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "D_down"
                                                                             1)
                                                                            (("2"
                                                                              (typepred
                                                                               "x2")
                                                                              (("2"
                                                                                (expand
                                                                                 "A"
                                                                                 -2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "D_down"
                                                                                   -2)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "dist_scalar")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "x"
                                                                                           "x2"
                                                                                           "p2-p1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               -2)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "asso_add")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "p1"
                                                                                                   "x * (p2 - p1)"
                                                                                                   "x2 * (p2 - p1)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "p1"
                                                                                                       "p2"
                                                                                                       "p2-p1"
                                                                                                       "x*(p2-p1)")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "max"
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (typepred
                                                                                                     "x2*(p2-p1)"
                                                                                                     "p2-p1"
                                                                                                     "p2"
                                                                                                     "p1")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "max"
                                                                                                       -)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (typepred
                                                                                                     "x*(p2-p1)"
                                                                                                     "p2"
                                                                                                     "p1"
                                                                                                     "p2-p1")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "max"
                                                                                                       -)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "p1"
                                                                                             "p2"
                                                                                             "p2-p1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "max"
                                                                                               -)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (typepred
                                         "p1 + x * (p2 - p1)"
                                         "x * (p2 - p1)"
                                         "p2-p1"
                                         "p2"
                                         "p1")
                                        (("2"
                                          (expand "max" -)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide -)
                                              (("2"
                                                (typepred "x")
                                                (("2"
                                                  (expand "D_down" -1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide -1)
                                (("2"
                                  (case "NOT p2-p1 = zero_vec(n)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (replace -1 2)
                                    (("2"
                                      (inst 2 "0")
                                      (("2"
                                        (expand "convergence" 2)
                                        (("2"
                                          (expand "convergence" 2)
                                          (("2"
                                            (split)
                                            (("1"
                                              (expand "adh" 1)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (case "x=1")
                                                  (("1"
                                                    (inst
                                                     1
                                                     "-min(e/2,1/2)")
                                                    (("1"
                                                      (expand
                                                       "fullset"
                                                       1)
                                                      (("1"
                                                        (hide
                                                         -2
                                                         -3
                                                         -4
                                                         -5
                                                         -6
                                                         -7)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "A" 1)
                                                      (("2"
                                                        (typepred "D")
                                                        (("2"
                                                          (expand
                                                           "domain_connect?"
                                                           -1)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "-min(e / 2, 1/2) + x")
                                                            (("1"
                                                              (expand
                                                               "D_down"
                                                               1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (split)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "min"
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lift-if
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "deriv_domain_all_direction?"
                                                     -6)
                                                    (("2"
                                                      (inst -6 "p2-p1")
                                                      (("2"
                                                        (expand
                                                         "deriv_domain_direction?"
                                                         -6)
                                                        (("2"
                                                          (inst
                                                           -6
                                                           "min(e,abs(1-x))/2"
                                                           "p1+x*(p2-p1)")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               2
                                                               "delta")
                                                              (("1"
                                                                (expand
                                                                 "fullset"
                                                                 2)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "A"
                                                                 1)
                                                                (("2"
                                                                  (typepred
                                                                   "delta")
                                                                  (("2"
                                                                    (expand
                                                                     "D_down"
                                                                     1)
                                                                    (("2"
                                                                      (lemma
                                                                       "dist_scalar")
                                                                      (("2"
                                                                        (lemma
                                                                         "asso_add")
                                                                        (("2"
                                                                          (inst
                                                                           -2
                                                                           "x"
                                                                           "delta"
                                                                           "p2-p1")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "p1"
                                                                             "x * (p2 - p1)"
                                                                             "delta * (p2 - p1)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "delta * (p2 - p1)")
                                                                              (("2"
                                                                                (typepred
                                                                                 "p2-p1"
                                                                                 "p1"
                                                                                 "p2")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "min"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lift-if
                                                                 1)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (inst 1 "1")
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (hide -)
                                                    (("2"
                                                      (lemma
                                                       "scal_zero")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "x2+x"
                                                         "n")
                                                        (("2"
                                                          (lemma
                                                           "scal_zero")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "x"
                                                             "n")
                                                            (("2"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("2"
                                                                (replace
                                                                 -2
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (typepred "p1 + x * (p2 - p1)" "p1"
                           "x * (p2 - p1)" "p2-p1" "p1" "p2")
                          (("2" (expand "max" -)
                            (("2" (assert)
                              (("2"
                                (hide -)
                                (("2"
                                  (typepred "x")
                                  (("2"
                                    (expand "D_down" -1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "deriv_domain_all_direction?" -3)
                          (("3" (inst -3 "p2-p1")
                            (("3" (expand "deriv_domain_direction?")
                              (("3"
                                (typepred "p2-p1" "p2" "p1")
                                (("3"
                                  (assert)
                                  (("3"
                                    (expand "max" -)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (typepred "D")
                                        (("3"
                                          (lemma
                                           "dd_direction_implies_dd_partial")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (inst -1 "D" "p2-p1")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (typepred "p2-p1" "p2" "p1")
                          (("4" (assert)
                            (("4" (expand "max" -)
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (NQ const-decl "real" derivatives_def analysis)
    (frech_diff_imp_init_partial formula-decl nil init_partial_def nil)
    (dd_direction_implies_dd_partial formula-decl nil
     derivative_domain_multi nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (abs_0 formula-decl nil abs_lems reals)
    (e skolem-const-decl "posreal" Taylor_Thrm_Multi nil)
    (delta skolem-const-decl
     "{delta: posreal | D(p1 + x * (p2 - p1) + delta * (p2 - p1))}"
     Taylor_Thrm_Multi nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (restrict const-decl "R" restrict nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (dist_scalar formula-decl nil vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (x_1 skolem-const-decl "(A(0))" Taylor_Thrm_Multi nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (e skolem-const-decl "posreal" Taylor_Thrm_Multi nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (fullset const-decl "set" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (e skolem-const-decl "posreal" Taylor_Thrm_Multi nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (x2 skolem-const-decl "(A(x))" Taylor_Thrm_Multi nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (x skolem-const-decl "(D_down(D, p1, p2 - p1))" Taylor_Thrm_Multi
     nil)
    (D_down const-decl "bool" init_partial_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (D skolem-const-decl
     "({DD: (domain_connect?(p1, p2)) | deriv_domain_all_direction?(DD)})"
     Taylor_Thrm_Multi nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (p1 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (p2 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (g_thm_connect_unit_TCC1 0
  (g_thm_connect_unit_TCC1-1 nil 3741706241
   ("" (lemma "D_down_domain_unitc")
    (("" (skeep)
      (("" (inst -1 "p2-p1" "D" "p1")
        (("1" (lemma "d_con_ends")
          (("1" (inst -1 "p1" "p2" "D") (("1" (assert) nil nil)) nil))
          nil)
         ("2" (typepred "p2-p1" "p2" "p1")
          (("2" (expand "max" -) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (d_con_ends formula-decl nil derivative_domain_multi nil)
    (D skolem-const-decl
     "({DD: (domain_connect?[n](p1, p2)) | deriv_domain_all_direction?[n](DD)})"
     Taylor_Thrm_Multi nil)
    (p2 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (p1 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (D_down_domain_unitc formula-decl nil init_partial_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil))
   nil
   (g_thm_connect_unit assuming
    "analysis@nth_derivatives[{tt: (init_partial_def[Taylor_Thrm_Multi.n].D_down(Taylor_Thrm_Multi.D, Taylor_Thrm_Multi.p1, (matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1))) | booleans.AND(reals.>=(tt, 0), reals.<=(tt, 1))}].nth_derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (g_thm_connect_unit_TCC2 0
  (g_thm_connect_unit_TCC2-1 nil 3741706241
   ("" (skeep)
    (("" (lemma "D_down_not_one_unitc")
      (("" (inst -1 "p2-p1" "D" "p1")
        (("1" (lemma "d_con_ends")
          (("1" (inst -1 "p1" "p2" "D") (("1" (assert) nil nil)) nil))
          nil)
         ("2" (typepred "p2-p1" "p2" "p1")
          (("2" (expand "max" -) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (D_down_not_one_unitc formula-decl nil init_partial_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (d_con_ends formula-decl nil derivative_domain_multi nil)
    (D skolem-const-decl
     "({DD: (domain_connect?[n](p1, p2)) | deriv_domain_all_direction?[n](DD)})"
     Taylor_Thrm_Multi nil)
    (p2 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (p1 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm_connect_unit assuming
    "analysis@nth_derivatives[{tt: (init_partial_def[Taylor_Thrm_Multi.n].D_down(Taylor_Thrm_Multi.D, Taylor_Thrm_Multi.p1, (matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1))) | booleans.AND(reals.>=(tt, 0), reals.<=(tt, 1))}].nth_derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (g_thm_connect_unit 0
  (g_thm_connect_unit-1 nil 3741710018
   ("" (skeep)
    (("" (typepred "f" "D")
      (("" (expand "derivable_n_times?")
        (("" (expand "derivable_n_times?")
          (("" (lemma "frech_diff_imp_init_partial")
            (("" (expand "derivable?" 1)
              (("" (skeep)
                (("" (expand "derivable?")
                  (("" (expand "NQ" 1)
                    (("" (expand "convergent?" 1)
                      (("" (inst -1 "p2-p1" "D" "f" "p1+x*(p2-p1)")
                        (("1" (flatten)
                          (("1" (case "p2 - p1 /= zero_vec(n)")
                            (("1" (assert)
                              (("1"
                                (hide -3)
                                (("1"
                                  (expand "differentiableD?")
                                  (("1"
                                    (inst -3 "p1 + x * (p2 - p1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "init_partial?" -2)
                                        (("1"
                                          (expand "derivable?" -2)
                                          (("1"
                                            (expand "NQ" -2)
                                            (("1"
                                              (expand "restrict" -2)
                                              (("1"
                                                (expand "convergent?")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst 2 "l")
                                                    (("1"
                                                      (expand
                                                       "convergence")
                                                      (("1"
                                                        (expand
                                                         "convergence")
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "adh")
                                                              (("1"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 -4
                                                                 -5
                                                                 2)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (case
                                                                     "x=1")
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "-min(e/2,1/2)")
                                                                      (("1"
                                                                        (expand
                                                                         "fullset"
                                                                         1)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "A"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "D_down"
                                                                           1)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (typepred
                                                                               "D")
                                                                              (("1"
                                                                                (expand
                                                                                 "domain_connect?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "(-min(e / 2, 1/2) + x)")
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2
                                                                                       3)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1
                                                                                         -3
                                                                                         -4
                                                                                         -5
                                                                                         -6
                                                                                         -7)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "min")
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       -1
                                                                                       -3
                                                                                       -4
                                                                                       -5
                                                                                       -6
                                                                                       -7
                                                                                       2
                                                                                       3)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "min"
                                                                                         1)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "min"
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (expand
                                                                               "min"
                                                                               1)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "x=0")
                                                                      (("1"
                                                                        (inst
                                                                         2
                                                                         "min(1/2,e/2)")
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (expand
                                                                             "fullset"
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               -2)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "A"
                                                                           1)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (expand
                                                                               "D_down"
                                                                               1)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "D")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "domain_connect?")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "min(1/2, e / 2)")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (replace
                                                                               -1
                                                                               1)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (inst
                                                                           3
                                                                           "min(e,min(1-x,x))/2")
                                                                          (("1"
                                                                            (expand
                                                                             "fullset"
                                                                             3)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (split)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "A"
                                                                               1)
                                                                              (("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "D")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "D_down"
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "domain_connect?"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "(min(e, min(1 - x, x)) / 2 + x)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "x")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -4
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("3"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "epsilon")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "delta")
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (inst
                                                                         -4
                                                                         "x2")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "mult_zero")
                                                                            (("1"
                                                                              (lemma
                                                                               "dist_scalar")
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "p2-p1")
                                                                                (("1"
                                                                                  (typepred
                                                                                   "p2-p1"
                                                                                   "p2"
                                                                                   "p1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "max"
                                                                                     -)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -4
                                                                                       -2)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1
                                                                                         -3
                                                                                         -4
                                                                                         -5)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           -4)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -4
                                                                                             -8)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1
                                                                                               -2)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "zero_id")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "p1 + x * (p2 - p1)")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "p1 + x * (p2 - p1)"
                                                                                                     "p1"
                                                                                                     "x * (p2 - p1)"
                                                                                                     "p2-p1"
                                                                                                     "p2"
                                                                                                     "p1")
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1
                                                                                                       -3
                                                                                                       -5
                                                                                                       -7
                                                                                                       -9)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "max"
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               -8)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -8
                                                                                                                 -14)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   -2
                                                                                                                   -3
                                                                                                                   -4
                                                                                                                   -5
                                                                                                                   -6
                                                                                                                   -7
                                                                                                                   -8)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "x"
                                                                                                                     "x2"
                                                                                                                     "p2-p1")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "asso_add")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "p1"
                                                                                                                             "x * (p2 - p1)"
                                                                                                                             "x2 * (p2 - p1)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "p2-p1"
                                                                                   "p2"
                                                                                   "p1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "max"
                                                                                     -)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "A"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "D_down"
                                                                             1)
                                                                            (("2"
                                                                              (typepred
                                                                               "x2")
                                                                              (("2"
                                                                                (expand
                                                                                 "A"
                                                                                 -2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "D_down"
                                                                                   -2)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "dist_scalar")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "x"
                                                                                           "x2"
                                                                                           "p2-p1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               -2)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "asso_add")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "p1"
                                                                                                   "x * (p2 - p1)"
                                                                                                   "x2 * (p2 - p1)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "p1"
                                                                                                       "p2"
                                                                                                       "p2-p1"
                                                                                                       "x*(p2-p1)")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "max"
                                                                                                         -)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (typepred
                                                                                                     "x2*(p2-p1)"
                                                                                                     "p2-p1"
                                                                                                     "p2"
                                                                                                     "p1")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "max"
                                                                                                       -)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (typepred
                                                                                                     "x*(p2-p1)"
                                                                                                     "p2"
                                                                                                     "p1"
                                                                                                     "p2-p1")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "max"
                                                                                                       -)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "p1"
                                                                                             "p2"
                                                                                             "p2-p1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "max"
                                                                                               -)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (typepred
                                         "p1 + x * (p2 - p1)"
                                         "x * (p2 - p1)"
                                         "p2-p1"
                                         "p2"
                                         "p1")
                                        (("2"
                                          (expand "max" -)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide -)
                                              (("2"
                                                (typepred "x")
                                                (("2"
                                                  (expand "D_down" -1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide -1)
                                (("2"
                                  (case "NOT p2-p1 = zero_vec(n)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (replace -1 2)
                                    (("2"
                                      (inst 2 "0")
                                      (("2"
                                        (expand "convergence" 2)
                                        (("2"
                                          (expand "convergence" 2)
                                          (("2"
                                            (split)
                                            (("1"
                                              (expand "adh" 1)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (case "x=1")
                                                  (("1"
                                                    (inst
                                                     1
                                                     "-min(e/2,1/2)")
                                                    (("1"
                                                      (expand
                                                       "fullset"
                                                       1)
                                                      (("1"
                                                        (hide
                                                         -2
                                                         -3
                                                         -4
                                                         -5
                                                         -6
                                                         -7)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "A" 1)
                                                      (("2"
                                                        (typepred "D")
                                                        (("2"
                                                          (expand
                                                           "domain_connect?"
                                                           -1)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "-min(e / 2, 1/2) + x")
                                                            (("1"
                                                              (expand
                                                               "D_down"
                                                               1)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (expand
                                                                   "min"
                                                                   1)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (lift-if
                                                                       1)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   -5
                                                                   -6
                                                                   -7
                                                                   -8)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case "x=0")
                                                    (("1"
                                                      (inst
                                                       2
                                                       "min(e,1)/2")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (hide
                                                           -4
                                                           -5
                                                           -6
                                                           -7)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -5 -6 -7)
                                                        (("2"
                                                          (expand "A")
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (typepred
                                                               "D")
                                                              (("1"
                                                                (expand
                                                                 "domain_connect?"
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "D_down"
                                                                   1)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "(min(e, 1) / 2 + x)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (hide
                                                               -2
                                                               -3
                                                               -4)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       3
                                                       "min(e,min(1-x,x))/2")
                                                      (("1"
                                                        (expand
                                                         "fullset"
                                                         3)
                                                        (("1"
                                                          (hide
                                                           -3
                                                           -4
                                                           -5
                                                           -6)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (split)
                                                        (("1"
                                                          (hide
                                                           -4
                                                           -5
                                                           -6)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "A"
                                                           1)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (typepred
                                                               "D")
                                                              (("1"
                                                                (expand
                                                                 "domain_connect?"
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "D_down"
                                                                   1)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "(min(e, min(1 - x, x)) / 2 + x)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -4
                                                                         -5
                                                                         -6
                                                                         -7)
                                                                        (("1"
                                                                          (hide
                                                                           2)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -4
                                                               -5
                                                               -6)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide
                                                               -4
                                                               -5
                                                               -6)
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (inst 1 "1")
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (hide -)
                                                    (("2"
                                                      (lemma
                                                       "scal_zero")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "x2+x"
                                                         "n")
                                                        (("2"
                                                          (lemma
                                                           "scal_zero")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "x"
                                                             "n")
                                                            (("2"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("2"
                                                                (replace
                                                                 -2
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (typepred "p1 + x * (p2 - p1)" "p1"
                           "x * (p2 - p1)" "p2-p1" "p1" "p2")
                          (("2" (expand "max" -)
                            (("2" (assert)
                              (("2"
                                (hide -)
                                (("2"
                                  (typepred "x")
                                  (("2"
                                    (expand "D_down" -1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "deriv_domain_all_direction?" -3)
                          (("3" (inst -3 "p2-p1")
                            (("3" (expand "deriv_domain_direction?")
                              (("3"
                                (typepred "p2-p1" "p2" "p1")
                                (("3"
                                  (assert)
                                  (("3"
                                    (expand "max" -)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (lemma
                                         "dd_direction_implies_dd_partial")
                                        (("3"
                                          (inst -1 "D" "p2-p1")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (typepred "p2-p1" "p2" "p1")
                          (("4" (assert)
                            (("4" (expand "max" -)
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (dd_direction_implies_dd_partial formula-decl nil
     derivative_domain_multi nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (abs_0 formula-decl nil abs_lems reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (e skolem-const-decl "posreal" Taylor_Thrm_Multi nil)
    (l!1 skolem-const-decl "real" Taylor_Thrm_Multi nil)
    (l!1 skolem-const-decl "real" Taylor_Thrm_Multi nil)
    (l!1 skolem-const-decl "real" Taylor_Thrm_Multi nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "real" differentiable_def nil)
    (* const-decl "real" matrices matrices)
    (dot def-decl "real" matrices matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (restrict const-decl "R" restrict nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" Taylor_Thrm_Multi nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fullset const-decl "set" sets nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dist_scalar formula-decl nil vector_arithmetic nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (x2 skolem-const-decl "(A(x))" Taylor_Thrm_Multi nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (x skolem-const-decl
     "{tt: (D_down(D, p1, p2 - p1)) | tt >= 0 AND tt <= 1}"
     Taylor_Thrm_Multi nil)
    (<= const-decl "bool" reals nil)
    (D_down const-decl "bool" init_partial_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (D skolem-const-decl
     "({DD: (domain_connect?(p1, p2)) | deriv_domain_all_direction?(DD)})"
     Taylor_Thrm_Multi nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (p1 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (p2 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (NQ const-decl "real" derivatives_def analysis)
    (frech_diff_imp_init_partial formula-decl nil init_partial_def nil)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (g_thm_dif_TCC1 0
  (g_thm_dif_TCC1-1 nil 3741617696
   ("" (lemma "g_thm") (("" (propax) nil nil)) nil)
   ((g_thm formula-decl nil Taylor_Thrm_Multi nil)) nil
   (g_thm_dif subtype
    "(LAMBDA (t: {tt: (init_partial_def[Taylor_Thrm_Multi.n].D_down(Taylor_Thrm_Multi.D, Taylor_Thrm_Multi.p1, (matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1))) | booleans.AND(reals.>(tt, 0), reals.<(tt, 1))}): Taylor_Thrm_Multi.f((matrices.+)(Taylor_Thrm_Multi.p1, matrices.*(t, ((matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1))))))"
    "nth_derivatives[{t: (init_partial_def[Taylor_Thrm_Multi.n].D_down(Taylor_Thrm_Multi.D, Taylor_Thrm_Multi.p1, (matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1))) | booleans.AND(reals.>(t, 0), reals.<(t, 1))}].nderiv_fun(1)")))
 (g_thm_dif_TCC2 0
  (g_thm_dif_TCC2-1 nil 3741617696
   ("" (skeep)
    (("" (split 1)
      (("1" (typepred "p1 + t*(p2-p1)" "p1" "p2" "p2-p1" "t*(p2-p1)")
        (("1" (grind) nil nil)) nil)
       ("2" (typepred "D")
        (("2" (typepred "t")
          (("2" (expand "D_down" -1) (("2" (propax) nil nil)) nil))
          nil))
        nil)
       ("3" (assert)
        (("3" (typepred "f")
          (("3" (lemma "frech_diff_imp_init_partial")
            (("3" (inst -1 "p2-p1" "D" "f" "p1+ t* (p2-p1)")
              (("3" (assert)
                (("3" (flatten)
                  (("3" (assert)
                    (("3" (expand "differentiableD?")
                      (("3" (inst -1 "p1+ t * (p2 - p1)") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (D_down const-decl "bool" init_partial_def nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (< const-decl "bool" reals nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (frech_diff_imp_init_partial formula-decl nil init_partial_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm_dif subtype
    "(matrices.+)(Taylor_Thrm_Multi.p1, matrices.*(Taylor_Thrm_Multi.t, ((matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1))))"
    "(init_partial_def[Taylor_Thrm_Multi.n].init_partial?((matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1), Taylor_Thrm_Multi.D, Taylor_Thrm_Multi.f))")))
 (g_thm_dif_TCC3 0
  (g_thm_dif_TCC3-1 nil 3741617696
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_direction_implies_dd_partial")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (dd_direction_implies_dd_partial formula-decl nil
     derivative_domain_multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm_dif subtype "Taylor_Thrm_Multi.D"
    "(derivative_domain_multi[Taylor_Thrm_Multi.n].deriv_domain_partial?((matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1)))")))
 (g_thm_dif 0
  (g_thm_dif-2 nil 3741625879
   ("" (skeep)
    (("" (expand "nderiv" 1)
      (("" (expand "nderiv" 1)
        (("" (expand "deriv" 1)
          (("" (with-tccs (decompose-equality 1))
            (("" (expand "deriv" 1)
              (("" (expand "init_partial")
                (("" (expand "deriv" 1)
                  (("" (expand "NQ" 1)
                    ((""
                      (lemma "lim_fun_def[(analysis@derivatives_def
                                    [{t:
                                        (init_partial_def[n].D_down
                                             (D, p1, (matrices@matrices.-)(p2, p1))) |
                                              t > 0 AND t < 1}].A
                                    (x!1))]")
                      (("1" (expand "restrict" 1)
                        (("1"
                          (inst -1 "LAMBDA (h: (A(x!1))):
                                        (f(p1 + (h + x!1) * (p2 - p1)) - f(p1 + x!1 * (p2 - p1))) / h"
                           "analysis@lim_of_functions
                                       [(analysis@derivatives_def
                                             [(init_partial_def[n].D_down
                                                   (D,
                                                    (matrices@matrices.+)
                                                        (p1,
                                                         matrices@matrices.*
                                                             (x!1, ((matrices@matrices.-)(p2, p1)))),
                                                    (matrices@matrices.-)(p2, p1)))].A
                                             (0))].lim
                                       (LAMBDA (h:
                                                  (analysis@derivatives_def
                                                       [(init_partial_def[n].D_down
                                                             (D,
                                                              (matrices@matrices.+)
                                                                  (p1,
                                                                   matrices@matrices.*
                                                                   (x!1,
                                                                    ((matrices@matrices.-)(p2, p1)))),
                                                              (matrices@matrices.-)(p2, p1)))].A
                                                       (0))):
                                          (f((matrices@matrices.+)
                                                 ((matrices@matrices.+)
                                                      (p1,
                                                       matrices@matrices.*
                                                           (x!1, ((matrices@matrices.-)(p2, p1)))),
                                                  matrices@matrices.*
                                                      (h, (matrices@matrices.-)(p2, p1))))
                                            -
                                            f((matrices@matrices.+)
                                                  ((matrices@matrices.+)
                                                       (p1,
                                                        matrices@matrices.*
                                                            (x!1, ((matrices@matrices.-)(p2, p1)))),
                                                   matrices@matrices.*
                                                       (0, (matrices@matrices.-)(p2, p1)))))
                                           / h,
                                        0)" "0")
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (case
                                 "not (matrices@matrices.-)(p2, p1) = p2-p1")
                                (("1" (propax) nil nil)
                                 ("2"
                                  (replace -1 1)
                                  (("2"
                                    (case
                                     "NOT matrices@matrices.*(0, p2 - p1) = 0*(p2-p1)")
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (case
                                       "NOT matrices@matrices.*(0, p2 - p1) = 0*(p2-p1)")
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (hide -)
                                        (("2"
                                          (case
                                           "NOT matrices@matrices.*(0, p2 - p1) = 0*(p2-p1)")
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (replace -1 1)
                                            (("2"
                                              (case
                                               "NOT matrices@matrices.*(x!1, p2 - p1) = x!1*(p2-p1)")
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (replace -1 1)
                                                (("2"
                                                  (hide -)
                                                  (("2"
                                                    (case
                                                     "NOT (matrices@matrices.+)
                                                                                                                                                                      (p1, x!1 * (p2 - p1)) = p1 + x!1*(p2-p1)")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (replace -1 1)
                                                      (("2"
                                                        (case
                                                         "NOT (matrices@matrices.+)
                                                                                                                                                                                (p1 + x!1 * (p2 - p1), 0 * (p2 - p1)) =p1 + x!1 * (p2 - p1)+0 * (p2 - p1)")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("2"
                                                            (hide -)
                                                            (("2"
                                                              (case
                                                               "NOT (matrices@matrices.-)(p2, p1) = p2-p1")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "convergence"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "convergence"
                                                                     1)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (expand
                                                                         "adh"
                                                                         1)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (typepred
                                                                             "D")
                                                                            (("1"
                                                                              (typepred
                                                                               "x!1")
                                                                              (("1"
                                                                                (expand
                                                                                 "deriv_domain_all_direction?")
                                                                                (("1"
                                                                                  (inst
                                                                                   -4
                                                                                   "p2-p1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "deriv_domain_direction?"
                                                                                     -4)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -4
                                                                                       "min(e,1-x!1)/2"
                                                                                       "p1+x!1*(p2-p1)")
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "delta")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "fullset"
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "abs"
                                                                                               1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "A"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "D_down"
                                                                                               1)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "delta")
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "dist_scalar")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x!1"
                                                                                                     "delta"
                                                                                                     "(p2-p1)")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "asso_add")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "p1"
                                                                                                           "x!1 * (p2 - p1)"
                                                                                                           "delta * (p2 - p1)")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "p1"
                                                                                                               "x!1"
                                                                                                               "p2-p1"
                                                                                                               "p2")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "max"
                                                                                                                 -)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (typepred
                                                                                                             "delta*(p2-p1)"
                                                                                                             "p1"
                                                                                                             "p2")
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "p2-p1")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "max"
                                                                                                                 -)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (typepred
                                                                                                             "x!1 * (p2 - p1)"
                                                                                                             "p2-p1"
                                                                                                             "p1"
                                                                                                             "p2")
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("4"
                                                                                                            (typepred
                                                                                                             "p1")
                                                                                                            (("4"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (typepred
                                                                                                       "p2-p1")
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "p1"
                                                                                                         "p2")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "p1 + x!1 * (p2 - p1)"
                                                                                             "p1"
                                                                                             "x!1 * (p2 - p1)"
                                                                                             "p2-p1"
                                                                                             "p2")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "max"
                                                                                               -)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "D_down"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide
                                                                                         2)
                                                                                        (("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "analysis@lim_of_functions
                                                                                                                                                  [(analysis@derivatives_def
                                                                                                                                                        [(init_partial_def[n].D_down
                                                                                                                                                              (D,
                                                                                                                                                               (matrices@matrices.+)
                                                                                                                                                                   (p1,
                                                                                                                                                                    matrices@matrices.*
                                                                                                                                                                    (x!1,
                                                                                                                                                                     ((matrices@matrices.-)(p2, p1)))),
                                                                                                                                                               (matrices@matrices.-)(p2, p1)))].A
                                                                                                                                                        (0))].lim
                                                                                                                                                  (LAMBDA (h:
                                                                                                                                                             (analysis@derivatives_def
                                                                                                                                                                  [(init_partial_def[n].D_down
                                                                                                                                                                    (D,
                                                                                                                                                                     (matrices@matrices.+)
                                                                                                                                                                     (p1,
                                                                                                                                                                      matrices@matrices.*
                                                                                                                                                                      (x!1,
                                                                                                                                                                       ((matrices@matrices.-)
                                                                                                                                                                        (p2, p1)))),
                                                                                                                                                                     (matrices@matrices.-)(p2, p1)))].A
                                                                                                                                                                  (0))):
                                                                                                                                                     (f(((matrices@matrices.+)
                                                                                                                                                             (p1 + x!1 * (p2 - p1),
                                                                                                                                                              (matrices@matrices.*(h, p2 - p1)))))
                                                                                                                                                       - f(p1 + x!1 * (p2 - p1) + 0 * (p2 - p1)))
                                                                                                                                                      / h,
                                                                                                                                                   0)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "convergence"
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "convergence"
                                                                               -1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "epsilon")
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "delta")
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -2
                                                                                             "x")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "(f(p1 + (x!1 + x) * (p2 - p1)) - f(p1 + x!1 * (p2 - p1))) / x = (f(p1+x!1*(p2-p1) +x*(p2-p1)) - f(p1 + x!1 * (p2 - p1) + 0 * (p2 - p1)))
                                                                                                                                                                                    / x")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "mult_zero")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "p2-p1")
                                                                                                          (("1"
                                                                                                            (typepred
                                                                                                             "p2"
                                                                                                             "p1"
                                                                                                             "p2-p1")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "max"
                                                                                                               -6)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2
                                                                                                                 -6)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -6
                                                                                                                   -7)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -7
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "zero_id")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "p1 + x!1 * (p2 - p1)")
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "length(p1 + x!1 * (p2 - p1)) = n")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -2
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "dist_scalar")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "x!1"
                                                                                                                                   "x"
                                                                                                                                   "p2-p1")
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -1
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "asso_add")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "p1"
                                                                                                                                         "x!1 * (p2 - p1)"
                                                                                                                                         "x * (p2 - p1)")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (typepred
                                                                                                                                           "x*(p2-p1)"
                                                                                                                                           "p2"
                                                                                                                                           "p1"
                                                                                                                                           "p2-p1")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "max"
                                                                                                                                             -)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (typepred
                                                                                                                                           "x!1 * (p2 - p1)"
                                                                                                                                           "p2-p1"
                                                                                                                                           "p2"
                                                                                                                                           "p1")
                                                                                                                                          (("3"
                                                                                                                                            (expand
                                                                                                                                             "max"
                                                                                                                                             -)
                                                                                                                                            (("3"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("4"
                                                                                                                                          (typepred
                                                                                                                                           "p1")
                                                                                                                                          (("4"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (typepred
                                                                                                                                     "p2-p1"
                                                                                                                                     "p2"
                                                                                                                                     "p1")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "max"
                                                                                                                                       -)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (typepred
                                                                                                                             "p1 + x!1 * (p2 - p1)"
                                                                                                                             "p1"
                                                                                                                             "x!1 * (p2 - p1)"
                                                                                                                             "p2-p1"
                                                                                                                             "p2")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "max"
                                                                                                                               -)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (typepred
                                                                                                             "p2-p1"
                                                                                                             "p2"
                                                                                                             "p1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "A"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "D_down"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "x")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "A"
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "D_down"
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "p1+(x!1+x)*(p2-p1) = p1+x!1*(p2-p1)+x*(p2-p1)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "dist_scalar")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "x!1"
                                                                                                                     "x"
                                                                                                                     "p2-p1")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "asso_add")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "p1"
                                                                                                                           "x!1 * (p2 - p1)"
                                                                                                                           "x * (p2 - p1)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (typepred
                                                                                                                               "p1"
                                                                                                                               "x!1 * (p2 - p1)"
                                                                                                                               "p2-p1"
                                                                                                                               "p2")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "max"
                                                                                                                                 -)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (typepred
                                                                                                                             "x*(p2-p1)"
                                                                                                                             "p2-p1"
                                                                                                                             "p2"
                                                                                                                             "p1")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "max "
                                                                                                                               -)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (typepred
                                                                                                                             "x!1 * (p2 - p1)"
                                                                                                                             "p2-p1"
                                                                                                                             "p1"
                                                                                                                             "p2")
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("4"
                                                                                                                            (typepred
                                                                                                                             "p1")
                                                                                                                            (("4"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (typepred
                                                                                                                       "p2-p1"
                                                                                                                       "p2"
                                                                                                                       "p1")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (typepred
                                                                             "f")
                                                                            (("2"
                                                                              (lemma
                                                                               "diff_imp_init_partial")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "D"
                                                                                 "f"
                                                                                 "p1 + x!1 * (p2 - p1)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "differentiableD?"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "p1 + x!1 * (p2 - p1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "p2-p1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "init_partial?"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "derivable?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "NQ"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "restrict"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "p2-p1"
                                                                                           "p1"
                                                                                           "p2")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "max"
                                                                                             -)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "p1 + x!1 * (p2 - p1)"
                                                                                           "p1"
                                                                                           "x!1 * (p2 - p1)"
                                                                                           "p2")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "max"
                                                                                             -)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "p2-p1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "max"
                                                                                                     -)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "D_down"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "p1 + x!1 * (p2 - p1)"
                                                                                     "p1"
                                                                                     "x!1 * (p2 - p1)"
                                                                                     "p2-p1"
                                                                                     "p2")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "max"
                                                                                       -)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "x!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "D_down"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (hide
                                                                                     2)
                                                                                    (("3"
                                                                                      (typepred
                                                                                       "D")
                                                                                      (("3"
                                                                                        (lemma
                                                                                         "dd_all_direction_implies_dd_all_partial")
                                                                                        (("3"
                                                                                          (inst
                                                                                           -1
                                                                                           "D")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (hide
                                                                             2)
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (typepred
                                                                                 "p1 + x!1 * (p2 - p1) + 0 * (p2 - p1)")
                                                                                (("3"
                                                                                  (typepred
                                                                                   "p1 + x!1 * (p2 - p1)"
                                                                                   "0 * (p2 - p1)")
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "x!1 * (p2 - p1)"
                                                                                     "p1"
                                                                                     "p2"
                                                                                     "p2-p1")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "max"
                                                                                       -)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (assert)
                                                                          (("4"
                                                                            (hide
                                                                             2)
                                                                            (("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (typepred
                                                                                 "(matrices@matrices.+)
                                                                                                                                                       (p1 + x!1 * (p2 - p1),
                                                                                                                                                        ((matrices@matrices.*(h, p2 - p1))))")
                                                                                (("4"
                                                                                  (typepred
                                                                                   "p1 + x!1 * (p2 - p1)"
                                                                                   "(matrices@matrices.*(h, p2 - p1))")
                                                                                  (("4"
                                                                                    (typepred
                                                                                     "p2-p1"
                                                                                     "p1"
                                                                                     "p2"
                                                                                     "x!1*(p2-p1)")
                                                                                    (("4"
                                                                                      (expand
                                                                                       "max"
                                                                                       -)
                                                                                      (("4"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("5"
                                                                          (hide
                                                                           2)
                                                                          (("5"
                                                                            (expand
                                                                             "not_one_element?"
                                                                             1)
                                                                            (("5"
                                                                              (skeep)
                                                                              (("5"
                                                                                (typepred
                                                                                 "D")
                                                                                (("5"
                                                                                  (expand
                                                                                   "deriv_domain_all_direction?")
                                                                                  (("5"
                                                                                    (inst
                                                                                     -1
                                                                                     "p2-p1")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "deriv_domain_direction?")
                                                                                      (("1"
                                                                                        (inst-cp
                                                                                         -1
                                                                                         "1"
                                                                                         "p1+x!1*(p2-p1)")
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "delta"
                                                                                             "p1+x!1*(p2-p1)")
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "x=delta")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "delta_1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "D_down"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst
                                                                                                   2
                                                                                                   "delta")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "D_down"
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "p1 + x!1 * (p2 - p1)"
                                                                                                 "p1"
                                                                                                 "x!1 * (p2 - p1)"
                                                                                                 "p2-p1"
                                                                                                 "p2")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "max"
                                                                                                   -)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (typepred
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "D_down"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "p1 + x!1 * (p2 - p1)"
                                                                                               "p1"
                                                                                               "x!1 * (p2 - p1)"
                                                                                               "p2-p1"
                                                                                               "p2")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "max"
                                                                                                 -)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               "x!1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "D_down"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "p1"
                                                                                       "p2"
                                                                                       "p2-p1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "max"
                                                                                         -)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("6"
                                                                          (hide
                                                                           2)
                                                                          (("6"
                                                                            (expand
                                                                             "deriv_domain?")
                                                                            (("6"
                                                                              (skeep)
                                                                              (("6"
                                                                                (typepred
                                                                                 "D")
                                                                                (("6"
                                                                                  (expand
                                                                                   "deriv_domain_all_direction?")
                                                                                  (("6"
                                                                                    (inst
                                                                                     -1
                                                                                     "p2-p1")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "deriv_domain_direction?"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "e/2"
                                                                                         "p1+x!1*(p2-p1)")
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "D")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "deriv_domain_all_direction?")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "p2-p1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "deriv_domain_direction?"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "x")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "D_down"
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -2
                                                                                                         "e/2"
                                                                                                         "p1 + x!1*(p2-p1) + x*(p2-p1)")
                                                                                                        (("1"
                                                                                                          (skeep)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "delta!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "D_down"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "delta!1")
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "p1 + x!1 * (p2 - p1) + x * (p2 - p1) + delta!1 * (p2 - p1) =
                                                                                                                                                                                             p1 + x!1 * (p2 - p1) + (delta!1 + x) * (p2 - p1)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (lemma
                                                                                                                       "dist_scalar")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "x"
                                                                                                                         "delta!1"
                                                                                                                         "p2-p1")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "asso_add")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "p1 + x!1 * (p2 - p1)"
                                                                                                                               "x * (p2 - p1)"
                                                                                                                               "delta!1 * (p2 - p1)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (typepred
                                                                                                                                   "p1 + x!1 * (p2 - p1)"
                                                                                                                                   "x * (p2 - p1)"
                                                                                                                                   "p2-p1"
                                                                                                                                   "p1"
                                                                                                                                   "p2")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "max"
                                                                                                                                     -)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (typepred
                                                                                                                                 "delta!1 * (p2 - p1)"
                                                                                                                                 "p2-p1"
                                                                                                                                 "p1"
                                                                                                                                 "p2")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (typepred
                                                                                                                                 "x*(p2-p1)"
                                                                                                                                 "p1"
                                                                                                                                 "p2")
                                                                                                                                (("3"
                                                                                                                                  (assert)
                                                                                                                                  (("3"
                                                                                                                                    (typepred
                                                                                                                                     "p2-p1")
                                                                                                                                    (("3"
                                                                                                                                      (expand
                                                                                                                                       "max"
                                                                                                                                       -)
                                                                                                                                      (("3"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("4"
                                                                                                                                (typepred
                                                                                                                                 "p1 + x!1 * (p2 - p1)"
                                                                                                                                 "p1"
                                                                                                                                 "x!1 * (p2 - p1)"
                                                                                                                                 "(p2 - p1)"
                                                                                                                                 "p2"
                                                                                                                                 "p1")
                                                                                                                                (("4"
                                                                                                                                  (expand
                                                                                                                                   "max"
                                                                                                                                   -)
                                                                                                                                  (("4"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (typepred
                                                                                                                           "p2-p1"
                                                                                                                           "p1"
                                                                                                                           "p2")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (typepred
                                                                                                   "p2-p1"
                                                                                                   "p1"
                                                                                                   "p2")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "max"
                                                                                                       -)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "p1 + x!1 * (p2 - p1)"
                                                                                             "p1"
                                                                                             "x!1 * (p2 - p1)"
                                                                                             "p2-p1"
                                                                                             "p2")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "max"
                                                                                               -)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "x!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "D_down"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "p2-p1"
                                                                                       "p1"
                                                                                       "p2")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "max"
                                                                                           -)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("7"
                                                                          (hide
                                                                           2)
                                                                          (("7"
                                                                            (expand
                                                                             "D_down"
                                                                             1)
                                                                            (("7"
                                                                              (lemma
                                                                               "mult_zero")
                                                                              (("7"
                                                                                (inst
                                                                                 -1
                                                                                 "(matrices@matrices.-)(p2, p1)")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "zero_id")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "(matrices@matrices.+)(p1, matrices@matrices.*(x!1, ((matrices@matrices.-)(p2, p1))))")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "p2-p1")
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "p2"
                                                                                           "p1")
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "p1+x!1*(p2-p1)")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -6
                                                                                               -2)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "x!1 * (p2 - p1)")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -6
                                                                                                   -10)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -8
                                                                                                     -10)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "max"
                                                                                                       -10)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -10
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           -4)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "max"
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -4
                                                                                                               -11)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -10
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -11
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "x!1")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "D_down"
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "p2"
                                                                                     "p1"
                                                                                     "p2-p1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("8"
                                                                          (hide
                                                                           2)
                                                                          (("8"
                                                                            (typepred
                                                                             "p1"
                                                                             "p2"
                                                                             "p2-p1")
                                                                            (("8"
                                                                              (expand
                                                                               "max"
                                                                               -)
                                                                              (("8"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (skeep)
                              (("2"
                                (typepred "p1+x!1*(p2-p1) + 0*(p2-p1)")
                                (("2"
                                  (typepred
                                   "p1 + x!1 * (p2 - p1)"
                                   "p1"
                                   "x!1 * (p2 - p1)"
                                   "p2-p1"
                                   "p2")
                                  (("2"
                                    (typepred "0 * (p2 - p1)")
                                    (("2"
                                      (expand "max" -)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (skeep)
                              (("3"
                                (typepred "p1 + x!1*(p2-p1)+h*(p2-p1)")
                                (("3"
                                  (typepred
                                   "p1 + x!1 * (p2 - p1)"
                                   "p1"
                                   "x!1 * (p2 - p1)"
                                   "p2-p1"
                                   "p2")
                                  (("3"
                                    (expand "max" -)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (hide 2)
                            (("4" (expand "not_one_element?" 1)
                              (("4"
                                (skeep)
                                (("4"
                                  (typepred "D")
                                  (("4"
                                    (expand
                                     "deriv_domain_all_direction?"
                                     -1)
                                    (("4"
                                      (inst -1 "p2-p1")
                                      (("1"
                                        (expand
                                         "deriv_domain_direction?"
                                         -1)
                                        (("1"
                                          (inst-cp
                                           -1
                                           "1"
                                           "p1+x!1*(p2-p1)")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst
                                               -1
                                               "delta"
                                               "p1+x!1*(p2-p1)")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (case "x=delta")
                                                  (("1"
                                                    (inst 1 "delta_1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (typepred
                                                       "delta_1")
                                                      (("2"
                                                        (expand
                                                         "D_down"
                                                         1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst 2 "delta")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "D_down"
                                                       1)
                                                      (("2"
                                                        (typepred
                                                         "p1 + x!1 * (p2 - p1)"
                                                         "p1"
                                                         "x!1 * (p2 - p1)"
                                                         "p2-p1"
                                                         "p2")
                                                        (("2"
                                                          (expand
                                                           "max"
                                                           -)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "x!1")
                                                (("2"
                                                  (expand "D_down" -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred
                                                       "p1 + x!1 * (p2 - p1)"
                                                       "p1"
                                                       "x!1 * (p2 - p1)"
                                                       "p2-p1"
                                                       "p2")
                                                      (("2"
                                                        (expand
                                                         "max"
                                                         -)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "x!1")
                                            (("2"
                                              (expand "D_down" -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred
                                                   "p2-p1"
                                                   "p1"
                                                   "p2")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "max" -)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma "D_down_domain")
                                          (("2"
                                            (typepred
                                             "p2-p1"
                                             "p1"
                                             "p2")
                                            (("2"
                                              (expand "max" -)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (hide 2)
                            (("5" (lemma "D_down_domain")
                              (("5"
                                (inst -1 "p2-p1" "D" "p1+x!1*(p2-p1)")
                                (("1"
                                  (split)
                                  (("1"
                                    (typepred
                                     "p1 + x!1 * (p2 - p1)"
                                     "p1"
                                     "x!1 * (p2 - p1)"
                                     "p2-p1"
                                     "p2")
                                    (("1"
                                      (expand "max" -)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "x!1")
                                    (("2"
                                      (expand "D_down" -1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (typepred "p2-p1" "p1" "p2")
                                    (("2"
                                      (expand "max" -)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("6" (hide 2)
                            (("6" (expand "D_down" 1)
                              (("6"
                                (case
                                 "p1+x!1*(p2-p1) + 0*(p2-p1) = p1+x!1*(p2-p1)")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (typepred "x!1")
                                    (("1"
                                      (expand "D_down")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (lemma "mult_zero")
                                      (("2"
                                        (inst -1 "p2-p1")
                                        (("1"
                                          (typepred "p2-p1" "p1" "p2")
                                          (("1"
                                            (replace -4 -2)
                                            (("1"
                                              (replace -6 -2)
                                              (("1"
                                                (expand "max" -2)
                                                (("1"
                                                  (replace -2 -7)
                                                  (("1"
                                                    (replace -7 1)
                                                    (("1"
                                                      (lemma "zero_id")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "p1 + x!1 * (p2 - p1)")
                                                        (("1"
                                                          (typepred
                                                           "length(p1 + x!1 * (p2 - p1))"
                                                           "p1"
                                                           "x!1*(p2-p1)"
                                                           "p2-p1"
                                                           "p2")
                                                          (("1"
                                                            (expand
                                                             "max"
                                                             -)
                                                            (("1"
                                                              (hide
                                                               -2
                                                               -4
                                                               -6
                                                               -8
                                                               -11
                                                               -13
                                                               -15)
                                                              (("1"
                                                                (typepred
                                                                 "p1 + x!1 * (p2 - p1)")
                                                                (("1"
                                                                  (hide
                                                                   -1
                                                                   -3)
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     -1)
                                                                    (("1"
                                                                      (replace
                                                                       -4
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -8
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -9
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "max"
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               -6)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "p1" "p2" "p2-p1")
                                          (("2"
                                            (expand "max" -)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("7" (hide 2)
                            (("7" (typepred "p2-p1" "p1" "p2")
                              (("7"
                                (expand "max" -)
                                (("7" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("8" (hide 2)
                            (("8" (skeep)
                              (("8"
                                (typepred
                                 "p1 + x!1 * (p2 - p1)"
                                 "p1"
                                 "x!1 * (p2 - p1)"
                                 "p2-p1"
                                 "p2")
                                (("8"
                                  (expand "max" -)
                                  (("8" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("9" (hide 2)
                            (("9" (skeep)
                              (("9"
                                (typepred
                                 "p1 + (h + x!1) * (p2 - p1)"
                                 "p1"
                                 "(h + x!1) * (p2 - p1)"
                                 "p2-p1"
                                 "p2")
                                (("9"
                                  (expand "max" -)
                                  (("9" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("10" (expand "not_one_element?")
                            (("10" (skeep)
                              (("10"
                                (typepred "D")
                                (("10"
                                  (expand
                                   "deriv_domain_all_direction?"
                                   -1)
                                  (("10"
                                    (inst -1 "p2-p1")
                                    (("1"
                                      (expand
                                       "deriv_domain_direction?"
                                       -1)
                                      (("1"
                                        (typepred "x")
                                        (("1"
                                          (expand "D_down" -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst-cp -4 "1" "p1")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst
                                                   -4
                                                   "delta"
                                                   "p1")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (case "x=delta")
                                                      (("1"
                                                        (inst
                                                         1
                                                         "delta_1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "delta_1")
                                                            (("2"
                                                              (expand
                                                               "D_down"
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           2
                                                           "delta")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "delta")
                                                            (("2"
                                                              (expand
                                                               "D_down"
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "p2-p1" "p2" "p1")
                                      (("2"
                                        (expand "max" -)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("11" (lemma "D_down_der_domain_unit")
                            (("11" (inst -1 "p2-p1" "D" "p1")
                              (("11"
                                (typepred "p2-p1" "p1" "p2")
                                (("11"
                                  (expand "max" -)
                                  (("11" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("12" (typepred "p2-p1" "p2" "p1")
                            (("12" (expand "max" -)
                              (("12" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "D_down_not_one_unit")
                          (("2" (inst -1 "p2-p1" "D" "p1")
                            (("2" (typepred "p2-p1" "p2" "p1")
                              (("2"
                                (expand "max" -)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (lemma "D_down_domain_unit")
                          (("3" (inst -1 "p2-p1" "D" "p1")
                            (("3" (typepred "p2-p1" "p2" "p1")
                              (("3"
                                (expand "max" -)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (hide 2)
                        (("4" (typepred "p2-p1" "p2" "p1")
                          (("4" (expand "max" -)
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (lim_fun_def formula-decl nil lim_of_functions analysis)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (x!1 skolem-const-decl
     "{t: (D_down(D, p1, p2 - p1)) | t > 0 AND t < 1}"
     Taylor_Thrm_Multi nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (lim const-decl "{l: real | convergence(f, x0, l)}"
     lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" Taylor_Thrm_Multi nil)
    (delta skolem-const-decl
     "{delta: posreal | D(p1 + x!1 * (p2 - p1) + delta * (p2 - p1))}"
     Taylor_Thrm_Multi nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (fullset const-decl "set" sets nil)
    (dist_scalar formula-decl nil vector_arithmetic nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (delta!1 skolem-const-decl "{delta: posreal |
   D(p1 + x!1 * (p2 - p1) + x * (p2 - p1) + delta * (p2 - p1))}"
     Taylor_Thrm_Multi nil)
    (x skolem-const-decl "(init_partial_def[n].D_down
     (D,
      ((matrices@matrices.+)
           (p1,
            (matrices@matrices.*
                 (x!1, (((matrices@matrices.-)(p2, p1))))))),
      ((matrices@matrices.-)(p2, p1))))" Taylor_Thrm_Multi nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (delta skolem-const-decl
     "{delta: posreal | D(p1 + x!1 * (p2 - p1) + delta * (p2 - p1))}"
     Taylor_Thrm_Multi nil)
    (delta_1 skolem-const-decl
     "{delta: posreal | D(p1 + x!1 * (p2 - p1) + delta * (p2 - p1))}"
     Taylor_Thrm_Multi nil)
    (diff_imp_init_partial formula-decl nil init_partial_def nil)
    (dd_all_direction_implies_dd_all_partial formula-decl nil
     derivative_domain_multi nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (x skolem-const-decl "(analysis@derivatives_def
     [{t:
         (init_partial_def[n].D_down
              (D, p1, ((matrices@matrices.-)(p2, p1)))) |
         t > 0 AND t < 1}].A
     (x!1))" Taylor_Thrm_Multi nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (delta_1 skolem-const-decl
     "{delta: posreal | D(p1 + x!1 * (p2 - p1) + delta * (p2 - p1))}"
     Taylor_Thrm_Multi nil)
    (delta skolem-const-decl
     "{delta: posreal | D(p1 + x!1 * (p2 - p1) + delta * (p2 - p1))}"
     Taylor_Thrm_Multi nil)
    (D_down_domain formula-decl nil init_partial_def nil)
    (delta_1 skolem-const-decl
     "{delta: posreal | D(p1 + delta * (p2 - p1))}" Taylor_Thrm_Multi
     nil)
    (delta skolem-const-decl
     "{delta: posreal | D(p1 + delta * (p2 - p1))}" Taylor_Thrm_Multi
     nil)
    (D_down_der_domain_unit formula-decl nil init_partial_def nil)
    (restrict const-decl "R" restrict nil)
    (D_down_not_one_unit formula-decl nil init_partial_def nil)
    (D_down_domain_unit formula-decl nil init_partial_def nil)
    (NQ const-decl "real" derivatives_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (p2 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (p1 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (D skolem-const-decl "{DD: (deriv_domain_all_direction?) | DD(p1)}"
     Taylor_Thrm_Multi nil)
    (f skolem-const-decl "(differentiableD?(D))" Taylor_Thrm_Multi nil)
    (init_partial const-decl "real" init_partial_def nil)
    (deriv const-decl "real" derivatives_def analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (< const-decl "bool" reals nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (D_down const-decl "bool" init_partial_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil)
  (g_thm_dif-1 nil 3741617697
   ("" (skeep)
    (("" (expand "nderiv" 1)
      (("" (expand "nderiv" 1)
        (("" (expand "deriv" 1)
          (("" (decompose-equality 1)
            (("1" (expand "deriv" 1)
              (("1" (expand "directional_deriv")
                (("1" (expand "deriv" 1)
                  (("1" (expand "NQ" 1)
                    (("1"
                      (lemma "lim_fun_def[(analysis@derivatives_def
                [{t:
                    (directional_deriv_def[n].D_down
                         (D, p1, (matrices@matrices.-)(p2, p1))) |
                          t > 0 AND t < 1}].A
                (x!1))]")
                      (("1" (expand "restrict" 1)
                        (("1"
                          (inst -1 "LAMBDA (h: (A(x!1))):
            (f(p1 + (h + x!1) * (p2 - p1)) - f(p1 + x!1 * (p2 - p1))) / h"
                           "analysis@lim_of_functions
           [(analysis@derivatives_def
                 [(directional_deriv_def[n].D_down
                       (D,
                        (matrices@matrices.+)
                            (p1,
                             matrices@matrices.*
                                 (x!1, ((matrices@matrices.-)(p2, p1)))),
                        (matrices@matrices.-)(p2, p1)))].A
                 (0))].lim
           (LAMBDA (h:
                      (analysis@derivatives_def
                           [(directional_deriv_def[n].D_down
                                 (D,
                                  (matrices@matrices.+)
                                      (p1,
                                       matrices@matrices.*
                                       (x!1,
                                        ((matrices@matrices.-)(p2, p1)))),
                                  (matrices@matrices.-)(p2, p1)))].A
                           (0))):
              (f((matrices@matrices.+)
                     ((matrices@matrices.+)
                          (p1,
                           matrices@matrices.*
                               (x!1, ((matrices@matrices.-)(p2, p1)))),
                      matrices@matrices.*
                          (h, (matrices@matrices.-)(p2, p1))))
                -
                f((matrices@matrices.+)
                      ((matrices@matrices.+)
                           (p1,
                            matrices@matrices.*
                                (x!1, ((matrices@matrices.-)(p2, p1)))),
                       matrices@matrices.*
                           (0, (matrices@matrices.-)(p2, p1)))))
               / h,
            0)" "0")
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (case
                                 "not (matrices@matrices.-)(p2, p1) = p2-p1")
                                (("1" (propax) nil nil)
                                 ("2"
                                  (replace -1 1)
                                  (("2"
                                    (case
                                     "NOT matrices@matrices.*(0, p2 - p1) = 0*(p2-p1)")
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (case
                                       "NOT matrices@matrices.*(0, p2 - p1) = 0*(p2-p1)")
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (hide -)
                                        (("2"
                                          (case
                                           "NOT matrices@matrices.*(0, p2 - p1) = 0*(p2-p1)")
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (replace -1 1)
                                            (("2"
                                              (case
                                               "NOT matrices@matrices.*(x!1, p2 - p1) = x!1*(p2-p1)")
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (replace -1 1)
                                                (("2"
                                                  (hide -)
                                                  (("2"
                                                    (case
                                                     "NOT (matrices@matrices.+)
                                    (p1, x!1 * (p2 - p1)) = p1 + x!1*(p2-p1)")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (replace -1 1)
                                                      (("2"
                                                        (case
                                                         "NOT (matrices@matrices.+)
                                  (p1 + x!1 * (p2 - p1), 0 * (p2 - p1)) =p1 + x!1 * (p2 - p1)+0 * (p2 - p1)")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("2"
                                                            (hide -)
                                                            (("2"
                                                              (case
                                                               "NOT (matrices@matrices.-)(p2, p1) = p2-p1")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "convergence"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "convergence"
                                                                     1)
                                                                    (("2"
                                                                      (split)
                                                                      (("1"
                                                                        (expand
                                                                         "adh"
                                                                         1)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (typepred
                                                                             "D")
                                                                            (("1"
                                                                              (typepred
                                                                               "x!1")
                                                                              (("1"
                                                                                (expand
                                                                                 "deriv_domain_all_direction?")
                                                                                (("1"
                                                                                  (inst
                                                                                   -4
                                                                                   "p2-p1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "deriv_domain_direction?"
                                                                                     -4)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -4
                                                                                       "min(e,1)/2"
                                                                                       "p1+x!1*(p2-p1)")
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "delta")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "fullset"
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "abs"
                                                                                               1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "A"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "D_down"
                                                                                               1)
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (typepred
                                                                                                   "delta")
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "dist_scalar")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "x!1"
                                                                                                       "delta"
                                                                                                       "(p2-p1)")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "asso_add")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "p1"
                                                                                                             "x!1 * (p2 - p1)"
                                                                                                             "delta * (p2 - p1)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "p1"
                                                                                                                 "x!1"
                                                                                                                 "p2-p1"
                                                                                                                 "p2")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "max"
                                                                                                                   -)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (typepred
                                                                                                               "delta*(p2-p1)"
                                                                                                               "p1"
                                                                                                               "p2")
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "p2-p1")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "max"
                                                                                                                   -)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (typepred
                                                                                                               "x!1 * (p2 - p1)"
                                                                                                               "p2-p1"
                                                                                                               "p1"
                                                                                                               "p2")
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("4"
                                                                                                              (typepred
                                                                                                               "p1")
                                                                                                              (("4"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (typepred
                                                                                                         "p2-p1")
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "p1"
                                                                                                           "p2")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (postpone)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil)
                           ("3" (postpone) nil nil)
                           ("4" (postpone) nil nil)
                           ("5" (postpone) nil nil)
                           ("6" (postpone) nil nil)
                           ("7" (postpone) nil nil)
                           ("8" (postpone) nil nil)
                           ("9" (postpone) nil nil)
                           ("10" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil)
             ("4" (postpone) nil nil) ("5" (postpone) nil nil)
             ("6" (postpone) nil nil) ("7" (postpone) nil nil)
             ("8" (postpone) nil nil) ("9" (postpone) nil nil)
             ("10" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (g_thm_dif_connect_TCC1 0
  (g_thm_dif_connect_TCC1-1 nil 3741695371
   ("" (skeep)
    (("" (lemma "g_thm_connect")
      (("" (inst -1 "p1" "p2" "D" "f") nil nil)) nil))
    nil)
   ((g_thm_connect formula-decl nil Taylor_Thrm_Multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm_dif_connect subtype
    "(LAMBDA (t: (init_partial_def[Taylor_Thrm_Multi.n].D_down(Taylor_Thrm_Multi.D, Taylor_Thrm_Multi.p1, (matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1)))): Taylor_Thrm_Multi.f((matrices.+)(Taylor_Thrm_Multi.p1, matrices.*(t, ((matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1))))))"
    "nth_derivatives[(init_partial_def[Taylor_Thrm_Multi.n].D_down(Taylor_Thrm_Multi.D, Taylor_Thrm_Multi.p1, (matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1)))].nderiv_fun(1)")))
 (g_thm_dif_connect_TCC2 0
  (g_thm_dif_connect_TCC2-1 nil 3741695371
   ("" (skeep)
    (("" (typepred "t")
      (("" (expand "D_down" -1)
        (("" (split)
          (("1" (assert)
            (("1"
              (typepred "p1 + t * (p2 - p1)" "p1" " t * (p2 - p1)"
               "p2-p1" "p2")
              (("1" (assert)
                (("1" (expand "max" -) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil)
           ("3" (typepred "f")
            (("3" (lemma "frech_diff_imp_init_partial")
              (("3" (inst -1 "p2-p1" "D" "f" "p1+ t * (p2 - p1)")
                (("3" (assert)
                  (("3" (flatten)
                    (("3" (assert)
                      (("3" (expand "differentiableD?" -1)
                        (("3" (inst -1 "p1 + t * (p2 - p1)") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (D_down const-decl "bool" init_partial_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (frech_diff_imp_init_partial formula-decl nil init_partial_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm_dif_connect subtype
    "(matrices.+)(Taylor_Thrm_Multi.p1, matrices.*(Taylor_Thrm_Multi.t, ((matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1))))"
    "(init_partial_def[Taylor_Thrm_Multi.n].init_partial?((matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1), Taylor_Thrm_Multi.D, Taylor_Thrm_Multi.f))")))
 (g_thm_dif_connect_TCC3 0
  (g_thm_dif_connect_TCC3-1 nil 3741695371
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_direction_implies_dd_partial")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (dd_direction_implies_dd_partial formula-decl nil
     derivative_domain_multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm_dif_connect subtype "Taylor_Thrm_Multi.D"
    "(derivative_domain_multi[Taylor_Thrm_Multi.n].deriv_domain_partial?((matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1)))")))
 (g_thm_dif_connect 0
  (g_thm_dif_connect-1 nil 3741697129
   ("" (skeep)
    (("" (expand "nderiv" 1)
      (("" (expand "nderiv" 1)
        (("" (expand "deriv" 1)
          (("" (with-tccs (decompose-equality 1))
            (("" (expand "deriv" 1)
              (("" (expand "init_partial")
                (("" (expand "deriv" 1)
                  ((""
                    (lemma "lim_fun_def[(analysis@derivatives_def
                              [(init_partial_def[n].D_down
                                    (D, p1, p2-p1))].A
                              (x!1))]")
                    (("1" (expand "NQ" 1)
                      (("1"
                        (inst -1 "LAMBDA (h: (A(x!1))):
                                          (f(p1 + (h + x!1) * (p2 - p1)) - f(p1 + x!1 * (p2 - p1))) / h"
                         "analysis@lim_of_functions
                                 [(analysis@derivatives_def
                                       [(init_partial_def[n].D_down
                                             (D,
                                              p1+x!1*(p2-p1),
                                              p2-p1))].A
                                       (0))].lim
                                 (LAMBDA (h:
                                            (analysis@derivatives_def
                                                 [(init_partial_def[n].D_down
                                                       (D,
                                                        p1+x!1*(p2-p1),
                                                        p2-p1))].A
                                                 (0))):
                                    (restrict
                                         [real,
                                          (init_partial_def[n].D_down
                                               (D,
                                                p1+x!1*(p2-p1),
                                                p2-p1)),
                                          real]
                                         (LAMBDA (Delta: real):
                                            f(p1+x!1*(p2-p1)+Delta*(p2-p1)))
                                         (h)
                                      -
                                      restrict
                                          [real,
                                           (init_partial_def[n].D_down
                                                (D,
                                                 p1+x!1*(p2-p1),
                                                 p2-p1)),
                                           real]
                                          (LAMBDA (Delta: real):
                                             f(p1+x!1*(p2-p1)+Delta*(p2-p1)))
                                          (0))
                                     / h,
                                  0)" "0")
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1" (expand "convergence" 1)
                              (("1"
                                (expand "convergence" 1)
                                (("1"
                                  (split)
                                  (("1"
                                    (expand "adh" 1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (case "x!1=1")
                                        (("1"
                                          (typepred "D")
                                          (("1"
                                            (expand "domain_connect?")
                                            (("1"
                                              (inst 1 "-min(e/2,1/2)")
                                              (("1"
                                                (expand "fullset" 1 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "abs")
                                                    (("1"
                                                      (expand "min" 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if 1)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "A" 1)
                                                (("2"
                                                  (expand "D_down" 1)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "(-min(e / 2, 1/2) + x!1)")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "D")
                                          (("2"
                                            (typepred "x!1")
                                            (("2"
                                              (expand
                                               "deriv_domain_all_direction?")
                                              (("2"
                                                (inst -3 "p2-p1")
                                                (("2"
                                                  (expand
                                                   "deriv_domain_direction?"
                                                   -3)
                                                  (("2"
                                                    (inst
                                                     -3
                                                     "min(e,abs(1-x!1))/2"
                                                     "p1+x!1*(p2-p1)")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst
                                                         2
                                                         "delta")
                                                        (("1"
                                                          (expand
                                                           "fullset"
                                                           2)
                                                          (("1"
                                                            (expand
                                                             "abs"
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "A"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "D_down"
                                                             1)
                                                            (("2"
                                                              (typepred
                                                               "delta")
                                                              (("2"
                                                                (lemma
                                                                 "dist_scalar")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "x!1"
                                                                   "delta"
                                                                   "(p2-p1)")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (lemma
                                                                       "asso_add")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "p1"
                                                                         "x!1 * (p2 - p1)"
                                                                         "delta * (p2 - p1)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (typepred
                                                                             "p1"
                                                                             "x!1"
                                                                             "p2-p1"
                                                                             "p2")
                                                                            (("1"
                                                                              (expand
                                                                               "max"
                                                                               -)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "delta*(p2-p1)"
                                                                           "p1"
                                                                           "p2")
                                                                          (("2"
                                                                            (typepred
                                                                             "p2-p1")
                                                                            (("2"
                                                                              (expand
                                                                               "max"
                                                                               -)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (typepred
                                                                           "x!1 * (p2 - p1)"
                                                                           "p2-p1"
                                                                           "p1"
                                                                           "p2")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (typepred
                                                                           "p1")
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "p2-p1")
                                                                    (("2"
                                                                      (typepred
                                                                       "p1"
                                                                       "p2")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (typepred
                                                           "p1 + x!1 * (p2 - p1)"
                                                           "p1"
                                                           "x!1 * (p2 - p1)"
                                                           "p2-p1"
                                                           "p2")
                                                          (("1"
                                                            (expand
                                                             "max"
                                                             -)
                                                            (("1"
                                                              (typepred
                                                               "p1 + x!1 * (p2 - p1)"
                                                               "p1"
                                                               "x!1 * (p2 - p1)"
                                                               "p2-p1"
                                                               "p2")
                                                              (("1"
                                                                (expand
                                                                 "max"
                                                                 -)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "D_down"
                                                           -1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      (("3"
                                                        (expand
                                                         "min"
                                                         1)
                                                        (("3"
                                                          (lift-if 1)
                                                          (("3"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred
                                     "analysis@lim_of_functions
                                                        [(analysis@derivatives_def
                                                              [(init_partial_def[n].D_down
                                                                    (D, p1 + x!1 * (p2 - p1), p2 - p1))].A
                                                              (0))].lim
                                                        (LAMBDA (h:
                                                                   (analysis@derivatives_def
                                                                        [(init_partial_def[n].D_down
                                                                          (D,
                                                                           p1 + x!1 * (p2 - p1),
                                                                           p2 - p1))].A
                                                                        (0))):
                                                           (restrict
                                                                [real,
                                                                 (init_partial_def[n].D_down
                                                                      (D, p1 + x!1 * (p2 - p1), p2 - p1)),
                                                                 real]
                                                                (LAMBDA (Delta: real):
                                                                   f(p1 + x!1 * (p2 - p1) +
                                                                      Delta * (p2 - p1)))
                                                                (h)
                                                             -
                                                             restrict
                                                                 [real,
                                                                  (init_partial_def[n].D_down
                                                                       (D, p1 + x!1 * (p2 - p1), p2 - p1)),
                                                                  real]
                                                                 (LAMBDA (Delta: real):
                                                                    f(p1 + x!1 * (p2 - p1)
                                                                      +
                                                                      Delta * (p2 - p1)))
                                                                 (0))
                                                            / h,
                                                         0)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "convergence" -1)
                                        (("1"
                                          (expand "convergence" -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst -2 "epsilon")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst 1 "delta")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst -2 "x")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "restrict")
                                                              (("1"
                                                                (case
                                                                 "(f(p1 + (x!1 + x) * (p2 - p1)) - f(p1 + x!1 * (p2 - p1))) / x = (f(p1+x!1*(p2-p1) +x*(p2-p1)) - f(p1 + x!1 * (p2 - p1) + 0 * (p2 - p1)))
                                                                                                                  / x")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (hide
                                                                     -2)
                                                                    (("2"
                                                                      (lemma
                                                                       "mult_zero")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "p2-p1")
                                                                        (("1"
                                                                          (typepred
                                                                           "p2"
                                                                           "p1"
                                                                           "p2-p1")
                                                                          (("1"
                                                                            (expand
                                                                             "max"
                                                                             -6)
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               -6)
                                                                              (("1"
                                                                                (replace
                                                                                 -6
                                                                                 -7)
                                                                                (("1"
                                                                                  (replace
                                                                                   -7
                                                                                   1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "zero_id")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "p1 + x!1 * (p2 - p1)")
                                                                                      (("1"
                                                                                        (case
                                                                                         "length(p1 + x!1 * (p2 - p1)) = n")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           -2)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2
                                                                                             1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "dist_scalar")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x!1"
                                                                                                 "x"
                                                                                                 "p2-p1")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "asso_add")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "p1"
                                                                                                       "x!1 * (p2 - p1)"
                                                                                                       "x * (p2 - p1)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (typepred
                                                                                                         "x*(p2-p1)"
                                                                                                         "p2"
                                                                                                         "p1"
                                                                                                         "p2-p1")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "max"
                                                                                                           -)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (typepred
                                                                                                         "x!1 * (p2 - p1)"
                                                                                                         "p2-p1"
                                                                                                         "p2"
                                                                                                         "p1")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "max"
                                                                                                           -)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (typepred
                                                                                                         "p1")
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (typepred
                                                                                                   "p2-p1"
                                                                                                   "p2"
                                                                                                   "p1")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "max"
                                                                                                     -)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "p1 + x!1 * (p2 - p1)"
                                                                                           "p1"
                                                                                           "x!1 * (p2 - p1)"
                                                                                           "p2-p1"
                                                                                           "p2")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "max"
                                                                                             -)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "p2-p1"
                                                                           "p2"
                                                                           "p1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand
                                                             "A"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "D_down"
                                                               1)
                                                              (("2"
                                                                (typepred
                                                                 "x")
                                                                (("2"
                                                                  (expand
                                                                   "A"
                                                                   -2)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "D_down"
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "p1+(x!1+x)*(p2-p1) = p1+x!1*(p2-p1)+x*(p2-p1)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (lemma
                                                                               "dist_scalar")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "x!1"
                                                                                 "x"
                                                                                 "p2-p1")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "asso_add")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "p1"
                                                                                       "x!1 * (p2 - p1)"
                                                                                       "x * (p2 - p1)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "p1"
                                                                                           "x!1 * (p2 - p1)"
                                                                                           "p2-p1"
                                                                                           "p2")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "max"
                                                                                             -)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "x*(p2-p1)"
                                                                                         "p2-p1"
                                                                                         "p2"
                                                                                         "p1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "max "
                                                                                           -)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (typepred
                                                                                         "x!1 * (p2 - p1)"
                                                                                         "p2-p1"
                                                                                         "p1"
                                                                                         "p2")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (typepred
                                                                                         "p1")
                                                                                        (("4"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "p2-p1"
                                                                                   "p2"
                                                                                   "p1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (expand "restrict")
                                        (("2"
                                          (typepred "f")
                                          (("2"
                                            (lemma
                                             "diff_imp_init_partial")
                                            (("2"
                                              (inst
                                               -1
                                               "D"
                                               "f"
                                               "p1 + x!1 * (p2 - p1)")
                                              (("1"
                                                (expand
                                                 "differentiableD?"
                                                 -2)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "p1 + x!1 * (p2 - p1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst -1 "p2-p1")
                                                      (("1"
                                                        (expand
                                                         "init_partial?"
                                                         -1)
                                                        (("1"
                                                          (expand
                                                           "derivable?"
                                                           -1)
                                                          (("1"
                                                            (expand
                                                             "NQ"
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "restrict"
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "p2-p1"
                                                         "p1"
                                                         "p2")
                                                        (("2"
                                                          (expand
                                                           "max"
                                                           -)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (split)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred
                                                         "p1 + x!1 * (p2 - p1)"
                                                         "p1"
                                                         "x!1 * (p2 - p1)"
                                                         "p2")
                                                        (("1"
                                                          (expand
                                                           "max"
                                                           -)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "p2-p1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "max"
                                                                   -)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "x!1")
                                                      (("2"
                                                        (expand
                                                         "D_down"
                                                         -1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (split)
                                                (("1"
                                                  (typepred
                                                   "p1 + x!1 * (p2 - p1)"
                                                   "p1"
                                                   "x!1 * (p2 - p1)"
                                                   "p2-p1"
                                                   "p2")
                                                  (("1"
                                                    (expand "max" -)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "x!1")
                                                  (("2"
                                                    (expand
                                                     "D_down"
                                                     -1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (typepred "D")
                                                (("3"
                                                  (lemma
                                                   "dd_all_direction_implies_dd_all_partial")
                                                  (("3"
                                                    (inst -1 "D")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (expand "D_down" 1)
                                          (("3"
                                            (typepred "x!1")
                                            (("3"
                                              (lemma "mult_zero")
                                              (("3"
                                                (inst -1 "p2-p1")
                                                (("1"
                                                  (typepred
                                                   "p2-p1"
                                                   "p2"
                                                   "p1")
                                                  (("1"
                                                    (hide -1 -3 -5)
                                                    (("1"
                                                      (replace -2 -1)
                                                      (("1"
                                                        (replace -3 -1)
                                                        (("1"
                                                          (expand
                                                           "max"
                                                           -1)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -4)
                                                            (("1"
                                                              (replace
                                                               -4
                                                               1)
                                                              (("1"
                                                                (lemma
                                                                 "zero_id")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "p1 + x!1 * (p2 - p1)")
                                                                  (("1"
                                                                    (case
                                                                     "length(p1 + x!1 * (p2 - p1))=n")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "D_down"
                                                                           -7)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred
                                                   "p2-p1"
                                                   "p2"
                                                   "p1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (hide 2)
                                      (("4"
                                        (skeep)
                                        (("4"
                                          (typepred "p2-p1" "p2" "p1")
                                          (("4"
                                            (expand "max" -)
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (hide 2)
                                      (("5"
                                        (typepred
                                         "p1 + x!1 * (p2 - p1)"
                                         "p1"
                                         "x!1 * (p2 - p1)"
                                         "p2-p1"
                                         "p2")
                                        (("5"
                                          (skeep)
                                          (("5"
                                            (typepred
                                             "p1 + x!1 * (p2 - p1)"
                                             "p1"
                                             "x!1 * (p2 - p1)"
                                             "p2-p1"
                                             "p2")
                                            (("5"
                                              (expand "max" -)
                                              (("5" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("6"
                                      (hide 2)
                                      (("6"
                                        (skeep)
                                        (("6"
                                          (typepred
                                           "p1 + x!1 * (p2 - p1) + Delta * (p2 - p1)"
                                           "p1 + x!1 * (p2 - p1)"
                                           "p1"
                                           "x!1*(p2-p1)"
                                           "p2-p1"
                                           "p2"
                                           "Delta * (p2 - p1)")
                                          (("6"
                                            (expand "max" -)
                                            (("6" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("7"
                                      (hide 2)
                                      (("7"
                                        (skeep)
                                        (("7"
                                          (expand "D_down" 1)
                                          (("7"
                                            (typepred "x!1+h")
                                            (("7"
                                              (typepred "x!1")
                                              (("7"
                                                (typepred "h")
                                                (("7"
                                                  (hide -3)
                                                  (("7"
                                                    (expand "A" -2)
                                                    (("7"
                                                      (expand
                                                       "D_down"
                                                       -2)
                                                      (("7"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("8"
                                      (hide 2)
                                      (("8"
                                        (typepred "D")
                                        (("8"
                                          (lemma "D_down_not_one")
                                          (("8"
                                            (inst
                                             -1
                                             "p2-p1"
                                             "D"
                                             "p1 + x!1 * (p2 - p1)")
                                            (("1"
                                              (split)
                                              (("1"
                                                (typepred
                                                 "p1 + x!1 * (p2 - p1)"
                                                 "p1"
                                                 "x!1 * (p2 - p1)"
                                                 "p2-p1"
                                                 "p2")
                                                (("1"
                                                  (expand "max" -)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "x!1")
                                                (("2"
                                                  (expand "D_down" -1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "p2-p1"
                                               "p2"
                                               "p1")
                                              (("2"
                                                (expand "max" -)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("9"
                                      (hide 2)
                                      (("9"
                                        (lemma "D_down_domain")
                                        (("9"
                                          (inst
                                           -1
                                           "p2-p1"
                                           "D"
                                           "p1 + x!1 * (p2 - p1)")
                                          (("1"
                                            (split)
                                            (("1"
                                              (typepred
                                               "p1 + x!1 * (p2 - p1)"
                                               "p1"
                                               "x!1 * (p2 - p1)"
                                               "p2-p1"
                                               "p2")
                                              (("1"
                                                (expand "max" -)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "x!1")
                                              (("2"
                                                (expand "D_down" -1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (typepred
                                               "p2-p1"
                                               "p2"
                                               "p1")
                                              (("2"
                                                (expand "max" -)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("10"
                                      (hide 2)
                                      (("10"
                                        (expand "D_down" 1)
                                        (("10"
                                          (lemma "mult_zero")
                                          (("10"
                                            (lemma "zero_id")
                                            (("10"
                                              (inst -2 "p2-p1")
                                              (("1"
                                                (typepred "p2" "p1")
                                                (("1"
                                                  (hide -1 -3)
                                                  (("1"
                                                    (inst
                                                     -3
                                                     "p1 + x!1 * (p2 - p1)")
                                                    (("1"
                                                      (typepred
                                                       "p1 + x!1 * (p2 - p1)"
                                                       "p1"
                                                       "x!1 * (p2 - p1)"
                                                       "p2-p1"
                                                       "p2")
                                                      (("1"
                                                        (expand
                                                         "max"
                                                         -)
                                                        (("1"
                                                          (hide
                                                           -1
                                                           -3
                                                           -5
                                                           -7
                                                           -9)
                                                          (("1"
                                                            (replace
                                                             -4
                                                             -3)
                                                            (("1"
                                                              (replace
                                                               -5
                                                               -4)
                                                              (("1"
                                                                (replace
                                                                 -5
                                                                 -3)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -7
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         -8)
                                                                        (("1"
                                                                          (replace
                                                                           -4
                                                                           -9)
                                                                          (("1"
                                                                            (replace
                                                                             -9
                                                                             1)
                                                                            (("1"
                                                                              (replace
                                                                               -8
                                                                               1)
                                                                              (("1"
                                                                                (typepred
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "D_down"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "p2-p1"
                                                 "p2"
                                                 "p1")
                                                (("2"
                                                  (expand "max" -)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("11"
                                      (hide 2)
                                      (("11"
                                        (typepred "p2-p1" "p1" "p2")
                                        (("11"
                                          (assert)
                                          (("11"
                                            (expand "max" -)
                                            (("11" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skeep)
                            (("2" (expand "D_down" 1)
                              (("2"
                                (typepred "x!1")
                                (("2"
                                  (lemma "mult_zero")
                                  (("2"
                                    (lemma "zero_id")
                                    (("2"
                                      (inst -2 "p2-p1")
                                      (("1"
                                        (inst
                                         -1
                                         "p1 + x!1 * (p2 - p1)")
                                        (("1"
                                          (case
                                           "length(p1 + x!1 * (p2 - p1)) =n")
                                          (("1"
                                            (case "length(p2 - p1) =n")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1 -4)
                                                (("1"
                                                  (replace -2 -3)
                                                  (("1"
                                                    (replace -4 1)
                                                    (("1"
                                                      (replace -3 1)
                                                      (("1"
                                                        (typepred
                                                         "x!1")
                                                        (("1"
                                                          (expand
                                                           "D_down"
                                                           -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "p2-p1"
                                               "p2"
                                               "p1")
                                              (("2"
                                                (expand "max" -)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred
                                             "p1 + x!1 * (p2 - p1)"
                                             "p1"
                                             "x!1 * (p2 - p1)"
                                             "p2-p1"
                                             "p2")
                                            (("2"
                                              (expand "max" -)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "p2-p1" "p2" "p1")
                                        (("2"
                                          (expand "max" -)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2)
                          (("3" (skeep)
                            (("3" (typepred "p2-p1" "p2" "p1")
                              (("3"
                                (expand "max")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide 2)
                          (("4" (skeep)
                            (("4"
                              (typepred "p1 + x!1 * (p2 - p1)" "p1"
                               "x!1 * (p2 - p1)" "p2-p1" "p2")
                              (("4"
                                (expand "max" -)
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (hide 2)
                          (("5" (skeep)
                            (("5"
                              (typepred
                               "p1 + x!1 * (p2 - p1) + Delta * (p2 - p1)"
                               "p1 + x!1 * (p2 - p1)"
                               "Delta * (p2 - p1)" "x!1*(p2-p1)"
                               "Delta*(p2-p1)" "p2-p1" "p2" "p1")
                              (("5"
                                (expand "max" -)
                                (("5" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("6" (hide 2)
                          (("6" (skeep)
                            (("6" (expand "D_down" 1)
                              (("6"
                                (typepred "h")
                                (("6"
                                  (expand "A" -2)
                                  (("6"
                                    (expand "D_down" -2)
                                    (("6" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("7" (hide 2)
                          (("7" (lemma "D_down_not_one")
                            (("7"
                              (inst -1 "p2-p1" "D"
                               "p1 + x!1 * (p2 - p1)")
                              (("1"
                                (split)
                                (("1"
                                  (typepred
                                   "p1 + x!1 * (p2 - p1)"
                                   "p1"
                                   "x!1 * (p2 - p1)"
                                   "p2-p1"
                                   "p2")
                                  (("1"
                                    (expand "max" -)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "x!1")
                                  (("2"
                                    (expand "D_down" -1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "p1" "p2" "p2-p1")
                                (("2"
                                  (expand "max" -)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("8" (hide 2)
                          (("8" (lemma "D_down_domain")
                            (("8"
                              (inst -1 "p2-p1" "D"
                               "p1 + x!1 * (p2 - p1)")
                              (("1"
                                (typepred
                                 "p1 + x!1 * (p2 - p1)"
                                 "p1"
                                 "x!1 * (p2 - p1)"
                                 "p2-p1"
                                 "p2")
                                (("1"
                                  (expand "max" -)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (typepred "x!1")
                                      (("1"
                                        (expand "D_down" -1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (typepred "p2-p1" "p2" "p1")
                                  (("2"
                                    (expand "max" -)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("9" (hide 2)
                          (("9" (expand "D_down" 1)
                            (("9"
                              (case "p1 + x!1 * (p2 - p1) + 0 * (p2 - p1) = p1 + x!1 * (p2 - p1)")
                              (("1"
                                (typepred "x!1")
                                (("1"
                                  (expand "D_down" -1)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "dist_scalar")
                                (("2"
                                  (lemma "zero_id")
                                  (("2"
                                    (inst -1 "p1 + x!1 * (p2 - p1)")
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (lemma "mult_zero")
                                        (("2"
                                          (inst -1 "p2-p1")
                                          (("1"
                                            (case
                                             " length(p2 - p1) = n")
                                            (("1"
                                              (case
                                               " length(p1 + x!1 * (p2 - p1))=n")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred
                                                 "p2-p1"
                                                 "p2"
                                                 "p1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "max" -)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred
                                             "p2-p1"
                                             "p2"
                                             "p1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("10" (typepred "p2-p1" "p2" "p1")
                          (("10" (expand "max" -)
                            (("10" (assert) nil nil)) nil))
                          nil)
                         ("11"
                          (typepred "p1 + x!1 * (p2 - p1)" "p1"
                           "x!1 * (p2 - p1)" "p2-p1" "p2")
                          (("11" (expand "max" -)
                            (("11" (assert) nil nil)) nil))
                          nil)
                         ("12" (hide 2)
                          (("12" (skeep)
                            (("12"
                              (typepred "p1 + x!1 * (p2 - p1)"
                               "x!1 * (p2 - p1)" "p2-p1" "p2")
                              (("12"
                                (expand "max" -)
                                (("12" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("13" (hide 2)
                          (("13" (lemma "D_down_not_one")
                            (("13" (inst -1 "p2-p1" "D" "p1")
                              (("1"
                                (typepred "D")
                                (("1"
                                  (expand "domain_connect?" -1)
                                  (("1"
                                    (inst -1 "0")
                                    (("1"
                                      (lemma "mult_zero")
                                      (("1"
                                        (inst -1 "p2-p1")
                                        (("1"
                                          (replace -1 -2)
                                          (("1"
                                            (typepred
                                             "p2-p1"
                                             "p2"
                                             "p1")
                                            (("1"
                                              (expand "max" -2)
                                              (("1"
                                                (replace -4 -2)
                                                (("1"
                                                  (replace -2 -7)
                                                  (("1"
                                                    (replace -2 -8)
                                                    (("1"
                                                      (lemma "zero_id")
                                                      (("1"
                                                        (inst -1 "p1")
                                                        (("1"
                                                          (replace
                                                           -7
                                                           -1)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -9)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "p2-p1" "p2" "p1")
                                          (("2"
                                            (expand "max" -)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "p2-p1" "p1" "p2")
                                (("2"
                                  (expand "max" -)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("14" (lemma "D_down_domain")
                          (("14" (inst -1 "p2-p1" "D" "p1")
                            (("1" (typepred "D")
                              (("1"
                                (expand "domain_connect?" -1)
                                (("1"
                                  (inst -1 "0")
                                  (("1"
                                    (lemma "mult_zero")
                                    (("1"
                                      (inst -1 "p2-p1")
                                      (("1"
                                        (lemma "zero_id")
                                        (("1"
                                          (inst -1 "p1")
                                          (("1"
                                            (case "length(p1)=n")
                                            (("1"
                                              (case
                                               "length(p2 - p1)=n")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "p2-p1" "p2" "p1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "p2-p1" "p2" "p1")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "max" -)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("15" (typepred "p2-p1")
                          (("15" (expand "max" -2)
                            (("15" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "D_down_not_one")
                      (("2" (inst -1 "p2-p1" "D" "p1")
                        (("1" (typepred "D")
                          (("1" (expand "domain_connect?" -1)
                            (("1" (inst -1 "0")
                              (("1"
                                (lemma "mult_zero")
                                (("1"
                                  (inst -1 "p2-p1")
                                  (("1"
                                    (replace -1 -2)
                                    (("1"
                                      (typepred "p2-p1" "p2" "p1")
                                      (("1"
                                        (expand "max" -2)
                                        (("1"
                                          (replace -4 -2)
                                          (("1"
                                            (replace -2 -7)
                                            (("1"
                                              (replace -2 -8)
                                              (("1"
                                                (lemma "zero_id")
                                                (("1"
                                                  (inst -1 "p1")
                                                  (("1"
                                                    (replace -7 -1)
                                                    (("1"
                                                      (replace -1 -9)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "p2-p1" "p2" "p1")
                                    (("2"
                                      (expand "max" -)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "p2-p1" "p1" "p2")
                          (("2" (expand "max" -)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("3" (lemma "D_down_domain")
                      (("3" (inst -1 "p2-p1" "D" "p1")
                        (("1" (typepred "D")
                          (("1" (expand "domain_connect?" -1)
                            (("1" (inst -1 "0")
                              (("1"
                                (lemma "mult_zero")
                                (("1"
                                  (inst -1 "p2-p1")
                                  (("1"
                                    (lemma "zero_id")
                                    (("1"
                                      (inst -1 "p1")
                                      (("1"
                                        (case "length(p1)=n")
                                        (("1"
                                          (case "length(p2 - p1)=n")
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "p2-p1" "p2" "p1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "p2-p1" "p2" "p1")
                          (("2" (assert)
                            (("2" (expand "max" -)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (typepred "p2-p1")
                      (("4" (expand "max" -2) (("4" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" derivatives_def analysis)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (dist_scalar formula-decl nil vector_arithmetic nil)
    (delta skolem-const-decl
     "{delta: posreal | D(p1 + x!1 * (p2 - p1) + delta * (p2 - p1))}"
     Taylor_Thrm_Multi nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" Taylor_Thrm_Multi nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (D_down_domain formula-decl nil init_partial_def nil)
    (D_down_not_one formula-decl nil init_partial_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (dd_all_direction_implies_dd_all_partial formula-decl nil
     derivative_domain_multi nil)
    (diff_imp_init_partial formula-decl nil init_partial_def nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (x skolem-const-decl
     "(analysis@derivatives_def[(init_partial_def[n].D_down(D, p1, p2 - p1))].A
     (x!1))" Taylor_Thrm_Multi nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (lim const-decl "{l: real | convergence(f, x0, l)}"
     lim_of_functions analysis)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (x!1 skolem-const-decl "(D_down(D, p1, p2 - p1))" Taylor_Thrm_Multi
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (lim_fun_def formula-decl nil lim_of_functions analysis)
    (p2 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (p1 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (D skolem-const-decl
     "({DD: (domain_connect?(p1, p2)) | deriv_domain_all_direction?(DD)})"
     Taylor_Thrm_Multi nil)
    (f skolem-const-decl "(differentiableD?(D))" Taylor_Thrm_Multi nil)
    (init_partial const-decl "real" init_partial_def nil)
    (deriv const-decl "real" derivatives_def analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (D_down const-decl "bool" init_partial_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (g_thm_dif_connect_unit_TCC1 0
  (g_thm_dif_connect_unit_TCC1-1 nil 3741705990
   ("" (skeep)
    (("" (lemma "g_thm_connect_unit")
      (("" (inst -1 "p1" "p2" "D" "f") nil nil)) nil))
    nil)
   ((g_thm_connect_unit formula-decl nil Taylor_Thrm_Multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm_dif_connect_unit subtype
    "(LAMBDA (t: {tt: (init_partial_def[Taylor_Thrm_Multi.n].D_down(Taylor_Thrm_Multi.D, Taylor_Thrm_Multi.p1, (matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1))) | booleans.AND(reals.>=(tt, 0), reals.<=(tt, 1))}): Taylor_Thrm_Multi.f((matrices.+)(Taylor_Thrm_Multi.p1, matrices.*(t, ((matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1))))))"
    "nth_derivatives[{tt: (init_partial_def[Taylor_Thrm_Multi.n].D_down(Taylor_Thrm_Multi.D, Taylor_Thrm_Multi.p1, (matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1))) | booleans.AND(reals.>=(tt, 0), reals.<=(tt, 1))}].nderiv_fun(1)")))
 (g_thm_dif_connect_unit 0
  (g_thm_dif_connect_unit-1 nil 3741712087
   ("" (skeep)
    (("" (expand "nderiv" 1)
      (("" (expand "nderiv" 1)
        (("" (expand "deriv" 1)
          (("" (decompose-equality 1)
            (("1" (expand "deriv" 1)
              (("1" (expand "init_partial")
                (("1" (expand "deriv" 1)
                  (("1"
                    (lemma "lim_fun_def[(analysis@derivatives_def
                                [{tt:
                                    (init_partial_def[n].D_down
                                         (D, p1, p2-p1)) |
                                          tt >= 0 AND tt <= 1}].A
                                (x!1))]")
                    (("1" (expand "NQ" 1)
                      (("1"
                        (inst -1 "LAMBDA (h: (A(x!1))):
                                                    (f(p1 + (h + x!1) * (p2 - p1)) - f(p1 + x!1 * (p2 - p1))) / h"
                         "analysis@lim_of_functions
                                   [(analysis@derivatives_def
                                         [(init_partial_def[n].D_down
                                               (D,
                                                p1+x!1*(p2-p1),
                                                p2-p1))].A
                                         (0))].lim
                                   (LAMBDA (h:
                                              (analysis@derivatives_def
                                                   [(init_partial_def[n].D_down
                                                         (D,
                                                          p1+x!1*(p2-p1),
                                                          p2-p1))].A
                                                   (0))):
                                      (restrict
                                           [real,
                                            (init_partial_def[n].D_down
                                                 (D,
                                                  p1+x!1*(p2-p1),
                                                  p2-p1)),
                                            real]
                                           (LAMBDA (Delta: real):
                                              f(p1+x!1*(p2-p1) + Delta*(p2-p1)))
                                           (h)
                                        -
                                        restrict
                                            [real,
                                             (init_partial_def[n].D_down
                                                  (D,
                                                   p1+x!1*(p2-p1),
                                                   p2-p1)),
                                             real]
                                            (LAMBDA (Delta: real):
                                               f(p1+x!1*(p2-p1)+Delta*(p2-p1)))
                                            (0))
                                       / h,
                                    0)" "0")
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1" (expand "convergence" 1)
                              (("1"
                                (expand "convergence" 1)
                                (("1"
                                  (split)
                                  (("1"
                                    (expand "adh" 1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (case "x!1=1")
                                        (("1"
                                          (typepred "D")
                                          (("1"
                                            (expand "domain_connect?")
                                            (("1"
                                              (inst 1 "-min(e/2,1/2)")
                                              (("1"
                                                (expand "fullset" 1 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "abs")
                                                    (("1"
                                                      (expand "min" 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if 1)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "A" 1)
                                                (("2"
                                                  (expand "D_down" 1)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "(-min(e / 2, 1/2) + x!1)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (typepred "D")
                                                      (("2"
                                                        (typepred
                                                         "x!1")
                                                        (("2"
                                                          (hide
                                                           -1
                                                           -4
                                                           -5
                                                           -6
                                                           -7)
                                                          (("2"
                                                            (grind)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -2)
                                                              (("1"
                                                                (grind)
                                                                (("1"
                                                                  (reveal
                                                                   -)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (reveal
                                                               -)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (case "x!1=0")
                                            (("1"
                                              (inst 2 "min(e/2,1/2)")
                                              (("1"
                                                (expand "fullset" 2)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (expand "A" 1)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (typepred "D")
                                                    (("1"
                                                      (expand
                                                       "domain_connect?"
                                                       -1)
                                                      (("1"
                                                        (expand
                                                         "D_down"
                                                         1)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "(min(e / 2, 1/2) + x!1)")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst
                                               3
                                               "min(e,min(1-x!1,x!1))/2")
                                              (("1"
                                                (expand "fullset" 3)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (split)
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (expand "A")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (expand
                                                       "D_down"
                                                       1)
                                                      (("1"
                                                        (typepred "D")
                                                        (("1"
                                                          (expand
                                                           "domain_connect?"
                                                           -1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "(min(e, min(1 - x!1, x!1)) / 2 + x!1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 2)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred
                                     "analysis@lim_of_functions
                                                              [(analysis@derivatives_def
                                                                    [(init_partial_def[n].D_down
                                                                          (D, p1 + x!1 * (p2 - p1), p2 - p1))].A
                                                                    (0))].lim
                                                              (LAMBDA (h:
                                                                         (analysis@derivatives_def
                                                                              [(init_partial_def[n].D_down
                                                                                (D,
                                                                                 p1 + x!1 * (p2 - p1),
                                                                                 p2 - p1))].A
                                                                              (0))):
                                                                 (restrict
                                                                      [real,
                                                                       (init_partial_def[n].D_down
                                                                            (D, p1 + x!1 * (p2 - p1), p2 - p1)),
                                                                       real]
                                                                      (LAMBDA (Delta: real):
                                                                         f(p1 + x!1 * (p2 - p1) +
                                                                            Delta * (p2 - p1)))
                                                                      (h)
                                                                   -
                                                                   restrict
                                                                       [real,
                                                                        (init_partial_def[n].D_down
                                                                             (D, p1 + x!1 * (p2 - p1), p2 - p1)),
                                                                        real]
                                                                       (LAMBDA (Delta: real):
                                                                          f(p1 + x!1 * (p2 - p1)
                                                                            +
                                                                            Delta * (p2 - p1)))
                                                                       (0))
                                                                  / h,
                                                               0)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "convergence" -1)
                                        (("1"
                                          (expand "convergence" -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst -2 "epsilon")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst 1 "delta")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst -2 "x")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "restrict")
                                                              (("1"
                                                                (case
                                                                 "(f(p1 + (x!1 + x) * (p2 - p1)) - f(p1 + x!1 * (p2 - p1))) / x = (f(p1+x!1*(p2-p1) +x*(p2-p1)) - f(p1 + x!1 * (p2 - p1) + 0 * (p2 - p1)))
                                                                                                                                         / x")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (hide
                                                                     -2)
                                                                    (("2"
                                                                      (lemma
                                                                       "mult_zero")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "p2-p1")
                                                                        (("1"
                                                                          (typepred
                                                                           "p2"
                                                                           "p1"
                                                                           "p2-p1")
                                                                          (("1"
                                                                            (expand
                                                                             "max"
                                                                             -6)
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               -6)
                                                                              (("1"
                                                                                (replace
                                                                                 -6
                                                                                 -7)
                                                                                (("1"
                                                                                  (replace
                                                                                   -7
                                                                                   1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "zero_id")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "p1 + x!1 * (p2 - p1)")
                                                                                      (("1"
                                                                                        (case
                                                                                         "length(p1 + x!1 * (p2 - p1)) = n")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           -2)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2
                                                                                             1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "dist_scalar")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x!1"
                                                                                                 "x"
                                                                                                 "p2-p1")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "asso_add")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "p1"
                                                                                                       "x!1 * (p2 - p1)"
                                                                                                       "x * (p2 - p1)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (typepred
                                                                                                         "x*(p2-p1)"
                                                                                                         "p2"
                                                                                                         "p1"
                                                                                                         "p2-p1")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "max"
                                                                                                           -)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (typepred
                                                                                                         "x!1 * (p2 - p1)"
                                                                                                         "p2-p1"
                                                                                                         "p2"
                                                                                                         "p1")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "max"
                                                                                                           -)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (typepred
                                                                                                         "p1")
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (typepred
                                                                                                   "p2-p1"
                                                                                                   "p2"
                                                                                                   "p1")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "max"
                                                                                                     -)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "p1 + x!1 * (p2 - p1)"
                                                                                           "p1"
                                                                                           "x!1 * (p2 - p1)"
                                                                                           "p2-p1"
                                                                                           "p2")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "max"
                                                                                             -)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "p2-p1"
                                                                           "p2"
                                                                           "p1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand
                                                             "A"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "D_down"
                                                               1)
                                                              (("2"
                                                                (typepred
                                                                 "x")
                                                                (("2"
                                                                  (expand
                                                                   "A"
                                                                   -2)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "D_down"
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "p1+(x!1+x)*(p2-p1) = p1+x!1*(p2-p1)+x*(p2-p1)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (lemma
                                                                               "dist_scalar")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "x!1"
                                                                                 "x"
                                                                                 "p2-p1")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "asso_add")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "p1"
                                                                                       "x!1 * (p2 - p1)"
                                                                                       "x * (p2 - p1)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "p1"
                                                                                           "x!1 * (p2 - p1)"
                                                                                           "p2-p1"
                                                                                           "p2")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "max"
                                                                                             -)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "x*(p2-p1)"
                                                                                         "p2-p1"
                                                                                         "p2"
                                                                                         "p1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "max "
                                                                                           -)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (typepred
                                                                                         "x!1 * (p2 - p1)"
                                                                                         "p2-p1"
                                                                                         "p1"
                                                                                         "p2")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (typepred
                                                                                         "p1")
                                                                                        (("4"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "p2-p1"
                                                                                   "p2"
                                                                                   "p1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (expand "restrict")
                                        (("2"
                                          (typepred "f")
                                          (("2"
                                            (lemma
                                             "diff_imp_init_partial")
                                            (("2"
                                              (inst
                                               -1
                                               "D"
                                               "f"
                                               "p1 + x!1 * (p2 - p1)")
                                              (("1"
                                                (expand
                                                 "differentiableD?"
                                                 -2)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "p1 + x!1 * (p2 - p1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst -1 "p2-p1")
                                                      (("1"
                                                        (expand
                                                         "init_partial?"
                                                         -1)
                                                        (("1"
                                                          (expand
                                                           "derivable?"
                                                           -1)
                                                          (("1"
                                                            (expand
                                                             "NQ"
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "restrict"
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "p2-p1"
                                                         "p1"
                                                         "p2")
                                                        (("2"
                                                          (expand
                                                           "max"
                                                           -)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (split)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred
                                                         "p1 + x!1 * (p2 - p1)"
                                                         "p1"
                                                         "x!1 * (p2 - p1)"
                                                         "p2")
                                                        (("1"
                                                          (expand
                                                           "max"
                                                           -)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "p2-p1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "max"
                                                                   -)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "x!1")
                                                      (("2"
                                                        (expand
                                                         "D_down"
                                                         -1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (split)
                                                (("1"
                                                  (typepred
                                                   "p1 + x!1 * (p2 - p1)"
                                                   "p1"
                                                   "x!1 * (p2 - p1)"
                                                   "p2-p1"
                                                   "p2")
                                                  (("1"
                                                    (expand "max" -)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "x!1")
                                                  (("2"
                                                    (expand
                                                     "D_down"
                                                     -1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma
                                                 "dd_all_direction_implies_dd_all_partial")
                                                (("3"
                                                  (inst -1 "D")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (expand "D_down" 1)
                                          (("3"
                                            (typepred "x!1")
                                            (("3"
                                              (lemma "mult_zero")
                                              (("3"
                                                (inst -1 "p2-p1")
                                                (("1"
                                                  (typepred
                                                   "p2-p1"
                                                   "p2"
                                                   "p1")
                                                  (("1"
                                                    (hide -1 -3 -5)
                                                    (("1"
                                                      (replace -2 -1)
                                                      (("1"
                                                        (replace -3 -1)
                                                        (("1"
                                                          (expand
                                                           "max"
                                                           -1)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -4)
                                                            (("1"
                                                              (replace
                                                               -4
                                                               1)
                                                              (("1"
                                                                (lemma
                                                                 "zero_id")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "p1 + x!1 * (p2 - p1)")
                                                                  (("1"
                                                                    (case
                                                                     "length(p1 + x!1 * (p2 - p1))=n")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "D_down"
                                                                           -7)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred
                                                   "p2-p1"
                                                   "p2"
                                                   "p1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (hide 2)
                                      (("4"
                                        (skeep)
                                        (("4"
                                          (typepred "p2-p1" "p2" "p1")
                                          (("4"
                                            (expand "max" -)
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (hide 2)
                                      (("5"
                                        (skeep)
                                        (("5"
                                          (typepred
                                           "p1 + x!1 * (p2 - p1)"
                                           "p1"
                                           "x!1 * (p2 - p1)"
                                           "p2-p1"
                                           "p2")
                                          (("5"
                                            (expand "max" -)
                                            (("5" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("6"
                                      (hide 2)
                                      (("6"
                                        (skeep)
                                        (("6"
                                          (typepred
                                           "p1 + x!1 * (p2 - p1) + Delta * (p2 - p1)"
                                           "p1 + x!1 * (p2 - p1)"
                                           "p1"
                                           "x!1*(p2-p1)"
                                           "p2-p1"
                                           "p2"
                                           "Delta * (p2 - p1)")
                                          (("6"
                                            (expand "max" -)
                                            (("6" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("7"
                                      (hide 2)
                                      (("7"
                                        (skeep)
                                        (("7"
                                          (expand "D_down" 1)
                                          (("7"
                                            (typepred "x!1+h")
                                            (("7"
                                              (typepred "x!1")
                                              (("7"
                                                (typepred "h")
                                                (("7"
                                                  (hide -3)
                                                  (("7"
                                                    (expand "A" -2)
                                                    (("7"
                                                      (expand
                                                       "D_down"
                                                       -2)
                                                      (("7"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("8"
                                      (hide 2)
                                      (("8"
                                        (typepred "D")
                                        (("8"
                                          (lemma "D_down_not_one")
                                          (("8"
                                            (inst
                                             -1
                                             "p2-p1"
                                             "D"
                                             "p1 + x!1 * (p2 - p1)")
                                            (("1"
                                              (split)
                                              (("1"
                                                (typepred
                                                 "p1 + x!1 * (p2 - p1)"
                                                 "p1"
                                                 "x!1 * (p2 - p1)"
                                                 "p2-p1"
                                                 "p2")
                                                (("1"
                                                  (expand "max" -)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "x!1")
                                                (("2"
                                                  (expand "D_down" -1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "p2-p1"
                                               "p2"
                                               "p1")
                                              (("2"
                                                (expand "max" -)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("9"
                                      (hide 2)
                                      (("9"
                                        (lemma "D_down_domain")
                                        (("9"
                                          (inst
                                           -1
                                           "p2-p1"
                                           "D"
                                           "p1 + x!1 * (p2 - p1)")
                                          (("1"
                                            (split)
                                            (("1"
                                              (typepred
                                               "p1 + x!1 * (p2 - p1)"
                                               "p1"
                                               "x!1 * (p2 - p1)"
                                               "p2-p1"
                                               "p2")
                                              (("1"
                                                (expand "max" -)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "x!1")
                                              (("2"
                                                (expand "D_down" -1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (typepred
                                               "p2-p1"
                                               "p2"
                                               "p1")
                                              (("2"
                                                (expand "max" -)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("10"
                                      (hide 2)
                                      (("10"
                                        (expand "D_down" 1)
                                        (("10"
                                          (lemma "mult_zero")
                                          (("10"
                                            (lemma "zero_id")
                                            (("10"
                                              (inst -2 "p2-p1")
                                              (("1"
                                                (typepred "p2" "p1")
                                                (("1"
                                                  (hide -1 -3)
                                                  (("1"
                                                    (inst
                                                     -3
                                                     "p1 + x!1 * (p2 - p1)")
                                                    (("1"
                                                      (typepred
                                                       "p1 + x!1 * (p2 - p1)"
                                                       "p1"
                                                       "x!1 * (p2 - p1)"
                                                       "p2-p1"
                                                       "p2")
                                                      (("1"
                                                        (expand
                                                         "max"
                                                         -)
                                                        (("1"
                                                          (hide
                                                           -1
                                                           -3
                                                           -5
                                                           -7
                                                           -9)
                                                          (("1"
                                                            (replace
                                                             -4
                                                             -3)
                                                            (("1"
                                                              (replace
                                                               -5
                                                               -4)
                                                              (("1"
                                                                (replace
                                                                 -5
                                                                 -3)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -7
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         -8)
                                                                        (("1"
                                                                          (replace
                                                                           -4
                                                                           -9)
                                                                          (("1"
                                                                            (replace
                                                                             -9
                                                                             1)
                                                                            (("1"
                                                                              (replace
                                                                               -8
                                                                               1)
                                                                              (("1"
                                                                                (typepred
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "D_down"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "p2-p1"
                                                 "p2"
                                                 "p1")
                                                (("2"
                                                  (expand "max" -)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("11"
                                      (hide 2)
                                      (("11"
                                        (typepred "p2-p1" "p1" "p2")
                                        (("11"
                                          (assert)
                                          (("11"
                                            (expand "max" -)
                                            (("11" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skeep)
                            (("2" (expand "D_down" 1)
                              (("2"
                                (typepred "x!1")
                                (("2"
                                  (lemma "mult_zero")
                                  (("2"
                                    (lemma "zero_id")
                                    (("2"
                                      (inst -2 "p2-p1")
                                      (("1"
                                        (inst
                                         -1
                                         "p1 + x!1 * (p2 - p1)")
                                        (("1"
                                          (case
                                           "length(p1 + x!1 * (p2 - p1)) =n")
                                          (("1"
                                            (case "length(p2 - p1) =n")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1 -4)
                                                (("1"
                                                  (replace -2 -3)
                                                  (("1"
                                                    (replace -4 1)
                                                    (("1"
                                                      (replace -3 1)
                                                      (("1"
                                                        (typepred
                                                         "x!1")
                                                        (("1"
                                                          (expand
                                                           "D_down"
                                                           -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "p2-p1"
                                               "p2"
                                               "p1")
                                              (("2"
                                                (expand "max" -)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred
                                             "p1 + x!1 * (p2 - p1)"
                                             "p1"
                                             "x!1 * (p2 - p1)"
                                             "p2-p1"
                                             "p2")
                                            (("2"
                                              (expand "max" -)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "p2-p1" "p2" "p1")
                                        (("2"
                                          (expand "max" -)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2)
                          (("3" (skeep)
                            (("3" (typepred "p2-p1" "p2" "p1")
                              (("3"
                                (expand "max")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide 2)
                          (("4" (skeep)
                            (("4"
                              (typepred "p1 + x!1 * (p2 - p1)" "p1"
                               "x!1 * (p2 - p1)" "p2-p1" "p2")
                              (("4"
                                (expand "max" -)
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (hide 2)
                          (("5" (skeep)
                            (("5"
                              (typepred
                               "p1 + x!1 * (p2 - p1) + Delta * (p2 - p1)"
                               "p1 + x!1 * (p2 - p1)"
                               "Delta * (p2 - p1)" "x!1*(p2-p1)"
                               "Delta*(p2-p1)" "p2-p1" "p2" "p1")
                              (("5"
                                (expand "max" -)
                                (("5" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("6" (hide 2)
                          (("6" (skeep)
                            (("6" (expand "D_down" 1)
                              (("6"
                                (typepred "h")
                                (("6"
                                  (expand "A" -2)
                                  (("6"
                                    (expand "D_down" -2)
                                    (("6" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("7" (hide 2)
                          (("7" (lemma "D_down_not_one")
                            (("7"
                              (inst -1 "p2-p1" "D"
                               "p1 + x!1 * (p2 - p1)")
                              (("1"
                                (split)
                                (("1"
                                  (typepred
                                   "p1 + x!1 * (p2 - p1)"
                                   "p1"
                                   "x!1 * (p2 - p1)"
                                   "p2-p1"
                                   "p2")
                                  (("1"
                                    (expand "max" -)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "x!1")
                                  (("2"
                                    (expand "D_down" -1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "p1" "p2" "p2-p1")
                                (("2"
                                  (expand "max" -)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("8" (hide 2)
                          (("8" (lemma "D_down_domain")
                            (("8"
                              (inst -1 "p2-p1" "D"
                               "p1 + x!1 * (p2 - p1)")
                              (("1"
                                (split)
                                (("1"
                                  (typepred
                                   "p1 + x!1 * (p2 - p1)"
                                   "p1"
                                   "x!1 * (p2 - p1)"
                                   "p2-p1"
                                   "p2")
                                  (("1"
                                    (expand "max" -)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "x!1")
                                  (("2"
                                    (expand "D_down" -1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (typepred "p2-p1" "p2" "p1")
                                  (("2"
                                    (expand "max" -)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("9" (hide 2)
                          (("9" (expand "D_down" 1)
                            (("9"
                              (case "p1 + x!1 * (p2 - p1) + 0 * (p2 - p1) = p1 + x!1 * (p2 - p1)")
                              (("1"
                                (typepred "x!1")
                                (("1"
                                  (expand "D_down" -1)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "dist_scalar")
                                (("2"
                                  (lemma "zero_id")
                                  (("2"
                                    (inst -1 "p1 + x!1 * (p2 - p1)")
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (lemma "mult_zero")
                                        (("2"
                                          (inst -1 "p2-p1")
                                          (("1"
                                            (case
                                             " length(p2 - p1) = n")
                                            (("1"
                                              (case
                                               " length(p1 + x!1 * (p2 - p1))=n")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred
                                                 "p2-p1"
                                                 "p2"
                                                 "p1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "max" -)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred
                                             "p2-p1"
                                             "p2"
                                             "p1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("10" (typepred "p2-p1" "p2" "p1")
                          (("10" (expand "max" -)
                            (("10" (assert) nil nil)) nil))
                          nil)
                         ("11"
                          (typepred "p1 + x!1 * (p2 - p1)" "p1"
                           "x!1 * (p2 - p1)" "p2-p1" "p2")
                          (("11" (expand "max" -)
                            (("11" (assert) nil nil)) nil))
                          nil)
                         ("12" (hide 2)
                          (("12" (skeep)
                            (("12"
                              (typepred "p1 + x!1 * (p2 - p1)"
                               "x!1 * (p2 - p1)" "p2-p1" "p2")
                              (("12"
                                (expand "max" -)
                                (("12" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("13" (hide 2)
                          (("13" (lemma "D_down_not_one_unitc")
                            (("13" (inst -1 "p2-p1" "D" "p1")
                              (("1"
                                (lemma "d_con_ends")
                                (("1"
                                  (inst -1 "p1" "p2" "D")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "p2-p1" "p2" "p1")
                                (("2"
                                  (expand "max" -)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("14" (lemma "D_down_domain_unitc")
                          (("14" (inst -1 "p2-p1" "D" "p1")
                            (("1" (lemma "d_con_ends")
                              (("1"
                                (inst -1 "p1" "p2" "D")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (typepred "p2-p1" "p2" "p1")
                              (("2"
                                (expand "max" -)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("15" (typepred "p2-p1" "p2" "p1")
                          (("15" (expand "max" -)
                            (("15" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "D_down_not_one_unitc")
                      (("2" (inst -1 "p2-p1" "D" "p1")
                        (("1" (lemma "d_con_ends")
                          (("1" (inst -1 "p1" "p2" "D")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (typepred "p2-p1" "p2" "p1")
                          (("2" (expand "max" -)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("3" (lemma "D_down_domain_unitc")
                      (("3" (inst -1 "p2-p1" "D" "p1")
                        (("1" (lemma "d_con_ends")
                          (("1" (inst -1 "p1" "p2" "D")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (typepred "p2-p1" "p2" "p1")
                          (("2" (expand "max" -)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("4" (typepred "p2-p1" "p2" "p1")
                      (("4" (expand "max" -) (("4" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (typepred "f")
                (("2" (lemma "diff_imp_init_partial")
                  (("2" (expand "differentiableD?")
                    (("2" (assert)
                      (("2" (typepred "D")
                        (("2" (lemma "dd_direction_implies_dd_partial")
                          (("2" (inst -1 "D" "p2-p1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skeep)
              (("3" (split)
                (("1"
                  (typepred "p1 + t * (p2 - p1)" "t * (p2 - p1)"
                   "p2-p1")
                  (("1" (expand "max" -) (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (typepred "t")
                  (("2" (expand "D_down" -1) (("2" (propax) nil nil))
                    nil))
                  nil)
                 ("3" (typepred "f")
                  (("3" (lemma "diff_imp_init_partial")
                    (("3" (inst -1 "D" "f" "p1 + t * (p2 - p1)")
                      (("1" (expand "differentiableD?" -2)
                        (("1" (inst? -2)
                          (("1" (assert) (("1" (inst? -1) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "D_down_not_one_unitc")
                        (("2" (inst -1 "p2-p1" "D" "p1")
                          (("1" (lemma "d_con_ends")
                            (("1" (inst -1 "p1" "p2" "D")
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "p2-p1" "p2" "p1")
                                  (("1"
                                    (expand "max" -)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "D_down_domain_unitc")
                                        (("1"
                                          (inst -1 "p2-p1" "D" "p1")
                                          (("1"
                                            (lemma
                                             "dd_all_direction_implies_dd_all_partial")
                                            (("1"
                                              (inst -1 "D")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (lemma
                               "dd_all_direction_implies_dd_all_partial")
                              (("2"
                                (inst -1 "D")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (skeep)
              (("4" (lemma "D_down_not_one_unitc")
                (("4" (inst -1 "p2-p1" "D" "p1")
                  (("1" (lemma "d_con_ends")
                    (("1" (inst -1 "p1" "p2" "D")
                      (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (typepred "p2-p1" "p2" "p1")
                    (("2" (expand "max" -) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (lemma "D_down_domain_unitc")
              (("5" (inst -1 "p2-p1" "D" "p1")
                (("1" (skeep) nil nil)
                 ("2" (lemma "d_con_ends")
                  (("2" (inst -1 "p1" "p2" "D")
                    (("2" (assert) nil nil)) nil))
                  nil)
                 ("3" (typepred "p2-p1" "p2" "p1")
                  (("3" (expand "max" -) (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("6" (skeep)
              (("6" (lemma "g_thm_connect_unit")
                (("6" (inst -1 "p1" "p2" "D" "f")
                  (("6" (expand "derivable_n_times?" -1)
                    (("6" (flatten)
                      (("6" (expand "derivable?" -1)
                        (("6" (inst -1 "x") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("7" (skeep)
              (("7"
                (typepred "p1 + t * (p2 - p1)" "p1" "t * (p2 - p1)"
                 "p2-p1" "p2")
                (("7" (expand "max" -) (("7" (assert) nil nil)) nil))
                nil))
              nil)
             ("8" (skeep)
              (("8" (typepred "p2-p1" "p1" "p2")
                (("8" (expand "max" -) (("8" (assert) nil nil)) nil))
                nil))
              nil)
             ("9" (typepred "p2-p1" "p2" "p1")
              (("9" (expand "max " -) (("9" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (g_thm_connect_unit formula-decl nil Taylor_Thrm_Multi nil)
    (dd_direction_implies_dd_partial formula-decl nil
     derivative_domain_multi nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" derivatives_def analysis)
    (D_down_domain_unitc formula-decl nil init_partial_def nil)
    (d_con_ends formula-decl nil derivative_domain_multi nil)
    (D_down_not_one_unitc formula-decl nil init_partial_def nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" Taylor_Thrm_Multi nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (D_down_domain formula-decl nil init_partial_def nil)
    (D_down_not_one formula-decl nil init_partial_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (dd_all_direction_implies_dd_all_partial formula-decl nil
     derivative_domain_multi nil)
    (diff_imp_init_partial formula-decl nil init_partial_def nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (dist_scalar formula-decl nil vector_arithmetic nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (x skolem-const-decl "(analysis@derivatives_def
     [{tt: (init_partial_def[n].D_down(D, p1, p2 - p1)) |
         tt >= 0 AND tt <= 1}].A
     (x!1))" Taylor_Thrm_Multi nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (lim const-decl "{l: real | convergence(f, x0, l)}"
     lim_of_functions analysis)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (x!1 skolem-const-decl
     "{tt: (D_down[n](D, p1, p2 - p1)) | tt >= 0 AND tt <= 1}"
     Taylor_Thrm_Multi nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (lim_fun_def formula-decl nil lim_of_functions analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (D_down const-decl "bool" init_partial_def nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (<= const-decl "bool" reals nil)
    (init_partial const-decl "real" init_partial_def nil)
    (deriv const-decl "real" derivatives_def analysis)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (f skolem-const-decl "(differentiableD?(D))" Taylor_Thrm_Multi nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (D skolem-const-decl
     "({DD: (domain_connect?(p1, p2)) | deriv_domain_all_direction?(DD)})"
     Taylor_Thrm_Multi nil)
    (p1 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (p2 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (g_thm_grad_TCC1 0
  (g_thm_grad_TCC1-1 nil 3852636496
   ("" (skeep)
    ((""
      (typepred "p1+ t * (p2 - p1) " "p1" "t* (p2-p1)" "p2" "p1"
       "p2-p1")
      (("" (replace -10)
        (("" (replace -8)
          (("" (expand "max")
            (("" (assert)
              (("" (typepred "t")
                (("" (expand "D_down" -1) (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (D_down const-decl "bool" init_partial_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm_grad subtype
    "(matrices.+)(Taylor_Thrm_Multi.p1, matrices.*(Taylor_Thrm_Multi.t, ((matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1))))"
    "(Taylor_Thrm_Multi.D)")))
 (g_thm_grad_TCC2 0
  (g_thm_grad_TCC1-1 nil 3740478485
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_direction_implies_dd_e_partial")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dd_direction_implies_dd_e_partial formula-decl nil
     derivative_domain_multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm_grad subtype "Taylor_Thrm_Multi.D"
    "(derivative_domain_multi[Taylor_Thrm_Multi.n].deriv_domain_e_partial?)")))
 (g_thm_grad_TCC3 0
  (g_thm_grad_TCC2-1 nil 3740478485
   ("" (skeep)
    (("" (typepred "f")
      (("" (lemma "diffD_imp_gradD") (("" (inst -1 "D" "f") nil nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (diffD_imp_gradD formula-decl nil gradient_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm_grad subtype "Taylor_Thrm_Multi.f"
    "(gradient_def[Taylor_Thrm_Multi.n].gradientD?(Taylor_Thrm_Multi.D))")))
 (g_thm_grad 0
  (g_thm_grad-1 nil 3740911366
   ("" (skeep)
    (("" (expand "nderiv" 1)
      (("" (expand "nderiv" 1)
        (("" (expand "deriv" 1)
          (("" (decompose-equality 1)
            (("1" (lemma "directional_deriv_is_init_partial")
              (("1" (inst -1 "D" "p2-p1" "f" "p1 + x!1 * (p2 - p1)")
                (("1" (replace -1 1)
                  (("1" (lemma "g_thm_dif")
                    (("1" (inst -1 "p1" "p2" "D" "f")
                      (("1" (decompose-equality -1)
                        (("1" (inst -1 "x!1")
                          (("1" (expand "nderiv" -1)
                            (("1" (expand "nderiv" -1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "deriv" -1)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "x!2")
                          (("2" (expand "D_down" -4)
                            (("2" (lemma "diff_imp_init_partial")
                              (("2"
                                (inst
                                 -1
                                 "D"
                                 "f"
                                 "p1 + x!2 * (p2 - p1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (typepred "f")
                                    (("1"
                                      (expand "differentiableD?" -1)
                                      (("1"
                                        (inst
                                         -1
                                         "p1 + x!2 * (p2 - p1)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -2 "p2 - p1")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "D_down" -1)
                                  (("2"
                                    (lemma
                                     "dd_all_direction_implies_dd_all_partial")
                                    (("2"
                                      (inst -1 "D")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "D_down" -1)
                          (("3" (propax) nil nil)) nil)
                         ("4"
                          (typepred "(p1 + x!2 * (p2 - p1))" "p1"
                           "x!2 * (p2 - p1)" "p2-p1" "p2")
                          (("4" (expand "max" -)
                            (("4" (assert) nil nil)) nil))
                          nil)
                         ("5" (lemma "g_thm")
                          (("5" (inst -1 "p1" "p2" "D" "f") nil nil))
                          nil)
                         ("6" (typepred "p2-p1" "p1" "p2")
                          (("6" (expand "max" -)
                            (("6" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "p2-p1" "p1" "p2")
                  (("2" (assert)
                    (("2" (expand "max" -) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred "f")
                  (("3"
                    (lemma "dd_all_direction_implies_dd_all_partial")
                    (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (typepred "f")
                (("2" (lemma "diffD_imp_gradD")
                  (("2" (inst -1 "D" "f") nil nil)) nil))
                nil))
              nil)
             ("3" (skeep)
              (("3" (typepred "D")
                (("3" (lemma "dd_partial_implies_dd_e_direction")
                  (("3" (inst -1 "D")
                    (("3" (assert)
                      (("3"
                        (lemma
                         "dd_all_direction_implies_dd_all_partial")
                        (("3" (inst -1 "D") (("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (skeep)
              (("4"
                (typepred "p1 + t * (p2 - p1)" "p1" "t * (p2 - p1)"
                 "p2-p1" "p2")
                (("4" (expand "max" -)
                  (("4" (assert)
                    (("4" (typepred "t")
                      (("4" (expand "D_down" -1)
                        (("4" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (skeep)
              (("5" (expand "not_one_element?")
                (("5" (typepred "D")
                  (("5" (expand "deriv_domain_all_direction?")
                    (("5" (skeep)
                      (("5" (inst -1 "p2-p1")
                        (("1" (expand "deriv_domain_direction?")
                          (("1" (inst-cp -1 "1-x!1" "p1")
                            (("1" (skeep)
                              (("1"
                                (inst -1 "min(delta, 1-x!1)" "p1")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (case "x!1=delta")
                                    (("1"
                                      (inst 1 "delta_1")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (typepred "delta_1")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst 2 "delta")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (typepred "delta")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "p2-p1" "p2" "p1")
                          (("2" (assert)
                            (("2" (expand "max" -)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("6" (skeep)
              (("6" (lemma "D_down_domain_unit")
                (("6" (inst -1 "p2-p1" "D" "p1")
                  (("6" (typepred "p2-p1" "p1" "p2")
                    (("6" (expand "max" -) (("6" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("7" (skeep)
              (("7" (lemma "g_thm")
                (("7" (inst -1 "p1" "p2" "D" "f")
                  (("7" (expand "derivable_n_times?" -1)
                    (("7" (flatten)
                      (("7" (expand "derivable?" -1)
                        (("7" (inst -1 "x") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("8" (skeep)
              (("8"
                (typepred "p1 + t * (p2 - p1)" "p1" "p2" "p2-p1"
                 "t * (p2 - p1)")
                (("8" (expand "max" -) (("8" (assert) nil nil)) nil))
                nil))
              nil)
             ("9" (skeep)
              (("9" (typepred "p2" "p1" "p2-p1")
                (("9" (assert)
                  (("9" (expand "max" -) (("9" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("10" (typepred "p2" "p1" "p2-p1")
              (("10" (expand "max" -) (("10" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (D_down_domain_unit formula-decl nil init_partial_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (delta_1 skolem-const-decl
     "{delta: posreal | D(p1 + delta * (p2 - p1))}" Taylor_Thrm_Multi
     nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (x!1 skolem-const-decl
     "{t: (D_down(D, p1, p2 - p1)) | t > 0 AND t < 1}"
     Taylor_Thrm_Multi nil)
    (delta skolem-const-decl
     "{delta: posreal | D(p1 + delta * (p2 - p1))}" Taylor_Thrm_Multi
     nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dd_partial_implies_dd_e_direction formula-decl nil
     derivative_domain_multi nil)
    (diffD_imp_gradD formula-decl nil gradient_def nil)
    (directional_deriv_is_init_partial formula-decl nil gradient_def
     nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (g_thm formula-decl nil Taylor_Thrm_Multi nil)
    (diff_imp_init_partial formula-decl nil init_partial_def nil)
    (dd_all_direction_implies_dd_all_partial formula-decl nil
     derivative_domain_multi nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (init_partial const-decl "real" init_partial_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (g_thm_dif formula-decl nil Taylor_Thrm_Multi nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (D_down const-decl "bool" init_partial_def nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (< const-decl "bool" reals nil)
    (gradient const-decl "VectorN(n)" gradient_def nil)
    (* const-decl "real" matrices matrices)
    (deriv const-decl "real" derivatives_def analysis)
    (gradientD? const-decl "bool" gradient_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (f skolem-const-decl "(differentiableD?(D))" Taylor_Thrm_Multi nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (D skolem-const-decl "{DD: (deriv_domain_all_direction?) | DD(p1)}"
     Taylor_Thrm_Multi nil)
    (p1 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (p2 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (g_thm_grad_connect_TCC1 0
  (g_thm_grad_connect_TCC1-1 nil 3852636496
   ("" (skeep)
    ((""
      (typepred "p1 + t * (p2 - p1)" "p1" "t * (p2 - p1)" "p2 - p1"
       "p2" "p1")
      (("" (expand "max" -)
        (("" (assert)
          (("" (typepred "t")
            (("" (expand "D_down" -1) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (D_down const-decl "bool" init_partial_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm_grad_connect subtype
    "(matrices.+)(Taylor_Thrm_Multi.p1, matrices.*(Taylor_Thrm_Multi.t, ((matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1))))"
    "(Taylor_Thrm_Multi.D)")))
 (g_thm_grad_connect_TCC2 0
  (g_thm_grad_connect_TCC1-1 nil 3741700589
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_direction_implies_dd_e_partial")
        (("" (inst -1 "D") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dd_direction_implies_dd_e_partial formula-decl nil
     derivative_domain_multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm_grad_connect subtype "Taylor_Thrm_Multi.D"
    "(derivative_domain_multi[Taylor_Thrm_Multi.n].deriv_domain_e_partial?)")))
 (g_thm_grad_connect_TCC3 0
  (g_thm_grad_connect_TCC2-1 nil 3741700589
   ("" (skeep)
    (("" (typepred "f")
      (("" (lemma "diffD_imp_gradD") (("" (inst -1 "D" "f") nil nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (diffD_imp_gradD formula-decl nil gradient_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_thm_grad_connect subtype "Taylor_Thrm_Multi.f"
    "(gradient_def[Taylor_Thrm_Multi.n].gradientD?(Taylor_Thrm_Multi.D))")))
 (g_thm_grad_connect 0
  (g_thm_grad_connect-1 nil 3741700842
   ("" (lemma "g_thm_dif_connect")
    (("" (skeep)
      (("" (inst -1 "p1" "p2" "D" "f")
        (("" (assert)
          (("" (decompose-equality 1)
            (("1" (lemma "directional_deriv_is_init_partial")
              (("1" (inst -1 "D" "p2-p1" "f" "(p1 + x!1 * (p2 - p1))")
                (("1" (decompose-equality -2)
                  (("1" (inst -1 "x!1")
                    (("1" (replace -2 1) (("1" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (typepred "p2-p1" "p2" "p1")
                  (("2" (expand "max" -) (("2" (assert) nil nil)) nil))
                  nil)
                 ("3" (hide -)
                  (("3"
                    (lemma "dd_all_direction_implies_dd_all_partial")
                    (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide -)
              (("2" (skeep)
                (("2" (typepred "f")
                  (("2" (lemma "diffD_imp_gradD")
                    (("2" (inst -1 "D" "f") nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (hide -1)
              (("3" (skeep)
                (("3" (lemma "dd_partial_implies_dd_e_direction")
                  (("3" (inst -1 "D")
                    (("3" (assert)
                      (("3"
                        (lemma
                         "dd_all_direction_implies_dd_all_partial")
                        (("3" (inst -1 "D") (("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (skeep)
              (("4" (split)
                (("1"
                  (typepred "p1 + t * (p2 - p1)" "p1" "t * (p2 - p1)"
                   "p2-p1" "p2")
                  (("1" (expand "max" -) (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (typepred "t")
                  (("2" (expand "D_down" -1) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (lemma "D_down_not_one")
              (("5" (inst -1 "p2-p1" "D" "p1")
                (("1" (lemma "g_thm_connect")
                  (("1" (inst -1 "p1" "p2" "D" "f") nil nil)) nil)
                 ("2" (typepred "p1")
                  (("2" (assert)
                    (("2" (lemma "D_down_not_one")
                      (("2" (hide -)
                        (("2" (typepred "D")
                          (("2" (expand "domain_connect?")
                            (("2" (inst -1 "0")
                              (("2"
                                (case "p1 + 0 * (p2 - p1)=p1")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (lemma "mult_zero")
                                  (("2"
                                    (inst -1 "p2-p1")
                                    (("1"
                                      (case "length(p2-p1)=n")
                                      (("1"
                                        (lemma "zero_id")
                                        (("1"
                                          (inst -1 "p1")
                                          (("1"
                                            (typepred "p1")
                                            (("1"
                                              (replace -2 -3)
                                              (("1"
                                                (replace -5 1)
                                                (("1"
                                                  (replace -4 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (typepred "p2-p1" "p2" "p1")
                                          (("2"
                                            (expand "max" -)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "p2-p1" "p2" "p1")
                                      (("2"
                                        (expand "max" -)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred "p2-p1" "p2" "p1")
                  (("3" (expand "max" -) (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("6" (typepred "D")
              (("6" (expand "domain_connect?")
                (("6" (inst -1 "0")
                  (("6" (skeep)
                    (("6" (assert)
                      (("6" (typepred "p2-p1" "p2" "p1")
                        (("6" (expand "max" -) (("6" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("7" (typepred "p2-p1" "p2" "p1")
              (("7" (expand "max" -) (("7" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (D_down_not_one formula-decl nil init_partial_def nil)
    (<= const-decl "bool" reals nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (g_thm_connect formula-decl nil Taylor_Thrm_Multi nil)
    (dd_partial_implies_dd_e_direction formula-decl nil
     derivative_domain_multi nil)
    (diffD_imp_gradD formula-decl nil gradient_def nil)
    (directional_deriv_is_init_partial formula-decl nil gradient_def
     nil)
    (dd_all_direction_implies_dd_all_partial formula-decl nil
     derivative_domain_multi nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (init_partial const-decl "real" init_partial_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (D_down const-decl "bool" init_partial_def nil)
    (gradient const-decl "VectorN(n)" gradient_def nil)
    (* const-decl "real" matrices matrices)
    (nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (gradientD? const-decl "bool" gradient_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (f skolem-const-decl "(differentiableD?(D))" Taylor_Thrm_Multi nil)
    (D skolem-const-decl
     "({DD: (domain_connect?(p1, p2)) | deriv_domain_all_direction?(DD)})"
     Taylor_Thrm_Multi nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (p1 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (p2 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (g_thm_dif_connect formula-decl nil Taylor_Thrm_Multi nil))
   shostak))
 (g_thm_grad_connect_unit 0
  (g_thm_grad_connect_unit-1 nil 3741713588
   ("" (lemma "g_thm_dif_connect_unit")
    (("" (skeep)
      (("" (inst -1 "p1" "p2" "D" "f")
        (("" (assert)
          (("" (decompose-equality 1)
            (("1" (lemma "directional_deriv_is_init_partial")
              (("1" (inst -1 "D" "p2-p1" "f" "(p1 + x!1 * (p2 - p1))")
                (("1" (decompose-equality -2)
                  (("1" (inst -1 "x!1")
                    (("1" (replace -2 1) (("1" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (typepred "p2-p1" "p2" "p1")
                  (("2" (expand "max" -) (("2" (assert) nil nil)) nil))
                  nil)
                 ("3" (lemma "dd_all_direction_implies_dd_all_partial")
                  (("3" (inst -1 "D") (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide -)
              (("2" (skeep)
                (("2" (typepred "f")
                  (("2" (lemma "diffD_imp_gradD")
                    (("2" (inst -1 "D" "f") nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (hide -1)
              (("3" (skeep)
                (("3" (lemma "dd_direction_implies_dd_e_partial")
                  (("3" (inst -1 "D") (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("4" (skeep)
              (("4" (split)
                (("1"
                  (typepred "p1 + t * (p2 - p1)" "p1" "t * (p2 - p1)"
                   "p2-p1" "p2")
                  (("1" (expand "max" -) (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (typepred "t")
                  (("2" (expand "D_down" -1) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (lemma "g_thm_connect_unit")
              (("5" (inst -1 "p1" "p2" "D" "f") nil nil)) nil)
             ("6" (skeep)
              (("6" (typepred "p2-p1" "p2" "p1")
                (("6" (expand "max" -) (("6" (assert) nil nil)) nil))
                nil))
              nil)
             ("7" (typepred "p2-p1" "p2" "p1")
              (("7" (expand "max" -) (("7" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (g_thm_connect_unit formula-decl nil Taylor_Thrm_Multi nil)
    (dd_direction_implies_dd_e_partial formula-decl nil
     derivative_domain_multi nil)
    (diffD_imp_gradD formula-decl nil gradient_def nil)
    (directional_deriv_is_init_partial formula-decl nil gradient_def
     nil)
    (dd_all_direction_implies_dd_all_partial formula-decl nil
     derivative_domain_multi nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (init_partial const-decl "real" init_partial_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (D_down const-decl "bool" init_partial_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (<= const-decl "bool" reals nil)
    (gradient const-decl "VectorN(n)" gradient_def nil)
    (* const-decl "real" matrices matrices)
    (nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (gradientD? const-decl "bool" gradient_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (f skolem-const-decl "(differentiableD?(D))" Taylor_Thrm_Multi nil)
    (D skolem-const-decl
     "({DD: (domain_connect?(p1, p2)) | deriv_domain_all_direction?(DD)})"
     Taylor_Thrm_Multi nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (p1 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (p2 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (g_thm_dif_connect_unit formula-decl nil Taylor_Thrm_Multi nil))
   shostak))
 (Taylors1_TCC1 0
  (Taylors1_TCC1-1 nil 3740416363
   ("" (skeep)
    (("" (split)
      (("1" (typepred "p1 + t * (p2 - p1)" "p1" "t * (p2 - p1)" "p2")
        (("1" (expand "max" -)
          (("1" (assert)
            (("1" (typepred "p2-p1" "p2" "p1")
              (("1" (expand "max" -) (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "t")
        (("2" (expand "D_down" -1) (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (D_down const-decl "bool" init_partial_def nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (Taylors1 subtype
    "(matrices.+)(Taylor_Thrm_Multi.p1, matrices.*(Taylor_Thrm_Multi.t, ((matrices.-)(Taylor_Thrm_Multi.p2, Taylor_Thrm_Multi.p1))))"
    "(Taylor_Thrm_Multi.D)")))
 (Taylors1_TCC2 0
  (Taylors1_TCC2-1 nil 3741608031
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_direction_implies_dd_e_partial")
        (("" (inst -1 "D") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dd_direction_implies_dd_e_partial formula-decl nil
     derivative_domain_multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (Taylors1 subtype "Taylor_Thrm_Multi.D"
    "(derivative_domain_multi[Taylor_Thrm_Multi.n].deriv_domain_e_partial?)")))
 (Taylors1_TCC3 0
  (Taylors1_TCC3-1 nil 3741608031
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "cont_diff?" -1)
        (("" (flatten)
          (("" (lemma "diffD_imp_gradD")
            (("" (inst -1 "D" "f") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (cont_diff? const-decl "bool" continuous_derivatives nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (diffD_imp_gradD formula-decl nil gradient_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (Taylors1 subtype "Taylor_Thrm_Multi.f"
    "(gradient_def[Taylor_Thrm_Multi.n].gradientD?(Taylor_Thrm_Multi.D))")))
 (Taylors1 0
  (Taylors1-1 nil 3740477092
   ("" (skeep)
    ((""
      (lemma "Taylors[{tt: (D_down[n](D, p1, p2 - p1)) |
                                    tt >= 0 AND tt <= 1}]")
      (("1"
        (inst -1 "0" "1"
         "(LAMBDA (t:{tt: (D_down[n](D, p1, p2 - p1)) |tt >= 0 AND tt <= 1}):f(p1 + t * (p2-p1)))"
         "0")
        (("1" (assert)
          (("1" (lemma "g_thm_connect_unit")
            (("1" (inst -1 "p1" "p2" "D" "f")
              (("1" (assert)
                (("1" (skeep)
                  (("1" (expand "sigma" -2)
                    (("1" (expand "sigma" -2)
                      (("1" (assert)
                        (("1" (case "NOT 1^1 = 1")
                          (("1" (hide-all-but 1)
                            (("1" (grind) nil nil)) nil)
                           ("2" (replace -1 -3)
                            (("2" (hide -1)
                              (("2"
                                (case
                                 "NOT nderiv(1,
                                             (LAMBDA (t:
                                                        {tt: (D_down[n](D, p1, p2 - p1)) |
                                                                 tt >= 0 AND tt <= 1}):
                                                f(p1 + t * (p2 - p1))))
                                            (c)
                                       * 1
                                       / 1  = nderiv(1,
                                             (LAMBDA (t:
                                                        {tt: (D_down[n](D, p1, p2 - p1)) |
                                                                 tt >= 0 AND tt <= 1}):
                                                f(p1 + t * (p2 - p1))))
                                            (c)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (replace -1 -3 rl)
                                  (("2"
                                    (case
                                     "NOT f(p1 + 0 * (p2 - p1)) +
                                          nderiv(1,
                                                 (LAMBDA (t:
                                                            {tt: (D_down[n](D, p1, p2 - p1)) |
                                                                     tt >= 0 AND tt <= 1}):
                                                    f(p1 + t * (p2 - p1))))
                                                (c)
                                           * 1
                                           / 1 = f(p1 + 0 * (p2 - p1)) +
                                          nderiv(1,
                                                 (LAMBDA (t:
                                                            {tt: (D_down[n](D, p1, p2 - p1)) |
                                                                     tt >= 0 AND tt <= 1}):
                                                    f(p1 + t * (p2 - p1))))
                                                (c)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (replace -1 -4)
                                      (("2"
                                        (hide -1 -2)
                                        (("2"
                                          (lemma
                                           "g_thm_grad_connect_unit")
                                          (("2"
                                            (inst -1 "p1" "p2" "D" "f")
                                            (("1"
                                              (replace -1 -3)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (case
                                                   "NOT p1 + 0 * (p2 - p1) = p1")
                                                  (("1"
                                                    (lemma "mult_zero")
                                                    (("1"
                                                      (inst -1 "p2-p1")
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (typepred
                                                             "p2-p1"
                                                             "p2"
                                                             "p1")
                                                            (("1"
                                                              (expand
                                                               "max"
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -4
                                                                 -2)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   1)
                                                                  (("1"
                                                                    (replace
                                                                     -6
                                                                     1
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       "zero_id")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "p1")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "p2-p1"
                                                         "p2"
                                                         "p1")
                                                        (("2"
                                                          (expand
                                                           "max"
                                                           -)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1 -3)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (case
                                                         " NOT p1 + 1 * (p2 - p1) = p2")
                                                        (("1"
                                                          (lemma
                                                           "one_idx")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "p2-p1")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (lemma
                                                                 "asso_sub_commute")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "p1"
                                                                   "p2"
                                                                   "p1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1
                                                                       rl)
                                                                      (("1"
                                                                        (lemma
                                                                         "sub_self")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "p1")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (lemma
                                                                               "add_commute")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "zero_vec(length(p1))"
                                                                                 "p2")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "p1")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "zero_id")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "p2")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "p2")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -2
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "p2")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (typepred
                                                                                   "zero_vec(length[real](p1))")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (typepred
                                                                                       "p1")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "p1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "p2")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (typepred
                                                                     "p1")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "p2-p1"
                                                               "p2"
                                                               "p1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -1
                                                           -3)
                                                          (("2"
                                                            (case
                                                             "NOT (LAMBDA (t:
                                                                     {tt: (D_down[n](D, p1, p2 - p1)) |
                                                                              tt >= 0 AND tt <= 1}):
                                                             gradient(D, f)(p1 + t * (p2 - p1)) * (p2 - p1))
                                                              (c) = gradient(D, f)(p1 + c * (p2 - p1)) * (p2 - p1)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1
                                                               -4)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "c")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide -)
                                                              (("3"
                                                                (typepred
                                                                 "f")
                                                                (("3"
                                                                  (lemma
                                                                   "diffD_imp_gradD")
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "D"
                                                                     "f")
                                                                    (("3"
                                                                      (expand
                                                                       "cont_diff?"
                                                                       -1)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide -)
                                                              (("4"
                                                                (typepred
                                                                 "D")
                                                                (("4"
                                                                  (lemma
                                                                   "dd_direction_implies_dd_e_partial")
                                                                  (("4"
                                                                    (inst
                                                                     -1
                                                                     "D")
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("5"
                                                              (hide -)
                                                              (("5"
                                                                (split)
                                                                (("1"
                                                                  (typepred
                                                                   "p1 + c * (p2 - p1)"
                                                                   "p1"
                                                                   "c * (p2 - p1)"
                                                                   "p2-p1"
                                                                   "p2")
                                                                  (("1"
                                                                    (expand
                                                                     "max"
                                                                     -)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "c")
                                                                  (("2"
                                                                    (expand
                                                                     "D_down"
                                                                     -1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("6"
                                                              (assert)
                                                              (("6"
                                                                (skeep)
                                                                (("6"
                                                                  (hide
                                                                   -)
                                                                  (("6"
                                                                    (typepred
                                                                     "f")
                                                                    (("6"
                                                                      (lemma
                                                                       "diffD_imp_gradD")
                                                                      (("6"
                                                                        (inst
                                                                         -1
                                                                         "D"
                                                                         "f")
                                                                        (("6"
                                                                          (expand
                                                                           "cont_diff?"
                                                                           -1)
                                                                          (("6"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("7"
                                                              (skeep)
                                                              (("7"
                                                                (hide
                                                                 -)
                                                                (("7"
                                                                  (lemma
                                                                   "dd_direction_implies_dd_e_partial")
                                                                  (("7"
                                                                    (inst
                                                                     -1
                                                                     "D")
                                                                    (("7"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("8"
                                                              (skeep)
                                                              (("8"
                                                                (hide
                                                                 -)
                                                                (("8"
                                                                  (hide
                                                                   2)
                                                                  (("8"
                                                                    (split)
                                                                    (("1"
                                                                      (typepred
                                                                       "p1 + t * (p2 - p1)"
                                                                       "p1"
                                                                       "t * (p2 - p1)"
                                                                       "p2-p1"
                                                                       "p2")
                                                                      (("1"
                                                                        (expand
                                                                         "max"
                                                                         -)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "t")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "D_down"
                                                                           -1)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -)
                                              (("2"
                                                (typepred "f")
                                                (("2"
                                                  (expand "cont_diff?")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide -)
                                  (("3"
                                    (lemma "D_down_domain_unitc")
                                    (("3"
                                      (inst -1 "p2-p1" "D" "p1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "d_con_ends")
                                          (("1"
                                            (inst -1 "p1" "p2" "D")
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (typepred
                                                   "p1 + t * (p2 - p1)"
                                                   "p1"
                                                   "t * (p2 - p1)"
                                                   "p2-p1"
                                                   "p2")
                                                  (("1"
                                                    (expand "max" -)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "p2-p1" "p2" "p1")
                                        (("2"
                                          (expand "max" -)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma "d_con_ends")
                                              (("2"
                                                (inst -1 "p1" "p2" "D")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred "p2-p1" "p2" "p1")
                                        (("3"
                                          (expand "max" -)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -)
                (("2" (typepred "f")
                  (("2" (expand "cont_diff?" -1)
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2"
              (typepred "p1 + t * (p2 - p1)" "p1" "t * (p2 - p1)"
               "p2-p1" "p2")
              (("2" (expand "max" -) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("3" (typepred "p2-p1" "p2" "p1")
          (("3" (expand "max" -) (("3" (assert) nil nil)) nil)) nil)
         ("4" (typepred "D")
          (("4" (expand "D_down")
            (("4" (expand "domain_connect?" -1)
              (("4" (inst -1 "1") nil nil)) nil))
            nil))
          nil)
         ("5" (assert)
          (("5" (typepred "D")
            (("5" (expand "domain_connect?" -1)
              (("5" (inst -1 "0")
                (("5" (expand "D_down" 1) (("5" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (lemma "D_down_not_one_unitc")
          (("2" (inst -1 "p2-p1" "D" "p1")
            (("1" (lemma "d_con_ends")
              (("1" (inst -1 "p1" "p2" "D") (("1" (assert) nil nil))
                nil))
              nil)
             ("2" (typepred "p2-p1" "p2" "p1")
              (("2" (expand "max" -) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (expand "connected?")
          (("3" (skeep)
            (("3" (expand "D_down" 1)
              (("3" (typepred "x")
                (("3" (typepred "D")
                  (("3" (typepred "y")
                    (("3" (expand "domain_connect?" -4)
                      (("3" (inst -4 "z")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (assert)
        (("4" (typepred "p2-p1" "p2" "p1")
          (("4" (expand "max" -) (("4" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (D_down const-decl "bool" init_partial_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Taylors formula-decl nil taylors analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (factorial_1 formula-decl nil factorial ints)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (f skolem-const-decl "(cont_diff?(D))" Taylor_Thrm_Multi nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (d_con_ends formula-decl nil derivative_domain_multi nil)
    (D_down_domain_unitc formula-decl nil init_partial_def nil)
    (g_thm_grad_connect_unit formula-decl nil Taylor_Thrm_Multi nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (dd_direction_implies_dd_e_partial formula-decl nil
     derivative_domain_multi nil)
    (diffD_imp_gradD formula-decl nil gradient_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (gradient const-decl "VectorN(n)" gradient_def nil)
    (gradientD? const-decl "bool" gradient_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (* const-decl "real" matrices matrices)
    (one_idx formula-decl nil vector_arithmetic nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (add_commute formula-decl nil vector_arithmetic nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (sub_self formula-decl nil vector_arithmetic nil)
    (asso_sub_commute formula-decl nil vector_arithmetic nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (between type-eq-decl nil taylors analysis)
    (< const-decl "bool" reals nil)
    (nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma reals)
    (g_thm_connect_unit formula-decl nil Taylor_Thrm_Multi nil)
    (cont_diff? const-decl "bool" continuous_derivatives nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (D skolem-const-decl
     "({DD: (domain_connect?(p1, p2)) | deriv_domain_all_direction?(DD)})"
     Taylor_Thrm_Multi nil)
    (p2 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (p1 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (D_down_not_one_unitc formula-decl nil init_partial_def nil)
    (z skolem-const-decl "real" Taylor_Thrm_Multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (Taylors_thm 0
  (Taylors_thm-2 nil 3741965325
   ("" (skeep)
    ((""
      (lemma "Taylors[{tt: (D_down[n](D, p1, p2 - p1)) |
                                        tt >= 0 AND tt <= 1}]")
      (("1"
        (inst -1 "0" "1"
         "(LAMBDA (t:{tt: (D_down[n](D, p1, p2 - p1)) |tt >= 0 AND tt <= 1}):f(p1 + t * (p2-p1)))"
         "0")
        (("1" (assert)
          (("1" (lemma "g_thm_connect_unit")
            (("1" (inst -1 "p1" "p2" "D" "f")
              (("1" (assert)
                (("1" (skeep)
                  (("1" (expand "sigma" -2)
                    (("1" (expand "sigma" -2)
                      (("1" (assert)
                        (("1" (case "NOT 1^1 = 1")
                          (("1" (hide-all-but 1)
                            (("1" (grind) nil nil)) nil)
                           ("2" (replace -1 -3)
                            (("2" (hide -1)
                              (("2"
                                (case
                                 "NOT nderiv(1,
                                                                           (LAMBDA (t:
                                                                                      {tt: (D_down[n](D, p1, p2 - p1)) |
                                                                                               tt >= 0 AND tt <= 1}):
                                                                              f(p1 + t * (p2 - p1))))
                                                                          (c)
                                                                     * 1
                                                                     / 1  = nderiv(1,
                                                                           (LAMBDA (t:
                                                                                      {tt: (D_down[n](D, p1, p2 - p1)) |
                                                                                               tt >= 0 AND tt <= 1}):
                                                                              f(p1 + t * (p2 - p1))))
                                                                          (c)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (replace -1 -3 rl)
                                  (("2"
                                    (case
                                     "NOT f(p1 + 0 * (p2 - p1)) +
                                                                            nderiv(1,
                                                                                   (LAMBDA (t:
                                                                                              {tt: (D_down[n](D, p1, p2 - p1)) |
                                                                                                       tt >= 0 AND tt <= 1}):
                                                                                      f(p1 + t * (p2 - p1))))
                                                                                  (c)
                                                                             * 1
                                                                             / 1 = f(p1 + 0 * (p2 - p1)) +
                                                                            nderiv(1,
                                                                                   (LAMBDA (t:
                                                                                              {tt: (D_down[n](D, p1, p2 - p1)) |
                                                                                                       tt >= 0 AND tt <= 1}):
                                                                                      f(p1 + t * (p2 - p1))))
                                                                                  (c)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (replace -1 -4)
                                      (("2"
                                        (hide -1 -2)
                                        (("2"
                                          (lemma
                                           "g_thm_grad_connect_unit")
                                          (("2"
                                            (inst -1 "p1" "p2" "D" "f")
                                            (("1"
                                              (replace -1 -3)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (case
                                                   "NOT p1 + 0 * (p2 - p1) = p1")
                                                  (("1"
                                                    (lemma "mult_zero")
                                                    (("1"
                                                      (inst -1 "p2-p1")
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (typepred
                                                             "p2-p1"
                                                             "p2"
                                                             "p1")
                                                            (("1"
                                                              (expand
                                                               "max"
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -4
                                                                 -2)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   1)
                                                                  (("1"
                                                                    (replace
                                                                     -6
                                                                     1
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       "zero_id")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "p1")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "p2-p1"
                                                         "p2"
                                                         "p1")
                                                        (("2"
                                                          (expand
                                                           "max"
                                                           -)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1 -3)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (case
                                                         " NOT p1 + 1 * (p2 - p1) = p2")
                                                        (("1"
                                                          (lemma
                                                           "one_idx")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "p2-p1")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (lemma
                                                                 "asso_sub_commute")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "p1"
                                                                   "p2"
                                                                   "p1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1
                                                                       rl)
                                                                      (("1"
                                                                        (lemma
                                                                         "sub_self")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "p1")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (lemma
                                                                               "add_commute")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "zero_vec(length(p1))"
                                                                                 "p2")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "p1")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "zero_id")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "p2")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "p2")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -2
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "p2")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (typepred
                                                                                   "zero_vec(length[real](p1))")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (typepred
                                                                                       "p1")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "p1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "p2")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (typepred
                                                                     "p1")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "p2-p1"
                                                               "p2"
                                                               "p1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -1
                                                           -3)
                                                          (("2"
                                                            (case
                                                             "NOT (LAMBDA (t:
                                                                                                                       {tt: (D_down[n](D, p1, p2 - p1)) |
                                                                                                                                tt >= 0 AND tt <= 1}):
                                                                                                               gradient(D, f)(p1 + t * (p2 - p1)) * (p2 - p1))
                                                                                                                (c) = gradient(D, f)(p1 + c * (p2 - p1)) * (p2 - p1)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1
                                                               -4)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "c")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide -)
                                                              (("3"
                                                                (typepred
                                                                 "f")
                                                                (("3"
                                                                  (lemma
                                                                   "diffD_imp_gradD")
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "D"
                                                                     "f")
                                                                    (("3"
                                                                      (expand
                                                                       "cont_diff?"
                                                                       -1)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide -)
                                                              (("4"
                                                                (typepred
                                                                 "D")
                                                                (("4"
                                                                  (lemma
                                                                   "dd_direction_implies_dd_e_partial")
                                                                  (("4"
                                                                    (inst
                                                                     -1
                                                                     "D")
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("5"
                                                              (hide -)
                                                              (("5"
                                                                (split)
                                                                (("1"
                                                                  (typepred
                                                                   "p1 + c * (p2 - p1)"
                                                                   "p1"
                                                                   "c * (p2 - p1)"
                                                                   "p2-p1"
                                                                   "p2")
                                                                  (("1"
                                                                    (expand
                                                                     "max"
                                                                     -)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "c")
                                                                  (("2"
                                                                    (expand
                                                                     "D_down"
                                                                     -1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("6"
                                                              (assert)
                                                              (("6"
                                                                (skeep)
                                                                (("6"
                                                                  (hide
                                                                   -)
                                                                  (("6"
                                                                    (typepred
                                                                     "f")
                                                                    (("6"
                                                                      (lemma
                                                                       "diffD_imp_gradD")
                                                                      (("6"
                                                                        (inst
                                                                         -1
                                                                         "D"
                                                                         "f")
                                                                        (("6"
                                                                          (expand
                                                                           "cont_diff?"
                                                                           -1)
                                                                          (("6"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("7"
                                                              (skeep)
                                                              (("7"
                                                                (hide
                                                                 -)
                                                                (("7"
                                                                  (lemma
                                                                   "dd_direction_implies_dd_e_partial")
                                                                  (("7"
                                                                    (inst
                                                                     -1
                                                                     "D")
                                                                    (("7"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("8"
                                                              (skeep)
                                                              (("8"
                                                                (hide
                                                                 -)
                                                                (("8"
                                                                  (hide
                                                                   2)
                                                                  (("8"
                                                                    (split)
                                                                    (("1"
                                                                      (typepred
                                                                       "p1 + t * (p2 - p1)"
                                                                       "p1"
                                                                       "t * (p2 - p1)"
                                                                       "p2-p1"
                                                                       "p2")
                                                                      (("1"
                                                                        (expand
                                                                         "max"
                                                                         -)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "t")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "D_down"
                                                                           -1)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -)
                                              (("2"
                                                (typepred "f")
                                                (("2"
                                                  (expand "cont_diff?")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide -)
                                  (("3"
                                    (lemma "D_down_domain_unitc")
                                    (("3"
                                      (inst -1 "p2-p1" "D" "p1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "d_con_ends")
                                          (("1"
                                            (inst -1 "p1" "p2" "D")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (typepred
                                                 "p1 + t * (p2 - p1)"
                                                 "p1"
                                                 "t * (p2 - p1)"
                                                 "p2-p1"
                                                 "p2")
                                                (("1"
                                                  (expand "max" -)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "p2-p1" "p2" "p1")
                                        (("2"
                                          (expand "max" -)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma "d_con_ends")
                                              (("2"
                                                (inst -1 "p1" "p2" "D")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred "p2-p1" "p2" "p1")
                                        (("3"
                                          (expand "max" -)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -)
                (("2" (typepred "f")
                  (("2" (expand "cont_diff?" -1)
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2"
              (typepred "p1 + t * (p2 - p1)" "p1" "t * (p2 - p1)"
               "p2-p1" "p2")
              (("2" (expand "max" -) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("3" (typepred "p2-p1" "p2" "p1")
          (("3" (expand "max" -) (("3" (assert) nil nil)) nil)) nil)
         ("4" (typepred "D")
          (("4" (expand "D_down")
            (("4" (expand "domain_connect?" -1)
              (("4" (inst -1 "1") nil nil)) nil))
            nil))
          nil)
         ("5" (assert)
          (("5" (typepred "D")
            (("5" (expand "domain_connect?" -1)
              (("5" (inst -1 "0")
                (("5" (expand "D_down" 1) (("5" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (lemma "D_down_not_one_unitc")
          (("2" (inst -1 "p2-p1" "D" "p1")
            (("1" (lemma "d_con_ends")
              (("1" (inst -1 "p1" "p2" "D") (("1" (assert) nil nil))
                nil))
              nil)
             ("2" (typepred "p2-p1" "p2" "p1")
              (("2" (expand "max" -) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (expand "connected?")
          (("3" (skeep)
            (("3" (expand "D_down" 1)
              (("3" (split)
                (("1" (typepred "x")
                  (("1" (typepred "D")
                    (("1" (typepred "y")
                      (("1" (expand "domain_connect?" -4)
                        (("1" (inst -4 "z") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil) ("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (typepred "p2-p1" "p2" "p1")
        (("4" (expand "max" -) (("4" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (D_down const-decl "bool" init_partial_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Taylors formula-decl nil taylors analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (factorial_1 formula-decl nil factorial ints)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (f skolem-const-decl "(cont_diff?(D))" Taylor_Thrm_Multi nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (d_con_ends formula-decl nil derivative_domain_multi nil)
    (D_down_domain_unitc formula-decl nil init_partial_def nil)
    (g_thm_grad_connect_unit formula-decl nil Taylor_Thrm_Multi nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (dd_direction_implies_dd_e_partial formula-decl nil
     derivative_domain_multi nil)
    (diffD_imp_gradD formula-decl nil gradient_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (gradient const-decl "VectorN(n)" gradient_def nil)
    (gradientD? const-decl "bool" gradient_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (* const-decl "real" matrices matrices)
    (one_idx formula-decl nil vector_arithmetic nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (add_commute formula-decl nil vector_arithmetic nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (sub_self formula-decl nil vector_arithmetic nil)
    (asso_sub_commute formula-decl nil vector_arithmetic nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (between type-eq-decl nil taylors analysis)
    (< const-decl "bool" reals nil)
    (nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma reals)
    (g_thm_connect_unit formula-decl nil Taylor_Thrm_Multi nil)
    (cont_diff? const-decl "bool" continuous_derivatives nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (D skolem-const-decl
     "({DD: (domain_connect?(p1, p2)) | deriv_domain_all_direction?(DD)})"
     Taylor_Thrm_Multi nil)
    (p2 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (p1 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (D_down_not_one_unitc formula-decl nil init_partial_def nil)
    (z skolem-const-decl "real" Taylor_Thrm_Multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil)
  (Taylors_thm-1 nil 3741965309
   ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak))
 (Taylors_Thm 0
  (Taylors_Thm-2 nil 3742030766
   ("" (skeep)
    ((""
      (lemma "Taylors[{tt: (D_down[n](D, p1, p2 - p1)) |
                                          tt >= 0 AND tt <= 1}]")
      (("1"
        (inst -1 "0" "1"
         "(LAMBDA (t:{tt: (D_down[n](D, p1, p2 - p1)) |tt >= 0 AND tt <= 1}):f(p1 + t * (p2-p1)))"
         "0")
        (("1" (assert)
          (("1" (lemma "g_thm_connect_unit")
            (("1" (inst -1 "p1" "p2" "D" "f")
              (("1" (assert)
                (("1" (skeep)
                  (("1" (expand "sigma" -2)
                    (("1" (expand "sigma" -2)
                      (("1" (assert)
                        (("1" (case "NOT 1^1 = 1")
                          (("1" (hide-all-but 1)
                            (("1" (grind) nil nil)) nil)
                           ("2" (replace -1 -3)
                            (("2" (hide -1)
                              (("2"
                                (case
                                 "NOT nderiv(1,
                                                                                          (LAMBDA (t:
                                                                                                     {tt: (D_down[n](D, p1, p2 - p1)) |
                                                                                                              tt >= 0 AND tt <= 1}):
                                                                                             f(p1 + t * (p2 - p1))))
                                                                                         (c)
                                                                                    * 1
                                                                                    / 1  = nderiv(1,
                                                                                          (LAMBDA (t:
                                                                                                     {tt: (D_down[n](D, p1, p2 - p1)) |
                                                                                                              tt >= 0 AND tt <= 1}):
                                                                                             f(p1 + t * (p2 - p1))))
                                                                                         (c)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (replace -1 -3 rl)
                                  (("2"
                                    (case
                                     "NOT f(p1 + 0 * (p2 - p1)) +
                                                                                             nderiv(1,
                                                                                                    (LAMBDA (t:
                                                                                                               {tt: (D_down[n](D, p1, p2 - p1)) |
                                                                                                                        tt >= 0 AND tt <= 1}):
                                                                                                       f(p1 + t * (p2 - p1))))
                                                                                                   (c)
                                                                                              * 1
                                                                                              / 1 = f(p1 + 0 * (p2 - p1)) +
                                                                                             nderiv(1,
                                                                                                    (LAMBDA (t:
                                                                                                               {tt: (D_down[n](D, p1, p2 - p1)) |
                                                                                                                        tt >= 0 AND tt <= 1}):
                                                                                                       f(p1 + t * (p2 - p1))))
                                                                                                   (c)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (replace -1 -4)
                                      (("2"
                                        (hide -1 -2)
                                        (("2"
                                          (lemma
                                           "g_thm_grad_connect_unit")
                                          (("2"
                                            (inst -1 "p1" "p2" "D" "f")
                                            (("1"
                                              (replace -1 -3)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (case
                                                   "NOT p1 + 0 * (p2 - p1) = p1")
                                                  (("1"
                                                    (lemma "mult_zero")
                                                    (("1"
                                                      (inst -1 "p2-p1")
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (typepred
                                                             "p2-p1"
                                                             "p2"
                                                             "p1")
                                                            (("1"
                                                              (expand
                                                               "max"
                                                               -2)
                                                              (("1"
                                                                (replace
                                                                 -4
                                                                 -2)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   1)
                                                                  (("1"
                                                                    (replace
                                                                     -6
                                                                     1
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       "zero_id")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "p1")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "p2-p1"
                                                         "p2"
                                                         "p1")
                                                        (("2"
                                                          (expand
                                                           "max"
                                                           -)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1 -3)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (case
                                                         " NOT p1 + 1 * (p2 - p1) = p2")
                                                        (("1"
                                                          (lemma
                                                           "one_idx")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "p2-p1")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (lemma
                                                                 "asso_sub_commute")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "p1"
                                                                   "p2"
                                                                   "p1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1
                                                                       rl)
                                                                      (("1"
                                                                        (lemma
                                                                         "sub_self")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "p1")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (lemma
                                                                               "add_commute")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "zero_vec(length(p1))"
                                                                                 "p2")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "p1")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "zero_id")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "p2")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "p2")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -2
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "p2")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (typepred
                                                                                   "zero_vec(length[real](p1))")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (typepred
                                                                                       "p1")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "p1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "p2")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (typepred
                                                                     "p1")
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "p2-p1"
                                                               "p2"
                                                               "p1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -1
                                                           -3)
                                                          (("2"
                                                            (case
                                                             "NOT (LAMBDA (t:
                                                                                                                                                {tt: (D_down[n](D, p1, p2 - p1)) |
                                                                                                                                                         tt >= 0 AND tt <= 1}):
                                                                                                                                        gradient(D, f)(p1 + t * (p2 - p1)) * (p2 - p1))
                                                                                                                                         (c) = gradient(D, f)(p1 + c * (p2 - p1)) * (p2 - p1)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1
                                                               -4)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "c")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide -)
                                                              (("3"
                                                                (typepred
                                                                 "f")
                                                                (("3"
                                                                  (lemma
                                                                   "diffD_imp_gradD")
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "D"
                                                                     "f")
                                                                    (("3"
                                                                      (expand
                                                                       "cont_diff?"
                                                                       -1)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide -)
                                                              (("4"
                                                                (typepred
                                                                 "D")
                                                                (("4"
                                                                  (lemma
                                                                   "dd_direction_implies_dd_e_partial")
                                                                  (("4"
                                                                    (inst
                                                                     -1
                                                                     "D")
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("5"
                                                              (hide -)
                                                              (("5"
                                                                (split)
                                                                (("1"
                                                                  (typepred
                                                                   "p1 + c * (p2 - p1)"
                                                                   "p1"
                                                                   "c * (p2 - p1)"
                                                                   "p2-p1"
                                                                   "p2")
                                                                  (("1"
                                                                    (expand
                                                                     "max"
                                                                     -)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "c")
                                                                  (("2"
                                                                    (expand
                                                                     "D_down"
                                                                     -1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("6"
                                                              (assert)
                                                              (("6"
                                                                (skeep)
                                                                (("6"
                                                                  (hide
                                                                   -)
                                                                  (("6"
                                                                    (typepred
                                                                     "f")
                                                                    (("6"
                                                                      (lemma
                                                                       "diffD_imp_gradD")
                                                                      (("6"
                                                                        (inst
                                                                         -1
                                                                         "D"
                                                                         "f")
                                                                        (("6"
                                                                          (expand
                                                                           "cont_diff?"
                                                                           -1)
                                                                          (("6"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("7"
                                                              (skeep)
                                                              (("7"
                                                                (hide
                                                                 -)
                                                                (("7"
                                                                  (lemma
                                                                   "dd_direction_implies_dd_e_partial")
                                                                  (("7"
                                                                    (hide
                                                                     -)
                                                                    (("7"
                                                                      (lemma
                                                                       "dd_direction_implies_dd_e_partial")
                                                                      (("7"
                                                                        (inst
                                                                         -1
                                                                         "D")
                                                                        (("7"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("8"
                                                              (skeep)
                                                              (("8"
                                                                (hide
                                                                 -)
                                                                (("8"
                                                                  (hide
                                                                   2)
                                                                  (("8"
                                                                    (split)
                                                                    (("1"
                                                                      (typepred
                                                                       "p1 + t * (p2 - p1)"
                                                                       "p1"
                                                                       "t * (p2 - p1)"
                                                                       "p2-p1"
                                                                       "p2")
                                                                      (("1"
                                                                        (expand
                                                                         "max"
                                                                         -)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "t")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "D_down"
                                                                           -1)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -)
                                              (("2"
                                                (typepred "f")
                                                (("2"
                                                  (expand "cont_diff?")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide -)
                                  (("3"
                                    (lemma "D_down_domain_unitc")
                                    (("3"
                                      (inst -1 "p2-p1" "D" "p1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "d_con_ends")
                                          (("1"
                                            (inst -1 "p1" "p2" "D")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (typepred
                                                 "p1 + t * (p2 - p1)"
                                                 "p1"
                                                 "t * (p2 - p1)"
                                                 "p2-p1"
                                                 "p2")
                                                (("1"
                                                  (expand "max" -)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "p2-p1" "p2" "p1")
                                        (("2"
                                          (expand "max" -)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma "d_con_ends")
                                              (("2"
                                                (inst -1 "p1" "p2" "D")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred "p2-p1" "p2" "p1")
                                        (("3"
                                          (expand "max" -)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -)
                (("2" (typepred "f")
                  (("2" (expand "cont_diff?" -1)
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2"
              (typepred "p1 + t * (p2 - p1)" "p1" "t * (p2 - p1)"
               "p2-p1" "p2")
              (("2" (expand "max" -) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("3" (typepred "p2-p1" "p2" "p1")
          (("3" (expand "max" -) (("3" (assert) nil nil)) nil)) nil)
         ("4" (typepred "D")
          (("4" (expand "D_down")
            (("4" (expand "domain_connect?" -1)
              (("4" (inst -1 "1") nil nil)) nil))
            nil))
          nil)
         ("5" (assert)
          (("5" (typepred "D")
            (("5" (expand "domain_connect?" -1)
              (("5" (inst -1 "0")
                (("5" (expand "D_down" 1) (("5" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (lemma "D_down_not_one_unitc")
          (("2" (inst -1 "p2-p1" "D" "p1")
            (("1" (lemma "d_con_ends")
              (("1" (inst -1 "p1" "p2" "D") (("1" (assert) nil nil))
                nil))
              nil)
             ("2" (typepred "p2-p1" "p2" "p1")
              (("2" (expand "max" -) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (expand "connected?")
          (("3" (skeep)
            (("3" (expand "D_down" 1)
              (("3" (typepred "x")
                (("3" (typepred "D")
                  (("3" (typepred "y")
                    (("3" (expand "domain_connect?" -4)
                      (("3" (inst -4 "z")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (assert)
        (("4" (typepred "p2-p1" "p2" "p1")
          (("4" (expand "max" -) (("4" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain_connect? const-decl "bool" derivative_domain_multi nil)
    (D_down const-decl "bool" init_partial_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Taylor_Thrm_Multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Taylors formula-decl nil taylors analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (factorial_1 formula-decl nil factorial ints)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (f skolem-const-decl "(cont_diff?(D))" Taylor_Thrm_Multi nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (d_con_ends formula-decl nil derivative_domain_multi nil)
    (D_down_domain_unitc formula-decl nil init_partial_def nil)
    (g_thm_grad_connect_unit formula-decl nil Taylor_Thrm_Multi nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (dd_direction_implies_dd_e_partial formula-decl nil
     derivative_domain_multi nil)
    (diffD_imp_gradD formula-decl nil gradient_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (gradient const-decl "VectorN(n)" gradient_def nil)
    (gradientD? const-decl "bool" gradient_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (* const-decl "real" matrices matrices)
    (one_idx formula-decl nil vector_arithmetic nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (add_commute formula-decl nil vector_arithmetic nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (sub_self formula-decl nil vector_arithmetic nil)
    (asso_sub_commute formula-decl nil vector_arithmetic nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (between type-eq-decl nil taylors analysis)
    (< const-decl "bool" reals nil)
    (nderiv def-decl "[T -> real]" nth_derivatives analysis)
    (nderiv_fun type-eq-decl nil nth_derivatives analysis)
    (derivable_n_times? def-decl "bool" nth_derivatives analysis)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma reals)
    (g_thm_connect_unit formula-decl nil Taylor_Thrm_Multi nil)
    (cont_diff? const-decl "bool" continuous_derivatives nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (D skolem-const-decl
     "({DD: (domain_connect?(p1, p2)) | deriv_domain_all_direction?(DD)})"
     Taylor_Thrm_Multi nil)
    (p2 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (p1 skolem-const-decl "VectorN(n)" Taylor_Thrm_Multi nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (D_down_not_one_unitc formula-decl nil init_partial_def nil)
    (z skolem-const-decl "real" Taylor_Thrm_Multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil)
  (Taylors_Thm-1 nil 3742030754
   ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak)))