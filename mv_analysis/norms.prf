(norms
 (norm?_TCC1 0
  (norm?_TCC1-1 nil 3736760666 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (norm? subtype "norms.v1" "(list_adt[real].cons?)")))
 (norm?_TCC2 0
  (norm?_TCC2-1 nil 3736760666
   ("" (skeep) (("" (assert) (("" (grind) nil nil)) nil)) nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (VectorN type-eq-decl nil matrices matrices)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (norm? subtype "matrices.*(norms.c, norms.v1)"
    "(list_adt[real].cons?)")))
 (norm?_TCC3 0
  (norm?_TCC3-1 nil 3737122913
   ("" (skeep)
    (("" (split)
      (("1" (split) (("1" (grind) nil nil) ("2" (propax) nil nil)) nil)
       ("2" (split) (("1" (propax) nil nil) ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (m skolem-const-decl "posnat" norms nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (norm? subtype "(matrices.+)(norms.v1, norms.v2)"
    "(list_adt[real].cons?)")))
 (norm?_TCC4 0
  (norm?_TCC4-1 nil 3737122913
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (split)
            (("1" (split)
              (("1" (grind) nil nil) ("2" (propax) nil nil)) nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil (norm? subtype "norms.v2" "(list_adt[real].cons?)")))
 (max_TCC1 0
  (max_TCC2-1 nil 3736760666 ("" (grind) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil))
   nil
   (max subtype "list_adt[real].cdr(norms.ll)"
        "(list_adt[real].cons?)")))
 (max_TCC2 0
  (max_TCC3-1 nil 3736760666 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)) nil
   (max termination "norms.max(list_adt[real].cdr(norms.ll))" "nil")))
 (max_nth 0
  (max_nth-1 nil 3742821553
   ("" (induct "ll")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (assert)
        (("3" (case "cons2_var=null")
          (("1" (replace -1 1)
            (("1" (inst 1 "0")
              (("1" (expand "max" 1)
                (("1" (expand "length" 1)
                  (("1" (expand "nth" 1) (("1" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (expand "length" 1) (("2" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "max" 2 1)
              (("2" (assert)
                (("2" (case "cons1_var >= max(cons2_var)")
                  (("1" (inst 2 "0")
                    (("1" (assert)
                      (("1" (expand "length" 2 1)
                        (("1" (assert)
                          (("1" (expand "length" 2 1)
                            (("1" (assert)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "max" 2 1)
                                  (("1"
                                    (expand "nth" 2 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "length" 1) (("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (skeep)
                      (("2" (inst 3 "i+1")
                        (("1" (assert)
                          (("1" (assert)
                            (("1" (expand "length" 3 1)
                              (("1"
                                (expand "max" 3 1)
                                (("1"
                                  (expand "nth" 3)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "length" 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons1_var skolem-const-decl "real" norms nil)
    (cons2_var skolem-const-decl "list[real]" norms nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (i skolem-const-decl "below(length(cons2_var))" norms nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (max def-decl "real" norms nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (entry_mult_TCC1 0
  (entry_mult_TCC1-1 nil 3736844617 ("" (grind) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil))
   nil
   (entry_mult subtype "list_adt[real].cdr(norms.l2)"
    "(list_adt[real].cons?)")))
 (entry_mult_TCC2 0
  (entry_mult_TCC2-1 nil 3796042251 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (entry_mult termination
    "norms.entry_mult(list_adt[real].cdr(norms.l1), list_adt[real].cdr(norms.l2))"
    "nil")))
 (abs_TCC1 0
  (abs_TCC1-1 nil 3737117860 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures))
   nil
   (abs subtype
        "list_adt[real].cons(real_defs.abs(list_adt[real].car(norms.ll)), list_adt[real].null)"
        "{l: list_adt[real].list | list_props[real].length(l) = list_props[real].length(norms.ll)}")))
 (abs_TCC2 0
  (abs_TCC2-1 nil 3737117945
   ("" (skeep)
    (("" (expand "length")
      (("" (typepred "v(cdr[real](ll))") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (abs subtype
        "list_adt[real].cons(real_defs.abs(list_adt[real].car(norms.ll)), norms.abs(list_adt[real].cdr(norms.ll)))"
        "{l: list_adt[real].list | list_props[real].length(l) = list_props[real].length(norms.ll)}")))
 (abs_nth_TCC1 0
  (abs_nth_TCC1-1 nil 3742821510 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (abs_nth subtype "norms.i" "below[length[real](abs(ll))]")))
 (abs_nth 0
  (abs_nth-1 nil 3742821796
   ("" (induct "ll")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert)
      (("3" (skeep)
        (("3" (case "cons2_var=null")
          (("1" (assert)
            (("1" (replace -1 1)
              (("1" (skeep)
                (("1" (case "NOT i=0")
                  (("1" (assert)
                    (("1" (typepred "i")
                      (("1" (expand "length" -1)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (replace -1 1)
                    (("2" (expand "nth" 1)
                      (("2" (hide -) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (skeep)
              (("2" (case "i=0")
                (("1" (replace -1 2)
                  (("1" (hide -) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (inst -1 "i-1")
                  (("1" (expand "nth" 3 1)
                    (("1" (assert)
                      (("1" (expand "nth" 3 2)
                        (("1" (assert)
                          (("1" (expand "abs" 3 2)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (typepred "i")
                      (("2" (expand "length" -1)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (typepred "abs(ll)") (("4" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons1_var skolem-const-decl "real" norms nil)
    (cons2_var skolem-const-decl "list[real]" norms nil)
    (i skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
       norms nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil))
   shostak))
 (test_max_1 0
  (test_max_1-1 nil 3737117644 ("" (eval-formula) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (test_abs_1 0
  (test_abs_1-1 nil 3736856029 ("" (eval-formula 1) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (test_sum 0
  (test_sum-1 nil 3736862704 ("" (eval-formula 1) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (test_entry_mult 0
  (test_entry_mult-1 nil 3736854457 ("" (eval-formula 1) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (test_entry_mult_2 0
  (test_entry_mult_2-1 nil 3737116879 ("" (eval-formula 1) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (abs_max_lists_TCC1 0
  (abs_max_lists_TCC1-1 nil 3737193828
   ("" (induct "ll")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (split)
          (("1" (assert)
            (("1" (inst -1 "c")
              (("1" (assert)
                (("1" (expand "*" 1)
                  (("1" (expand "scal") (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "*")
            (("2" (expand "scal") (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((scal def-decl "VectorN(length(v2))" matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil
   (abs_max_lists subtype "matrices.*(norms.c, norms.ll)"
    "(list_adt[real].cons?)")))
 (abs_max_lists_TCC2 0
  (abs_max_lists_TCC2-1 nil 3737193828
   ("" (induct "ll")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (split)
        (("1" (skeep)
          (("1" (inst -1 "c")
            (("1" (expand "*" 1)
              (("1" (expand "scal")
                (("1" (assert)
                  (("1"
                    (typepred
                     "abs(cons(c*cons1_var, scal(c, cons2_var)))")
                    (("1"
                      (typepred
                       "cons(c * cons1_var, scal(c, cons2_var))")
                      (("1" (assert)
                        (("1" (hide -1 -3)
                          (("1" (expand "length" -2)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "cons2_var")
          (("2" (assert)
            (("2" (skeep)
              (("2" (typepred "cons1_var")
                (("2" (typepred "abs(c * cons(cons1_var, cons2_var))")
                  (("2" (typepred "c * cons(cons1_var, cons2_var)")
                    (("2" (hide -1 -3 -6)
                      (("2" (assert)
                        (("2" (typepred "cons(cons1_var, cons2_var)")
                          (("2" (assert)
                            (("2" (hide -1)
                              (("2"
                                (replace -2 -3)
                                (("2"
                                  (hide -2)
                                  (("2"
                                    (expand "length" -2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (assert)
          (("4" (typepred "c*ll")
            (("4" (typepred "ll")
              (("4" (expand "length" -3) (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (abs_max_lists subtype "norms.abs(matrices.*(norms.c, norms.ll))"
    "(list_adt[real].cons?)")))
 (abs_max_lists_TCC3 0
  (abs_max_lists_TCC3-1 nil 3737208631
   ("" (skeep)
    (("" (typepred "abs(ll)")
      (("" (typepred "ll")
        (("" (expand "length" -4) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (abs_max_lists subtype "norms.abs(norms.ll)"
    "(list_adt[real].cons?)")))
 (abs_max_lists 0
  (abs_max_lists-1 nil 3737193829
   ("" (induct "ll")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (split)
            (("1" (expand "*")
              (("1" (expand "scal" 1)
                (("1" (expand "abs" 1)
                  (("1" (lift-if)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (lift-if)
                                (("1"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst -4 "c")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "max" 1 1)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "abs" 1 2)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "max"
                                                             1)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "abs"
                                                                   1)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (mult-ineq
                                                                             -2
                                                                             -5
                                                                             (-
                                                                              -))
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "max"
                                                           2)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "abs"
                                                                   1)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (typepred
                                                                             "cons2_var")
                                                                            (("2"
                                                                              (flip-ineq
                                                                               3)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (case
                                                                                   "cons1_var=0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "NOT 0 < cons1_var")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2
                                                                                         -3
                                                                                         -4
                                                                                         -5
                                                                                         -6
                                                                                         -8
                                                                                         -9)
                                                                                        (("2"
                                                                                          (case
                                                                                           "NOT c * cons1_var < 0")
                                                                                          (("1"
                                                                                            (flip-ineq
                                                                                             1)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              (("1"
                                                                                                (mult-by
                                                                                                 -3
                                                                                                 "cons1_var")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (inst -3 "c")
                                      (("2"
                                        (typepred "cons1_var")
                                        (("2"
                                          (expand "length" -3)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "scal" -3)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("2"
                                                          (expand
                                                           "scal"
                                                           -1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst -3 "c")
                                      (("1"
                                        (typepred "cons1_var")
                                        (("1"
                                          (typepred "cons2_var")
                                          (("1"
                                            (expand "length" -3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "abs" 1)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "max"
                                                                   1)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (hide
                                                                   -2
                                                                   -5
                                                                   -6
                                                                   2)
                                                                  (("2"
                                                                    (case
                                                                     "cons1_var >=0 ")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "cons1_var=0")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (flip-ineq
                                                                           2)
                                                                          (("2"
                                                                            (div-by
                                                                             -3
                                                                             "cons1_var")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flip-ineq
                                                                 3)
                                                                (("1"
                                                                  (mult-by
                                                                   -2
                                                                   "c")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flip-ineq
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "NOT c=0")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -1
                                                                           1)
                                                                          (("2"
                                                                            (replace
                                                                             -1
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "max"
                                                                               1)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "max"
                                                                   2
                                                                   1)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "max"
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred
                                         " cons(c * cons1_var, scal(c, cons2_var))")
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (expand "scal" -2)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (inst -3 "c")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst -3 "c")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred
                                                           "cons2_var")
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (expand
                                                               "scal"
                                                               -1)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             -2)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "scal"
                                                                         -1)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "length"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     -2)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "scal"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "length"
                                                                                               -2)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "scal"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "scal"
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "scal "
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         6)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             6)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               6)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (lift-if)
                          (("2" (inst -1 "c")
                            (("2" (assert)
                              (("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred
                                               "cons(c * cons1_var, scal(c, cons2_var))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (expand "length" 2)
                                                    (("1"
                                                      (expand "scal" 2)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       -2)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "cons2_var")
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (expand "max" 2 1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "max"
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (typepred
                                                                             "abs(cons2_var)")
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               -3)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "length"
                                                                                   2)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           -1)
                                                                          (("2"
                                                                            (typepred
                                                                             "abs(scal(c, cons2_var))")
                                                                            (("2"
                                                                              (typepred
                                                                               "scal(c, cons2_var)")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replace
                                                               -2
                                                               2)
                                                              (("2"
                                                                (case
                                                                 "NOT abs(c) = -c")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "abs"
                                                                     1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1
                                                                   2)
                                                                  (("2"
                                                                    (lemma
                                                                     "abs_mult")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "c"
                                                                       "cons1_var")
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         2)
                                                                        (("2"
                                                                          (replace
                                                                           -2
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "max"
                                                                               2
                                                                               1)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (div-by
                                                                                       -1
                                                                                       "-c")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "max"
                                                                                           1
                                                                                           2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "max"
                                                                                                     2
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (div-by
                                                                                         2
                                                                                         "-c")
                                                                                        (("2"
                                                                                          (div-by
                                                                                           1
                                                                                           "-c")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (flip-ineq
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "max"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "max"
                                                                                                             2
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred
                                               "scal(c, cons2_var)")
                                              (("1"
                                                (typepred
                                                 "cons(cons1_var, cons2_var)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -1 -3)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -3)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -3
                                                           -2
                                                           lr)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             3)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "max" 2 1)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "abs(scal(c, cons2_var))")
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (typepred
                                                                   "scal(c, cons2_var)")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     -3)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             4)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (replace -1 2)
                                                        (("2"
                                                          (flip-ineq 4)
                                                          (("2"
                                                            (case
                                                             "NOT abs(c)=c")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "abs"
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1
                                                               2)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (lemma
                                                                   "abs_mult")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "c"
                                                                     "cons1_var")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         2)
                                                                        (("2"
                                                                          (replace
                                                                           -2
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "max"
                                                                             2
                                                                             1)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (div-by
                                                                                     -1
                                                                                     "c")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (div-by
                                                                                         1
                                                                                         "c")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "max"
                                                                                           1
                                                                                           2)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "cons(abs(cons1_var), abs(cons2_var))")
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (typepred
                                                                                                             "abs(cons2_var)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "length"
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "max"
                                                                                                       2
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (div-by
                                                                                       1
                                                                                       "c")
                                                                                      (("2"
                                                                                        (div-by
                                                                                         2
                                                                                         "c")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flip-ineq
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "max"
                                                                                               1)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "max"
                                                                                                           2
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "cons2_var")
              (("2" (hide -1)
                (("2" (case "NOT null?(cons2_var)")
                  (("1" (assert) nil nil)
                   ("2"
                    (typepred "abs(c * cons(cons1_var, cons2_var))")
                    (("2" (hide -1)
                      (("2" (typepred "c * cons(cons1_var, cons2_var)")
                        (("2" (hide -1)
                          (("2"
                            (typepred " cons(cons1_var, cons2_var)")
                            (("2" (hide -1)
                              (("2"
                                (replace -2 -3)
                                (("2"
                                  (expand "length" -3 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "length" -3 2)
                                      (("2"
                                        (expand "max" 2 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "max" 2 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "abs" 2 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "*" 2)
                                                    (("2"
                                                      (expand "scal" 2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "abs_mult")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "c"
                                                             "cons1_var")
                                                            (("2"
                                                              (replace
                                                               -1
                                                               2)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "abs(c)=0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (div-by
                                                                     3
                                                                     "abs(c)")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "abs"
                                                                         3
                                                                         2)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (assert)
        (("4" (typepred "abs(ll)")
          (("4" (assert)
            (("4" (expand "length" -2) (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (typepred "abs(c * ll)")
          (("5" (typepred "c * ll")
            (("5" (hide -1 -3)
              (("5" (replace -1 -2)
                (("5" (assert)
                  (("5" (expand "length" -2 2) (("5" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (typepred "c * ll")
          (("6" (expand "length" -2 2)
            (("6" (assert) (("6" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (c skolem-const-decl "real" norms nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs_mult formula-decl nil real_props nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max def-decl "real" norms nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   shostak))
 (abs_pos 0
  (abs_pos-1 nil 3737303049
   ("" (induct "ll")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (split)
        (("1" (expand "abs" 1)
          (("1" (lift-if)
            (("1" (split)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (expand "max" 1) (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (expand "max" 2 1)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (split)
                          (("1" (propax) nil nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (case "NOT null?(cons2_var)")
            (("1" (assert) nil nil)
             ("2" (expand "abs" 2)
              (("2" (assert)
                (("2" (lift-if)
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (expand "max" 1)
                          (("1" (lift-if) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (expand "max")
                          (("2" (assert)
                            (("2" (lift-if)
                              (("2"
                                (assert)
                                (("2"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (assert)
        (("4" (typepred "abs(ll)")
          (("4" (assert)
            (("4" (expand "length" -2) (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (max def-decl "real" norms nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil))
   shostak))
 (abs_zero 0
  (abs_zero-1 nil 3737303506
   ("" (induct "ll")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert) nil nil)
     ("4" (skeep)
      (("4" (split)
        (("1" (flatten)
          (("1" (split)
            (("1" (split)
              (("1" (split)
                (("1" (flatten)
                  (("1" (skeep)
                    (("1" (inst 1 "m+1")
                      (("1" (decompose-equality 1)
                        (("1" (expand "zero_vec" 1)
                          (("1" (assert) (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (expand "zero_vec" 1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (flatten)
                    (("2" (skeep)
                      (("2" (skeep)
                        (("2" (expand "abs" 1)
                          (("2" (assert)
                            (("2" (lift-if)
                              (("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "max" 1)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "max" 2)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "max" 2 1)
                                              (("2"
                                                (expand "zero_vec" -1)
                                                (("2"
                                                  (decompose-equality
                                                   -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "abs" 2)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil)
             ("2" (assert)
              (("2" (split)
                (("1" (flatten)
                  (("1" (expand "abs" -1)
                    (("1" (assert)
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (inst 1 "1")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length" -1)
                                  (("1"
                                    (expand "zero_vec" 1)
                                    (("1"
                                      (decompose-equality 1)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "max" -1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred
                                           "max(abs(cons2_var))")
                                          (("2"
                                            (lemma "abs_pos")
                                            (("2"
                                              (inst-cp -1 "cons2_var")
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (skeep)
                    (("2" (typepred "m")
                      (("2" (inst 3 "m-1")
                        (("1" (assert)
                          (("1" (expand "zero_vec" -2)
                            (("1" (decompose-equality -2) nil nil))
                            nil))
                          nil)
                         ("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (split)
          (("1" (flatten)
            (("1" (typepred "cons2_var")
              (("1" (case "NOT null?(cons2_var)")
                (("1" (assert) nil nil)
                 ("2" (inst 1 "1")
                  (("2" (expand "zero_vec" 1)
                    (("2" (decompose-equality 1)
                      (("1" (expand "abs" -3)
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (expand "max" -2)
                                (("1"
                                  (lift-if)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "max" -1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (expand "max" -1)
                                            (("2"
                                              (lift-if)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "zero_vec" 1)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (skeep)
              (("2" (expand "zero_vec" -1)
                (("2" (decompose-equality -1)
                  (("2" (assert)
                    (("2" (typepred "m")
                      (("2" (case "NOT null?(cons2_var)")
                        (("1" (assert) nil nil)
                         ("2" (expand "abs" 1)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "max" 1)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "abs" 1)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "length" 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (assert)
        (("5" (typepred "abs(ll)")
          (("5" (expand "length" -2 2) (("5" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (typepred "abs(ll)")
        (("6" (expand "length" -2 2)
          (("6" (assert) (("6" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (m skolem-const-decl "posnat" norms nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cons1_var skolem-const-decl "real" norms nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (abs_pos formula-decl nil norms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (m skolem-const-decl "posnat" norms nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (max def-decl "real" norms nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil))
   shostak))
 (abs_max_triag_TCC1 0
  (abs_max_triag_TCC1-1 nil 3737360598
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (length def-decl "nat" list_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (abs_max_triag subtype "(matrices.+)(norms.l1, norms.l2)"
    "(list_adt[real].cons?)")))
 (abs_max_triag_TCC2 0
  (abs_max_triag_TCC2-1 nil 3737360598
   ("" (skeep)
    (("" (typepred "l1")
      (("" (hide -1)
        (("" (typepred "abs(l1+l2)")
          (("" (typepred "l1+l2")
            (("" (hide -1 -3)
              (("" (expand "max" -1)
                (("" (assert)
                  (("" (replace -1 -2)
                    (("" (expand "length" -2) (("" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (abs_max_triag subtype "norms.abs((matrices.+)(norms.l1, norms.l2))"
    "(list_adt[real].cons?)")))
 (abs_max_triag_TCC3 0
  (abs_max_triag_TCC3-1 nil 3737360598
   ("" (skeep)
    (("" (typepred "l1")
      (("" (typepred "abs(l2)")
        (("" (assert)
          (("" (expand "length" -2 2) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (abs_max_triag subtype "norms.abs(norms.l2)"
    "(list_adt[real].cons?)")))
 (abs_max_triag 0
  (abs_max_triag-1 nil 3737360600
   ("" (induct "l1")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (split)
            (("1" (inst -1 "cdr(l2)")
              (("1" (split)
                (("1" (assert)
                  (("1" (expand "+" 1 1)
                    (("1" (expand "add" 1)
                      (("1" (expand "abs" 1 1)
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "max" 1 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "length" -4)
                                          (("1"
                                            (expand "length" -2)
                                            (("1"
                                              (expand "length" -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "add" -2)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "max" 2 3)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (split)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "length" -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand "length" 3)
                                                    (("2"
                                                      (expand
                                                       "add"
                                                       3
                                                       1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (move-terms
                                                                   -1
                                                                   l
                                                                   2)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       2)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "add(cdr(cons2_var), cdr(cdr(l2)))")
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (typepred
                                                                               "cdr(abs(l2))")
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "max"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length"
                                                                                               -4)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "abs(l2)")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       -4)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -4
                                                                                                         -6)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -6)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "max" 2 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (split)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand "max" 2 1)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "+"
                                                           -2
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "abs"
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "max"
                                                               1
                                                               2)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (typepred
                                                                         "abs(cons2_var)")
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             -2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "length"
                                                                                 -5
                                                                                 1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   -2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     -5)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "max"
                                                                         2
                                                                         2)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (case
                                                                                   "NOT  max(abs(cdr(l2))) <= max(car(abs(l2)), max(cdr(abs(l2))))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (flip-ineq
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (case
                                                                                         "NOT  max(abs(cdr(l2))) <= max(car(abs(l2)), max(cdr(abs(l2))))")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "abs"
                                                             2
                                                             2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "triangle")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "car(l2)"
                                                                   "cons1_var")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "max"
                                                                       2
                                                                       1)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "length"
                                                                                 -1)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "abs(cons2_var)")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       -2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "max"
                                                                                 2
                                                                                 1)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (flip-ineq
                                                                                           1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "length" -1) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "l2")
                (("2" (hide -1)
                  (("2" (assert)
                    (("2" (typepred "cdr[real](l2)")
                      (("2" (hide -1)
                        (("2" (typepred "cons2_var")
                          (("2" (hide -1)
                            (("2" (expand "length" -2)
                              (("2"
                                (case "NOT null?(cdr(l2))")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (expand "abs" 2 3)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (expand "length" 2 1)
                                        (("2"
                                          (expand "abs" 2 2)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand "max" 1 3)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "max"
                                                             1
                                                             2)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "+"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "add"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "add"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "abs"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "max"
                                                                                                 1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "triangle")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length"
                                                                                               -5)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "length" -1)
              (("2" (case "NOT null?(cons2_var)")
                (("1" (assert) nil nil)
                 ("2" (expand "length" -2)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (split)
                          (("1" (assert) (("1" (grind) nil nil)) nil)
                           ("2" (flatten) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "abs(l2)")
            (("4" (assert)
              (("4" (expand "length" -2) (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (skeep)
          (("5" (typepred "abs(l1)")
            (("5" (expand "length" -2 2)
              (("5" (assert) (("5" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (skeep)
          (("6" (typepred "abs(l1+l2)")
            (("6" (typepred "l1+l2")
              (("6" (assert)
                (("6" (expand "length" -2 2) (("6" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep)
      (("7" (skeep) (("7" (assert) (("7" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (l2 skolem-const-decl "(cons?)" norms nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (triangle formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max def-decl "real" norms nil) (<= const-decl "bool" reals nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sum_abs_pos 0
  (sum_abs_pos-1 nil 3737737370
   ("" (induct "ll")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (split)
        (("1" (assert)
          (("1" (expand "abs" 1)
            (("1" (lift-if)
              (("1" (assert)
                (("1" (split)
                  (("1" (flatten)
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (flatten)
                    (("2" (expand "entry_sum" 2 1)
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (split)
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (typepred "abs(ll)")
        (("4" (expand "length" -2) (("4" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (entry_sum def-decl "real" norms nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil))
   shostak))
 (sum_abs_lists 0
  (sum_abs_lists-1 nil 3737715387
   ("" (induct "ll")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert)
      (("3" (skeep)
        (("3" (assert)
          (("3" (skeep)
            (("3" (split)
              (("1" (inst -1 "c")
                (("1" (assert)
                  (("1" (expand "abs" 1 3)
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (typepred "cons2_var")
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand "length" -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "abs" 1 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "entry_sum" 1 2)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "entry_sum"
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "*"
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "scal"
                                                           1)
                                                          (("1"
                                                            (lemma
                                                             "abs_mult")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "c"
                                                               "cons1_var")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "*" 2 1)
                              (("2"
                                (expand "scal" 2)
                                (("2"
                                  (expand "abs" 2 1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred
                                             "cons(c * cons1_var, scal(c, cons2_var))")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (typepred
                                                 "scal(c, cons2_var)")
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -3)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -3
                                                           -1
                                                           lr)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "entry_sum" 2 1)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -1)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         3)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "*"
                                                         -1
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "entry_sum"
                                                           2
                                                           2)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       4)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "abs_mult")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "c"
                                                                       "cons1_var")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (typepred "cons2_var")
                  (("2" (case "NOT null?(cons2_var)")
                    (("1" (assert) nil nil)
                     ("2" (hide -2)
                      (("2" (expand "entry_sum" 2)
                        (("2" (lift-if)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "abs" 1 3)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "*" 1 1)
                                          (("1"
                                            (expand "scal" 1 1)
                                            (("1"
                                              (expand "scal" 1 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "abs" 1 1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "abs_mult")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "c"
                                                           "cons1_var")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "*" 1)
                                    (("2"
                                      (expand "scal" 1)
                                      (("2"
                                        (expand "abs" 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand "length" 1)
                                                  (("2"
                                                    (expand "scal" 1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (assert)
          (("4" (typepred "abs(ll)")
            (("4" (assert)
              (("4" (expand "length" -2 2) (("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (skeep)
          (("5" (assert)
            (("5" (typepred "abs(c*ll)")
              (("5" (assert)
                (("5" (expand "*" -2 2)
                  (("5" (typepred "scal(c,ll)")
                    (("5" (assert)
                      (("5" (expand "length" -2 2)
                        (("5" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (typepred "c*ll")
          (("6" (assert)
            (("6" (expand "length") (("6" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (length_singleton formula-decl nil more_list_props structures)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (abs_mult formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (entry_sum def-decl "real" norms nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   shostak))
 (sum_abs_zero 0
  (sum_abs_zero-1 nil 3737717288
   ("" (induct "ll")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert) nil nil)
     ("4" (assert)
      (("4" (skeep)
        (("4" (split)
          (("1" (flatten)
            (("1" (split)
              (("1" (split)
                (("1" (split)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (skeep)
                        (("1" (assert)
                          (("1" (inst 1 "m+1")
                            (("1" (expand "zero_vec" 1)
                              (("1"
                                (assert)
                                (("1"
                                  (decompose-equality 1)
                                  (("1"
                                    (expand "abs" -1)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "length" -1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand
                                                 "entry_sum"
                                                 -1
                                                 1)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (flatten)
                      (("2" (expand "abs" 1)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "entry_sum" 1)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "zero_vec" -2)
                                                (("1"
                                                  (decompose-equality
                                                   -2)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (expand "entry_sum" 2)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (decompose-equality -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "zero_vec"
                                                   -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "abs" 1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "zero_vec" -1)
                                                (("2"
                                                  (decompose-equality
                                                   -1)
                                                  (("2"
                                                    (expand "abs" 2 1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil)
               ("2" (assert)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (expand "abs" -1)
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (expand "entry_sum" -2)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst 1 "1")
                                        (("1"
                                          (expand "zero_vec" 1)
                                          (("1"
                                            (decompose-equality 1)
                                            (("1"
                                              (expand "zero_vec" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "length" -2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "entry_sum" -1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "length" -1)
                                          (("1"
                                            (expand "length" 1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (lemma "sum_abs_pos")
                                            (("2"
                                              (inst -1 "cons2_var")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (skeep)
                      (("2" (inst 3 "m-1")
                        (("1" (expand "zero_vec" -1)
                          (("1" (assert)
                            (("1" (decompose-equality -1) nil nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (typepred "m")
                            (("2" (typepred "cons2_var")
                              (("2"
                                (hide -1)
                                (("2"
                                  (reveal 1)
                                  (("2"
                                    (expand "zero_vec" -2)
                                    (("2"
                                      (decompose-equality -2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case "NOT m=1")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (replace -1 -3)
                                            (("2"
                                              (simplify)
                                              (("2"
                                                (expand "zero_vec" -3)
                                                (("2"
                                                  (expand "abs" 3)
                                                  (("2"
                                                    (expand "abs" 3)
                                                    (("2"
                                                      (expand
                                                       "entry_sum"
                                                       3)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "cons2_var")
            (("2" (assert)
              (("2" (split)
                (("1" (flatten)
                  (("1" (hide -2)
                    (("1" (case "NOT null?(cons2_var)")
                      (("1" (assert) nil nil)
                       ("2" (inst 1 "1")
                        (("2" (assert)
                          (("2" (expand "zero_vec" 1)
                            (("2" (expand "zero_vec" 1)
                              (("2"
                                (decompose-equality 1)
                                (("2"
                                  (expand "abs" -2)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "abs" -2)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -3)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "entry_sum")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -2)
                                                          (("2"
                                                            (expand
                                                             "entry_sum"
                                                             -1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "length" 1)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (skeep)
                    (("2" (case "NOT null?(cons2_var)")
                      (("1" (assert) nil nil)
                       ("2" (expand "abs" 1)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "entry_sum" 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "zero_vec" -3)
                                      (("1"
                                        (decompose-equality -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "abs" 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "length" 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (typepred "abs(ll)")
        (("5" (assert)
          (("5" (expand "length" -2) (("5" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (assert)
        (("6" (typepred "abs(ll)")
          (("6" (expand "length" -2) (("6" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sum_abs_pos formula-decl nil norms nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (m skolem-const-decl "posnat" norms nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (entry_sum def-decl "real" norms nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil))
   shostak))
 (sum_abs_triag 0
  (sum_abs_triag-1 nil 3737718822
   ("" (induct "l1")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert)
      (("3" (skeep)
        (("3" (split)
          (("1" (skeep)
            (("1" (inst -1 "cdr(l2)")
              (("1" (split)
                (("1" (assert)
                  (("1" (expand "+" 1 1)
                    (("1" (expand "add" 1)
                      (("1" (expand "abs" 1 1)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "entry_sum" 1)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "abs" 1 2)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "abs"
                                                         1
                                                         3)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "triangle")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "car(l2)"
                                                               "cons1_var")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "abs"
                                                                   -1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "length"
                                                                 -1)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "add"
                                                                             -1)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "abs"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "abs(cons2_var)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "abs"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             3)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "abs" 2 3)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "length" 2)
                                              (("1"
                                                (expand "length" -1)
                                                (("1"
                                                  (expand
                                                   "length"
                                                   -3
                                                   1)
                                                  (("1"
                                                    (replace -1 -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "add"
                                                           2)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   -4)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       1)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -4)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "entry_sum"
                                                                                       1
                                                                                       3)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "add"
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "entry_sum"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (split)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "triangle")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "car(l2)"
                                                                                                               "cons1_var")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "abs"
                                                                                                                   1
                                                                                                                   3)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "l2")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1
                                                                                             -4
                                                                                             -5
                                                                                             -6
                                                                                             2
                                                                                             3)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "cdr(cdr(l2))")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "cons?(cdr(cdr(l2)))")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "NOT length(cdr(l2))=0")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   -4)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "NOT cdr(l2) = cons( car(cdr(l2)), cdr(cdr(l2)))")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (decompose-equality
                                                                                                                         1)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "entry_sum" 2 1)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "entry_sum"
                                                           1
                                                           2)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         2)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "length"
                                                                               3)
                                                                              (("2"
                                                                                (typepred
                                                                                 "abs(add(cons2_var, cdr(l2)))")
                                                                                (("2"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "length(add(cons2_var, cdr(l2)))")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -4)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "length(abs(cons2_var))")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "length"
                                                                                             -2)
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "add"
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (lift-if)
                                                                                                        (("1"
                                                                                                          (split)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       -4)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         -5)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "+"
                                                           -1
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "entry_sum"
                                                               2
                                                               2)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "entry_sum"
                                                                   2
                                                                   3)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "length"
                                                                                 3)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "abs"
                                                                               2
                                                                               4)
                                                                              (("2"
                                                                                (lemma
                                                                                 "triangle")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "car(l2)"
                                                                                   "cons1_var")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide
                                                                                       1
                                                                                       3
                                                                                       4
                                                                                       5)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "abs"
                                                                                         1
                                                                                         6)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "length" -1) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "length" -1)
                (("2" (assert)
                  (("2" (expand "length" -1 1)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (split)
                          (("1" (assert)
                            (("1" (typepred "cons2_var")
                              (("1"
                                (typepred "l2")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -1 -3)
                                    (("1"
                                      (case "NOT null?(cdr(l2))")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "entry_sum" 2 3)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (typepred "cons2_var")
              (("2" (case "NOT null?(cons2_var)")
                (("1" (assert) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "abs(l2)")
            (("4" (assert)
              (("4" (replace -4 -2 rl)
                (("4" (expand "length" -2) (("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (skeep)
          (("5" (typepred "abs(l1)")
            (("5" (expand "length" -2 2)
              (("5" (assert) (("5" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (skeep)
          (("6" (typepred "abs(l1+l2)")
            (("6" (assert)
              (("6" (typepred "l1+l2")
                (("6" (expand "max" -2)
                  (("6" (assert)
                    (("6" (expand "length" -2 2)
                      (("6" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep)
      (("7" (skeep)
        (("7" (typepred "l1+l2")
          (("7" (expand "max" -2)
            (("7" (assert)
              (("7" (expand "length" -2 2) (("7" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (l2 skolem-const-decl "(cons?)" norms nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (triangle formula-decl nil real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (entry_sum def-decl "real" norms nil)
    (<= const-decl "bool" reals nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (norm_inf_TCC1 0
  (norm_inf_TCC1-1 nil 3736860769
   ("" (induct "ll")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert)
      (("3" (skeep)
        (("3" (split)
          (("1" (assert)
            (("1" (expand "abs" 1)
              (("1" (assert)
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (expand "max" 1)
                          (("1" (lift-if)
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "max" 2 1)
                        (("2" (lift-if)
                          (("2" (split)
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "cons2_var")
            (("2" (hide -1)
              (("2" (case "NOT null?(cons2_var)")
                (("1" (assert) nil nil)
                 ("2" (expand "abs" 2)
                  (("2" (lift-if)
                    (("2" (assert)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "max" 1)
                              (("1"
                                (lift-if)
                                (("1"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "max" 2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (assert)
        (("4" (typepred "abs(ll)")
          (("4" (expand "length" -2 2) (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (max def-decl "real" norms nil) (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil))
   nil
   (norm_inf subtype "norms.max(norms.abs(norms.ll))" "nonneg_real")))
 (norm_inf_TCC2 0
  (norm_inf_TCC2-1 nil 3737296986
   ("" (skeep)
    (("" (expand "norm?")
      (("" (split)
        (("1" (skeep)
          (("1" (expand "norm_inf")
            (("1" (lemma "abs_pos") (("1" (inst -1 "v1") nil nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (expand "norm_inf")
            (("2" (lemma "abs_max_lists") (("2" (inst?) nil nil)) nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (lemma "abs_zero")
            (("3" (inst -1 "v1")
              (("3" (assert)
                (("3" (expand "norm_inf" 1 1)
                  (("3" (flatten)
                    (("3" (split)
                      (("1" (skeep)
                        (("1" (assert)
                          (("1" (assert) (("1" (inst 1 "m!1") nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (lemma "abs_max_triag")
          (("4" (skeep)
            (("4" (inst -1 "v1" "v2")
              (("4" (assert)
                (("4" (assert)
                  (("4" (expand "norm_inf") (("4" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm? const-decl "bool" norms nil)
    (abs_max_triag formula-decl nil norms nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (abs_zero formula-decl nil norms nil)
    (abs_max_lists formula-decl nil norms nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (abs_pos formula-decl nil norms nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil))
   nil (norm_inf subtype "norms.norm_inf" "(norms.norm?(norms.m))")))
 (norm_1_TCC1 0
  (norm_1_TCC1-1 nil 3736863443
   ("" (induct "ll")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (expand "abs" 1)
        (("3" (split)
          (("1" (lift-if)
            (("1" (split)
              (("1" (flatten) (("1" (grind) nil nil)) nil)
               ("2" (flatten) (("2" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (lift-if)
            (("2" (split)
              (("1" (flatten)
                (("1" (typepred "cons2_var")
                  (("1" (typepred "cons1_var")
                    (("1" (expand "length" -3)
                      (("1" (assert) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (typepred "cons2_var")
                  (("2" (expand "length" 1) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (typepred "abs(ll)")
        (("4" (assert) (("4" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (entry_sum def-decl "real" norms nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil))
   nil
   (norm_1 subtype "norms.entry_sum(norms.abs(norms.ll))"
    "nonneg_real")))
 (norm_1_TCC2 0
  (norm_1_TCC2-1 nil 3737297136
   ("" (skeep)
    (("" (expand "norm?")
      (("" (split)
        (("1" (lemma "sum_abs_pos")
          (("1" (expand "norm_1")
            (("1" (skeep) (("1" (inst -1 "v1") nil nil)) nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (lemma "sum_abs_lists")
            (("2" (inst -1 "v1" "c")
              (("2" (assert)
                (("2" (expand "norm_1" 1) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (lemma "sum_abs_zero")
            (("3" (inst -1 "v1")
              (("3" (assert)
                (("3" (expand "norm_1" 1)
                  (("3" (split)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (split)
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (assert) nil nil)
                         ("2" (assert) (("2" (inst 3 "m") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (lemma "sum_abs_triag")
          (("4" (assert)
            (("4" (skeep)
              (("4" (inst -1 "v1" "v2")
                (("4" (assert)
                  (("4" (expand "norm_1" 1) (("4" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm? const-decl "bool" norms nil)
    (sum_abs_triag formula-decl nil norms nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sum_abs_zero formula-decl nil norms nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sum_abs_lists formula-decl nil norms nil)
    (sum_abs_pos formula-decl nil norms nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (norm_1 const-decl "[(cons?) -> nonneg_real]" norms nil))
   nil (norm_1 subtype "norms.norm_1" "(norms.norm?(norms.m))")))
 (norm_2sq_TCC1 0
  (norm_2sq_TCC1-1 nil 3736867588
   ("" (induct "ll")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (split)
        (("1" (assert)
          (("1" (typepred "cons(cons1_var, cons2_var)")
            (("1" (expand "entry_mult" 1)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (flatten) (("1" (grind) nil nil)) nil)
                   ("2" (flatten) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dot def-decl "real" matrices matrices)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (* const-decl "real" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (>= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil
   (norm_2sq subtype "matrices.*(norms.ll, norms.ll)" "nonneg_real")))
 (norm_2_TCC1 0
  (norm_2_TCC1-1 nil 3740486373
   ("" (skeep)
    (("" (expand "norm_2sq")
      (("" (expand "norm?")
        (("" (split)
          (("1" (lemma "dot_non_neg[m]")
            (("1" (skeep)
              (("1" (inst -1 "v1") (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (lemma "asso_v")
            (("2" (lemma "dot_scalar1")
              (("2" (skeep)
                (("2" (inst -1 "c*v1" "v1" "c")
                  (("1" (replace -1 1)
                    (("1" (lemma "asso_dot")
                      (("1" (inst -1 "c" "c*v1" "v1")
                        (("1" (replace -1 1 rl)
                          (("1" (lemma "asso_v")
                            (("1" (inst -1 "c" "c" "v1")
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (lemma "sqrt_times")
                                  (("1"
                                    (inst -1 "(c * c)" "v1 * v1")
                                    (("1"
                                      (lemma "asso_dot")
                                      (("1"
                                        (inst -1 "c*c" "v1" "v1")
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (replace -2 1)
                                            (("1"
                                              (lemma "sqrt_sq_abs")
                                              (("1"
                                                (inst -1 "c")
                                                (("1"
                                                  (expand "sq" -1)
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (lemma "dot_non_neg[m]")
                                        (("2" (inst -1 "v1") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (typepred "c*v1" "v1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "c*v1") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (lemma "dot_pos[m]")
              (("3" (split)
                (("1" (flatten)
                  (("1" (inst -2 "v1")
                    (("1" (assert) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (flatten)
                    (("2" (lemma "dot_zero")
                      (("2" (replace -2 1)
                        (("2" (inst -1 "zero_vec(m)" "m")
                          (("2" (assert)
                            (("2" (replace -1 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (lemma "dot_dist")
            (("4" (skeep)
              (("4" (inst -1 "v1+v2" "v1" "v2")
                (("1" (replace -1 1)
                  (("1" (hide -1)
                    (("1" (lemma "dot_commutes")
                      (("1" (inst-cp -1 "(v1 + v2)" "v1")
                        (("1" (inst -1 "v1+v2" "v2")
                          (("1" (replace -1 1)
                            (("1" (replace -2 1)
                              (("1"
                                (hide -1 -2)
                                (("1"
                                  (lemma "dot_dist")
                                  (("1"
                                    (inst-cp -1 "v1" "v1" "v2")
                                    (("1"
                                      (inst -1 "v2" "v1" "v2")
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (replace -2 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -1 -2)
                                                (("1"
                                                  (lemma
                                                   "dot_commutes")
                                                  (("1"
                                                    (inst -1 "v1" "v2")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "NOT v1 * v1 + 2 * (v2 * v1) + v2 * v2 <= v1 * v1 + 2 * abs(v2 * v1) + v2 * v2")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "cauchy_schwarz[m]")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "v2"
                                                                 "v1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (case
                                                                     "NOT v1 * v1 + 2 * (v2 * v1) + v2 * v2 <= 2*sqrt(v2 * v2) * sqrt(v1 * v1) + v1 * v1 + v2 * v2")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "NOT v1 * v1 + v2 * v2 + 2 * (sqrt(v1 * v1) * sqrt(v2 * v2)) = (sqrt(v1*v1)+sqrt(v2*v2))*(sqrt(v1*v1)+sqrt(v2*v2))")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -1
                                                                             -2)
                                                                            (("2"
                                                                              (lemma
                                                                               "sqrt_le")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "v1 * v1 + 2 * (v2 * v1) + v2 * v2"
                                                                                 "(sqrt(v1 * v1) + sqrt(v2 * v2)) * (sqrt(v1 * v1) + sqrt(v2 * v2))")
                                                                                (("1"
                                                                                  (flatten
                                                                                   -1)
                                                                                  (("1"
                                                                                    (case
                                                                                     "NOT sqrt((sqrt(v1 * v1) + sqrt(v2 * v2)) *
              (sqrt(v1 * v1) + sqrt(v2 * v2))) = (sqrt(v1 * v1) + sqrt(v2 * v2))")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "sqrt_sq_abs")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "sqrt(v1 * v1) + sqrt(v2 * v2)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "sq"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert
                                                                                             1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "abs"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "dot_non_neg[m]")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "v2")
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (lemma
                                                                                             "dot_non_neg[m]")
                                                                                            (("3"
                                                                                              (inst
                                                                                               -1
                                                                                               "v1")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -1
                                                                                       -2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "dot_non_neg[m]")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "v2")
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (lemma
                                                                                   "dot_non_neg[m]")
                                                                                  (("3"
                                                                                    (inst
                                                                                     -1
                                                                                     "v1")
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (lemma
                                                                                   "dot_non_neg[m]")
                                                                                  (("4"
                                                                                    (inst
                                                                                     -1
                                                                                     "v1+v2")
                                                                                    (("1"
                                                                                      (case
                                                                                       "(v1 + v2) * (v1 + v2) = v1 * v1 + 2 * (v2 * v1) + v2 * v2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "dot_dist")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "v1+v2"
                                                                                             "v1"
                                                                                             "v2")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "dot_dist")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "dot_commutes")
                                                                                                    (("1"
                                                                                                      (inst-cp
                                                                                                       -1
                                                                                                       "v1+v2"
                                                                                                       "v1")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "v1+v2"
                                                                                                         "v2")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -1
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "dot_dist")
                                                                                                                (("1"
                                                                                                                  (inst-cp
                                                                                                                   -1
                                                                                                                   "v1"
                                                                                                                   "v1"
                                                                                                                   "v2")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "v2"
                                                                                                                     "v1"
                                                                                                                     "v2")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "dot_commutes")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "v1"
                                                                                                                                 "v2")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               "v1+v2")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "v1+v2"
                                                                                       "v1"
                                                                                       "v2")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (lemma
                                                                       "dot_non_neg[m]")
                                                                      (("3"
                                                                        (inst
                                                                         -1
                                                                         "v1")
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (lemma
                                                                       "dot_non_neg[m]")
                                                                      (("4"
                                                                        (inst
                                                                         -1
                                                                         "v2")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "v1+v2") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_2sq const-decl "nonneg_real" norms nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dot_non_neg formula-decl nil cauchy_schwarz nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (dot_scalar1 formula-decl nil vector_arithmetic nil)
    (v1 skolem-const-decl "VectorN(m)" norms nil)
    (m skolem-const-decl "posnat" norms nil)
    (c skolem-const-decl "real" norms nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (asso_dot formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sqrt_times formula-decl nil sqrt reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sqrt_sq_abs formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" matrices matrices)
    (real_times_real_is_real application-judgement "real" reals nil)
    (asso_v formula-decl nil vector_arithmetic nil)
    (dot_pos formula-decl nil cauchy_schwarz nil)
    (dot_zero formula-decl nil vector_arithmetic nil)
    (sqrt_0 formula-decl nil sqrt reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (v1 skolem-const-decl "VectorN(m)" norms nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (dot_commutes formula-decl nil matrices matrices)
    (cauchy_schwarz formula-decl nil cauchy_schwarz nil)
    (sqrt_le formula-decl nil sqrt reals)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (nnreal type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (v1 skolem-const-decl "VectorN(m)" norms nil)
    (v2 skolem-const-decl "VectorN(m)" norms nil)
    (dot_dist formula-decl nil vector_arithmetic nil)
    (norm? const-decl "bool" norms nil))
   nil
   (norm_2 subtype
    "LAMBDA (v: (list_adt[real].cons?)): sqrt.sqrt(norms.norm_2sq(v))"
    "(norms.norm?(norms.m))")))
 (norm_inf_recurse_TCC1 0
  (norm_inf_recurse_TCC1-1 nil 3742117533
   ("" (skeep)
    (("" (typepred "u")
      (("" (expand "length" -2) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (norm_inf_recurse subtype "list_adt[real].cdr(norms.u)"
    "(list_adt[real].cons?)")))
 (norm_inf_recurse_TCC2 0
  (norm_inf_recurse_TCC2-1 nil 3742117533 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (norm_inf_recurse subtype "(number_fields.-)(norms.m, 1)"
    "posnat")))
 (norm_inf_recurse 0
  (norm_inf_recurse-1 nil 3742117534
   ("" (induct "m")
    (("1" (skeep) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (case "j=0")
        (("1" (hide -2)
          (("1" (replace -1 1)
            (("1" (assert)
              (("1" (skeep)
                (("1" (grind)
                  (("1" (expand "abs" 1)
                    (("1" (expand "abs" 1)
                      (("1" (expand "max" 1)
                        (("1" (expand "length" 1)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "abs" 2)
                    (("2" (expand "abs" 2)
                      (("2" (expand "max" 2)
                        (("2" (expand "length" 2)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (skeep)
            (("2" (expand "norm_inf" 2)
              (("2" (expand "norm_inf" 2)
                (("2" (expand "abs" 2 1)
                  (("2" (expand "max" 2 1)
                    (("2" (assert)
                      (("2" (expand "length" 2)
                        (("2" (assert)
                          (("2" (case "cdr(u) = null")
                            (("1" (typepred "u")
                              (("1"
                                (expand "length" -2)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide -2 1)
                                      (("1"
                                        (grind)
                                        (("1"
                                          (expand "abs" -1)
                                          (("1"
                                            (expand "length" -1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep) (("4" (typepred "u") (("4" (assert) nil nil)) nil))
        nil))
      nil)
     ("5" (skeep) (("5" (skeep) (("5" (assert) nil nil)) nil)) nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (typepred "u")
          (("6" (assert)
            (("6" (expand "length" -2) (("6" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep)
      (("7" (skeep) (("7" (typepred "u") (("7" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (max def-decl "real" norms nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (pred type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (norm_one_recurse 0
  (norm_one_recurse-2 nil 3742218037
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "norm_1")
              (("1" (expand "norm_1" 1 1)
                (("1" (expand "entry_sum" 1 1)
                  (("1" (assert)
                    (("1" (typepred "u")
                      (("1" (case "length(u)=1")
                        (("1" (assert) nil nil)
                         ("2" (typepred "abs(u)")
                          (("2" (assert)
                            (("2" (expand "norm_1" 2)
                              (("2"
                                (expand "abs" 2 1)
                                (("2"
                                  (expand "abs" 2 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "NOT m=1")
            (("1" (assert) nil nil)
             ("2" (assert)
              (("2" (replace -1 1)
                (("2" (expand "norm_1" 1)
                  (("2" (expand "norm_1" 1)
                    (("2" (expand "entry_sum" 1)
                      (("2" (typepred "u")
                        (("2" (typepred "abs(u)")
                          (("2" (assert)
                            (("2" (expand "abs" 1 1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (norm_1 const-decl "(norm?(m))" norms nil)
    (entry_sum def-decl "real" norms nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (norm_1 const-decl "[(cons?) -> nonneg_real]" norms nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil)
  (norm_one_recurse-1 nil 3742218025
   ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak))
 (test_abs 0
  (test_abs-1 nil 3736860770 ("" (eval-formula 1) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (test_1 0
  (test_1-1 nil 3736863444 ("" (eval-formula 1) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (test_2sq 0
  (test_2sq-1 nil 3736867589 ("" (eval-formula 1) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (big_kahuna 0
  (big_kahuna-1 nil 3737372294 ("" (eval-formula 1) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (norm_inf_constant_TCC1 0
  (norm_inf_constant_TCC1-1 nil 3737966664 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (norm_inf_constant subtype
    "vector_arithmetic.constant_vec(norms.c, norms.m)"
    "(list_adt[real].cons?)")))
 (norm_inf_constant 0
  (norm_inf_constant-1 nil 3737966665
   ("" (induct "m")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (split)
          (("1" (assert)
            (("1" (expand "norm_inf")
              (("1" (expand "norm_inf" 1)
                (("1" (expand "constant_vec" 1)
                  (("1" (expand "abs" 1)
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (lift-if)
                              (("1"
                                (assert)
                                (("1"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "abs" 1)
                                      (("1"
                                        (expand "max" 1)
                                        (("1"
                                          (lift-if)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "abs" 2)
                                        (("2"
                                          (expand "max" 2)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (split)
                                              (("1" (propax) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (lift-if)
                              (("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "max" 1)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (split)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "length" -1)
                                                (("1"
                                                  (typepred
                                                   "abs(constant_vec(c, j))")
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "norm_inf" -2)
                                                (("2"
                                                  (inst -2 "c")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "abs"
                                                       -2
                                                       2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "abs"
                                                           2
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "max"
                                                             2
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst -1 "c")
                                      (("2"
                                        (expand "norm_inf" -1)
                                        (("2"
                                          (flip-ineq 1)
                                          (("2"
                                            (expand "abs" -2 2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "max" 1 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "abs"
                                                           1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "max"
                                                           2
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "abs"
                                                             2
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (assert)
              (("2" (flip-ineq 1)
                (("2" (case "NOT j=0")
                  (("1" (assert) nil nil)
                   ("2" (replace -1 1)
                    (("2" (expand "norm_inf" 1)
                      (("2" (expand "norm_inf" 1)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "constant_vec(c, m)")
            (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (max def-decl "real" norms nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (constant_vec def-decl "VectorN(m)" vector_arithmetic nil))
   shostak))
 (norm_reflex_TCC1 0
  (norm_reflex_TCC1-1 nil 3741363549
   ("" (skeep)
    (("" (typepred "v1-v2" "v1" "v2") (("" (assert) nil nil)) nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (norm_reflex subtype "(matrices.-)(norms.v1, norms.v2)"
    "(list_adt[real].cons?)")))
 (norm_reflex_TCC2 0
  (norm_reflex_TCC2-1 nil 3741363549
   ("" (skeep)
    (("" (typepred "v2-v1" "v2" "v1") (("" (assert) nil nil)) nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (norm_reflex subtype "(matrices.-)(norms.v2, norms.v1)"
    "(list_adt[real].cons?)")))
 (norm_reflex 0
  (norm_reflex-1 nil 3741363549
   ("" (skeep)
    (("" (typepred "nn")
      (("" (expand "norm?")
        (("" (flatten)
          (("" (inst -2 "v1-v2" "-1")
            (("1" (hide -1 -3 -4)
              (("1" (expand "abs" -1)
                (("1" (assert)
                  (("1" (case "NOT 1 = --1")
                    (("1" (assert) nil nil)
                     ("2" (replace -1 -2 rl)
                      (("2" (hide -1)
                        (("2" (lemma "dist_1")
                          (("2" (inst -1 "-1" "v1" "v2")
                            (("2" (replace -1 -2)
                              (("2"
                                (lemma "sub_idx")
                                (("2"
                                  (inst -1 "-1 * v1" "-1 * v2")
                                  (("1"
                                    (replace -1 -2)
                                    (("1"
                                      (replace -1 -3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lemma "asso_v")
                                              (("1"
                                                (inst
                                                 -1
                                                 "-1"
                                                 "-1"
                                                 "v2")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1 -2)
                                                    (("1"
                                                      (case
                                                       "NOT -1*-1 =1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (replace -1 -3)
                                                        (("2"
                                                          (lemma
                                                           "one_idx")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "v2")
                                                            (("2"
                                                              (replace
                                                               -1
                                                               -4)
                                                              (("2"
                                                                (lemma
                                                                 "add_commute")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "-1 * v1"
                                                                   "v2")
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     -5)
                                                                    (("2"
                                                                      (lemma
                                                                       "sub_idx")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "v2"
                                                                         "v1")
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           -6
                                                                           rl)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "-1*v2" "v2")
                                    (("2"
                                      (typepred "-1*v2")
                                      (("2"
                                        (typepred "v2")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (typepred "-1*v1")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "v1-v2")
              (("2" (typepred "v1" "v2")
                (("2" (expand "max" -6) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (dist_1 formula-decl nil vector_arithmetic nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (asso_v formula-decl nil vector_arithmetic nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (one_idx formula-decl nil vector_arithmetic nil)
    (add_commute formula-decl nil vector_arithmetic nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sub_idx formula-decl nil vector_arithmetic nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (m skolem-const-decl "posnat" norms nil)
    (v1 skolem-const-decl "VectorN(m)" norms nil)
    (v2 skolem-const-decl "VectorN(m)" norms nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (reverse_triag_TCC1 0
  (reverse_triag_TCC1-1 nil 3742210848 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil (reverse_triag subtype "norms.v" "(list_adt[real].cons?)")))
 (reverse_triag 0
  (reverse_triag-2 nil 3742211769
   ("" (skeep)
    (("" (lemma "sub_equal_id1")
      (("" (inst-cp -1 "u" "v")
        (("" (inst -1 "v" "u")
          (("" (typepred "u" "v")
            (("" (assert)
              (("" (hide -1 -2 -3 -4)
                (("" (typepred "nn")
                  (("" (expand "norm?" -1)
                    (("" (flatten)
                      (("" (inst-cp -4 "v-u" "u")
                        (("1" (inst -4 "u-v" "v")
                          (("1" (replace -6 -5)
                            (("1" (replace -7 -4)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "abs" 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "norm_reflex")
                                              (("1"
                                                (inst
                                                 -1
                                                 "m"
                                                 "nn"
                                                 "u"
                                                 "v")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (lemma "norm_reflex")
                                          (("2"
                                            (inst -1 "m" "nn" "u" "v")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (typepred "u-v" "u" "v")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "max" -)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "v-u" "v" "u")
                          (("2" (expand "max" -)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sub_equal_id1 formula-decl nil vector_arithmetic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (norm_reflex formula-decl nil norms nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (u skolem-const-decl "VectorN(m)" norms nil)
    (v skolem-const-decl "VectorN(m)" norms nil)
    (m skolem-const-decl "posnat" norms nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (reverse_triag-1 nil 3742210849
   ("" (skeep)
    (("" (lemma "sub_equal_id")
      (("" (inst-cp -1 "u" "v")
        (("" (inst -1 "v" "u")
          (("" (typepred "u" "v")
            (("" (assert)
              (("" (hide -1 -2 -3 -4)
                (("" (typepred "nn")
                  (("" (expand "norm?" -1)
                    (("" (flatten)
                      (("" (lemma "sub_idx")
                        (("" (inst-cp -1 "v+u" "u")
                          (("1" (inst -1 "u+v" "v")
                            (("1" (replace -1 -8)
                              (("1"
                                (replace -2 -7)
                                (("1"
                                  (inst-cp -6 "v+u" " (-1 * u)")
                                  (("1"
                                    (inst-cp -6 "u + v" "(-1*v)")
                                    (("1"
                                      (replace -9 -8)
                                      (("1"
                                        (replace -10 -7)
                                        (("1" (postpone) nil nil))
                                        nil))
                                      nil)
                                     ("2" (postpone) nil nil)
                                     ("3" (postpone) nil nil))
                                    nil)
                                   ("2" (postpone) nil nil)
                                   ("3" (postpone) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (norm_inf_nth 0
  (norm_inf_nth-1 nil 3742822293
   ("" (skeep)
    (("" (expand "norm_inf" 1 1)
      (("" (lemma "max_nth")
        (("" (inst -1 "abs(ll)")
          (("1" (skeep)
            (("1" (lemma "abs_nth")
              (("1" (inst -1 "ll" "i")
                (("1" (inst 1 "i") (("1" (assert) nil nil)) nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (typepred "abs(ll)")
              (("2" (assert)
                (("2" (typepred "ll")
                  (("2" (assert)
                    (("2" (expand "length" -4) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (ll skolem-const-decl "(cons?)" norms nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (abs_nth formula-decl nil norms nil)
    (i skolem-const-decl "below(length(abs(ll)))" norms nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max_nth formula-decl nil norms nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (norm_inf_nth_m_TCC1 0
  (norm_inf_nth_m_TCC1-1 nil 3742822513 ("" (subtype-tcc) nil nil) nil
   nil (norm_inf_nth_m subtype "norms.i" "below[length[real](u)]")))
 (norm_inf_nth_m 0
  (norm_inf_nth_m-1 nil 3742822514
   ("" (skeep)
    (("" (lemma "norm_inf_nth")
      (("" (inst -1 "u")
        (("" (typepred "u")
          (("" (assert)
            (("" (expand "norm_inf" 1 1)
              (("" (assert)
                (("" (skeep) (("" (inst 1 "i") nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_inf_nth formula-decl nil norms nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (norm_inf_nth_ineq 0
  (norm_inf_nth_ineq-1 nil 3742918637
   ("" (induct "ll")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (assert)
        (("3" (case "cons2_var= null")
          (("1" (assert)
            (("1" (replace -1 1)
              (("1" (skeep)
                (("1" (typepred "i")
                  (("1" (expand "length" -1)
                    (("1" (expand "length" -1)
                      (("1" (assert)
                        (("1" (case "NOT i=0")
                          (("1" (assert) nil nil)
                           ("2" (replace -1 1)
                            (("2" (expand "norm_inf")
                              (("2"
                                (expand "abs" 1 1)
                                (("2"
                                  (expand "max" 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "nth" 1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (skeep)
              (("2" (case "i=0")
                (("1" (replace -1 2)
                  (("1" (expand "norm_inf" 2 1)
                    (("1" (expand "abs" 2 1)
                      (("1" (expand "length" 2)
                        (("1" (assert)
                          (("1" (expand "length" 2)
                            (("1" (assert)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "nth" 2 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "max" 2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "length" 2)
                                          (("1"
                                            (typepred "abs(cons2_var)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "length" 2)
                                                (("1"
                                                  (expand "length" -2)
                                                  (("1"
                                                    (lift-if -2)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (lift-if 2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -1 "i-1")
                  (("1" (expand "nth" 3)
                    (("1" (assert)
                      (("1" (expand "norm_inf" 3 1)
                        (("1" (expand "abs" 3 1)
                          (("1" (expand "max" 3 1)
                            (("1" (assert)
                              (("1"
                                (expand "length" 3)
                                (("1"
                                  (typepred "abs(cons2_var)")
                                  (("1"
                                    (expand "length" -2)
                                    (("1"
                                      (lift-if -2)
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "length" 4)
                                                (("2"
                                                  (expand
                                                   "norm_inf"
                                                   -3
                                                   1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (typepred "i")
                      (("2" (assert)
                        (("2" (expand "length" -1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (max def-decl "real" norms nil)
    (length_singleton formula-decl nil more_list_props structures)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons1_var skolem-const-decl "real" norms nil)
    (cons2_var skolem-const-decl "list[real]" norms nil)
    (i skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
       norms nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (norm_inf_nth_ineq_m 0
  (norm_inf_nth_ineq_m-1 nil 3742919127
   ("" (skeep)
    (("" (lemma "norm_inf_nth_ineq")
      (("" (inst -1 "u" "_")
        (("" (skeep)
          (("" (inst -1 "i")
            (("" (expand "norm_inf" 1 1) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_inf_nth_ineq formula-decl nil norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (norm_inf_canc_TCC1 0
  (norm_inf_canc_TCC1-1 nil 3787598316
   ("" (skeep)
    ((""
      (typepred "v1" "v2" "v3" "v1-v2" "v2-v3" "(v1 - v2) - (v2 - v3)")
      (("" (assert)
        (("" (replace -2)
          (("" (replace -4)
            (("" (expand "max" -8)
              (("" (typepred "m") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (norm_inf_canc subtype
    "(matrices.+)(((matrices.-)(norms.v1, norms.v2)), ((matrices.-)(norms.v2, norms.v3)))"
    "(list_adt[real].cons?)")))
 (norm_inf_canc_TCC2 0
  (norm_inf_canc_TCC2-1 nil 3787598316
   ("" (skeep)
    (("" (typepred "v1-v3" "v1" "v3") (("" (assert) nil nil)) nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (norm_inf_canc subtype "(matrices.-)(norms.v1, norms.v3)"
    "(list_adt[real].cons?)")))
 (norm_inf_canc 0
  (norm_inf_canc-1 nil 3787598480
   ("" (skeep)
    (("" (lemma "quad_cancel_plus")
      (("" (inst -1 "v1" "v2" "v3") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((quad_cancel_plus formula-decl nil vector_arithmetic nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (norm_inf_e_TCC1 0
  (norm_inf_e_TCC1-1 nil 3798290130 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (norm_inf_e subtype "vector_arithmetic.e(norms.n, norms.i)"
    "(list_adt[real].cons?)")))
 (norm_inf_e_TCC2 0
  (norm_inf_e_TCC2-1 nil 3798290130 ("" (subtype-tcc) nil nil) nil nil
   (norm_inf_e subtype "norms.n" "posnat")))
 (norm_inf_e 0
  (norm_inf_e-1 nil 3798290281
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "norm_inf")
          (("2" (case "i=0")
            (("1" (expand "e" 1 1)
              (("1" (assert)
                (("1" (expand "norm_inf" 1 1)
                  (("1" (expand "abs" 1 1)
                    (("1" (case "j=0")
                      (("1" (grind) nil nil)
                       ("2" (expand "length" 2 1)
                        (("2" (assert)
                          (("2" (expand "max" 2 1)
                            (("2" (expand "length" 2 1)
                              (("2"
                                (assert)
                                (("2"
                                  (typepred "norm_inf(j)")
                                  (("2"
                                    (expand "norm?" -1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (inst -3 "zero_vec(j)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "norm_inf" -3)
                                            (("2"
                                              (expand "norm_inf" -3)
                                              (("2"
                                                (replace -3)
                                                (("2"
                                                  (expand "max")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "e" 2 1)
              (("2" (assert)
                (("2" (expand "norm_inf" 2 1)
                  (("2" (expand "abs" 2)
                    (("2" (assert)
                      (("2" (expand "length")
                        (("2" (assert)
                          (("2" (expand "max" 2)
                            (("2" (expand "length" 2 1)
                              (("2"
                                (expand "abs" 2 1)
                                (("2"
                                  (inst -1 "i-1")
                                  (("2"
                                    (expand "norm_inf" -1)
                                    (("2"
                                      (replace -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (typepred "n!1")
      (("3" (hide 2)
        (("3" (skeep)
          (("3" (case "n=0")
            (("1" (typepred "i") (("1" (assert) nil nil)) nil)
             ("2" (expand "e" 2 1)
              (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((e def-decl "VectorN(m)" vector_arithmetic nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (max def-decl "real" norms nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (norm_inf_e_scal_TCC1 0
  (norm_inf_e_scal_TCC1-1 nil 3798290130 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (norm_inf_e_scal subtype
    "matrices.*(norms.c, vector_arithmetic.e(norms.n, norms.i))"
    "(list_adt[real].cons?)")))
 (norm_inf_e_scal 0
  (norm_inf_e_scal-1 nil 3798291364
   ("" (skeep)
    (("" (case "n=0")
      (("1" (typepred "i") (("1" (assert) nil nil)) nil)
       ("2" (typepred "norm_inf(n)")
        (("2" (expand "norm?" -1)
          (("2" (flatten)
            (("2" (inst -2 "e(n,i)" "c")
              (("2" (replace -2 2)
                (("2" (lemma "norm_inf_e")
                  (("2" (inst -1 "n" "i") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (norm_inf_e formula-decl nil norms nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil))
   shostak))
 (dot_max_ineq 0
  (dot_max_ineq-1 nil 3796042662
   ("" (induct "u")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (case "cons2_var=null")
          (("1" (assert)
            (("1" (hide -2)
              (("1" (expand "length" -2)
                (("1" (expand "length" -2)
                  (("1" (lift-if -2)
                    (("1" (split -2)
                      (("1" (expand "length" 1)
                        (("1" (expand "length" 1)
                          (("1" (assert)
                            (("1" (lemma "abs_mult")
                              (("1"
                                (expand "*" 1)
                                (("1"
                                  (expand " dot" 1)
                                  (("1"
                                    (expand "dot" 1)
                                    (("1"
                                      (inst -1 "car(v)" "cons1_var")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "length" -2)
              (("2" (case "cdr(v)=null")
                (("1" (expand "length") (("1" (assert) nil nil)) nil)
                 ("2" (inst -1 "cdr(v)")
                  (("1" (assert)
                    (("1" (expand "*" 3)
                      (("1" (expand "dot" 3 1)
                        (("1" (lemma "triangle")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (case
                                 " abs(dot(cdr(v), cons2_var)) + abs(car(v) * cons1_var) <=length(v) * norm_inf(cons(cons1_var, cons2_var)) * norm_inf(v)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide 4)
                                  (("2"
                                    (expand "*" -2 1)
                                    (("2"
                                      (expand "length" 1 1)
                                      (("2"
                                        (case
                                         "abs(dot(cdr(v), cons2_var))  <= length[real](cdr(v)) * norm_inf(cons(cons1_var, cons2_var)) *
         norm_inf(v)")
                                        (("1"
                                          (case
                                           " abs(car(v) * cons1_var)<=  norm_inf(cons(cons1_var, cons2_var)) * norm_inf(v)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (expand "norm_inf" 1 1)
                                              (("2"
                                                (lemma
                                                 "norm_inf_nth_ineq")
                                                (("2"
                                                  (inst-cp -1 "v" "0")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "cons(cons1_var, cons2_var)"
                                                     "0")
                                                    (("1"
                                                      (expand
                                                       "norm_inf"
                                                       -2)
                                                      (("1"
                                                        (expand
                                                         "norm_inf"
                                                         -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "abs_mult")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "car(v)"
                                                                     "cons1_var")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (mult-by
                                                                           -2
                                                                           " abs(car(v))")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (mult-by
                                                                               -3
                                                                               " max(abs(cons(cons1_var, cons2_var)))")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "norm_inf"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "length" 1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (case
                                               " norm_inf(cons(cons1_var, cons2_var)) >= norm_inf(cons2_var)")
                                              (("1"
                                                (case
                                                 "norm_inf(cons2_var) <= norm_inf(cons(cons1_var, cons2_var))")
                                                (("1"
                                                  (case
                                                   "norm_inf(cdr(v)) <=   norm_inf(v)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       " length(cdr(v)) * norm_inf(cdr(v)) * norm_inf(cons2_var) <=  length[real](cdr(v)) * norm_inf(cons(cons1_var, cons2_var)) *
        norm_inf(v)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (div-by
                                                         1
                                                         "length(cdr(v))")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "NOT  length(cdr(v)) * norm_inf(cdr(v)) * norm_inf(cons2_var) /
       length(cdr(v)) = norm_inf(cdr(v)) * norm_inf(cons2_var)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("2"
                                                                (case
                                                                 "NOT  length[real](cdr(v)) * norm_inf(cons(cons1_var, cons2_var)) *
        norm_inf(v)
        / length(cdr(v)) = norm_inf(cons(cons1_var, cons2_var)) *
        norm_inf(v)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (hide
                                                                     -1
                                                                     -2)
                                                                    (("2"
                                                                      (mult-by
                                                                       -1
                                                                       "norm_inf(cons2_var)")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (mult-by
                                                                           -2
                                                                           "norm_inf(v)")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "norm_inf"
                                                     1)
                                                    (("2"
                                                      (expand
                                                       "abs"
                                                       1
                                                       2)
                                                      (("2"
                                                        (lift-if 1)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "max"
                                                                 2
                                                                 2)
                                                                (("2"
                                                                  (lift-if
                                                                   2)
                                                                  (("2"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "norm_inf" 1)
                                                  (("2"
                                                    (expand "abs" 1 2)
                                                    (("2"
                                                      (lift-if 1)
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "max"
                                                               2
                                                               2)
                                                              (("2"
                                                                (lift-if
                                                                 2)
                                                                (("2"
                                                                  (split
                                                                   2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "norm_inf" 1 1)
                                                (("2"
                                                  (expand "norm_inf" 1)
                                                  (("2"
                                                    (expand "abs" 1 1)
                                                    (("2"
                                                      (lift-if 1)
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "max"
                                                             2
                                                             1)
                                                            (("2"
                                                              (lift-if
                                                               2)
                                                              (("2"
                                                                (split
                                                                 2)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (abs_mult formula-decl nil real_props nil)
    (dot def-decl "real" matrices matrices)
    (real_times_real_is_real application-judgement "real" reals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (max def-decl "real" norms nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (v skolem-const-decl "(cons?)" norms nil)
    (triangle formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (nth def-decl "T" list_props nil)
    (cons2_var skolem-const-decl "list[real]" norms nil)
    (cons1_var skolem-const-decl "real" norms nil)
    (norm_inf_nth_ineq formula-decl nil norms nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (dot_equality_delta_TCC1 0
  (dot_equality_delta_TCC1-1 nil 3798192046
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "u")
        (("" (typepred "ww") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (dot_equality_delta subtype "norms.ww" "(list_adt[real].cons?)")))
 (dot_equality_delta_TCC2 0
  (dot_equality_delta_TCC2-1 nil 3798192046
   ("" (skeep)
    (("" (skeep) (("" (typepred "u") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (dot_equality_delta subtype "list_props[real].length(norms.u)"
    "posnat")))
 (dot_equality_delta 0
  (dot_equality_delta-1 nil 3798192193
   ("" (induct "u" 1)
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (case "cons2_var = null")
          (("1" (replace -1 -4)
            (("1" (replace -1 1)
              (("1" (decompose-equality 1)
                (("1" (expand "length" -3)
                  (("1" (hide -2)
                    (("1" (inst -3 "delta/2*(: 1 :)")
                      (("1" (expand "*" -3)
                        (("1" (expand "dot" -3)
                          (("1" (expand "dot" -3)
                            (("1" (expand "scal")
                              (("1"
                                (expand "scal")
                                (("1"
                                  (mult-by -3 "2")
                                  (("1"
                                    (div-by -1 "delta")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (split 1)
                        (("1" (expand "*" 1)
                          (("1" (expand "scal" 1)
                            (("1" (expand "scal" 1)
                              (("1"
                                (expand "length" 1)
                                (("1"
                                  (expand "length" 1)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "norm_inf" 1)
                          (("2" (expand "*" 1)
                            (("2" (expand "scal" 1)
                              (("2"
                                (expand "norm_inf" 1 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2 -4) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (inst -1 "cdr(v)" "delta")
              (("1" (assert)
                (("1" (split -1)
                  (("1" (decompose-equality 2)
                    (("1" (inst -3 "scal(delta/2,e(length(v),0))")
                      (("1" (lemma "dot_scalar1")
                        (("1" (inst -1 "v" "e(length(v),0)" "delta/2")
                          (("1" (expand "*" -1 2)
                            (("1" (replace -1 -4)
                              (("1"
                                (lemma "dot_scalar1")
                                (("1"
                                  (inst
                                   -1
                                   "cons(cons1_var,cons2_var)"
                                   "e(length(v),0)"
                                   "delta/2")
                                  (("1"
                                    (expand "*" -1 2)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (case
                                         "(cons(cons1_var, cons2_var) * e(length(v), 0)) = (v * e(length(v), 0))")
                                        (("1"
                                          (lemma "dot_prod_e")
                                          (("1"
                                            (inst-cp
                                             -1
                                             "length(v)"
                                             "0"
                                             "(cons(cons1_var, cons2_var))")
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (inst
                                                 -1
                                                 "length(v)"
                                                 "0"
                                                 "v")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (expand "nth" -3)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "length" 1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (mult-by -5 "2")
                                          (("2"
                                            (div-by -1 "delta")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "e" 1 1)
                                    (("2"
                                      (expand "length" 1 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (expand "e" 1 1)
                              (("2"
                                (expand "length" 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (split 1)
                          (("1"
                            (typepred
                             "scal(delta / 2, e(length[real](v), 0))")
                            (("1" (replace -2) (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (expand "norm_inf" 1 1)
                            (("2" (lemma "norm_inf_e_scal")
                              (("2"
                                (inst -1 "length(v)" "0" "delta/2")
                                (("2"
                                  (expand "*" -1 1)
                                  (("2"
                                    (expand "norm_inf" -1)
                                    (("2"
                                      (replace -1 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil)
                   ("3" (skeep)
                    (("3" (inst -2 "cons(0,w)")
                      (("1" (expand "*" -2)
                        (("1" (expand "dot" -2)
                          (("1" (assert)
                            (("1" (expand "*" 1)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (split 1)
                        (("1" (expand "length" 1)
                          (("1" (assert) nil nil)) nil)
                         ("2" (expand "norm_inf" 1)
                          (("2" (expand "norm_inf" 1 1)
                            (("2" (expand "abs" 1 1)
                              (("2"
                                (expand "length" 1 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "w")
                                    (("2"
                                      (lift-if 1)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (expand "max" 2 1)
                                            (("2"
                                              (expand "length" 2 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred "abs(w)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "norm_inf"
                                                       -5)
                                                      (("2"
                                                        (expand
                                                         "norm_inf"
                                                         -5)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "v") (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (skeep*) (("4" (grind) nil nil)) nil)) nil)
     ("5" (hide 2)
      (("5" (skeep*)
        (("5" (typepred "ww") (("5" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil) (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (Vector type-eq-decl nil matrices matrices)
    (* const-decl "real" matrices matrices)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (w skolem-const-decl
     "{ww: VectorN(length(cons2_var)) | norm_inf(length(cons2_var))(ww) < delta}"
     norms nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (norm_inf_e_scal formula-decl nil norms nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dot_scalar1 formula-decl nil vector_arithmetic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (dot_prod_e formula-decl nil vector_arithmetic nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (v skolem-const-decl "(cons?)" norms nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (max def-decl "real" norms nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (dot def-decl "real" matrices matrices)
    (cons2_var skolem-const-decl "list[real]" norms nil)
    (cons1_var skolem-const-decl "real" norms nil)
    (delta skolem-const-decl "posreal" norms nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)))