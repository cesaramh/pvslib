(vector_sequences
 (convergence?_TCC1 0
  (convergence?_TCC1-2 nil 3741424752
   ("" (skeep)
    (("" (typepred "(V(NN) - L)") (("" (assert) nil nil)) nil)) nil)
   ((above nonempty-type-eq-decl nil integers nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" vector_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (convergence? subtype
    "(matrices.-)(vector_sequences.V(vector_sequences.NN), vector_sequences.L)"
    "(list_adt[real].cons?)"))
  (convergence?_TCC1-1 nil 3741424573 ("" (subtype-tcc) nil nil) nil
   nil
   (convergence? subtype
    "(matrices.-)(vector_sequences.V(vector_sequences.NN), vector_sequences.L)"
    "(list_adt[real].cons?)")))
 (convergence_equiv_m 0
  (convergence_equiv_m-2 nil 3742805210
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "convergence?")
            (("1" (skeep)
              (("1" (lemma "equiv_norm_m")
                (("1" (inst -1 "m" "nn" "nn!1")
                  (("1" (expand "equiv_m?")
                    (("1" (skeep)
                      (("1" (skeep)
                        (("1" (inst -2 "epsilon/c2")
                          (("1" (skeep)
                            (("1" (inst 1 "N")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -2 "NN")
                                  (("1"
                                    (mult-by -2 "c2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -1 "V(NN) - L")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (typepred
                                           "V(NN) - L"
                                           "V(NN)"
                                           "L")
                                          (("2"
                                            (expand "max")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "convergence?" -1)
          (("2" (inst -1 "norm_inf(m)")
            (("2" (inst 1 "norm_inf(m)")
              (("2" (expand "convergence?") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (L skolem-const-decl "VectorN(m)" vector_sequences nil)
    (NN skolem-const-decl "above(N)" vector_sequences nil)
    (N skolem-const-decl "posnat" vector_sequences nil)
    (V skolem-const-decl "vec_seq[n](m)" vector_sequences nil)
    (m skolem-const-decl "posnat" vector_sequences nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (Vector type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (n formal-const-decl "posnat" vector_sequences nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (equiv_m? const-decl "bool" norms_equiv nil)
    (equiv_norm_m formula-decl nil norms_equiv_general nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil)
  (convergence_equiv_m-1 nil 3742805201 ("" (postpone) nil nil) nil
   shostak))
 (convergence_equiv 0
  (convergence_equiv-1 nil 3742805236
   ("" (lemma "convergence_equiv_m")
    (("" (skeep)
      (("" (inst -1 "n" "V" "L")
        (("" (assert)
          (("" (expand "convergence?" 1 1)
            (("" (expand "convergence?" 1 2) (("" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "posnat" vector_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (convergence_equiv_m formula-decl nil vector_sequences nil))
   shostak))
 (convergence?_TCC2 0
  (convergence?_TCC2-1 nil 3742720132
   ("" (skeep)
    (("" (typepred "V(NN) - L" "V(NN)" "L") (("" (assert) nil nil))
      nil))
    nil)
   ((above nonempty-type-eq-decl nil integers nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" vector_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (convergence? subtype
    "(matrices.-)(vector_sequences.V(vector_sequences.NN), vector_sequences.L)"
    "(list_adt[real].cons?)")))
 (convergence_zero?_TCC1 0
  (convergence_zero?_TCC1-2 nil 3741424778
   ("" (skeep)
    (("" (typepred "x-p")
      (("" (expand "max" -2)
        (("" (typepred "x") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((/= const-decl "boolean" notequal nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" vector_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (convergence_zero? subtype
    "(matrices.-)(vector_sequences.x, vector_sequences.p)"
    "(list_adt[real].cons?)"))
  (convergence_zero?_TCC1-1 nil 3741424573 ("" (subtype-tcc) nil nil)
   nil nil
   (convergence_zero? subtype
    "(matrices.-)(vector_sequences.x, vector_sequences.p)"
    "(list_adt[real].cons?)")))
 (convergence_unique_vec 0
  (convergence_unique_vec-1 nil 3742199062
   ("" (skeep)
    (("" (expand "convergence?" -1)
      (("" (expand "convergence?" -2)
        (("" (lemma "diff_zero")
          (("" (inst -1 "m" "L1" "L2")
            (("" (assert)
              (("" (typepred "norm_inf(m)")
                (("" (expand "norm?" -1)
                  (("" (flatten)
                    (("" (inst -3 "L1-L2")
                      (("1" (hide -1 -2 -4)
                        (("1" (assert)
                          (("1" (inst -1 "norm_inf(m)(L1 - L2)/2")
                            (("1" (inst -2 "norm_inf(m)(L1 - L2)/2")
                              (("1"
                                (skeep)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -1 "max(N,N!1)+1")
                                    (("1"
                                      (inst -2 "max(N,N!1)+1")
                                      (("1"
                                        (typepred "norm_inf(m)")
                                        (("1"
                                          (expand "norm?" -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide -1 -2 -3)
                                              (("1"
                                                (lemma "norm_reflex")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "m"
                                                   "norm_inf(m)"
                                                   "V(max(N, N!1) + 1)"
                                                   "L1")
                                                  (("1"
                                                    (replace -1 -3)
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "L1 - V(max(N, N!1) + 1)"
                                                       "V(max(N, N!1) + 1) - L2")
                                                      (("1"
                                                        (case
                                                         "L1 - V(max(N, N!1) + 1) + (V(max(N, N!1) + 1) - L2) = L1-L2")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           -3)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "add_zero_trick")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "L1"
                                                             "V(max(N, N!1) + 1)"
                                                             "L2")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "V(1 + max(N, N!1)) - L2")
                                                        (("2"
                                                          (typepred
                                                           "L2"
                                                           "V(1 + max(N, N!1))")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "max"
                                                                 -6
                                                                 2)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (typepred
                                                         "L1 - V(1 + max(N, N!1))"
                                                         "L1"
                                                         "V(1 + max(N, N!1))")
                                                        (("3"
                                                          (expand
                                                           "max"
                                                           -2
                                                           2)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "L1" "L2" "L2-L1")
                        (("2" (expand "max" -) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergence? const-decl "bool" vector_sequences nil)
    (diff_zero formula-decl nil vector_arithmetic nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (m skolem-const-decl "posnat" vector_sequences nil)
    (L1 skolem-const-decl "VectorN(m)" vector_sequences nil)
    (L2 skolem-const-decl "VectorN(m)" vector_sequences nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" vector_sequences nil)
    (V skolem-const-decl "vec_seq[n](m)" vector_sequences nil)
    (add_zero_trick formula-decl nil vector_arithmetic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (norm_reflex formula-decl nil norms nil)
    (above nonempty-type-eq-decl nil integers nil)
    (N!1 skolem-const-decl "posnat" vector_sequences nil)
    (N skolem-const-decl "posnat" vector_sequences nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (test_conv_TCC1 0
  (test_conv_TCC1-2 nil 3741424947
   ("" (subtype-tcc) (("" (eval-formula 1) nil nil)) nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil (test_conv subtype "(: 0, 0, 0 :)" "matrices.VectorN(3)"))
  (test_conv_TCC1-1 nil 3741424925 ("" (subtype-tcc) nil nil) nil nil
   (test_conv subtype "(: 0, 0, 0 :)" "matrices.VectorN(3)")))
 (test_conv 0
  (test_conv-1 nil 3741424988
   ("" (skeep)
    (("" (expand "convergence?" 1)
      (("" (skeep)
        (("" (inst -1 "ceiling(1/epsilon)")
          (("1" (inst 1 "ceiling(1 / epsilon)")
            (("1" (skeep)
              (("1" (reveal -1)
                (("1" (inst -1 "NN")
                  (("1" (replace -1 1)
                    (("1" (expand "-" 1)
                      (("1" (expand "sub" 1)
                        (("1" (expand "scal" 1)
                          (("1" (expand "scal" 1)
                            (("1" (expand "scal" 1)
                              (("1"
                                (expand "add" 1)
                                (("1"
                                  (expand "add" 1)
                                  (("1"
                                    (expand "add" 1)
                                    (("1"
                                      (expand "add" 1)
                                      (("1"
                                        (expand "scal" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "NOT cons(1 / NN, cons(1 / NN, cons(1 / NN, (: :)))) = (: 1/NN, 1/NN, 1/NN :)")
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (replace -1 1)
                                              (("2"
                                                (lemma
                                                 "norm_inf_constant")
                                                (("2"
                                                  (inst -1 "3" "1/NN")
                                                  (("2"
                                                    (lemma
                                                     "test_constant_vec2")
                                                    (("2"
                                                      (inst -1 "1/NN")
                                                      (("2"
                                                        (replace -1 -2)
                                                        (("2"
                                                          (replace
                                                           -2
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide
                                                               -1
                                                               -2)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2)
                                                                (("2"
                                                                  (typepred
                                                                   "1/NN")
                                                                  (("2"
                                                                    (typepred
                                                                     "NN")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "abs"
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "ceiling(1 / epsilon)")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (mult-by
                                                                                 -4
                                                                                 "1/NN")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (case
                                                                                     "NOT NN * (1 / NN) = 1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -1
                                                                                       -5)
                                                                                      (("2"
                                                                                        (mult-by
                                                                                         -5
                                                                                         "1/ceiling(1 / epsilon)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "NOT ceiling(1 / epsilon) * (1 / ceiling(1 / epsilon))=1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -1
                                                                                               -6)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "NOT 1 * (1 / ceiling(1 / epsilon)) = 1 / ceiling(1 / epsilon)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   " NOT 1 * (1 / NN) = 1/NN")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     -8)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       -8)
                                                                                                      (("2"
                                                                                                        (mult-by
                                                                                                         -5
                                                                                                         "epsilon")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             "NOT 1 / epsilon * epsilon =1 ")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (mult-by
                                                                                                               -2
                                                                                                               "1/ceiling(1 / epsilon)")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "epsilon")
                                                                                              (("1"
                                                                                                (mult-by
                                                                                                 -4
                                                                                                 "epsilon")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   " NOT 1 / epsilon * epsilon = 1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flip-ineq
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -12)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "1/ceiling(1 / epsilon) =0")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (mult-by
                                                                                                             -3
                                                                                                             "1 / ceiling(1 / epsilon)")
                                                                                                            (("2"
                                                                                                              (grind)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "ceiling(1/epsilon)")
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   -2
                                                                                                                   -3
                                                                                                                   -5
                                                                                                                   -7
                                                                                                                   -8
                                                                                                                   -10
                                                                                                                   -11
                                                                                                                   -12)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    (("2"
                                                                                                                      (mult-by
                                                                                                                       -1
                                                                                                                       "ceiling(1 / epsilon)")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -1
                                                                                               -3
                                                                                               -8)
                                                                                              (("2"
                                                                                                (mult-by
                                                                                                 1
                                                                                                 "ceiling(1 / epsilon)")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((convergence? const-decl "bool" vector_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (epsilon skolem-const-decl "posreal" vector_sequences nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (test_constant_vec2 formula-decl nil vector_arithmetic nil)
    (norm_inf_constant formula-decl nil norms nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices))
   nil))
 (convergence_unique_vec_seq 0
  (convergence_unique_vec_seq-1 nil 3742739728
   ("" (skeep)
    (("" (expand "convergence?")
      (("" (inst -1 "norm_inf(m)")
        (("" (inst -2 "norm_inf(m)")
          (("" (lemma "convergence_unique_vec")
            (("" (inst -1 "m" "V" "L1" "L2")
              (("" (expand "convergence?")
                (("" (assert)
                  (("" (split)
                    (("1" (propax) nil nil) ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergence? const-decl "bool" vector_sequences nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" vector_sequences nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (convergence_unique_vec formula-decl nil vector_sequences nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (unbounded?_TCC1 0
  (unbounded?_TCC1-1 nil 3741424573 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (unbounded? subtype "vector_sequences.V(vector_sequences.N)"
    "(list_adt[real].cons?)")))
 (unbounded_equiv 0
  (unbounded_equiv-1 nil 3742740100
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "unbounded?") (("1" (inst -1 "nn") nil nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "unbounded?")
          (("2" (skeep)
            (("2" (lemma "equiv_norm_m")
              (("2" (inst -1 "m" "nn!1" "nn")
                (("2" (expand "equiv_m?")
                  (("2" (skeep)
                    (("2" (skeep)
                      (("2" (inst -2 "M*c2")
                        (("2" (skeep)
                          (("2" (inst -1 "V(N)")
                            (("2" (inst 1 "N")
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (div-by -3 "c2")
                                    (("2"
                                      (div-by -2 "c2")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unbounded? const-decl "bool" vector_sequences nil)
    (unbounded? const-decl "bool" vector_sequences nil)
    (norm? const-decl "bool" norms nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (equiv_norm_m formula-decl nil norms_equiv_general nil)
    (equiv_m? const-decl "bool" norms_equiv nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" vector_sequences nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (unbounded?_TCC2 0
  (unbounded?_TCC2-1 nil 3742740088 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (unbounded? subtype "vector_sequences.V(vector_sequences.N)"
    "(list_adt[real].cons?)")))
 (nth_N_TCC1 0
  (nth_N_TCC1-1 nil 3789296650 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (nth_N subtype "vector_sequences.i" "below[length[real](V(j))]")))
 (nth_N_TCC2 0
  (nth_N_TCC2-1 nil 3789296650 ("" (subtype-tcc) nil nil) nil nil
   (nth_N subtype "vector_sequences.i" "below[length[real](L)]")))
 (nth_N 0
  (nth_N-1 nil 3789296668
   ("" (induct "m")
    (("1" (skeep)
      (("1" (skeep 1) (("1" (inst 1 "1") (("1" (skeep) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (inst -1 "LAMBDA(i:nat): cdr(V(i))" "cdr(L)")
            (("1" (split -1)
              (("1" (inst -1 "epsilon")
                (("1" (skeep -1)
                  (("1" (inst -2 "0")
                    (("1" (expand "convergence" -2)
                      (("1" (inst -2 "epsilon")
                        (("1" (skeep)
                          (("1" (inst 1 "max(N,n!1)")
                            (("1" (skeep)
                              (("1"
                                (case "i=0")
                                (("1"
                                  (inst -3 "j")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (typepred "j")
                                      (("1"
                                        (expand "max" -1)
                                        (("1"
                                          (assert)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "nth" 2 1)
                                    (("2"
                                      (expand "nth" 2 2)
                                      (("2"
                                        (inst -1 "j" "i-1")
                                        (("2"
                                          (typepred "j")
                                          (("2"
                                            (hide -2 3)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep)
                  (("2" (inst -1 "i_1+1")
                    (("2" (expand "nth" -1) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "L")
                (("2" (expand "length" -2) (("2" (propax) nil nil))
                  nil))
                nil))
              nil)
             ("3" (assert)
              (("3" (hide 2)
                (("3" (skeep)
                  (("3" (typepred "V(i)")
                    (("3" (expand "length" -2) (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (hide 2)
              (("4" (skeep)
                (("4" (typepred "V(i)") (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (skeep) (("3" (assert) nil nil)) nil)) nil))
      nil)
     ("4" (skeep)
      (("4" (hide 2)
        (("4" (typepred "i")
          (("4" (typepred "V(j)") (("4" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (N skolem-const-decl "nat" vector_sequences nil)
    (n!1 skolem-const-decl "nat" vector_sequences nil)
    (j skolem-const-decl "{jj: nat | jj > max(N, n!1)}"
     vector_sequences nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (L skolem-const-decl "VectorN(1 + j_1)" vector_sequences nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (V skolem-const-decl "vec_seq[n](1 + j_1)" vector_sequences nil)
    (j_1 skolem-const-decl "nat" vector_sequences nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (convergence const-decl "bool" convergence_sequences analysis)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" vector_sequences nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (< const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (converge_nth_TCC1 0
  (converge_nth_TCC1-1 nil 3789295820 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" vector_sequences nil)
    (VectorN type-eq-decl nil matrices matrices)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (converge_nth subtype "vector_sequences.i"
    "below[length[real](V(j))]")))
 (converge_nth_TCC2 0
  (converge_nth_TCC2-1 nil 3789295820 ("" (subtype-tcc) nil nil) nil
   nil
   (converge_nth subtype "vector_sequences.i"
    "below[length[real](L)]")))
 (converge_nth 0
  (converge_nth-1 nil 3789295840
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "convergence?" -1)
            (("1" (expand "convergence?")
              (("1" (inst -1 "norm_inf(n)")
                (("1" (expand "convergence" 1 1)
                  (("1" (skeep)
                    (("1" (inst -1 "epsilon")
                      (("1" (skeep)
                        (("1" (inst 1 "N+1")
                          (("1" (skeep)
                            (("1" (inst -1 "i_1")
                              (("1"
                                (lemma "norm_inf_nth_ineq")
                                (("1"
                                  (inst -1 "V(i_1)-L" "i")
                                  (("1"
                                    (case
                                     " abs(nth(V(i_1), i) - nth(L, i)) = abs(nth(V(i_1) - L, i))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "norm_inf" -3 1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (case
                                         "nth(V(i_1), i) - nth(L, i) = nth(V(i_1) - L, i)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma "nth_dist")
                                            (("2"
                                              (expand "-" 1 2)
                                              (("2"
                                                (expand "sub" 1 1)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "L"
                                                   "-1"
                                                   "i")
                                                  (("2"
                                                    (expand "*" -1)
                                                    (("2"
                                                      (lemma "nth_sum")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "V(i_1)"
                                                         "scal(-1,L)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "i")
                                                            (("1"
                                                              (expand
                                                               "+"
                                                               -1
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (typepred
                                                             "L")
                                                            (("2"
                                                              (typepred
                                                               "n")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred
                                     "V(i_1)-L"
                                     "V(i_1)"
                                     "L"
                                     "n")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "convergence?" 1)
          (("2" (lemma "convergence_equiv")
            (("2" (inst -1 "V" "L")
              (("2" (assert)
                (("2" (expand "convergence?" -1)
                  (("2" (assert)
                    (("2" (hide 2)
                      (("2" (inst 1 "norm_inf(n)")
                        (("2" (expand "convergence?" 1)
                          (("2" (skeep)
                            (("2" (lemma "nth_N")
                              (("2"
                                (inst -1 "n" "V" "L")
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (inst -1 "epsilon")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "N+1")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (lemma "norm_inf_nth")
                                              (("1"
                                                (inst -1 "V(NN)-L")
                                                (("1"
                                                  (skeep -1)
                                                  (("1"
                                                    (expand
                                                     "norm_inf"
                                                     1
                                                     1)
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "NN"
                                                         "i")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "(nth(V(NN), i) - nth(L, i)) = nth(V(NN) - L, i)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (hide
                                                                 -)
                                                                (("2"
                                                                  (lemma
                                                                   "nth_sum")
                                                                  (("2"
                                                                    (lemma
                                                                     "nth_dist")
                                                                    (("2"
                                                                      (inst
                                                                       -2
                                                                       "V(NN)"
                                                                       "scal(-1,L)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "L"
                                                                           "-1"
                                                                           "i")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "i")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "+"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "-"
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sub"
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "*"
                                                                                           -)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -1
                                                                         2)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "i")
                                                          (("2"
                                                            (typepred
                                                             "V(NN)-L"
                                                             "V(NN)"
                                                             "L")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergence? const-decl "bool" vector_sequences nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_sequences analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i_1 skolem-const-decl "nat" vector_sequences nil)
    (N skolem-const-decl "posnat" vector_sequences nil)
    (above nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (i skolem-const-decl "{ii: nat | ii < n}" vector_sequences nil)
    (length def-decl "nat" list_props nil)
    (Vector type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (V skolem-const-decl "vec_seq[n](n)" vector_sequences nil)
    (L skolem-const-decl "VectorN(n)" vector_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth_sum formula-decl nil vector_arithmetic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (nth_dist formula-decl nil vector_arithmetic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (norm_inf_nth_ineq formula-decl nil norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (n formal-const-decl "posnat" vector_sequences nil)
    (norm? const-decl "bool" norms nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (nth_N formula-decl nil vector_sequences nil)
    (norm_inf_nth formula-decl nil norms nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (i skolem-const-decl "below(length(V(NN) - L))" vector_sequences
       nil)
    (NN skolem-const-decl "above(1 + N)" vector_sequences nil)
    (N skolem-const-decl "nat" vector_sequences nil)
    (convergence_equiv formula-decl nil vector_sequences nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak)))