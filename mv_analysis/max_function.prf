(max_function
 (max_gen_TCC1 0
  (max_gen_TCC1-1 nil 3788170390
   (""
    (inst 1 "LAMBDA(D:domain): LAMBDA(f:{ff: vec2real_f[n] |
                           EXISTS (c: real):
                             is_glob_max?[n](ff, D)(c) AND
                              EXISTS (v: (D)): ff(v) = c}): choose( {c: real |
                           is_glob_max?[n](f, D)(c) AND
                            EXISTS (v: (D)): f(v) = c})")
    (("" (skeep 1)
      (("" (typepred "f")
        (("" (skeep -1)
          (("" (expand "nonempty?" 1)
            (("" (expand "empty?" -3)
              (("" (inst -3 "c")
                (("" (expand "member" 1) (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (is_glob_max? const-decl "bool" unconstrained_global_extrema nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" max_function nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (max_gen existence ""
    "[D: domain_vec2real_def[max_function.n].domain -> [f: {ff: domain_vec2real_def[max_function.n].vec2real_f | EXISTS (c: reals.real): booleans.AND(unconstrained_global_extrema[max_function.n].is_glob_max?(ff, D)(c), EXISTS (v: (D)): ff(max_function.v) = c)} -> {c: reals.real | booleans.AND(unconstrained_global_extrema[max_function.n].is_glob_max?(f, D)(c), EXISTS (v: (D)): f(max_function.v) = c)}]]")))
 (max_TCC1 0
  (max_TCC1-1 nil 3788169872
   ("" (skeep 1)
    (("" (typepred "f")
      (("" (typepred "D")
        (("" (lemma "extreme_value")
          (("" (inst -1 "D" "f")
            (("" (assert)
              (("" (split -1)
                (("1" (flatten)
                  (("1" (skeep -2)
                    (("1" (inst 1 "cmax")
                      (("1" (assert) (("1" (inst 1 "pmax") nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "contD?")
                  (("2" (skeep)
                    (("2" (inst -4 "p")
                      (("2" (expand "contp?") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain nil)
    (closed_domain? const-decl "bool" closed_bounded_domain nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" max_function nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (extreme_value formula-decl nil extreme_value_theorem nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (max subtype "max_function.f"
        "{ff: domain_vec2real_def[max_function.n].vec2real_f | EXISTS (c: reals.real): booleans.AND(unconstrained_global_extrema[max_function.n].is_glob_max?(ff, max_function.D)(c), EXISTS (v: (max_function.D)): ff(v) = c)}")))
 (max_plus_TCC1 0
  (max_plus_TCC1-1 nil 3788282597
   ("" (skeep)
    (("" (lemma "cont_sum")
      (("" (inst?)
        (("" (assert)
          (("" (inst -1 "D")
            (("" (typepred "f" "g")
              (("" (split -3)
                (("1" (hide -2 -3)
                  (("1" (expand "contD?")
                    (("1" (skeep)
                      (("1" (expand "+" 1)
                        (("1" (inst -1 "p")
                          (("1" (expand "+" -1)
                            (("1" (assert)
                              (("1"
                                (expand "contp?")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -2 2)
                  (("2" (expand "contD?")
                    (("2" (skeep)
                      (("2" (inst -1 "p")
                        (("2" (expand "contp?")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide -1 2)
                  (("3" (expand "contD?")
                    (("3" (skeep 1)
                      (("3" (inst -1 "p")
                        (("3" (expand "contp?")
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" max_function nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cont_sum formula-decl nil continuity_multivar nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (contD? const-decl "bool" continuity_multivar nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain nil)
    (closed_domain? const-decl "bool" closed_bounded_domain nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil
   (max_plus subtype
    "(real_fun_ops[matrices.VectorN(max_function.n)].+)(max_function.f, max_function.g)"
    "{ff: domain_vec2real_def[max_function.n].vec2real_f | continuity_multivar[max_function.n].contD?(max_function.D)(ff)}")))
 (max_plus 0
  (max_plus-1 nil 3788282601
   ("" (skeep)
    (("" (typepred "max(D)(f+g)")
      (("" (typepred "max(D)(f)")
        (("" (typepred "max(D)(g)")
          (("" (skeep -2)
            (("" (skeep -4)
              (("" (skeep -6)
                (("" (expand "+" -6)
                  (("" (expand "is_glob_max?")
                    (("" (skeep -1)
                      (("" (skeep -4)
                        (("" (inst -2 "v!2")
                          (("1" (inst -5 "v!2")
                            (("1" (assert)
                              (("1"
                                (replace -3 -2 rl)
                                (("1"
                                  (replace -6 -5 rl)
                                  (("1"
                                    (replace -3 1 rl)
                                    (("1"
                                      (replace -6 1 rl)
                                      (("1"
                                        (expand "+" 1 1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "v!2")
                              (("2"
                                (assert)
                                (("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl
         "{c: real | is_glob_max?(f, D)(c) AND EXISTS (v: (D)): f(v) = c}"
         max_function nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain nil)
    (closed_domain? const-decl "bool" closed_bounded_domain nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (is_glob_max? const-decl "bool" unconstrained_global_extrema nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" max_function nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (max_ineq 0
  (max_ineq-1 nil 3788354874
   ("" (skeep 1)
    (("" (typepred "max(D)(f)" "max(D)(g)")
      (("" (skeep -2)
        (("" (skeep -4)
          (("" (expand "is_glob_max?" -3)
            (("" (skeep -3)
              (("" (inst -4 "v")
                (("" (inst -6 "v") (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl
         "{c: real | is_glob_max?(f, D)(c) AND EXISTS (v: (D)): f(v) = c}"
         max_function nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain nil)
    (closed_domain? const-decl "bool" closed_bounded_domain nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (is_glob_max? const-decl "bool" unconstrained_global_extrema nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" max_function nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (max_const_TCC1 0
  (max_const_TCC1-1 nil 3788793881
   ("" (skeep)
    (("" (expand "contD?" 1)
      (("" (skeep)
        (("" (expand "*")
          (("" (expand "contp?")
            (("" (skeep)
              (("" (skeep)
                (("" (typepred "f")
                  (("" (expand "contD?" -1)
                    (("" (inst -1 "p")
                      (("" (expand "contp?" -1)
                        (("" (inst -1 "nn")
                          (("" (case "C=0")
                            (("1" (inst 1 "1")
                              (("1"
                                (skeep)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (inst -1 "eps/C")
                              (("1"
                                (skeep -)
                                (("1"
                                  (inst 2 "delta")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -1 "x_1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "C*(f(x_1)-f(p)) = C*f(x_1) - C* f(p)")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (replace -1 2 rl)
                                              (("1"
                                                (lemma "abs_mult")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "C"
                                                   "f(x_1) - f(p)")
                                                  (("1"
                                                    (replace -1 2)
                                                    (("1"
                                                      (div-by
                                                       2
                                                       "abs(C)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "abs"
                                                           2
                                                           2)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (split 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (mult-by 1 "C")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (mult-by 1 "C")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((contD? const-decl "bool" continuity_multivar nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain nil)
    (closed_domain? const-decl "bool" closed_bounded_domain nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" max_function nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil)
    (C skolem-const-decl "nnreal" max_function nil)
    (eps skolem-const-decl "posreal" max_function nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs_mult formula-decl nil real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (max_const subtype
    "real_fun_ops[matrices.VectorN(max_function.n)].*(max_function.C, max_function.f)"
    "{ff: domain_vec2real_def[max_function.n].vec2real_f | continuity_multivar[max_function.n].contD?(max_function.D)(ff)}")))
 (max_const 0
  (max_const-1 nil 3788794144
   ("" (skeep)
    (("" (typepred "max(D)(C*f)")
      (("" (skeep -2)
        (("" (typepred "max(D)(f)")
          (("" (expand "is_glob_max?" -1)
            (("" (skeep)
              (("" (inst -2 "v")
                (("" (expand "*" -5 1)
                  (("" (mult-by -2 "C")
                    (("" (assert)
                      (("" (skeep -3)
                        (("" (expand "is_glob_max?" -4)
                          (("" (skeep -4)
                            (("" (inst -5 "v!2")
                              ((""
                                (assert)
                                ((""
                                  (expand "*" -5 1)
                                  (("" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl
         "{c: real | is_glob_max?(f, D)(c) AND EXISTS (v: (D)): f(v) = c}"
         max_function nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain nil)
    (closed_domain? const-decl "bool" closed_bounded_domain nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (is_glob_max? const-decl "bool" unconstrained_global_extrema nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" max_function nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak)))