(norm_1_sequential_criterian
 (sequential_1 0
  (sequential_1-1 nil 3742055483
   ("" (skeep)
    (("" (skeep)
      (("" (expand "norm_1_convergence?")
        (("" (expand "convergence" 1)
          (("" (expand "norm_1_contD?" -1)
            (("" (inst -1 "L")
              (("" (skeep)
                (("" (expand "norm_1_contp?" -1)
                  (("" (inst -1 "epsilon")
                    (("" (skeep)
                      (("" (inst -2 "delta/2")
                        (("" (skeep)
                          (("" (inst 1 "N+1")
                            (("" (skeep)
                              ((""
                                (inst -1 "V(i_1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -1 "i_1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "V")
                                  (("2" (inst -1 "i_1") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_sequences "analysis/")
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" norm_1_sequential_criterian nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (domain type-eq-decl nil domain_vec2real_def nil)
    (norm_1_contp? const-decl "bool" norm_1_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (above nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i_1 skolem-const-decl "nat" norm_1_sequential_criterian nil)
    (V skolem-const-decl "{VV: vec_seq(n) | FORALL (i: nat): D(VV(i))}"
     norm_1_sequential_criterian nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (D skolem-const-decl "domain[n]" norm_1_sequential_criterian nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (norm_1_contD? const-decl "bool" norm_1_defs nil)
    (norm_1_convergence? const-decl "bool" norm_1_defs nil))
   shostak))
 (sequential_2 0
  (sequential_2-1 nil 3742112094
   ("" (lemma "sequential_1")
    (("" (skeep)
      (("" (skeep)
        (("" (inst -1 "D" "f")
          (("" (assert)
            (("" (inst -1 "V" "L")
              (("1" (assert) nil nil)
               ("2" (typepred "D")
                (("2" (expand "norm_1_closed?" -1)
                  (("2" (inst -1 "V" "L") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" norm_1_sequential_criterian nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (domain type-eq-decl nil domain_vec2real_def nil)
    (norm_1_closed? const-decl "bool" norm_1_defs nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (D skolem-const-decl "(norm_1_closed?)" norm_1_sequential_criterian
     nil)
    (L skolem-const-decl "VectorN(n)" norm_1_sequential_criterian nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (sequential_1 formula-decl nil norm_1_sequential_criterian nil))
   shostak)))