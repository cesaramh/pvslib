(jacobian_def
 (jacobian_car 0
  (jacobian_car-2 nil 3741444531
   ("" (skeep)
    (("" (assert)
      (("" (expand "jacobianD?")
        (("" (skeep)
          (("" (inst -1 "p")
            (("" (expand "jacobianp?")
              (("" (skeep)
                (("" (typepred "m")
                  (("" (inst -2 "j")
                    (("" (expand "nth")
                      (("" (expand "car_v")
                        (("" (expand "nth") (("" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (jacobianp? const-decl "bool" jacobian_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth const-decl "vec2real_f" fundamentals_constrained_optimization
         nil)
    (nth def-decl "T" list_props nil)
    (car_v const-decl "constraints(1)"
     fundamentals_constrained_optimization nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_domain_e_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" jacobian_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (jacobianD? const-decl "bool" jacobian_def nil))
   nil)
  (jacobian_car-1 nil 3741444517 ("" (postpone) nil nil) nil shostak))
 (jacobian_cdr_TCC1 0
  (jacobian_cdr_TCC1-1 nil 3741444414 ("" (subtype-tcc) nil nil)
   ((* const-decl "VectorN(length(v2))" matrices "matrices/")
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (n formal-const-decl "posnat" jacobian_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nth const-decl "vec2real_f" fundamentals_constrained_optimization
         nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions "analysis/")
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def "analysis/")
    (convergence const-decl "bool" convergence_functions "analysis/")
    (convergence const-decl "bool" lim_of_functions "analysis/")
    (convergent? const-decl "bool" lim_of_functions "analysis/")
    (derivable? const-decl "bool" derivatives_def "analysis/")
    (directional_deriv? const-decl "bool" directional_deriv_def nil)
    (gradientp? const-decl "bool" gradient_def nil)
    (jacobianp? const-decl "bool" jacobian_def nil)
    (jacobianD? const-decl "bool" jacobian_def nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (jacobian_cdr subtype "(number_fields.-)(jacobian_def.m, 1)"
    "nat")))
 (jacobian_cdr 0
  (jacobian_cdr-2 nil 3741444555
   ("" (skeep)
    (("" (expand "jacobianD?")
      (("" (skeep)
        (("" (inst -1 "p")
          (("" (expand "jacobianp?")
            (("" (skeep)
              (("" (inst -1 "j+1")
                (("" (expand "nth" -1)
                  (("" (expand "nth" -1)
                    (("" (assert)
                      (("" (expand "nth" 1)
                        (("" (assert)
                          (("" (expand "cdr" 1) (("" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((jacobianD? const-decl "bool" jacobian_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" jacobian_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_direction? const-decl "bool"
     derivative_domain_multi nil)
    (nth const-decl "vec2real_f" fundamentals_constrained_optimization
         nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cdr const-decl "constraints(m - 1)"
         fundamentals_constrained_optimization nil)
    (nth def-decl "T" list_props nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (jacobianp? const-decl "bool" jacobian_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil)
  (jacobian_cdr-1 nil 3741444449
   ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak))
 (jac_2_grad 0
  (jac_2_grad-2 nil 3741536678
   ("" (skeep)
    (("" (expand "jacobianD?")
      (("" (expand "gradientD?")
        (("" (skeep)
          (("" (inst -1 "p")
            (("" (expand "car" 1)
              (("" (expand "jacobianp?")
                (("" (expand "gradientp?")
                  (("" (skeep)
                    (("" (inst -1 "0")
                      (("" (inst -1 "i")
                        (("" (expand "nth" -1)
                          (("" (expand "nth" -1)
                            (("" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((jacobianD? const-decl "bool" jacobian_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (car const-decl "vec2real_f" fundamentals_constrained_optimization
         nil)
    (gradientp? const-decl "bool" gradient_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nth const-decl "vec2real_f" fundamentals_constrained_optimization
         nil)
    (nth def-decl "T" list_props nil)
    (jacobianp? const-decl "bool" jacobian_def nil)
    (deriv_domain_e_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" jacobian_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (gradientD? const-decl "bool" gradient_def nil))
   nil)
  (jac_2_grad-1 nil 3741536667 ("" (postpone) nil nil) nil shostak))
 (jacobian_TCC1 0
  (jacobian_TCC1-1 nil 3741536581
   ("" (skeep)
    (("" (expand "gradientD?")
      (("" (skeep)
        (("" (expand "gradientp?")
          (("" (skeep)
            (("" (typepred "f")
              (("" (expand "jacobianD?")
                (("" (inst -1 "p!1")
                  (("" (expand "jacobianp?")
                    (("" (inst -1 "0")
                      (("" (expand "nth" -1)
                        (("" (expand "nth" -1)
                          (("" (expand "car" 1)
                            (("" (expand "gradientp?")
                              (("" (inst -1 "i") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gradientD? const-decl "bool" gradient_def nil)
    (gradientp? const-decl "bool" gradient_def nil)
    (jacobianD? const-decl "bool" jacobian_def nil)
    (deriv_domain_e_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" jacobian_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (car const-decl "vec2real_f" fundamentals_constrained_optimization
         nil)
    (nth const-decl "vec2real_f" fundamentals_constrained_optimization
         nil)
    (jacobianp? const-decl "bool" jacobian_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (jacobian subtype
    "fundamentals_constrained_optimization[jacobian_def.n].car(jacobian_def.m, jacobian_def.f)"
    "(gradient_def[jacobian_def.n].gradientD?(jacobian_def.D))")))
 (jacobian_TCC2 0
  (jacobian_TCC2-1 nil 3741536581
   ("" (skeep)
    (("" (typepred "gradient(D, car[n](m, f))(p)")
      (("1" (hide -1)
        (("1"
          (typepred "length[list[real]]
                                ((: gradient(D, car[n](m, f))(p) :))")
          (("1" (expand "length" -1)
            (("1" (expand "length" -1)
              (("1" (hide -1)
                (("1" (split)
                  (("1" (expand "length" 1)
                    (("1" (assert)
                      (("1" (expand "length" 1)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (typepred "i")
                      (("2" (expand "length" -1)
                        (("2" (expand "length" -1)
                          (("2" (assert)
                            (("2" (case "NOT i=0")
                              (("1" (assert) nil nil)
                               ("2"
                                (replace -1 1)
                                (("2"
                                  (expand "nth" 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "f")
        (("2" (expand "jacobianD?")
          (("2" (hide 2)
            (("2" (expand "gradientD?")
              (("2" (skeep)
                (("2" (inst -1 "p!1")
                  (("2" (expand "gradientp?")
                    (("2" (expand "jacobianp?")
                      (("2" (skeep)
                        (("2" (inst -1 "0")
                          (("2" (expand "nth" -1)
                            (("2" (expand "nth" -1)
                              (("2"
                                (expand "gradientp?" -1)
                                (("2"
                                  (inst -1 "i")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "car" 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (gradientp? const-decl "bool" gradient_def nil)
    (nth const-decl "vec2real_f" fundamentals_constrained_optimization
         nil)
    (jacobianp? const-decl "bool" jacobian_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" jacobian_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_direction? const-decl "bool"
     derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (gradientD? const-decl "bool" gradient_def nil)
    (gradient const-decl "VectorN(n)" gradient_def nil)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (car const-decl "vec2real_f" fundamentals_constrained_optimization
         nil)
    (jacobianD? const-decl "bool" jacobian_def nil))
   nil
   (jacobian subtype
    "(: gradient_def[jacobian_def.n].gradient(jacobian_def.D, fundamentals_constrained_optimization[jacobian_def.n].car(jacobian_def.m, jacobian_def.f))(jacobian_def.p) :)"
    "matrices.MatrixMN(jacobian_def.m, jacobian_def.n)")))
 (jacobian_TCC3 0
  (jacobian_TCC3-2 nil 3741536883
   ("" (skeep)
    (("" (typepred "f")
      (("" (lemma "jac_2_grad")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((jacobianD? const-decl "bool" jacobian_def nil)
    (deriv_domain_e_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" jacobian_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (jac_2_grad formula-decl nil jacobian_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (jacobian subtype
    "(fundamentals_constrained_optimization[jacobian_def.n].car(jacobian_def.m, jacobian_def.f))"
    "(gradient_def[jacobian_def.n].gradientD?(jacobian_def.D))"))
  (jacobian_TCC3-1 nil 3741536581 ("" (subtype-tcc) nil nil) nil nil
   (jacobian subtype
    "(fundamentals_constrained_optimization[jacobian_def.n].car(jacobian_def.m, jacobian_def.f))"
    "(gradient_def[jacobian_def.n].gradientD?(jacobian_def.D))")))
 (jacobian_TCC4 0
  (jacobian_TCC4-1 nil 3741536581 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" jacobian_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_direction? const-decl "bool"
     derivative_domain_multi nil)
    (jacobianD? const-decl "bool" jacobian_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (jacobianp? const-decl "bool" jacobian_def nil)
    (gradientp? const-decl "bool" gradient_def nil)
    (directional_deriv? const-decl "bool" directional_deriv_def nil)
    (derivable? const-decl "bool" derivatives_def "analysis/")
    (convergent? const-decl "bool" lim_of_functions "analysis/")
    (convergence const-decl "bool" lim_of_functions "analysis/")
    (convergence const-decl "bool" convergence_functions "analysis/")
    (NQ const-decl "real" derivatives_def "analysis/")
    (restrict const-decl "R" restrict nil)
    (adh const-decl "setof[real]" convergence_functions "analysis/")
    (fullset const-decl "set" sets nil)
    (nth const-decl "vec2real_f" fundamentals_constrained_optimization
         nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (* const-decl "VectorN(length(v2))" matrices "matrices/")
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   nil
   (jacobian subtype "(number_fields.-)(jacobian_def.m, 1)" "posnat")))
 (jacobian_TCC5 0
  (jacobian_TCC5-2 nil 3741536914
   ("" (skeep)
    (("" (lemma "jacobian_cdr")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((jacobian_cdr formula-decl nil jacobian_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (jacobianD? const-decl "bool" jacobian_def nil)
    (deriv_domain_e_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" jacobian_def nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (jacobian subtype
    "fundamentals_constrained_optimization[jacobian_def.n].cdr(jacobian_def.m, jacobian_def.f)"
    "{ff: [matrices.VectorN(jacobian_def.n) -> matrices.VectorN((number_fields.-)(jacobian_def.m, 1))] | jacobian_def.jacobianD?(jacobian_def.D)((number_fields.-)(jacobian_def.m, 1), ff)}"))
  (jacobian_TCC5-1 nil 3741536581 ("" (subtype-tcc) nil nil) nil nil
   (jacobian subtype
    "fundamentals_constrained_optimization[jacobian_def.n].cdr(jacobian_def.m, jacobian_def.f)"
    "{ff: [matrices.VectorN(jacobian_def.n) -> matrices.VectorN((number_fields.-)(jacobian_def.m, 1))] | jacobian_def.jacobianD?(jacobian_def.D)((number_fields.-)(jacobian_def.m, 1), ff)}")))
 (jacobian_TCC6 0
  (jacobian_TCC6-1 nil 3741536581 ("" (termination-tcc) nil nil) nil
   nil
   (jacobian termination
    "jacobian_def.jacobian(jacobian_def.D, (number_fields.-)(jacobian_def.m, 1), fundamentals_constrained_optimization[jacobian_def.n].cdr(jacobian_def.m, jacobian_def.f))"
    "nil")))
 (jacobian_TCC7 0
  (jacobian_TCC7-2 nil 3741536941
   ("" (skeep)
    (("" (split)
      (("1" (expand "length" 1) (("1" (assert) nil nil)) nil)
       ("2" (typepred "v(D, m - 1, cdr[n](m, f))(p)")
        (("1" (hide -1)
          (("1" (skeep)
            (("1" (expand "nth" 1)
              (("1" (lift-if)
                (("1" (split)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (typepred "gradient(D, (car[n](m, f)))(p)")
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (inst -2 "i-1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (lemma "jacobian_cdr")
            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (jacobian_cdr formula-decl nil jacobian_def nil)
    (car const-decl "vec2real_f" fundamentals_constrained_optimization
         nil)
    (gradient const-decl "VectorN(n)" gradient_def nil)
    (gradientD? const-decl "bool" gradient_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (i skolem-const-decl
       "below(length(cons(gradient(D, (car(m, f)))(p), v(D, m - 1, cdr(m, f))(p))))"
       jacobian_def nil)
    (v skolem-const-decl "[d1:
   {z:
      [D: (deriv_domain_e_direction?), m: posnat,
       {ff: [VectorN(n) -> VectorN(m)] | jacobianD?(D)(m, ff)}] |
      z`2 < m} ->
   [(d1`1) -> MatrixMN(d1`2, n)]]" jacobian_def nil)
    (p skolem-const-decl "(D)" jacobian_def nil)
    (f skolem-const-decl
     "{ff: [VectorN(n) -> VectorN(m)] | jacobianD?(D)(m, ff)}"
     jacobian_def nil)
    (m skolem-const-decl "posnat" jacobian_def nil)
    (D skolem-const-decl "(deriv_domain_e_direction?[n])" jacobian_def
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" jacobian_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_direction? const-decl "bool"
     derivative_domain_multi nil)
    (jacobianD? const-decl "bool" jacobian_def nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices "matrices/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (cdr const-decl "constraints(m - 1)"
         fundamentals_constrained_optimization nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (jacobian subtype
    "list_adt[list[real]].cons(gradient_def[jacobian_def.n].gradient(jacobian_def.D, (fundamentals_constrained_optimization[jacobian_def.n].car(jacobian_def.m, jacobian_def.f)))(jacobian_def.p), jacobian_def.jacobian(jacobian_def.D, (number_fields.-)(jacobian_def.m, 1), fundamentals_constrained_optimization[jacobian_def.n].cdr(jacobian_def.m, jacobian_def.f))(jacobian_def.p))"
    "matrices.MatrixMN(jacobian_def.m, jacobian_def.n)"))
  (jacobian_TCC7-1 nil 3741536581 ("" (subtype-tcc) nil nil) nil nil
   (jacobian subtype
    "list_adt[list[real]].cons(gradient_def[jacobian_def.n].gradient(jacobian_def.D, (fundamentals_constrained_optimization[jacobian_def.n].car(jacobian_def.m, jacobian_def.f)))(jacobian_def.p), jacobian_def.jacobian(jacobian_def.D, (number_fields.-)(jacobian_def.m, 1), fundamentals_constrained_optimization[jacobian_def.n].cdr(jacobian_def.m, jacobian_def.f))(jacobian_def.p))"
    "matrices.MatrixMN(jacobian_def.m, jacobian_def.n)"))))