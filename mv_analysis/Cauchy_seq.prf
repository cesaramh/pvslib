(Cauchy_seq
 (cauchy?_TCC1 0
  (cauchy?_TCC1-1 nil 3788467104
   ("" (skeep)
    (("" (typepred "V(NN)" "V(MM)")
      (("" (typepred "V(NN)-V(MM)" "m") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((above nonempty-type-eq-decl nil integers nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" Cauchy_seq nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices))
   nil
   (cauchy? subtype
    "(matrices.-)(Cauchy_seq.V(Cauchy_seq.NN), Cauchy_seq.V(Cauchy_seq.MM))"
    "(list_adt[real].cons?)")))
 (cauchy_equiv 0
  (cauchy_equiv-1 nil 3788618339
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "cauchy?")
          (("1" (skeep 1)
            (("1" (skeep -1)
              (("1" (lemma "equiv_norm")
                (("1" (inst -1 "nn" "nn!1")
                  (("1" (expand "equiv?" -1)
                    (("1" (skeep -1)
                      (("1" (skeep 1)
                        (("1" (inst -2 "epsilon*c1")
                          (("1" (assert)
                            (("1" (skeep -2)
                              (("1"
                                (inst 1 "N")
                                (("1"
                                  (skeep 1)
                                  (("1"
                                    (inst -2 "MM" "NN")
                                    (("1"
                                      (inst -1 "V(NN)-V(MM)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (div-by -1 "c1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (div-by -3 "c1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred
                                         "V(NN)-V(MM)"
                                         "V(NN)"
                                         "V(MM)")
                                        (("2"
                                          (assert)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "cauchy?")
          (("2" (inst -1 "norm_inf(n)")
            (("2" (inst 1 "norm_inf(n)") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cauchy? const-decl "bool" Cauchy_seq nil)
    (cauchy? const-decl "bool" Cauchy_seq nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (V skolem-const-decl "vec_seq[n](n)" Cauchy_seq nil)
    (N skolem-const-decl "nat" Cauchy_seq nil)
    (NN skolem-const-decl "above(N)" Cauchy_seq nil)
    (MM skolem-const-decl "above(N)" Cauchy_seq nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (equiv? const-decl "bool" norms_equiv nil)
    (equiv_norm formula-decl nil norms_equiv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" Cauchy_seq nil)
    (norm_inf const-decl "(norm?(m))" norms nil))
   shostak))
 (cauchy_V_Vn 0
  (cauchy_V_Vn-1 nil 3788604582
   ("" (skeep)
    (("" (lemma "cauchy_equiv")
      (("" (split 1)
        (("1" (flatten)
          (("1" (lemma "cauchy_equiv")
            (("1" (inst -1 "V")
              (("1" (assert)
                (("1" (hide 2)
                  (("1" (expand "cauchy?" -1)
                    (("1" (inst 1 "norm_2(n)")
                      (("1" (expand "cauchy?" 1 1)
                        (("1" (skeep 1)
                          (("1" (inst -1 "epsilon")
                            (("1" (skeep)
                              (("1"
                                (inst 1 "n_1")
                                (("1"
                                  (skeep 1)
                                  (("1"
                                    (inst -1 "MM" "NN")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "ball" -1)
                                        (("1"
                                          (lemma "norm2_d2")
                                          (("1"
                                            (inst
                                             -1
                                             "n"
                                             "V(NN)"
                                             "V(MM)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "Vn_2_V" -2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (flatten)
            (("2" (hide -2)
              (("2" (expand "cauchy?" 1)
                (("2" (expand "cauchy?" -1)
                  (("2" (inst -1 "norm_2(n)")
                    (("2" (skeep)
                      (("2" (inst -1 "r")
                        (("2" (skeep -1)
                          (("2" (inst 1 "N+1")
                            (("2" (skeep)
                              (("2"
                                (inst -1 "i" "j")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "ball" 1)
                                    (("1"
                                      (lemma "norm2_d2")
                                      (("1"
                                        (inst -1 "n" "V(j)" "V(i)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "Vn_2_V" 1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cauchy_equiv formula-decl nil Cauchy_seq nil)
    (cauchy? const-decl "bool" Cauchy_seq nil)
    (ball_is_metric_open application-judgement
     "metric_open[Vector[n], d2]" Cauchy_seq nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (j skolem-const-decl "nat" Cauchy_seq nil)
    (N skolem-const-decl "nat" Cauchy_seq nil)
    (i skolem-const-decl "nat" Cauchy_seq nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" Cauchy_seq nil)
    (VectorN type-eq-decl nil matrices matrices)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (norm_2 const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (norm2_d2 formula-decl nil Vector_VectorN nil)
    (Vn_2_V const-decl "[nat -> vectors@vectors[m].Vector]"
     Vector_VectorN nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (above nonempty-type-eq-decl nil integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (cauchy? const-decl "bool" Cauchy_seq nil)
    (cauchy? const-decl "bool" metric_space_def metric_space))
   shostak))
 (cauchy_convergence 0
  (cauchy_convergence-1 nil 3788467388
   ("" (skeep)
    (("" (lemma " euclidean_topology_is_complete[n]")
      (("" (expand "complete_metric_space?" -1)
        (("" (flatten)
          (("" (expand "metric_complete?" -2)
            (("" (lemma "cauchy_V_Vn")
              (("" (inst -1 "V")
                (("" (inst -3 "Vn_2_V(n,V)")
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1" (expand "metric_convergent?" -3)
                          (("1" (skeep -3)
                            (("1" (typepred "x")
                              (("1"
                                (inst 1 "V_2_Vn(n,x)")
                                (("1"
                                  (lemma "convergence_V_Vn")
                                  (("1"
                                    (inst -1 "n" "V" "V_2_Vn(n,x)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "V_Vn")
                                        (("1"
                                          (inst -1 "n" "x")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skeep 1)
                      (("2" (assert)
                        (("2" (expand "fullset" 1 1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset_is_clopen name-judgement
     "clopen[Vector[n], (metric_induced_topology)]" euclidean
     metric_space)
    (euclidean_topology_is_complete name-judgement
     "metric_complete[Vector[n], d2]" euclidean metric_space)
    (fullset_is_clopen name-judgement
     "clopen[Vector[n], (metric_induced_topology)]" Cauchy_seq nil)
    (euclidean_topology_is_complete name-judgement
     "metric_complete[Vector[n], d2]" Cauchy_seq nil)
    (complete_metric_space? const-decl "bool" metric_space_def
     metric_space)
    (metric_complete? const-decl "bool" metric_space_def metric_space)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (V_2_Vn def-decl
     "{VV: VectorN(m) | FORALL (i: below(m)): nth(VV, i) = V(i)}"
     Vector_VectorN nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (V_Vn formula-decl nil Vector_VectorN nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (convergence_V_Vn formula-decl nil Vector_VectorN nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (metric_convergent? const-decl "bool" metric_space_def
     metric_space)
    (sequence type-eq-decl nil sequences nil)
    (V skolem-const-decl "vec_seq[n](n)" Cauchy_seq nil)
    (Vn_2_V const-decl "[nat -> vectors@vectors[m].Vector]"
     Vector_VectorN nil)
    (fullset const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (Vector type-eq-decl nil vectors vectors)
    (Index type-eq-decl nil vectors vectors)
    (< const-decl "bool" reals nil)
    (cauchy_V_Vn formula-decl nil Cauchy_seq nil)
    (euclidean_topology_is_complete judgement-tcc nil euclidean
     metric_space)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" Cauchy_seq nil))
   shostak)))