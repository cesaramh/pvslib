(Vector_VectorN
 (Vn_2_V_TCC1 0
  (Vn_2_V_TCC1-1 nil 3788542714
   ("" (skeep)
    (("" (typepred "V") (("" (assert) (("" (postpone) nil nil)) nil))
      nil))
    nil)
   ((VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil (Vn_2_V subtype "Vector_VectorN.i" "below[length[real](V)]")))
 (V_2_Vn_TCC1 0
  (V_2_Vn_TCC1-1 nil 3788542822
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (V_2_Vn subtype "0" "Index[m]")))
 (V_2_Vn_TCC2 0
  (V_2_Vn_TCC1-1 nil 3788542714
   ("" (skeep)
    (("" (assert)
      (("" (skeep 1)
        (("" (typepred "i")
          (("" (case "NOT i=0")
            (("1" (assert) nil nil) ("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (length_singleton formula-decl nil more_list_props structures)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil
   (V_2_Vn subtype "(: Vector_VectorN.V(0) :)"
    "{VV: matrices.VectorN(Vector_VectorN.m) | FORALL (i: naturalnumbers.below(Vector_VectorN.m)): list_props[real].nth(VV, i) = Vector_VectorN.V(i)}")))
 (V_2_Vn_TCC3 0
  (V_2_Vn_TCC4-1 nil 3788542714
   ("" (skeep)
    (("" (split 2)
      (("1" (expand "length" 1 1) (("1" (assert) nil nil)) nil)
       ("2" (skeep 1)
        (("2" (case "i_1=0")
          (("1" (expand "nth" 1 1) (("1" (assert) nil nil)) nil)
           ("2" (expand "nth" 2 1)
            (("2" (assert)
              (("2" (typepred "(v(m - 1, LAMBDA (i: nat): V(1 + i)))")
                (("2" (inst -3 "i_1-1") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (V_2_Vn subtype "0" "Index[m]")))
 (V_2_Vn_TCC4 0
  (V_2_Vn_TCC2-1 nil 3788542714
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (V_2_Vn subtype "(number_fields.-)(Vector_VectorN.m, 1)" "posnat")))
 (V_2_Vn_TCC5 0
  (V_2_Vn_TCC5-1 nil 3788543857 ("" (subtype-tcc) nil nil) nil nil
   (V_2_Vn subtype "(number_fields.+)(Vector_VectorN.i, 1)"
    "Index[m]")))
 (V_2_Vn_TCC6 0
  (V_2_Vn_TCC3-1 nil 3788542714 ("" (termination-tcc) nil nil) nil nil
   (V_2_Vn termination
    "Vector_VectorN.V_2_Vn((number_fields.-)(Vector_VectorN.m, 1), LAMBDA (i: naturalnumbers.below((number_fields.-)(Vector_VectorN.m, 1))): Vector_VectorN.V((number_fields.+)(i, 1)))"
    "nil")))
 (V_2_Vn_TCC7 0
  (V_2_Vn_TCC7-1 nil 3788543857
   ("" (skeep)
    (("" (split 2)
      (("1" (expand "length" 1 1) (("1" (assert) nil nil)) nil)
       ("2" (skeep 1)
        (("2" (case "i_1=0")
          (("1" (assert)
            (("1" (expand "nth" 1 1) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (expand "nth" 2 1)
            (("2" (assert)
              (("2"
                (typepred
                 "v(m - 1, LAMBDA (i: below(m - 1)): V(1 + i))")
                (("2" (inst -3 "i_1-1") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Index type-eq-decl nil vectors vectors)
    (Vector type-eq-decl nil vectors vectors)
    (VectorN type-eq-decl nil matrices matrices)
    (below type-eq-decl nil nat_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil
   (V_2_Vn subtype
    "list_adt[real].cons(Vector_VectorN.V(0), Vector_VectorN.V_2_Vn((number_fields.-)(Vector_VectorN.m, 1), LAMBDA (i: naturalnumbers.below((number_fields.-)(Vector_VectorN.m, 1))): Vector_VectorN.V((number_fields.+)(i, 1))))"
    "{VV: matrices.VectorN(Vector_VectorN.m) | FORALL (i: naturalnumbers.below(Vector_VectorN.m)): list_props[real].nth(VV, i) = Vector_VectorN.V(i)}")))
 (Vn_V 0
  (Vn_V-1 nil 3788543965
   ("" (induct "m")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (case "j=0")
        (("1" (replace -1)
          (("1" (skeep 1)
            (("1" (hide -2)
              (("1" (assert)
                (("1" (expand "Vn_2_V")
                  (("1" (expand "V_2_Vn")
                    (("1" (grind)
                      (("1" (decompose-equality 1)
                        (("1" (typepred "V")
                          (("1" (expand "length" -2)
                            (("1" (expand "length" -2)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (skeep 2)
            (("2" (expand "Vn_2_V")
              (("2" (expand "V_2_Vn" 2 1)
                (("2" (decompose-equality 2 1)
                  (("1" (grind) nil nil)
                   ("2" (inst -1 "cdr(V)")
                    (("1" (assert)
                      (("1" (expand "nth" 1 1) (("1" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (typepred "V")
                        (("2" (expand "length" -2 1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((V skolem-const-decl "VectorN(1 + j)" Vector_VectorN nil)
    (j skolem-const-decl "nat" Vector_VectorN nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (Vn_2_V const-decl "vectors@vectors[m].Vector" Vector_VectorN nil)
    (V_2_Vn def-decl
     "{VV: VectorN(m) | FORALL (i: below(m)): nth(VV, i) = V(i)}"
     Vector_VectorN nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Vector type-eq-decl nil vectors vectors)
    (Index type-eq-decl nil vectors vectors)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (V_Vn 0
  (V_Vn-1 nil 3788604116
   ("" (induct "m")
    (("1" (skeep 2) (("1" (decompose-equality 2) nil nil)) nil)
     ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (case "j=0")
        (("1" (skeep 1)
          (("1" (decompose-equality 1)
            (("1" (typepred "x!1")
              (("1" (assert)
                (("1" (case "NOT x!1=0")
                  (("1" (assert) nil nil)
                   ("2" (replace -1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep 2)
          (("2" (assert)
            (("2" (decompose-equality 2)
              (("2" (typepred "x!1")
                (("2" (case "x!1=0")
                  (("1" (replace -1)
                    (("1" (expand "V_2_Vn" 1 1)
                      (("1" (expand "Vn_2_V")
                        (("1" (assert)
                          (("1" (expand "nth" 1 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (inst -2 "LAMBDA(i:below(j)): V(i+1)")
                      (("2" (assert)
                        (("2" (decompose-equality -2)
                          (("2" (inst -1 "x!1-1")
                            (("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (V_2_Vn def-decl
     "{VV: VectorN(m) | FORALL (i: below(m)): nth(VV, i) = V(i)}"
     Vector_VectorN nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Vn_2_V const-decl "vectors@vectors[m].Vector" Vector_VectorN nil)
    (VectorN type-eq-decl nil matrices matrices)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors vectors)
    (Index type-eq-decl nil vectors vectors)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (Vn_V_seq 0
  (Vn_V_seq-1 nil 3788604170
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (typepred "x!1")
        (("" (expand "Vn_2_V")
          (("" (expand "V_2_Vn")
            (("" (lemma "Vn_V") (("" (inst -1 "m" "V(x!1)") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors vectors)
    (Vector type-eq-decl nil vectors vectors)
    (n formal-const-decl "posnat" Vector_VectorN nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (V_2_Vn const-decl "vec_seq(m)" Vector_VectorN nil)
    (Vn_2_V const-decl "[nat -> vectors@vectors[m].Vector]"
     Vector_VectorN nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vn_V formula-decl nil Vector_VectorN nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (V_Vn_seq 0
  (V_Vn_seq-1 nil 3788604238
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (expand "V_2_Vn" 1)
        (("" (expand "Vn_2_V")
          (("" (lemma "V_Vn") (("" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Vector_VectorN nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (Vector type-eq-decl nil vectors vectors)
    (Vn_2_V const-decl "[nat -> vectors@vectors[m].Vector]"
     Vector_VectorN nil)
    (V_2_Vn const-decl "vec_seq(m)" Vector_VectorN nil)
    (Index type-eq-decl nil vectors vectors)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (V_Vn formula-decl nil Vector_VectorN nil))
   shostak))
 (d2_sigma_TCC1 0
  (d2_sigma_TCC1-1 nil 3789903890 ("" (subtype-tcc) nil nil) nil nil
   (d2_sigma subtype "0" "T_low[nat]")))
 (d2_sigma_TCC2 0
  (d2_sigma_TCC2-1 nil 3789903963
   ("" (induct "m")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (case "j=0")
        (("1" (replace -1)
          (("1" (hide -2)
            (("1" (skeep)
              (("1" (expand "sigma" 1)
                (("1" (expand "sigma" 1) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (assert)
            (("2"
              (inst -1 "LAMBDA(x:below(j)): f(x)"
               "lAMBDA(x:below(j)): g(x)")
              (("2" (assert)
                (("2" (lemma "sigma_last")
                  (("2"
                    (inst -1
                     "LAMBDA (i: nat): IF i < 1 + j THEN sq(f(i) - g(i)) ELSE 0 ENDIF"
                     "j" "0")
                    (("2" (assert)
                      (("2" (replace -1 2)
                        (("2" (lemma "sigma_eq")
                          (("2"
                            (inst -1 "LAMBDA (i: nat):
              IF i < 1 + j THEN sq(f(i) - g(i)) ELSE 0 ENDIF"
                             "LAMBDA (i: nat):
                IF i < j THEN sq(f(i) - g(i)) ELSE 0 ENDIF" "j-1" "0")
                            (("1" (assert) nil nil)
                             ("2" (skeep 1) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma_last formula-decl nil sigma reals)
    (sigma_eq formula-decl nil sigma reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (j skolem-const-decl "nat" Vector_VectorN nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (d2_sigma subtype
    "sigma[nat].sigma(0, (number_fields.-)(Vector_VectorN.m, 1), LAMBDA (i: naturalnumbers.nat): IF reals.<(i, Vector_VectorN.m) THEN sq.sq((number_fields.-)(Vector_VectorN.f(i), Vector_VectorN.g(i))) ELSE 0 ENDIF)"
    "nonneg_real")))
 (d2_sigma 0
  (d2_sigma-1 nil 3789903915
   ("" (induct "m")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep)
      (("3" (case "j=0")
        (("1" (replace -1)
          (("1" (hide -2 -3)
            (("1" (skeep) (("1" (grind) nil nil)) nil)) nil))
          nil)
         ("2" (assert)
          (("2" (skeep)
            (("2"
              (inst -1 "LAMBDA(x:below(j)): f(x)"
               "lAMBDA(x:below(j)): g(x)")
              (("2" (expand "d2" 2 1)
                (("2"
                  (case "sigma(0, j, LAMBDA (i: below[1 + j]): sq(f(i) - g(i))) = sigma(0, j,
                  LAMBDA (i: nat):
                    IF i < 1 + j THEN sq(f(i) - g(i)) ELSE 0 ENDIF)")
                  (("1" (assert) nil nil)
                   ("2" (hide 3)
                    (("2" (lemma "sigma_last")
                      (("2"
                        (inst -1 "LAMBDA (i: nat):
               IF i < 1 + j THEN sq(f(i) - g(i)) ELSE 0 ENDIF" "j" "0")
                        (("2" (assert)
                          (("2" (replace -1 1)
                            (("2" (hide -1)
                              (("2"
                                (lemma "sigma_last[below[1+j]]")
                                (("2"
                                  (inst
                                   -1
                                   "LAMBDA (i: below[1 + j]): sq(f(i) - g(i))"
                                   "j"
                                   "0")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -1 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "d2" -2 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "NOT sigma(0, j - 1, LAMBDA (i: below[j]): sq(f(i) - g(i))) = sigma(0, j - 1,
                  LAMBDA (i: nat):
                    IF i < j THEN sq(f(i) - g(i)) ELSE 0 ENDIF)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide -3)
                                                (("2"
                                                  (hide -2 -3)
                                                  (("2"
                                                    (lemma "sigma_eq")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       " LAMBDA (i: nat): IF i < j THEN sq(f(i) - g(i)) ELSE 0 ENDIF"
                                                       " LAMBDA (i: nat):
               IF i < 1 + j THEN sq(f(i) - g(i)) ELSE 0 ENDIF"
                                                       "j-1"
                                                       "0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1
                                                           rl)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "sigma_diff_eq[j,j+1]")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "LAMBDA (i: below[j]): sq(f(i) - g(i))"
                                                                 "LAMBDA (i: below[1 + j]): sq(f(i) - g(i))"
                                                                 "j-1"
                                                                 "0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep 1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skeep 1)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("4"
                                                (skeep)
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep) (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (assert)
          (("4" (lemma "d2_sigma_TCC2")
            (("4" (skeep) (("4" (inst -1 "m" "f" "g") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Index type-eq-decl nil vectors vectors)
    (Vector type-eq-decl nil vectors vectors)
    (nnreal type-eq-decl nil real_types nil)
    (metric? const-decl "bool" metric_def metric_space)
    (metric nonempty-type-eq-decl nil metric_def metric_space)
    (d2 const-decl "metric" euclidean metric_space)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sigma_nnreal application-judgement "nnreal" sigma_below reals)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sigma_eq formula-decl nil sigma reals)
    (sigma_diff_eq formula-decl nil sigma_below_sub reals)
    (j skolem-const-decl "nat" Vector_VectorN nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_last formula-decl nil sigma reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integer nonempty-type-from-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (d2_sigma_TCC2 subtype-tcc nil Vector_VectorN nil))
   shostak))
 (norm2_d2_TCC1 0
  (norm2_d2_TCC1-1 nil 3788604947
   ("" (skeep)
    (("" (typepred "V1-V2" "V1" "V2") (("" (grind) nil nil)) nil)) nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (norm2_d2 subtype
    "(matrices.-)(Vector_VectorN.V1, Vector_VectorN.V2)"
    "(list_adt[real].cons?)")))
 (norm2_d2 0
  (norm2_d2-1 nil 3788605028
   ("" (induct "m")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (case "j=0")
        (("1" (replace -1)
          (("1" (skeep 1)
            (("1" (assert)
              (("1" (expand "norm_2" 1 1)
                (("1" (expand "d2")
                  (("1"
                    (case "norm_2sq(V1 - V2)= sigma(0, j,
                  LAMBDA (i: below[1 + j]):
                    sq(Vn_2_V(1, V1)(i) - Vn_2_V(1, V2)(i)))")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (expand "norm_2sq" 1 1)
                        (("2" (expand "*" 1 1)
                          (("2" (expand "dot" 1 1)
                            (("2" (typepred "V1")
                              (("2"
                                (typepred "V2")
                                (("2"
                                  (replace -5)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "length" -)
                                      (("2"
                                        (expand "length" -)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lift-if -2)
                                            (("2"
                                              (lift-if -4)
                                              (("2"
                                                (split -4)
                                                (("1"
                                                  (split -3)
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (typepred
                                                           "V1-V2"
                                                           "V1"
                                                           "V2")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "dot"
                                                             3
                                                             1)
                                                            (("2"
                                                              (lift-if
                                                               3)
                                                              (("2"
                                                                (split
                                                                 3)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "-"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "sub"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "scal"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "sub"
                                                                               1
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "scal"
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "scal"
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "add"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "sigma"
                                                                                         1
                                                                                         1)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "-")
                                                                      (("2"
                                                                        (expand
                                                                         "sub"
                                                                         +)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (skeep 1)
                        (("3" (typepred "x") (("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (skeep)
            (("2" (expand "norm_2" 2 1)
              (("2" (expand "norm_2sq" 2 1)
                (("2" (expand "*" 2 1)
                  (("2" (expand "dot" 2 1)
                    (("2" (typepred "V1" "V2" "V1-V2")
                      (("2" (hide -1 -3 -5)
                        (("2" (assert)
                          (("2" (expand "d2" 2)
                            (("2" (lemma "sigma_first[below[1+j]]")
                              (("1"
                                (inst
                                 -1
                                 "LAMBDA (i: below[1 + j]):
                    sq(Vn_2_V(1 + j, V1)(i) - Vn_2_V(1 + j, V2)(i))"
                                 "j"
                                 "0")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1 2)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (case
                                         "dot(cdr(V1 - V2), cdr(V1 - V2)) + car(V1 - V2) * car(V1 - V2) =sq(Vn_2_V(1 + j, V1)(0) - Vn_2_V(1 + j, V2)(0)) +
             sigma(1, j,
                   LAMBDA (i: below[1 + j]):
                     sq(Vn_2_V(1 + j, V1)(i) - Vn_2_V(1 + j, V2)(i)))")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide 3)
                                          (("2"
                                            (case
                                             "car(V1 - V2) * car(V1 - V2) = sq(Vn_2_V(1 + j, V1)(0) - Vn_2_V(1 + j, V2)(0))")
                                            (("1"
                                              (case
                                               "dot(cdr(V1 - V2), cdr(V1 - V2)) = sigma(1, j,
              LAMBDA (i: below[1 + j]):
                sq(Vn_2_V(1 + j, V1)(i) - Vn_2_V(1 + j, V2)(i)))")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (inst
                                                   -5
                                                   "cdr(V1)"
                                                   "cdr(V2)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "d2"
                                                       -5
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "norm_2"
                                                         -5)
                                                        (("1"
                                                          (case
                                                           "norm_2sq(cdr(V1) - cdr(V2)) = sigma(0, j - 1,
                  LAMBDA (i: below[j]):
                    sq(Vn_2_V(j, cdr(V1))(i) - Vn_2_V(j, cdr(V2))(i)))")
                                                          (("1"
                                                            (hide -6)
                                                            (("1"
                                                              (expand
                                                               "norm_2sq")
                                                              (("1"
                                                                (expand
                                                                 "*"
                                                                 -1)
                                                                (("1"
                                                                  (lemma
                                                                   "cdr_sub")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "V1"
                                                                     "V2")
                                                                    (("1"
                                                                      (case
                                                                       "sigma(0, j - 1,
             LAMBDA (i: below[j]):
               sq(Vn_2_V(j, cdr(V1))(i) - Vn_2_V(j, cdr(V2))(i))) = sigma(1, j,
             LAMBDA (i: below[1 + j]):
               sq(Vn_2_V(1 + j, V1)(i) - Vn_2_V(1 + j, V2)(i)))")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (hide
                                                                           -)
                                                                          (("2"
                                                                            (lemma
                                                                             "sigma_diff_shift[j,1+j]")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "LAMBDA (i: below[j]):
              sq(Vn_2_V(j, cdr(V1))(i) - Vn_2_V(j, cdr(V2))(i))"
                                                                               "LAMBDA (i: below[1 + j]):
               sq(Vn_2_V(1 + j, V1)(i) - Vn_2_V(1 + j, V2)(i))"
                                                                               "1"
                                                                               "j-1"
                                                                               "0")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skeep
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2
                                                                                       3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "Vn_2_V"
                                                                                         1
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "Vn_2_V"
                                                                                           1
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "Vn_2_V")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth"
                                                                                               1
                                                                                               3)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 1
                                                                                                 4)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "V2")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "length"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide
                                                                                 2)
                                                                                (("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "V1")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "length"
                                                                                       -2)
                                                                                      (("3"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide 2)
                                                            (("3"
                                                              (skeep)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (hide 2)
                                                            (("4"
                                                              (skeep)
                                                              (("4"
                                                                (expand
                                                                 "length"
                                                                 -)
                                                                (("4"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (assert)
                                                            (("5"
                                                              (hide 2)
                                                              (("5"
                                                                (skeep)
                                                                (("5"
                                                                  (expand
                                                                   "length"
                                                                   -2)
                                                                  (("5"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -3)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    (("3"
                                                      (expand
                                                       "length"
                                                       -)
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (hide -)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2 3)
                                (("2"
                                  (hide -1 -2 -3 -4)
                                  (("2"
                                    (skeep)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "V1-V2" "V1" "V2") (("4" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (norm? const-decl "bool" norms nil)
    (norm_2 const-decl "(norm?(m))" norms nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil vectors vectors)
    (Vector type-eq-decl nil vectors vectors)
    (nnreal type-eq-decl nil real_types nil)
    (metric? const-decl "bool" metric_def metric_space)
    (metric nonempty-type-eq-decl nil metric_def metric_space)
    (d2 const-decl "metric" euclidean metric_space)
    (Vn_2_V const-decl "vectors@vectors[m].Vector" Vector_VectorN nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (sigma_nnreal application-judgement "nnreal" sigma_below reals)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (norm_2sq const-decl "nonneg_real" norms nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (sq const-decl "nonneg_real" sq reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dot def-decl "real" matrices matrices)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nth def-decl "T" list_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "real" matrices matrices)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (sigma_diff_shift formula-decl nil sigma_below_sub reals)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cdr_sub formula-decl nil vector_arithmetic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (V2 skolem-const-decl "VectorN(1 + j)" Vector_VectorN nil)
    (V1 skolem-const-decl "VectorN(1 + j)" Vector_VectorN nil)
    (j skolem-const-decl "nat" Vector_VectorN nil)
    (sigma_first formula-decl nil sigma reals))
   shostak))
 (convergence_V_Vn 0
  (convergence_V_Vn-1 nil 3788612806
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "convergence?" -1)
          (("1" (expand "metric_converges_to" 1)
            (("1" (skeep 1)
              (("1" (inst -1 "norm_2(m)")
                (("1" (inst -1 "r")
                  (("1" (skeep -1)
                    (("1" (inst 1 "N+1")
                      (("1" (skeep 1)
                        (("1" (inst -1 "i")
                          (("1" (assert)
                            (("1" (lemma "norm2_d2")
                              (("1"
                                (inst -1 "m" "L" "V(i)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "norm_reflex")
                                    (("1"
                                      (inst
                                       -1
                                       "m"
                                       "norm_2(m)"
                                       "V(i)"
                                       "L")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "ball" 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "Vn_2_V" 1 2)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "convergence_equiv_m")
          (("2" (inst -1 "m" "V" "L")
            (("2" (assert)
              (("2" (hide 2)
                (("2" (inst 1 "norm_2(m)")
                  (("2" (expand "convergence?")
                    (("2" (expand "metric_converges_to")
                      (("2" (skeep 1)
                        (("2" (inst -1 "epsilon")
                          (("2" (skeep -1)
                            (("2" (inst 1 "n!1+1")
                              (("2"
                                (skeep 1)
                                (("2"
                                  (inst -1 "NN")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "ball" -1)
                                      (("2"
                                        (lemma "norm2_d2")
                                        (("2"
                                          (inst -1 "m" "L" "V(NN)")
                                          (("2"
                                            (lemma "norm_reflex")
                                            (("2"
                                              (inst
                                               -1
                                               "m"
                                               "norm_2(m)"
                                               "V(NN)"
                                               "L")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "Vn_2_V"
                                                   -3
                                                   2)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergence? const-decl "bool" vector_sequences nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl "nat" Vector_VectorN nil)
    (N skolem-const-decl "posnat" Vector_VectorN nil)
    (above nonempty-type-eq-decl nil integers nil)
    (norm2_d2 formula-decl nil Vector_VectorN nil)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (Vn_2_V const-decl "[nat -> vectors@vectors[m].Vector]"
     Vector_VectorN nil)
    (norm_reflex formula-decl nil norms nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" Vector_VectorN nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (member const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ball_is_metric_open application-judgement
     "metric_open[Vector[n], d2]" euclidean metric_space)
    (norm_2 const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (convergence_equiv_m formula-decl nil vector_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak)))