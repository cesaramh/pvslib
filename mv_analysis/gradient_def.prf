(gradient_def
 (gradientp?_TCC1 0
  (gradientp?_TCC1-1 nil 3741442396 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil))
   nil
   (gradientp? subtype "gradient_def.D"
    "(derivative_domain_multi[gradient_def.n].deriv_domain_partial?(vector_arithmetic.e(gradient_def.n, gradient_def.i)))")))
 (diffp_imp_gradp_TCC1 0
  (diffp_imp_gradp_TCC1-1 nil 3741443120
   ("" (skeep)
    (("" (lemma "dd_e_partial_implies_dd")
      (("" (inst -1 "D") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_e_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (diffp_imp_gradp subtype "gradient_def.D"
    "(derivative_domain_multi[gradient_def.n].deriv_domain?)")))
 (diffp_imp_gradp 0
  (diffp_imp_gradp-1 nil 3741443521
   ("" (skeep)
    (("" (expand "gradientp?")
      (("" (skeep)
        (("" (lemma "diff_imp_init_partial1")
          (("" (inst -1 "e(n,i)" "D" "f" "p")
            (("1" (assert) nil nil)
             ("2" (lemma "e_not_zero")
              (("2" (inst -1 "n" "i")
                (("2" (lemma "diff_imp_init_partial2")
                  (("2" (inst -1 "e(n,i)" "D" "f" "p")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (lemma "e_not_zero")
              (("3" (inst -1 "n" "i") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gradientp? const-decl "bool" gradient_def nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (diff_imp_init_partial1 formula-decl nil init_partial_def nil)
    (e_not_zero formula-decl nil vector_arithmetic nil)
    (diff_imp_init_partial2 formula-decl nil init_partial_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (D skolem-const-decl "(deriv_domain_e_partial?)" gradient_def nil)
    (list type-decl nil list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(n)" gradient_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (diffD_imp_gradD_TCC1 0
  (diffD_imp_gradD_TCC1-1 nil 3789815184
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_e_partial_implies_dd")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dd_e_partial_implies_dd formula-decl nil derivative_domain_multi
     nil))
   nil
   (diffD_imp_gradD subtype "gradient_def.D"
    "(derivative_domain_multi[gradient_def.n].deriv_domain?)")))
 (diffD_imp_gradD 0
  (diffD_imp_gradD-1 nil 3741443960
   ("" (skeep)
    (("" (expand "gradientD?")
      (("" (lemma "diffp_imp_gradp")
        (("" (skeep)
          (("" (inst -1 "D" "p" "f")
            (("" (typepred "f")
              (("" (assert)
                (("" (expand "differentiableD?" -1)
                  (("" (inst -1 "p") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gradientD? const-decl "bool" gradient_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (diffp_imp_gradp formula-decl nil gradient_def nil))
   shostak))
 (partials_TCC1 0
  (partials_TCC1-1 nil 3741530973 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil
   (partials subtype
    "(number_fields.-)((number_fields.+)((number_fields.+)(1, gradient_def.i), gradient_def.j), gradient_def.n)"
    "below[length[real](v)]")))
 (partials_TCC2 0
  (partials_TCC2-1 nil 3741530973 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (partials subtype "gradient_def.i"
    "naturalnumbers.below(gradient_def.n)")))
 (partials_TCC3 0
  (partials_TCC3-1 nil 3741530973
   ("" (skeep)
    (("" (lemma "dd_epartial_implies_dd_partial")
      (("" (inst?)
        (("" (skeep) (("" (inst -1 "i") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_epartial_implies_dd_partial formula-decl nil
     derivative_domain_multi nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (partials subtype "gradient_def.D"
    "(derivative_domain_multi[gradient_def.n].deriv_domain_partial?(vector_arithmetic.e(gradient_def.n, gradient_def.i)))")))
 (partials_TCC4 0
  (partials_TCC4-1 nil 3741530973 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (gradientD? const-decl "bool" gradient_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Vector type-eq-decl nil matrices matrices)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (gradientp? const-decl "bool" gradient_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (partials subtype "gradient_def.f"
    "(init_partial_def[gradient_def.n].init_partial?(vector_arithmetic.e(gradient_def.n, gradient_def.i), gradient_def.D))")))
 (partials_TCC5 0
  (partials_TCC5-1 nil 3741530973 ("" (subtype-tcc) nil nil) nil nil
   (partials subtype "(number_fields.-)(gradient_def.n, 1)"
    "naturalnumbers.below(gradient_def.n)")))
 (partials_TCC6 0
  (partials_TCC6-1 nil 3741530973
   ("" (skeep)
    (("" (lemma "dd_epartial_implies_dd_partial")
      (("" (inst -1 "D" "n-1") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_epartial_implies_dd_partial formula-decl nil
     derivative_domain_multi nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (partials subtype "gradient_def.D"
    "(derivative_domain_multi[gradient_def.n].deriv_domain_partial?(vector_arithmetic.e(gradient_def.n, (number_fields.-)(gradient_def.n, 1))))")))
 (partials_TCC7 0
  (partials_TCC7-1 nil 3741530973 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (gradientD? const-decl "bool" gradient_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (gradientp? const-decl "bool" gradient_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (partials subtype "gradient_def.f"
    "(init_partial_def[gradient_def.n].init_partial?(vector_arithmetic.e(gradient_def.n, (number_fields.-)(gradient_def.n, 1)), gradient_def.D))")))
 (partials_TCC8 0
  (partials_TCC8-1 nil 3741530973
   ("" (skeep)
    (("" (split)
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2" (replace -1 1)
          (("2" (assert)
            (("2" (case "NOT 1-n+i=0")
              (("1" (assert) nil nil)
               ("2" (case "NOT i=n-1")
                (("1" (assert) nil nil)
                 ("2" (expand "nth" 1)
                  (("2" (replace -1 1) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((e def-decl "VectorN(m)" vector_arithmetic nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (deriv const-decl "real" derivatives_def analysis)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (init_partial const-decl "real" init_partial_def nil)
    (partial const-decl "real" partial_def nil)
    (partial const-decl "real" partial_def nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (subrange type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (partials subtype
    "(: partial_def[gradient_def.n].partial((number_fields.-)(gradient_def.n, 1), gradient_def.D, gradient_def.f)(gradient_def.p) :)"
    "{v: matrices.Vector | booleans.AND(list_props[real].length(v) = (number_fields.+)(1, gradient_def.j), FORALL (i: integers.subrange((number_fields.-)((number_fields.-)(gradient_def.n, gradient_def.j), 1), (number_fields.-)(gradient_def.n, 1))): list_props[real].nth(v, (number_fields.-)((number_fields.+)((number_fields.+)(1, i), gradient_def.j), gradient_def.n)) = partial_def[gradient_def.n].partial(i, gradient_def.D, gradient_def.f)(gradient_def.p))}")))
 (partials_TCC9 0
  (partials_TCC9-1 nil 3741530973 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (partials subtype
    "(number_fields.-)(gradient_def.n, ((number_fields.+)(gradient_def.j, 1)))"
    "naturalnumbers.below(gradient_def.n)")))
 (partials_TCC10 0
  (partials_TCC10-1 nil 3741530973
   ("" (skeep)
    (("" (lemma "dd_epartial_implies_dd_partial")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_epartial_implies_dd_partial formula-decl nil
     derivative_domain_multi nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (partials subtype "gradient_def.D"
    "(derivative_domain_multi[gradient_def.n].deriv_domain_partial?(vector_arithmetic.e(gradient_def.n, (number_fields.-)(gradient_def.n, ((number_fields.+)(gradient_def.j, 1))))))")))
 (partials_TCC11 0
  (partials_TCC11-1 nil 3741530973 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (gradientD? const-decl "bool" gradient_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (gradientp? const-decl "bool" gradient_def nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (partials subtype "gradient_def.f"
    "(init_partial_def[gradient_def.n].init_partial?(vector_arithmetic.e(gradient_def.n, (number_fields.-)(gradient_def.n, ((number_fields.+)(gradient_def.j, 1)))), gradient_def.D))")))
 (partials_TCC12 0
  (partials_TCC12-1 nil 3741530973 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (gradientD? const-decl "bool" gradient_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (init_partial? const-decl "bool" init_partial_def nil)
    (gradientp? const-decl "bool" gradient_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (partials subtype "(number_fields.-)(gradient_def.j, 1)"
    "naturalnumbers.below(gradient_def.n)")))
 (partials_TCC13 0
  (partials_TCC13-1 nil 3741530973 ("" (termination-tcc) nil nil) nil
   nil
   (partials termination
    "gradient_def.partials(gradient_def.D, (number_fields.-)(gradient_def.j, 1), gradient_def.f)"
    "nil")))
 (partials_TCC14 0
  (partials_TCC14-2 nil 3741531296
   ("" (skeep)
    (("" (split)
      (("1" (expand "length" 1)
        (("1" (typepred "v(D, j - 1, f)(p)")
          (("1" (propax) nil nil) ("2" (assert) nil nil)) nil))
        nil)
       ("2" (skeep)
        (("2" (case "1 + i + j - n=0")
          (("1" (assert)
            (("1" (expand "nth" 1) (("1" (assert) nil nil)) nil)) nil)
           ("2" (expand "nth" 2)
            (("2" (assert)
              (("2" (typepred "v(D, j - 1, f)(p)")
                (("2" (inst -3 "i") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((partial const-decl "real" partial_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (subrange type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Vector type-eq-decl nil matrices matrices)
    (gradientD? const-decl "bool" gradient_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (partials subtype
    "list_adt[real].cons(partial_def[gradient_def.n].partial((number_fields.-)(gradient_def.n, ((number_fields.+)(gradient_def.j, 1))), gradient_def.D, gradient_def.f)(gradient_def.p), gradient_def.partials(gradient_def.D, (number_fields.-)(gradient_def.j, 1), gradient_def.f)(gradient_def.p))"
    "{v: matrices.Vector | booleans.AND(list_props[real].length(v) = (number_fields.+)(1, gradient_def.j), FORALL (i: integers.subrange((number_fields.-)((number_fields.-)(gradient_def.n, gradient_def.j), 1), (number_fields.-)(gradient_def.n, 1))): list_props[real].nth(v, (number_fields.-)((number_fields.+)((number_fields.+)(1, i), gradient_def.j), gradient_def.n)) = partial_def[gradient_def.n].partial(i, gradient_def.D, gradient_def.f)(gradient_def.p))}"))
  (partials_TCC14-1 nil 3741530973 ("" (subtype-tcc) nil nil) nil nil
   (partials subtype
    "list_adt[real].cons(partial_def[gradient_def.n].partial((number_fields.-)(gradient_def.n, ((number_fields.+)(gradient_def.j, 1))), gradient_def.D, gradient_def.f)(gradient_def.p), gradient_def.partials(gradient_def.D, (number_fields.-)(gradient_def.j, 1), gradient_def.f)(gradient_def.p))"
    "{v: matrices.Vector | booleans.AND(list_props[real].length(v) = (number_fields.+)(1, gradient_def.j), FORALL (i: integers.subrange((number_fields.-)((number_fields.-)(gradient_def.n, gradient_def.j), 1), (number_fields.-)(gradient_def.n, 1))): list_props[real].nth(v, (number_fields.-)((number_fields.+)((number_fields.+)(1, i), gradient_def.j), gradient_def.n)) = partial_def[gradient_def.n].partial(i, gradient_def.D, gradient_def.f)(gradient_def.p))}")))
 (partials_length 0
  (partials_length-2 nil 3741531452
   ("" (induct "j")
    (("1" (flatten)
      (("1" (assert)
        (("1" (skeep)
          (("1" (expand "partials") (("1" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "partials" 1)
          (("2" (expand "length" 1)
            (("2" (inst -2 "D" "f" "p") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (partials def-decl "{v: Vector |
   length(v) = j + 1 AND
    FORALL (i: subrange(n - j - 1, n - 1)):
      nth(v, i - n + j + 1) = partial(i, D, f)(p)}" gradient_def nil)
    (partial const-decl "real" partial_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (subrange type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Vector type-eq-decl nil matrices matrices)
    (gradientD? const-decl "bool" gradient_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil)
  (partials_length-1 nil 3741531410 ("" (postpone) nil nil) nil
   shostak))
 (gradient_TCC1 0
  (gradient_TCC1-1 nil 3741531563 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (gradientD? const-decl "bool" gradient_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (gradientp? const-decl "bool" gradient_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (fullset const-decl "set" sets nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil))
   nil
   (gradient subtype "(number_fields.-)(gradient_def.n, 1)"
    "naturalnumbers.below(gradient_def.n)")))
 (gradient_TCC2 0
  (gradient_TCC2-1 nil 3741531563 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "real" differentiable_def nil)
    (* const-decl "real" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil))
   nil
   (gradient subtype "(number_fields.-)(gradient_def.n, 1)"
    "naturalnumbers.below(gradient_def.n)")))
 (gradient_TCC3 0
  (gradient_TCC3-1 nil 3741531563
   ("" (skeep)
    (("" (expand "gradientD?")
      (("" (skeep)
        (("" (expand "gradientp?")
          (("" (skeep)
            (("" (typepred "D" "f")
              (("" (lemma "diff_imp_init_partial2")
                (("" (inst -1 "e(n,i)" "D" "f" "p!1")
                  (("1" (expand "differentiableD?")
                    (("1" (inst -3 "p!1") (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (lemma "e_not_zero")
                    (("2" (inst -1 "n" "i") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gradientD? const-decl "bool" gradient_def nil)
    (gradientp? const-decl "bool" gradient_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(n)" gradient_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (e_not_zero formula-decl nil vector_arithmetic nil)
    (diff_imp_init_partial2 formula-decl nil init_partial_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (gradient subtype "gradient_def.f"
    "(gradient_def.gradientD?(gradient_def.D))")))
 (grad_nth_TCC1 0
  (grad_nth_TCC1-1 nil 3741531864 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (gradientD? const-decl "bool" gradient_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (gradientp? const-decl "bool" gradient_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (fullset const-decl "set" sets nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (gradient const-decl "VectorN(n)" gradient_def nil))
   nil
   (grad_nth subtype "gradient_def.i"
    "below[length[real](gradient(D, f)(p))]")))
 (grad_nth_TCC2 0
  (grad_nth_TCC2-1 nil 3741531864 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (gradientD? const-decl "bool" gradient_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (gradientp? const-decl "bool" gradient_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (grad_nth subtype "gradient_def.f"
    "(init_partial_def[gradient_def.n].init_partial?(vector_arithmetic.e(gradient_def.n, gradient_def.i), gradient_def.D))")))
 (grad_nth 0
  (grad_nth-2 nil 3741531922
   ("" (skeep)
    (("" (skeep)
      (("" (expand "gradient" 1)
        (("" (typepred "partials(D, n - 1, f)(p)")
          (("" (inst -3 "i") nil nil)) nil))
        nil))
      nil))
    nil)
   ((partials def-decl "{v: Vector |
   length(v) = j + 1 AND
    FORALL (i: subrange(n - j - 1, n - 1)):
      nth(v, i - n + j + 1) = partial(i, D, f)(p)}" gradient_def nil)
    (partial const-decl "real" partial_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (subrange type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Vector type-eq-decl nil matrices matrices)
    (gradientD? const-decl "bool" gradient_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gradient const-decl "VectorN(n)" gradient_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil)
  (grad_nth-1 nil 3741531910 ("" (postpone) nil nil) nil shostak))
 (directional_deriv_pre2_TCC1 0
  (directional_deriv_pre2_TCC1-1 nil 3741531864
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D!1 skolem-const-decl "(deriv_domain_e_partial?[n])" gradient_def
     nil)
    (v!1 skolem-const-decl "VectorN(n)" gradient_def nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "real" differentiable_def nil)
    (* const-decl "real" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (gradient const-decl "VectorN(n)" gradient_def nil))
   nil
   (directional_deriv_pre2 subtype
    "gradient_def.gradient(gradient_def.D, gradient_def.f)(gradient_def.p)"
    "(list_adt[real].cons?)")))
 (directional_deriv_pre2_TCC2 0
  (directional_deriv_pre2_TCC2-1 nil 3741531864
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "real" differentiable_def nil)
    (* const-decl "real" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil))
   nil
   (directional_deriv_pre2 subtype "gradient_def.v"
    "(list_adt[real].cons?)")))
 (directional_deriv_pre2_TCC3 0
  (directional_deriv_pre2_TCC3-1 nil 3741531864
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "real" matrices matrices)
    (NQ const-decl "real" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (v!1 skolem-const-decl "VectorN(n)" gradient_def nil)
    (D!1 skolem-const-decl "(deriv_domain_e_partial?[n])" gradient_def
     nil)
    (gradient const-decl "VectorN(n)" gradient_def nil))
   nil
   (directional_deriv_pre2 subtype "gradient_def.i"
    "naturalnumbers.below(real_defs.min(list_props[real].length(gradient_def.gradient(gradient_def.D, gradient_def.f)(gradient_def.p)), list_props[real].length(gradient_def.v)))")))
 (directional_deriv_pre2 0
  (directional_deriv_pre2-1 nil 3741531990
   ("" (skeep)
    (("" (induct "i")
      (("1" (flatten)
        (("1" (expand "sigma" 1)
          (("1" (expand "sigma" 1)
            (("1" (expand "F_partials" 1)
              (("1" (assert)
                (("1" (expand "dot_short" 1)
                  (("1" (expand "gradient" 1)
                    (("1" (typepred "partials(D, n - 1, f)(p)")
                      (("1" (inst -3 "0")
                        (("1" (expand "nth" -3)
                          (("1" (replace -3 1)
                            (("1" (expand "partial" 1)
                              (("1"
                                (expand "nth" 1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "sigma" 1)
          (("2" (expand "dot_short" 1 1)
            (("2" (replace -2 1)
              (("2" (assert)
                (("2" (expand "F_partials" 1)
                  (("2" (expand "gradient" 1)
                    (("2" (typepred "partials(D, n - 1, f)(p)")
                      (("2" (inst -3 "1+jb")
                        (("2" (assert)
                          (("2" (replace -3 1)
                            (("2" (expand "partial" 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (assert)
          (("3" (typepred "(gradient(D, f)(p))")
            (("3" (typepred "v")
              (("3" (assert)
                (("3" (typepred "i")
                  (("3" (expand "min" 1) (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (typepred "gradient(D, f)(p)") (("4" (assert) nil nil))
          nil))
        nil)
       ("5" (skeep)
        (("5" (lemma "diffD_imp_gradD")
          (("5" (inst -1 "D" "f") nil nil)) nil))
        nil))
      nil))
    nil)
   ((f skolem-const-decl "(differentiableD?(D))" gradient_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (D skolem-const-decl "(deriv_domain_e_partial?)" gradient_def nil)
    (gradientD? const-decl "bool" gradient_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (p skolem-const-decl "(D)" gradient_def nil)
    (gradient const-decl "VectorN(n)" gradient_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (v skolem-const-decl "VectorN(n)" gradient_def nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (dot_short def-decl "real" vector_arithmetic nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (F_partials const-decl "real" partial_def nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Vector type-eq-decl nil matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (partial const-decl "real" partial_def nil)
    (partials def-decl "{v: Vector |
   length(v) = j + 1 AND
    FORALL (i: subrange(n - j - 1, n - 1)):
      nth(v, i - n + j + 1) = partial(i, D, f)(p)}" gradient_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (diffD_imp_gradD formula-decl nil gradient_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (directional_deriv_is_grad_TCC1 0
  (directional_deriv_is_grad_TCC4-1 nil 3741532353
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_direction_implies_dd")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dd_direction_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_is_grad subtype "gradient_def.D"
    "(derivative_domain_multi[gradient_def.n].deriv_domain?)")))
 (directional_deriv_is_grad_TCC2 0
  (directional_deriv_is_grad_TCC2-1 nil 3852624819
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_direction_implies_dd_e_partial")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dd_direction_implies_dd_e_partial formula-decl nil
     derivative_domain_multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_is_grad subtype "gradient_def.D"
    "(derivative_domain_multi[gradient_def.n].deriv_domain_e_partial?)")))
 (directional_deriv_is_grad_TCC3 0
  (directional_deriv_is_grad_TCC5-1 nil 3789815184
   ("" (skeep)
    (("" (typepred "D" "f")
      (("" (lemma "diffD_imp_gradD") (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (diffD_imp_gradD formula-decl nil gradient_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_is_grad subtype "gradient_def.f"
    "(gradient_def.gradientD?(gradient_def.D))")))
 (directional_deriv_is_grad_TCC4 0
  (directional_deriv_is_grad_TCC4-1 nil 3852624819
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "real" differentiable_def nil)
    (* const-decl "real" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil))
   nil
   (directional_deriv_is_grad subtype "gradient_def.D"
    "(derivative_domain_multi[gradient_def.n].deriv_domain_direction?(gradient_def.v))")))
 (directional_deriv_is_grad_TCC5 0
  (directional_deriv_is_grad_TCC5-1 nil 3852624819
   ("" (skeep)
    (("" (typepred "v" "D" "f")
      (("" (lemma "diff_imp_init_partial2")
        (("" (typepred "f")
          (("" (hide -3)
            (("" (case "v=zero_vec(n)")
              (("1" (lemma "direction_zero_derivable")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (inst -1 "f") (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (inst -2 "v" "D" "f" "_")
                  (("1" (assert)
                    (("1" (expand "directional_derivD?" 2)
                      (("1" (skeep)
                        (("1" (inst -2 "p!1")
                          (("1" (assert)
                            (("1" (expand "differentiableD?" -5)
                              (("1"
                                (expand "deriv_domain_all_direction?")
                                (("1"
                                  (lemma "init_par_dir_derivable")
                                  (("1"
                                    (inst -1 "v" "D" "f" "p!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma
                                         "diff_imp_init_partial2")
                                        (("1"
                                          (inst -1 "v" "D" "f" "p!1")
                                          (("1"
                                            (split -1)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (expand
                                               "differentiableD?"
                                               -1)
                                              (("2"
                                                (inst -1 "p!1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "dd_direction_implies_dd_partial")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (direction_zero_derivable formula-decl nil directional_deriv_def
     nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (v skolem-const-decl "VectorN(n)" gradient_def nil)
    (D skolem-const-decl "(deriv_domain_all_direction?[n])"
     gradient_def nil)
    (/= const-decl "boolean" notequal nil)
    (directional_derivD? const-decl "bool" directional_deriv_def nil)
    (init_par_dir_derivable formula-decl nil directional_deriv_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (dd_direction_implies_dd_partial formula-decl nil
     derivative_domain_multi nil)
    (diff_imp_init_partial2 formula-decl nil init_partial_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_is_grad subtype "gradient_def.f"
    "(directional_deriv_def[gradient_def.n].directional_derivD?(gradient_def.v, gradient_def.D))")))
 (directional_deriv_is_grad 0
  (directional_deriv_is_grad-2 nil 3741533150
   ("" (lemma "dot_short_is_dot")
    (("" (lemma "directional_deriv_pre2")
      (("" (skeep)
        (("" (skeep)
          (("" (inst -1 "D" "v" "f" "p" "length(gradient(D,f)(p))-1")
            (("1" (inst -2 "gradient(D, f)(p)" "v")
              (("1" (assert)
                (("1" (lemma "directional_deriv_sum_partials")
                  (("1" (inst -1 "D" "v" "f" "p")
                    (("1" (assert)
                      (("1" (replace -3)
                        (("1" (replace -3 1 rl)
                          (("1" (typepred "gradient(D, f)(p)")
                            (("1" (hide -1)
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (replace -1 -2 rl)
                                    (("1"
                                      (replace -3 1 lr)
                                      (("1"
                                        (replace -2 1 lr)
                                        (("1"
                                          (lemma "init_par_dir_deriv")
                                          (("1"
                                            (inst -1 "v" "D" "f" "p")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "directional_deriv"
                                                 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (lemma "dd_all_direction_implies_dd_all_partial")
                      (("2" (inst -1 "D") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (typepred "gradient(D, f)(p)")
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((directional_deriv_pre2 formula-decl nil gradient_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (directional_deriv_sum_partials formula-decl nil partial_def nil)
    (dd_all_direction_implies_dd_all_partial formula-decl nil
     derivative_domain_multi nil)
    (init_par_dir_deriv formula-decl nil directional_deriv_def nil)
    (directional_deriv const-decl "real" directional_deriv_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (gradientD? const-decl "bool" gradient_def nil)
    (gradient const-decl "VectorN(n)" gradient_def nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (D skolem-const-decl "(deriv_domain_all_direction?)" gradient_def
     nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (f skolem-const-decl "(differentiableD?(D))" gradient_def nil)
    (p skolem-const-decl "(D)" gradient_def nil)
    (< const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (dot_short_is_dot formula-decl nil vector_arithmetic nil))
   nil)
  (directional_deriv_is_grad-1 nil 3741533138 ("" (postpone) nil nil)
   nil shostak))
 (directional_deriv_is_init_partial_TCC1 0
  (directional_deriv_is_init_partial_TCC5-1 nil 3852624389
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_all_partial_implies_dd")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dd_all_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_is_init_partial subtype "gradient_def.D"
    "(derivative_domain_multi[gradient_def.n].deriv_domain?)")))
 (directional_deriv_is_init_partial_TCC2 0
  (directional_deriv_is_init_partial_TCC2-1 nil 3852714240
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "real" differentiable_def nil)
    (* const-decl "real" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil))
   nil
   (directional_deriv_is_init_partial subtype "gradient_def.D"
    "(derivative_domain_multi[gradient_def.n].deriv_domain_e_partial?)")))
 (directional_deriv_is_init_partial_TCC3 0
  (directional_deriv_is_init_partial_TCC3-1 nil 3852714240
   ("" (skeep)
    (("" (lemma "diffD_imp_gradD") (("" (inst?) nil nil)) nil)) nil)
   ((diffD_imp_gradD formula-decl nil gradient_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_is_init_partial subtype "gradient_def.f"
    "(gradient_def.gradientD?(gradient_def.D))")))
 (directional_deriv_is_init_partial_TCC4 0
  (directional_deriv_is_init_partial_TCC4-1 nil 3852624389
   ("" (skeep)
    (("" (lemma "frech_diff_imp_init_partial")
      (("" (inst -1 "v" "D" "f" "p")
        (("" (assert)
          (("" (flatten)
            (("" (assert)
              (("" (typepred "f")
                (("" (expand "differentiableD?" -1)
                  (("" (inst -1 "p") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (frech_diff_imp_init_partial formula-decl nil init_partial_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_is_init_partial subtype "gradient_def.p"
    "(init_partial_def[gradient_def.n].init_partial?(gradient_def.v, gradient_def.D, gradient_def.f))")))
 (directional_deriv_is_init_partial_TCC5 0
  (directional_deriv_is_init_partial_TCC5-1 nil 3852714240
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "real" differentiable_def nil)
    (* const-decl "real" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil))
   nil
   (directional_deriv_is_init_partial subtype "gradient_def.D"
    "(derivative_domain_multi[gradient_def.n].deriv_domain_partial?(gradient_def.v))")))
 (directional_deriv_is_init_partial 0
  (directional_deriv_is_init_partial-1 nil 3852626518
   ("" (lemma "dot_short_is_dot")
    (("" (lemma "directional_deriv_pre2")
      (("" (skeep)
        (("" (skeep)
          (("" (inst -1 "D" "v" "f" "p" "length(gradient(D,f)(p))-1")
            (("1" (inst -2 "gradient(D, f)(p)" "v")
              (("1" (assert)
                (("1" (lemma "directional_deriv_sum_partials")
                  (("1" (inst -1 "D" "v" "f" "p")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (typepred "gradient(D, f)(p)")
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((directional_deriv_pre2 formula-decl nil gradient_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (directional_deriv_sum_partials formula-decl nil partial_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (gradientD? const-decl "bool" gradient_def nil)
    (gradient const-decl "VectorN(n)" gradient_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (D skolem-const-decl "(deriv_domain_all_partial?)" gradient_def
     nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (f skolem-const-decl "(differentiableD?(D))" gradient_def nil)
    (p skolem-const-decl "(D)" gradient_def nil)
    (< const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (dot_short_is_dot formula-decl nil vector_arithmetic nil))
   shostak))
 (directional_deriv_is_e_partial_TCC1 0
  (directional_deriv_is_e_partial_TCC1-1 nil 3853419827
   ("" (skeep)
    (("" (lemma "diff_imp_init_partial2")
      (("" (inst?)
        (("1" (assert)
          (("1" (typepred "f")
            (("1" (expand "differentiableD?" -1)
              (("1" (inst -1 "p") nil nil)) nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (lemma "e_not_zero") (("2" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (diff_imp_init_partial2 formula-decl nil init_partial_def nil)
    (e_not_zero formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (list type-decl nil list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(n)" gradient_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_is_e_partial subtype "gradient_def.p"
    "(init_partial_def[gradient_def.n].init_partial?(vector_arithmetic.e(gradient_def.n, gradient_def.i), gradient_def.D, gradient_def.f))")))
 (directional_deriv_is_e_partial 0
  (directional_deriv_is_e_partial-1 nil 3853420013
   ("" (lemma "dot_short_is_dot")
    (("" (lemma "directional_deriv_pre2")
      (("" (skeep)
        (("" (skeep)
          ((""
            (inst -1 "D" "e(n,i)" "f" "p" "length(gradient(D,f)(p))-1")
            (("1" (inst -2 "gradient(D, f)(p)" "e(n,i)")
              (("1" (assert)
                (("1" (replace -2 1 rl)
                  (("1" (replace -1 1)
                    (("1" (lemma "F_partials_e")
                      (("1" (inst?)
                        (("1" (replace -1 1)
                          (("1" (lemma "sigma_eq_one_arg[nat]")
                            (("1"
                              (inst -1 " LAMBDA (j: nat):
              IF j = i THEN partial(i, D, f)(p) ELSE 0 ENDIF"
                               " length(gradient(D, f)(p)) - 1" "0"
                               "i")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (expand "partial" 1)
                                    (("1"
                                      (expand "partial" 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide -)
                                      (("2"
                                        (typepred "f")
                                        (("2"
                                          (lemma
                                           "diff_imp_init_partial2")
                                          (("2"
                                            (inst
                                             -1
                                             "e(n,i)"
                                             "D"
                                             "f"
                                             "_")
                                            (("1"
                                              (expand
                                               "init_partial?"
                                               1)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand
                                                   "differentiableD?"
                                                   -2)
                                                  (("1"
                                                    (inst -2 "p!1")
                                                    (("1"
                                                      (inst -1 "p!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "e_not_zero")
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((directional_deriv_pre2 formula-decl nil gradient_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (F_partials_e formula-decl nil partial_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (i skolem-const-decl "below(n)" gradient_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (partial const-decl "real" partial_def nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (partial const-decl "real" partial_def nil)
    (diff_imp_init_partial2 formula-decl nil init_partial_def nil)
    (e_not_zero formula-decl nil vector_arithmetic nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma_eq_one_arg formula-decl nil sigma reals)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (gradientD? const-decl "bool" gradient_def nil)
    (gradient const-decl "VectorN(n)" gradient_def nil)
    (D skolem-const-decl "(deriv_domain_e_partial?)" gradient_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (f skolem-const-decl "(differentiableD?(D))" gradient_def nil)
    (p skolem-const-decl "(D)" gradient_def nil)
    (< const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dot_short_is_dot formula-decl nil vector_arithmetic nil))
   shostak))
 (der_f_gradient_dot_e 0
  (der_f_gradient_dot_e-1 nil 3853423293
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "directional_deriv_is_e_partial")
        (("" (lemma "diff_imp_init_partial2")
          (("" (inst -2 "D" "f" "p" "i")
            (("" (replace -2)
              (("" (lemma "der_f_is_init_partial")
                (("" (inst -1 "e(n,i)" "D" "f" "p")
                  (("" (lemma "e_not_zero") (("" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (diff_imp_init_partial2 formula-decl nil init_partial_def nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (i skolem-const-decl "below(n)" gradient_def nil)
    (e_not_zero formula-decl nil vector_arithmetic nil)
    (der_f_is_init_partial formula-decl nil init_partial_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (directional_deriv_is_e_partial formula-decl nil gradient_def nil))
   shostak))
 (der_f_is_grad_e 0
  (der_f_is_grad_e-1 nil 3853423814
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (lemma "der_f_gradient_dot_e")
        (("" (lemma "dot_equality_e")
          (("" (inst -2 "D" "f" "_" "x!1")
            (("" (inst -1 "der_f(D)(f)(x!1)" "gradient(D)(f)(x!1)")
              (("1" (assert)
                (("1" (hide 2)
                  (("1" (skeep)
                    (("1" (inst -1 "i")
                      (("1" (assert)
                        (("1" (typepred "der_f(D)(f)(x!1)")
                          (("1" (replace -2)
                            (("1" (assert)
                              (("1"
                                (expand "gradient")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (typepred "gradient(D)(f)(x!1)")
                  (("2" (assert) nil nil)) nil))
                nil)
               ("3" (typepred "der_f[n](D)(f)(x!1)")
                (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "bool" differentiable_def nil)
    (NQ const-decl "real" differentiable_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def nil)
    (gradient const-decl "VectorN(n)" gradient_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (dot_equality_e formula-decl nil vector_arithmetic nil)
    (x!1 skolem-const-decl "(D)" gradient_def nil)
    (f skolem-const-decl "(differentiableD?(D))" gradient_def nil)
    (D skolem-const-decl "(deriv_domain_e_partial?)" gradient_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (gradient const-decl "VectorN(n)" gradient_def nil)
    (der_f_gradient_dot_e formula-decl nil gradient_def nil))
   shostak))
 (der_f_gradient_dot_TCC1 0
  (der_f_gradient_dot_TCC1-1 nil 3789837359
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_all_partial_implies_dd")
        (("" (inst -1 "D") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dd_all_partial_implies_dd formula-decl nil derivative_domain_multi
     nil))
   nil
   (der_f_gradient_dot subtype "gradient_def.D"
    "(derivative_domain_multi[gradient_def.n].deriv_domain?)")))
 (der_f_gradient_dot 0
  (der_f_gradient_dot-2 nil 3741533332
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "directional_deriv_is_init_partial")
        (("" (lemma "diff_imp_init_partial2")
          (("" (inst -2 "D" "v" "f" "p")
            (("" (replace -2)
              (("" (lemma "der_f_is_init_partial1")
                (("" (hide -2) (("" (inst -1 "v" "D" "f" "p") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (diff_imp_init_partial2 formula-decl nil init_partial_def nil)
    (der_f_is_init_partial1 formula-decl nil init_partial_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (directional_deriv_is_init_partial formula-decl nil gradient_def
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil)
  (der_f_gradient_dot-1 nil 3741533228 ("" (postpone) nil nil) nil
   shostak))
 (der_f_is_grad_TCC1 0
  (der_f_is_grad_TCC1-1 nil 3741532162
   ("" (lemma "dd_partial_implies_dd_e_direction")
    (("" (skeep) (("" (inst -1 "D") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dd_partial_implies_dd_e_direction formula-decl nil
     derivative_domain_multi nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" gradient_def nil))
   nil
   (der_f_is_grad subtype "gradient_def.D"
    "(derivative_domain_multi[gradient_def.n].deriv_domain_e_partial?)")))
 (der_f_is_grad 0
  (der_f_is_grad-2 nil 3741533802
   ("" (skeep)
    (("" (apply-extensionality 1)
      (("1" (lemma "der_f_gradient_dot")
        (("1" (apply-extensionality 1)
          (("1" (lemma "dot_equality1")
            (("1" (inst -2 "D" "x!1" "_" "x!2")
              (("1"
                (inst -1 "der_f(D)(x!1)(x!2)" "gradient(D, x!1)(x!2)")
                (("1" (assert)
                  (("1" (typepred "der_f(D)(x!1)(x!2)")
                    (("1" (typepred "gradient(D, x!1)(x!2)")
                      (("1" (assert)
                        (("1" (hide -1 -3)
                          (("1" (split)
                            (("1" (assert)
                              (("1"
                                (case
                                 "NOT gradient(D,x!1)(x!2) = gradient(D)(x!1)(x!2)")
                                (("1"
                                  (expand "gradient" 1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (replace -1 -5)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (case "NOT gradient(D,x!1)(x!2) = gradient(D)(x!1)(x!2)")
                              (("1"
                                (expand "gradient" 1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (skeep)
                                  (("2" (inst -4 "w") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 -2)
                        (("2" (typepred "x!2")
                          (("2" (lemma "diffD_imp_gradD")
                            (("2" (inst -1 "D" "x!1") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (typepred "gradient(D, x!1)(x!2)")
                    (("2" (assert) nil nil)) nil))
                  nil)
                 ("3" (typepred "der_f(D)(x!1)(x!2)")
                  (("3" (assert)
                    (("3" (lemma "diffD_imp_gradD")
                      (("3" (inst -1 "D" "x!1") nil nil)) nil))
                    nil))
                  nil)
                 ("4" (typepred "der_f(D)(x!1)(x!2)")
                  (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (typepred "x1")
          (("2" (expand "differentiableD?" -1)
            (("2" (expand "NQ")
              (("2" (expand "convergence_zero?" 1)
                (("2" (skeep)
                  (("2" (lemma "directional_deriv_is_init_partial")
                    (("2" (typepred "x1")
                      (("2" (typepred "der_f(D)(x1)")
                        (("2" (inst -1 "p")
                          (("2" (expand "convergence_zero?")
                            (("2" (inst -1 "epsilon")
                              (("2"
                                (skeep)
                                (("2"
                                  (inst 1 "delta")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst -1 "x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "NQ" -1)
                                          (("1"
                                            (inst -3 "D" "x" "x1" "p")
                                            (("1"
                                              (case
                                               "NOT gradient(D, x1)(p) = gradient(D)(x1)(p)")
                                              (("1"
                                                (expand "gradient" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -1 -4)
                                                (("2"
                                                  (replace -4 1 lr)
                                                  (("2"
                                                    (lemma
                                                     "der_f_is_init_partial")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "x"
                                                       "D"
                                                       "x1"
                                                       "p")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "x")
                                        (("2"
                                          (expand "NQ" 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" gradient_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "bool" differentiable_def nil)
    (NQ const-decl "real" differentiable_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def nil)
    (D skolem-const-decl "(deriv_domain_all_partial?)" gradient_def
     nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (gradient const-decl "VectorN(n)" gradient_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (diffD_imp_gradD formula-decl nil gradient_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (gradient const-decl "VectorN(n)" gradient_def nil)
    (gradientD? const-decl "bool" gradient_def nil)
    (x!2 skolem-const-decl "(D)" gradient_def nil)
    (x!1 skolem-const-decl "(differentiableD?(D))" gradient_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (dot_equality1 formula-decl nil vector_arithmetic nil)
    (der_f_gradient_dot formula-decl nil gradient_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (p skolem-const-decl "(D)" gradient_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (/= const-decl "boolean" notequal nil)
    (x skolem-const-decl
     "{xx: (LAMBDA (h: VectorN(n)): D(p + h)) | xx /= zero_vec(n)}"
     gradient_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (der_f_is_init_partial formula-decl nil init_partial_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (directional_deriv_is_init_partial formula-decl nil gradient_def
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (der_f_is_grad-1 nil 3741533747
   ("" (skeep)
    (("" (decompose-equality 1)
      (("1" (decompose-equality 1) (("1" (postpone) nil nil)) nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (grad_append 0
  (grad_append-1 nil 3741537666
   ("" (induct "m1")
    (("1" (skeep)
      (("1" (assert)
        (("1" (expand "append" 1)
          (("1" (expand "append" 1)
            (("1" (typepred "eq_constraints")
              (("1"
                (case "NOT FORALL (v:VectorN(n)): eq_constraints(v)=null")
                (("1" (skeep)
                  (("1" (expand "constraint_grad?" -1)
                    (("1" (typepred "eq_constraints(v)")
                      (("1" (hide -1 -3)
                        (("1" (expand "length" -1)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2"
                    (case " NOT  (LAMBDA (v: VectorN(n)):
                                    CASES eq_constraints(v)
                                      OF null: ineq_constraints(v),
                                         cons(x, y):
                                           cons(x, append(y, ineq_constraints(v)))
                                      ENDCASES) =  (LAMBDA (v: VectorN(n)):
                                      ineq_constraints(v))")
                    (("1" (assert)
                      (("1" (apply-extensionality 1)
                        (("1" (inst -1 "x!1") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -1 1)
                      (("2" (hide -1)
                        (("2"
                          (case "NOT (LAMBDA (v: VectorN(n)): ineq_constraints(v)) = ineq_constraints")
                          (("1" (decompose-equality 1) nil nil)
                           ("2" (replace -1 1)
                            (("2" (typepred "ineq_constraints")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "append" 1)
          (("2" (expand "append" 1)
            (("2"
              (case "NOT (LAMBDA (v: VectorN(n)):
                                  CASES eq_constraints(v)
                                    OF null: ineq_constraints(v),
                                       cons(x, y):
                                         cons(x, append(y, ineq_constraints(v)))
                                    ENDCASES) = (LAMBDA (v: VectorN(n)):
                                         cons(car(eq_constraints(v)), append(cdr(eq_constraints(v)), ineq_constraints(v))))")
              (("1" (assert)
                (("1" (decompose-equality 1)
                  (("1" (skeep)
                    (("1" (typepred "eq_constraints(v)")
                      (("1" (expand "length" -2)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -1 1)
                (("2"
                  (inst -2 "D" "m2" "cdr(j+1,eq_constraints)"
                   "ineq_constraints")
                  (("1" (expand "append" -2)
                    (("1" (expand "cdr" -2)
                      (("1" (expand "constraint_grad?")
                        (("1" (skeep)
                          (("1" (expand "nth" 1)
                            (("1" (assert)
                              (("1"
                                (expand "nth" -2)
                                (("1"
                                  (typepred "i")
                                  (("1"
                                    (expand "nth" 1)
                                    (("1"
                                      (case "i=0")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "eq_constraints")
                                          (("1"
                                            (expand "constraint_grad?")
                                            (("1"
                                              (inst -1 "0")
                                              (("1"
                                                (expand "nth" -1)
                                                (("1"
                                                  (expand "nth" -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2" (inst -3 "i-1") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (hide -1 2)
                      (("2" (typepred "eq_constraints")
                        (("2" (expand "cdr" 1)
                          (("2" (expand "constraint_grad?")
                            (("2" (skeep)
                              (("2"
                                (typepred "i")
                                (("2"
                                  (inst -2 "i+1")
                                  (("2"
                                    (expand "nth" -2)
                                    (("2"
                                      (expand "nth" -2)
                                      (("2"
                                        (expand "nth" 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep)
                (("3" (typepred "eq_constraints(v)")
                  (("3" (expand "length" -2) (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (j skolem-const-decl "nat" gradient_def nil)
    (D skolem-const-decl "(deriv_domain_e_partial?)" gradient_def nil)
    (eq_constraints skolem-const-decl "(constraint_grad?(D, j + 1))"
     gradient_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cdr const-decl "constraints(m - 1)"
         fundamentals_constrained_optimization nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (nth const-decl "vec2real_f" fundamentals_constrained_optimization
         nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (append const-decl "constraints(m1 + m2)"
            fundamentals_constrained_optimization nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (constraint_grad? const-decl "bool" gradient_def nil)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (grad_filter 0
  (grad_filter-1 nil 3741537782
   ("" (expand "constraint_grad?" 1)
    (("" (lemma "filter_fun_filter")
      (("" (skeep)
        (("" (inst?)
          (("" (skeep)
            (("" (inst -1 "D" "i")
              (("" (replace -1 1)
                (("" (lemma "filter_2nth2")
                  (("" (expand "filter" 1)
                    (("" (inst -1 "constraint2vector(m,c)" "P")
                      (("" (assert)
                        (("" (inst -1 "i")
                          (("" (skeep)
                            (("" (replace -1 1)
                              ((""
                                (typepred "c")
                                ((""
                                  (hide -2)
                                  ((""
                                    (expand "constraint_grad?" -1)
                                    ((""
                                      (expand "nth" -1)
                                      ((""
                                        (lemma "c2v_nth")
                                        ((""
                                          (inst -1 "D" "m" "c" "j")
                                          ((""
                                            (replace -1 1 rl)
                                            ((""
                                              (expand "nth" 1)
                                              ((""
                                                (inst -2 "j")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (filter_fun_filter formula-decl nil
     fundamentals_constrained_optimization nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (pred type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil)
    (filter const-decl "list[vec2real_f[n]]"
     fundamentals_constrained_optimization nil)
    (below type-eq-decl nil naturalnumbers nil)
    (filter_2nth2 formula-decl nil
     fundamentals_constrained_optimization nil)
    (constraint2vector def-decl "listn[vec2real_f[n]](m)"
     fundamentals_constrained_optimization nil)
    (listn type-eq-decl nil listn structures)
    (filter def-decl "list[T]" filters nil)
    (nth const-decl "vec2real_f" fundamentals_constrained_optimization
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (c2v_nth formula-decl nil fundamentals_constrained_optimization
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (constraint_grad? const-decl "bool" gradient_def nil))
   shostak))
 (grad_active 0
  (grad_active-1 nil 3741537818
   ("" (expand "constraint_grad?" 1)
    (("" (lemma "lst2real")
      (("" (skeep)
        (("" (skeep)
          (("" (expand "active_constraints" 1)
            (("" (lemma "grad_append")
              (("" (hide -2)
                ((""
                  (inst -1 "D" "m1" "length(filter(m2,
                                            ineq_constraints,
                                            active_ineq?
                                            (m1,
                                             m2,
                                             eq_constraints,
                                             ineq_constraints,
                                             v)))" "eq_constraints"
                   "filter_fun(m2,
                                         ineq_constraints,
                                         active_ineq?
                                         (m1,
                                          m2,
                                          eq_constraints,
                                          ineq_constraints,
                                          v))")
                  (("1" (assert)
                    (("1" (expand "constraint_grad?")
                      (("1" (inst -1 "i") nil nil)) nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (lemma "grad_filter")
                      (("2"
                        (inst -1 "D" "m2" "ineq_constraints"
                         "active_ineq?[n]
                                    (m1, m2, eq_constraints, ineq_constraints,
                                     v)")
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lst2real formula-decl nil fundamentals_constrained_optimization
     nil)
    (grad_append formula-decl nil gradient_def nil)
    (filter_fun const-decl "constraints(length(filter(m, c, P)))"
     fundamentals_constrained_optimization nil)
    (v skolem-const-decl "{vv: VectorN(n) |
   feasible?(m1, m2, eq_constraints, ineq_constraints)(vv) AND D(vv)}"
     gradient_def nil)
    (eq_constraints skolem-const-decl "(constraint_grad?(D, m1))"
     gradient_def nil)
    (m1 skolem-const-decl "nat" gradient_def nil)
    (active_ineq? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (feasible? const-decl "bool" fundamentals_constrained_optimization
     nil)
    (ineq_constraints skolem-const-decl "(constraint_grad?(D, m2))"
     gradient_def nil)
    (m2 skolem-const-decl "nat" gradient_def nil)
    (filter const-decl "list[vec2real_f[n]]"
     fundamentals_constrained_optimization nil)
    (pred type-eq-decl nil defined_types nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (D skolem-const-decl "(deriv_domain_e_partial?)" gradient_def nil)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (grad_filter formula-decl nil gradient_def nil)
    (active_constraints const-decl "constraints(m1 +
             length(filter(m2, ineq_constraints,
                           active_ineq?(m1,
                                        m2,
                                        eq_constraints,
                                        ineq_constraints,
                                        v))))"
     fundamentals_constrained_optimization nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (constraint_grad? const-decl "bool" gradient_def nil))
   shostak))
 (active_grad 0
  (active_grad-2 nil 3741537896
   ("" (lemma "grad_active")
    (("" (skeep)
      (("" (inst?)
        (("" (skeep)
          (("" (expand "constraint_grad?")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (pred type-eq-decl nil defined_types nil)
    (filter const-decl "list[vec2real_f[n]]"
     fundamentals_constrained_optimization nil)
    (active_ineq? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (feasible? const-decl "bool" fundamentals_constrained_optimization
     nil)
    (constraint_grad? const-decl "bool" gradient_def nil)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" gradient_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (grad_active formula-decl nil gradient_def nil))
   nil)
  (active_grad-1 nil 3741537869 ("" (postpone) nil nil) nil shostak)))