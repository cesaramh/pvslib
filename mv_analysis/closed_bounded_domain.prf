(closed_bounded_domain
 (closed_equiv 0
  (closed_equiv-1 nil 3742805818
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "closed_domain?")
            (("1" (skeep)
              (("1" (inst -1 "V" "L")
                (("1" (split)
                  (("1" (propax) nil nil)
                   ("2" (expand "convergence?")
                    (("2" (expand "convergence?")
                      (("2" (inst -1 "nn") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "closed_domain?")
          (("2" (inst 1 "norm_inf(n)")
            (("2" (skeep)
              (("2" (inst -1 "V" "L")
                (("2" (split)
                  (("1" (propax) nil nil)
                   ("2" (expand "convergence?")
                    (("2" (expand "convergence?")
                      (("2" (skeep)
                        (("2" (skeep)
                          (("2" (lemma "equiv_norm_m")
                            (("2" (inst -1 "n" "nn" "norm_inf(n)")
                              (("2"
                                (expand "equiv_m?")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst -2 "epsilon*c1")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst 1 "N")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst -2 "NN")
                                            (("2"
                                              (inst -1 "V(NN)-L")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (div-by -3 "c1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (div-by -1 "c1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "V(NN)-L"
                                                 "V(NN)"
                                                 "L")
                                                (("2"
                                                  (expand "max" -)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" closed_bounded_domain nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (closed_domain? const-decl "bool" closed_bounded_domain nil)
    (closed_domain? const-decl "bool" closed_bounded_domain nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (D skolem-const-decl "domain[n]" closed_bounded_domain nil)
    (V skolem-const-decl "{VV: vec_seq(n) | FORALL (i: nat): D(VV(i))}"
     closed_bounded_domain nil)
    (N skolem-const-decl "posnat" closed_bounded_domain nil)
    (NN skolem-const-decl "above(N)" closed_bounded_domain nil)
    (L skolem-const-decl "VectorN(n)" closed_bounded_domain nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (above nonempty-type-eq-decl nil integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (equiv_m? const-decl "bool" norms_equiv nil)
    (equiv_norm_m formula-decl nil norms_equiv_general nil)
    (norm_inf const-decl "(norm?(m))" norms nil))
   shostak))
 (closed_equiv1 0
  (closed_equiv1-1 nil 3742808372
   ("" (skeep)
    (("" (skeep)
      (("" (split)
        (("1" (flatten)
          (("1" (lemma "closed_equiv")
            (("1" (inst -1 "D")
              (("1" (flatten)
                (("1" (hide -2)
                  (("1" (split)
                    (("1" (propax) nil nil)
                     ("2" (inst 1 "nn") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "closed_domain?")
            (("2" (skeep)
              (("2" (inst -1 "V" "L")
                (("2" (split)
                  (("1" (propax) nil nil)
                   ("2" (expand "convergence?")
                    (("2" (lemma "convergence_equiv")
                      (("2" (inst -1 "V" "L")
                        (("2" (flatten)
                          (("2" (hide -2)
                            (("2" (split)
                              (("1"
                                (expand "convergence?" -1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (inst 1 "nn")
                                (("2"
                                  (expand "convergence?" 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (convergence_equiv formula-decl nil vector_sequences nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (closed_domain? const-decl "bool" closed_bounded_domain nil)
    (closed_domain? const-decl "bool" closed_bounded_domain nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" closed_bounded_domain nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (domain type-eq-decl nil domain_vec2real_def nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (closed_equiv formula-decl nil closed_bounded_domain nil))
   shostak))
 (bounded_domain?_TCC1 0
  (bounded_domain?_TCC1-1 nil 3742805663 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (n formal-const-decl "posnat" closed_bounded_domain nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (domain type-eq-decl nil domain_vec2real_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (* const-decl "VectorN(length(v2))" matrices "matrices/"))
   nil))
 (bounded_equiv 0
  (bounded_equiv-1 nil 3742806454
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "bounded_domain?")
            (("1" (skeep)
              (("1" (lemma "equiv_norm_m")
                (("1" (inst -1 "n" "nn" "nn!1")
                  (("1" (expand "equiv_m?")
                    (("1" (skeep)
                      (("1" (skeep)
                        (("1" (inst 1 "M*c2")
                          (("1" (skeep)
                            (("1" (inst -2 "v")
                              (("1"
                                (div-by 1 "c2")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -1 "v")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (div-by -2 "c2")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (inst 1 "norm_inf(n)")
          (("2" (expand "bounded_domain?")
            (("2" (inst -1 "norm_inf(n)") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" closed_bounded_domain nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (equiv_m? const-decl "bool" norms_equiv nil)
    (equiv_norm_m formula-decl nil norms_equiv_general nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain nil)
    (norm_inf const-decl "(norm?(m))" norms nil))
   shostak))
 (bounded_equiv1 0
  (bounded_equiv1-1 nil 3742808500
   ("" (skeep)
    (("" (skeep)
      (("" (split)
        (("1" (flatten)
          (("1" (lemma "bounded_equiv")
            (("1" (inst -1 "D")
              (("1" (flatten)
                (("1" (hide -2)
                  (("1" (split)
                    (("1" (propax) nil nil)
                     ("2" (inst 1 "nn") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "bounded_domain?")
            (("2" (inst -1 "nn") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_domain? const-decl "bool" closed_bounded_domain nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" closed_bounded_domain nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (domain type-eq-decl nil domain_vec2real_def nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (bounded_equiv formula-decl nil closed_bounded_domain nil))
   shostak))
 (open_neigh_domain?_TCC1 0
  (open_neigh_domain?_TCC1-1 nil 3742813985
   ("" (skeep)
    (("" (typepred "p + delta * v" "p" "delta*v" "v")
      (("" (assert) (("" (expand "max" -) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "VectorN(length(v2))" matrices "matrices/")
    (domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" closed_bounded_domain nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (VectorN type-eq-decl nil matrices "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil)))