(extreme_value_theorem
 (extreme_value 0
  (extreme_value-1 nil 3742808044
   ("" (skeep)
    (("" (split)
      (("1" (lemma "min_on_closed_bounded")
        (("1" (inst -1 "D" "f")
          (("1" (split)
            (("1" (propax) nil nil)
             ("2" (expand "contD?")
              (("2" (expand "norm_1_contD?")
                (("2" (skeep)
                  (("2" (inst -1 "p")
                    (("2" (expand "norm_1_contp?")
                      (("2" (expand "contp?")
                        (("2" (inst -1 "norm_1(n)") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (split)
              (("1" (typepred "D")
                (("1" (lemma "closed_equiv")
                  (("1" (inst -1 "D")
                    (("1" (flatten)
                      (("1" (hide -1)
                        (("1" (hide -1)
                          (("1" (lemma "closed_equiv1")
                            (("1" (inst -1 "D" "norm_1(n)")
                              (("1"
                                (expand "norm_1_closed?")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (split)
                                      (("1"
                                        (expand "closed_domain?" -1)
                                        (("1"
                                          (inst -1 "V" "L")
                                          (("1"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (expand "convergence?" 1)
                                              (("2"
                                                (expand
                                                 "norm_1_convergence?"
                                                 -4)
                                                (("2"
                                                  (expand
                                                   "convergence?"
                                                   1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "D")
                (("2" (lemma "bounded_equiv1")
                  (("2" (inst -1 "D" "norm_1(n)")
                    (("2" (flatten)
                      (("2" (hide -1)
                        (("2" (assert)
                          (("2" (expand "norm_1_bounded?")
                            (("2" (expand "bounded_domain?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "max_on_closed_bounded")
        (("2" (inst -1 "D" "f")
          (("1" (assert)
            (("1" (split)
              (("1" (propax) nil nil)
               ("2" (hide 2)
                (("2" (expand "contD?")
                  (("2" (expand "norm_1_contD?")
                    (("2" (skeep)
                      (("2" (inst -1 "p")
                        (("2" (expand "contp?")
                          (("2" (expand "norm_1_contp?")
                            (("2" (inst -1 "norm_1(n)") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (split)
              (("1" (typepred "D")
                (("1" (lemma "closed_equiv1")
                  (("1" (inst -1 "D" "norm_1(n)")
                    (("1" (flatten)
                      (("1" (hide -1)
                        (("1" (assert)
                          (("1" (hide -2 -3 -4 -5)
                            (("1" (expand "norm_1_closed?")
                              (("1"
                                (expand "closed_domain?")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -1 "V" "L")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "convergence?")
                                        (("1"
                                          (expand
                                           "norm_1_convergence?")
                                          (("1"
                                            (expand "convergence?")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "D")
                (("2" (lemma "bounded_equiv1")
                  (("2" (inst -1 "D" "norm_1(n)")
                    (("2" (flatten)
                      (("2" (hide -1)
                        (("2" (assert)
                          (("2" (hide -2 -3 -4 -5)
                            (("2" (expand "bounded_domain?")
                              (("2"
                                (expand "norm_1_bounded?")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_1_bounded? const-decl "bool" norm_1_defs nil)
    (D skolem-const-decl
     "{DD: (closed_domain?) | bounded_domain?(DD) AND nonempty?(DD)}"
     extreme_value_theorem nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain nil)
    (closed_domain? const-decl "bool" closed_bounded_domain nil)
    (norm_1_closed? const-decl "bool" norm_1_defs nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (norm_1_contp? const-decl "bool" norm_1_defs nil)
    (norm_1 const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (norm_1_contD? const-decl "bool" norm_1_defs nil)
    (closed_equiv formula-decl nil closed_bounded_domain nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (norm_1_convergence? const-decl "bool" norm_1_defs nil)
    (closed_domain? const-decl "bool" closed_bounded_domain nil)
    (closed_equiv1 formula-decl nil closed_bounded_domain nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bounded_equiv1 formula-decl nil closed_bounded_domain nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain nil)
    (min_on_closed_bounded formula-decl nil
     norm_1_extreme_value_theorem nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" extreme_value_theorem nil)
    (max_on_closed_bounded formula-decl nil
     norm_1_extreme_value_theorem nil))
   shostak)))