(norm_1_extreme_value_theorem
 (unbound_fun_TCC1 0
  (unbound_fun_TCC1-1 nil 3742127182
   ("" (skeep)
    (("" (typepred "f")
      (("" (inst -1 "i")
        (("" (skeep)
          (("" (expand "nonempty?" 1)
            (("" (expand "empty?" -3)
              (("" (inst -3 "v")
                (("" (expand "member" 1) (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" norm_1_extreme_value_theorem nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil))
 (unbound_fun_TCC2 0
  (unbound_fun_TCC2-1 nil 3742127182 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" norm_1_extreme_value_theorem nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (domain type-eq-decl nil domain_vec2real_def nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (unbound_fun_TCC3 0
  (unbound_fun_TCC3-1 nil 3742127182 ("" (termination-tcc) nil nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   nil))
 (unbound_fun_TCC4 0
  (unbound_fun_TCC4-1 nil 3742127182
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "nonempty?" 2)
        (("" (expand "empty?" -2)
          (("" (inst -1 "max(ceiling(abs(f(v1(D,f)(i-1)))),i)")
            (("1" (skeep)
              (("1" (inst -2 "v")
                (("1" (expand "member" 2) (("1" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" norm_1_extreme_value_theorem nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (empty? const-decl "bool" sets nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (member const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (i skolem-const-decl "nat" norm_1_extreme_value_theorem nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonempty? const-decl "bool" sets nil))
   nil))
 (cont_on_cb_bounded 0
  (cont_on_cb_bounded-3 nil 3742129252
   ("" (skeep)
    (("" (lemma "B_W_le")
      (("" (inst -1 "unbound_fun(D,f)")
        (("1" (skeep)
          (("1" (lemma "sequential_2")
            (("1" (inst -1 "D" "f")
              (("1" (assert)
                (("1" (typepred "V2")
                  (("1" (inst -2 "V2" "L")
                    (("1" (assert)
                      (("1" (inst 1 "ceiling(abs(f(L)))")
                        (("1" (skeep)
                          (("1" (expand "subsequence?" -1)
                            (("1" (case "abs(f(p))>ceiling(abs(f(L)))")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "subsequence?" -2)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (expand "convergence" -3)
                                      (("1"
                                        (inst -3 "1/2")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst
                                             -3
                                             "max(ceiling(abs(f(L))),n!1)+1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "max(ceiling(abs(f(L))), n!1) + 1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (typepred
                                                       "unbound_fun(D, f)(s(1 + max(ceiling(abs(f(L))), n!1)))")
                                                      (("1"
                                                        (hide -1 -2 -3)
                                                        (("1"
                                                          (lemma
                                                           "increase_seq_fact")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "s"
                                                             "1 + max(ceiling(abs(f(L))), n!1)")
                                                            (("1"
                                                              (replace
                                                               -4
                                                               -5)
                                                              (("1"
                                                                (hide
                                                                 -4
                                                                 -6
                                                                 -7)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -3)
                                                                    (("1"
                                                                      (expand
                                                                       "abs"
                                                                       -3)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "abs"
                                                                                         -5)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "NOT 1 + max(ceiling(abs(f(L))), n!1) > 1/2")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "abs"
                                                                                                 -5)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "abs"
                                                                                         -4)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "NOT f(unbound_fun(D, f)(s(1 + max(ceiling(-f(L)), n!1)))) < -s(1 + max(ceiling(-f(L)), n!1))")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "-s(1 + max(ceiling(abs(f(L))), n!1)) <=
                               -( 1 + max(ceiling(abs(f(L))), n!1))")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         " NOT f(unbound_fun(D, f)(s(1 + max(ceiling(-f(L)), n!1)))) <  -(1 + max(ceiling(abs(f(L))), n!1))")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "abs"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "abs"
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "abs"
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "abs"
                                                                                                   -)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "abs"
                                                                                         -4
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "abs"
                                                                                           -4
                                                                                           1)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "abs"
                                                                                     -3
                                                                                     2)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "abs"
                                                                                           -3
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "f(L)")
                          (("2" (hide -1)
                            (("2" (expand "subsequence?" -1)
                              (("2"
                                (expand "subsequence?" -1)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (expand "convergence" -2)
                                    (("2"
                                      (inst -2 "1/2")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (case "NOT f(L)=0")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (replace -1 -3)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -3 "1+n!1")
                                                (("2"
                                                  (inst -2 "1+n!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred
                                                       "unbound_fun(D, f)(s(1 + n!1))")
                                                      (("2"
                                                        (hide -1 -2)
                                                        (("2"
                                                          (replace
                                                           -4
                                                           -5)
                                                          (("2"
                                                            (lemma
                                                             "increase_seq_fact")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "s"
                                                               "1+n!1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (expand "subsequence?" -1)
                        (("2" (expand "subsequence?" -1)
                          (("2" (skeep)
                            (("2" (inst -1 "i")
                              (("2"
                                (replace -1 1)
                                (("2"
                                  (typepred "unbound_fun(D, f)(s(i))")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (hide -1 2)
            (("2" (typepred "D")
              (("2" (expand "norm_1_bounded?" -2)
                (("2" (skeep)
                  (("2" (inst 1 "M")
                    (("2" (skeep)
                      (("2" (inst -2 "unbound_fun(D, f)(i)")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (inst 2 "M")
            (("1" (skeep)
              (("1" (inst 1 "p") (("1" (assert) nil nil)) nil)) nil)
             ("2" (assert)
              (("2" (case "NOT M=0")
                (("1" (assert) nil nil)
                 ("2" (replace -1 2)
                  (("2" (reveal 1)
                    (("2" (inst 1 "1")
                      (("2" (skeep)
                        (("2" (inst 3 "p") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" norm_1_extreme_value_theorem nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (B_W_le formula-decl nil norm_1_bolzano_weierstrass nil)
    (M skolem-const-decl "nat" norm_1_extreme_value_theorem nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subsequence? const-decl "bool" subsequences nil)
    (abs_nat formula-decl nil abs_lems "reals/")
    (subsequence? const-decl "bool" subsequences nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_sequences "analysis/")
    (sequence type-eq-decl nil sequences nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (increase_seq_fact formula-decl nil subsequences nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (L skolem-const-decl "VectorN(n)" norm_1_extreme_value_theorem nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (V2 skolem-const-decl "(subsequence?(unbound_fun(D, f)))"
     norm_1_extreme_value_theorem nil)
    (sequential_2 formula-decl nil norm_1_sequential_criterian nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms nil)
    (norm_1 const-decl "(norm?(m))" norms nil)
    (unbound_fun def-decl "{p: (D) | abs(f(p)) > i}"
     norm_1_extreme_value_theorem nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (domain type-eq-decl nil domain_vec2real_def nil)
    (norm_1_closed? const-decl "bool" norm_1_defs nil)
    (norm_1_bounded? const-decl "bool" norm_1_defs nil)
    (D skolem-const-decl "{DD: (norm_1_closed?) | norm_1_bounded?(DD)}"
     norm_1_extreme_value_theorem nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (f skolem-const-decl "vec2real_f[n]" norm_1_extreme_value_theorem
     nil))
   nil)
  (cont_on_cb_bounded-2 nil 3742128093
   ("" (skeep)
    (("" (lemma "B_W_le")
      (("" (inst -1 "unbound_fun(D,f)")
        (("1" (skeep)
          (("1" (lemma "sequential_2")
            (("1" (inst -1 "D" "f")
              (("1" (assert)
                (("1" (split)
                  (("1" (typepred "V2")
                    (("1" (inst -2 "V2" "L")
                      (("1" (assert)
                        (("1" (inst 1 "ceiling(f(L))")
                          (("1" (skeep)
                            (("1" (expand "subsequence?" -1)
                              (("1"
                                (case "abs(f(p))>ceiling(f(L))")
                                (("1"
                                  (assert)
                                  (("1" (postpone) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "f(L)")
                            (("2" (hide -1)
                              (("2"
                                (case "f(L)=0")
                                (("1"
                                  (expand "convergence" -3)
                                  (("1"
                                    (inst -3 "1/2")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst -3 "n!1+1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred "f(V2(1 + n!1))")
                                            (("1"
                                              (typepred "V2")
                                              (("1"
                                                (expand
                                                 "subsequence?"
                                                 -1)
                                                (("1"
                                                  (expand
                                                   "subsequence?"
                                                   -1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst -1 "1+n!1")
                                                      (("1"
                                                        (typepred
                                                         "unbound_fun(D, f)(s(1 + n!1))")
                                                        (("1"
                                                          (hide -1 -2)
                                                          (("1"
                                                            (replace
                                                             -5
                                                             -7)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 -7)
                                                                (("1"
                                                                  (case
                                                                   "s(1 + n!1) >=1+ n!1 ")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "increase_seq_fact")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "s"
                                                                           "1+n!1")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "contD?")
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst -2 "p")
                            (("2" (assert)
                              (("2"
                                (expand "contp?")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "D")
          (("2" (expand "closed?" -1)
            (("2" (expand "bounded?" -2)
              (("2" (skeep)
                (("2" (inst 1 "M")
                  (("2" (skeep)
                    (("2" (inst -2 "unbound_fun(D, f)(i)")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (typepred "D")
            (("3" (inst 2 "M")
              (("1" (skeep)
                (("1" (inst 1 "p") (("1" (assert) nil nil)) nil)) nil)
               ("2" (assert)
                (("2" (typepred "M")
                  (("2" (assert)
                    (("2" (case "NOT M=0")
                      (("1" (assert) nil nil)
                       ("2" (replace -1 2)
                        (("2" (reveal 1)
                          (("2" (inst 1 "1")
                            (("2" (skeep)
                              (("2"
                                (inst 3 "p")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (cont_on_cb_bounded-1 nil 3742114053
   ("" (skeep)
    (("" (lemma "B_W")
      (("" (inst -1 "unbound_fun(D,f)")
        (("1" (skeep)
          (("1" (lemma "sequential_2")
            (("1" (inst -1 "D" "f")
              (("1" (assert)
                (("1" (split)
                  (("1" (postpone) nil nil)
                   ("2" (assert)
                    (("2" (expand "contD?")
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst -2 "p")
                            (("2" (assert)
                              (("2"
                                (expand "contp?")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "D")
          (("2" (expand "closed?" -1)
            (("2" (expand "bounded?" -2)
              (("2" (skeep)
                (("2" (inst 1 "M")
                  (("2" (skeep)
                    (("2" (inst -2 "unbound_fun(D, f)(i)") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (least_ub_on_cb_TCC1 0
  (least_ub_on_cb_TCC1-1 nil 3742135373
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "nonempty?")
        (("" (expand "empty?")
          (("" (skeep)
            (("" (expand "member" -3)
              (("" (inst -5 "f(x)")
                (("" (expand "member") (("" (inst 1 "x") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (norm_1_bounded? const-decl "bool" norm_1_defs nil)
    (norm_1_closed? const-decl "bool" norm_1_defs nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" norm_1_extreme_value_theorem nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (x skolem-const-decl "VectorN(n)" norm_1_extreme_value_theorem nil)
    (D skolem-const-decl
     "{DD: (norm_1_closed?) | norm_1_bounded?(DD) AND nonempty?(DD)}"
     norm_1_extreme_value_theorem nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (least_ub_on_cb 0
  (least_ub_on_cb-1 nil 3742135374
   ("" (skeep)
    (("" (lemma "cont_on_cb_bounded")
      (("" (inst -1 "D" "f")
        (("" (assert)
          (("" (skeep)
            (("" (lemma "real_complete")
              (("" (inst -1 "{t: real | EXISTS (v: (D)): f(v) = t}")
                (("1" (split)
                  (("1" (skeep)
                    (("1" (inst 1 "y")
                      (("1" (expand "least_upper_bound?" 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (inst 1 "M")
                    (("2" (expand "upper_bound?" 1)
                      (("2" (skeep)
                        (("2" (typepred "s")
                          (("2" (skeep)
                            (("2" (inst -2 "v")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "D")
                  (("2" (expand "nonempty?" -3)
                    (("2" (expand "empty?" 1)
                      (("2" (skeep)
                        (("2" (expand "member" -3)
                          (("2" (expand "nonempty?" 1)
                            (("2" (expand "empty?" -4)
                              (("2"
                                (inst -4 "f(x)")
                                (("2"
                                  (expand "member" 1)
                                  (("2" (inst 1 "x") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cont_on_cb_bounded formula-decl nil norm_1_extreme_value_theorem
     nil)
    (real_complete formula-decl nil bounded_real_defs nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (x skolem-const-decl "VectorN(n)" norm_1_extreme_value_theorem nil)
    (least_upper_bound? const-decl "bool" bounded_real_defs nil)
    (upper_bound? const-decl "bool" bounded_real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D skolem-const-decl
     "{DD: (norm_1_closed?) | norm_1_bounded?(DD) AND nonempty?(DD)}"
     norm_1_extreme_value_theorem nil)
    (f skolem-const-decl "vec2real_f[n]" norm_1_extreme_value_theorem
     nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (norm_1_bounded? const-decl "bool" norm_1_defs nil)
    (norm_1_closed? const-decl "bool" norm_1_defs nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" norm_1_extreme_value_theorem nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (greatest_lb_on_cb 0
  (greatest_lb_on_cb-1 nil 3742135779
   ("" (skeep)
    (("" (lemma "cont_on_cb_bounded")
      (("" (inst -1 "D" "f")
        (("" (assert)
          (("" (lemma "real_lower_complete")
            (("" (inst -1 "{t: real | EXISTS (v: (D)): f(v) = t}")
              (("1" (skeep)
                (("1" (split)
                  (("1" (skeep)
                    (("1" (inst 1 "x")
                      (("1" (expand "greatest_lower_bound?" 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (inst 1 "-M")
                    (("2" (expand "lower_bound?" 1)
                      (("2" (skeep)
                        (("2" (typepred "s")
                          (("2" (skeep)
                            (("2" (inst -2 "v")
                              (("2"
                                (expand "abs")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "D")
                (("2" (expand "nonempty?")
                  (("2" (expand "empty?" 1)
                    (("2" (expand "empty?" -3)
                      (("2" (skeep)
                        (("2" (expand "member" -3)
                          (("2" (inst -4 "f(x)")
                            (("2" (expand "member" 1)
                              (("2" (inst 1 "x") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cont_on_cb_bounded formula-decl nil norm_1_extreme_value_theorem
     nil)
    (f skolem-const-decl "vec2real_f[n]" norm_1_extreme_value_theorem
     nil)
    (D skolem-const-decl
     "{DD: (norm_1_closed?) | norm_1_bounded?(DD) AND nonempty?(DD)}"
     norm_1_extreme_value_theorem nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (member const-decl "bool" sets nil)
    (x skolem-const-decl "VectorN(n)" norm_1_extreme_value_theorem nil)
    (empty? const-decl "bool" sets nil)
    (real_lower_complete formula-decl nil bounded_real_defs nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (norm_1_bounded? const-decl "bool" norm_1_defs nil)
    (norm_1_closed? const-decl "bool" norm_1_defs nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" norm_1_extreme_value_theorem nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (nonempty_bounded 0
  (nonempty_bounded-1 nil 3742202390
   ("" (skeep)
    (("" (split)
      (("1" (typepred "D")
        (("1" (hide -1 -2)
          (("1" (expand "nonempty?")
            (("1" (expand "empty?")
              (("1" (skeep)
                (("1" (expand "member" -1)
                  (("1" (inst -2 "f(x)")
                    (("1" (expand "member" 1)
                      (("1" (inst 1 "x") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "D")
        (("2" (hide -1 -3)
          (("2" (lemma "greatest_lb_on_cb")
            (("2" (inst -1 "D" "f")
              (("2" (assert)
                (("2" (skeep)
                  (("2" (expand "bounded_below?" 1)
                    (("2" (expand "greatest_lower_bound?" -1)
                      (("2" (expand "greatest_lower_bound?")
                        (("2" (flatten) (("2" (inst 1 "M") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (x skolem-const-decl "VectorN(n)" norm_1_extreme_value_theorem nil)
    (D skolem-const-decl
     "{DD: (norm_1_closed?) | norm_1_bounded?(DD) AND nonempty?(DD)}"
     norm_1_extreme_value_theorem nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (norm_1_contD? const-decl "bool" norm_1_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" norm_1_extreme_value_theorem nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (domain type-eq-decl nil domain_vec2real_def nil)
    (norm_1_closed? const-decl "bool" norm_1_defs nil)
    (norm_1_bounded? const-decl "bool" norm_1_defs nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (greatest_lb_on_cb formula-decl nil norm_1_extreme_value_theorem
     nil))
   shostak))
 (glb_approach_seq_TCC1 0
  (glb_approach_seq_TCC1-1 nil 3742139435
   ("" (skeep)
    (("" (typepred "D")
      (("" (split)
        (("1" (expand "nonempty?")
          (("1" (expand "empty?")
            (("1" (skeep)
              (("1" (expand "member" -4)
                (("1" (inst -1 "f(x)")
                  (("1" (expand "member") (("1" (inst 1 "x") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "norm_1_bounded?" -2)
          (("2" (skeep)
            (("2" (lemma "greatest_lb_on_cb")
              (("2" (inst -1 "D" "f")
                (("2" (typepred "f")
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (expand "bounded_below?" 1)
                        (("2" (inst 1 "M!1")
                          (("2" (assert)
                            (("2" (expand "greatest_lower_bound?" -2)
                              (("2"
                                (expand "greatest_lower_bound?" -2)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (norm_1_bounded? const-decl "bool" norm_1_defs nil)
    (norm_1_closed? const-decl "bool" norm_1_defs nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" norm_1_extreme_value_theorem nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (greatest_lb_on_cb formula-decl nil norm_1_extreme_value_theorem
     nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (norm_1_contD? const-decl "bool" norm_1_defs nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (D skolem-const-decl
     "{DD: (norm_1_closed?) | norm_1_bounded?(DD) AND nonempty?(DD)}"
     norm_1_extreme_value_theorem nil)
    (x skolem-const-decl "VectorN(n)" norm_1_extreme_value_theorem nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (glb_approach_seq_TCC2 0
  (glb_approach_seq_TCC2-2 nil 3742140756
   ("" (skeep)
    (("" (expand "nonempty?" 1)
      (("" (typepred "glb({t: real | EXISTS (v_1: (D)): f(v_1) = t})")
        (("1" (expand "greatest_lower_bound?" -1)
          (("1" (flatten)
            (("1"
              (inst -2 "glb({t: real | EXISTS (v_1: (D)): f(v_1) = t}) +
                      1 / (1 + i)")
              (("1" (assert)
                (("1" (split)
                  (("1" (assert) nil nil)
                   ("2" (expand "lower_bound?" 1)
                    (("2" (skeep)
                      (("2" (typepred "s")
                        (("2" (skeep)
                          (("2" (expand "empty?" -3)
                            (("2" (inst -3 "v_1")
                              (("2"
                                (expand "member" 2)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (typepred "D")
                  (("1" (expand "nonempty?" -3)
                    (("1" (expand "empty?" -4)
                      (("1" (expand "empty?" 1)
                        (("1" (skeep)
                          (("1" (expand "member" -3)
                            (("1" (expand "nonempty?" 1)
                              (("1"
                                (expand "empty?" -4)
                                (("1"
                                  (inst -4 "f(x)")
                                  (("1"
                                    (expand "member" 1)
                                    (("1" (inst 1 "x") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "greatest_lb_on_cb")
                  (("2" (inst -1 "D" "f")
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (expand "bounded_below?" 1)
                          (("2" (inst 1 "M")
                            (("2" (assert)
                              (("2"
                                (expand "greatest_lower_bound?" -1)
                                (("2"
                                  (expand "greatest_lower_bound?" -1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (typepred "f")
            (("2" (split)
              (("1" (typepred "D")
                (("1" (expand "nonempty?" -3)
                  (("1" (expand "empty?" -4)
                    (("1" (expand "empty?" 1)
                      (("1" (skeep)
                        (("1" (expand "member" -3)
                          (("1" (expand "nonempty?" 1)
                            (("1" (expand "empty?" -4)
                              (("1"
                                (inst -4 "f(x)")
                                (("1"
                                  (expand "member" 1)
                                  (("1" (inst 1 "x") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "greatest_lb_on_cb")
                (("2" (inst -1 "D" "f")
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (expand "bounded_below?" 1)
                        (("2" (inst 1 "M")
                          (("2" (assert)
                            (("2" (expand "greatest_lower_bound?" -1)
                              (("2"
                                (expand "greatest_lower_bound?" -1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonempty? const-decl "bool" sets nil)
    (x skolem-const-decl "VectorN(n)" norm_1_extreme_value_theorem nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (D skolem-const-decl
     "{DD: (norm_1_closed?) | norm_1_bounded?(DD) AND nonempty?(DD)}"
     norm_1_extreme_value_theorem nil)
    (f skolem-const-decl "{ff: vec2real_f | norm_1_contD?(D)(ff)}"
     norm_1_extreme_value_theorem nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (greatest_lb_on_cb formula-decl nil norm_1_extreme_value_theorem
     nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (x skolem-const-decl "VectorN(n)" norm_1_extreme_value_theorem nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (set type-eq-decl nil sets nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" norm_1_extreme_value_theorem nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (domain type-eq-decl nil domain_vec2real_def nil)
    (norm_1_closed? const-decl "bool" norm_1_defs nil)
    (norm_1_bounded? const-decl "bool" norm_1_defs nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (norm_1_contD? const-decl "bool" norm_1_defs nil))
   nil)
  (glb_approach_seq_TCC2-1 nil 3742139435
   ("" (skeep)
    (("" (typepred "glb({t: real | EXISTS (v_1: (D)): f(v_1) = t})")
      (("1" (expand "nonempty?" 1)
        (("1" (expand "empty?" -2)
          (("1" (expand "greatest_lower_bound?" -1)
            (("1" (flatten)
              (("1"
                (inst -2
                 "glb({t: real | EXISTS (v_1: (D)): f(v_1) = t}) -
                        1 / (1 + i)")
                (("1" (split)
                  (("1" (assert) (("1" (postpone) nil nil)) nil)
                   ("2" (postpone) nil nil))
                  nil)
                 ("2" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil nil))
 (greatest_lb_subseq 0
  (greatest_lb_subseq-2 nil 3742288916
   ("" (skeep)
    (("" (typepred "D")
      (("" (hide -1 -3)
        (("" (lemma "B_W")
          (("" (inst -1 "glb_approach_seq(D, f)")
            (("1" (skeep)
              (("1" (inst 1 "V2")
                (("1" (inst 1 "L")
                  (("1" (assert)
                    (("1" (lemma "unique_limit")
                      (("1"
                        (inst -1 "f(L)"
                         "glb({t: real | EXISTS (v: (D)): f(v) = t})"
                         "Lambda(i:nat): f(V2(i))")
                        (("1" (assert)
                          (("1" (split)
                            (("1" (lemma "sequential_2")
                              (("1"
                                (inst -1 "D" "f")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -1 "V2" "L")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (typepred "V2(i)")
                                        (("2"
                                          (typepred "V2")
                                          (("2"
                                            (expand "subsequence?" -1)
                                            (("2"
                                              (expand
                                               "subsequence?"
                                               -1)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -1 "i")
                                                  (("2"
                                                    (typepred
                                                     "glb_approach_seq(D, f)(s(i))")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "convergence" 1)
                              (("2"
                                (skeep)
                                (("2"
                                  (inst 1 "ceiling(1/epsilon)")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (typepred "V2")
                                      (("2"
                                        (expand "subsequence?" -1)
                                        (("2"
                                          (expand "subsequence?" -1)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst -1 "i_1")
                                              (("2"
                                                (lemma
                                                 "increase_seq_fact")
                                                (("2"
                                                  (inst -1 "s" "i_1")
                                                  (("2"
                                                    (typepred
                                                     "glb_approach_seq(D, f)(s(i_1))")
                                                    (("2"
                                                      (hide -1 -2)
                                                      (("2"
                                                        (case
                                                         "NOT  1 / (1 + s(i_1)) <= 1/(1+i_1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (cross-mult
                                                             1)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "NOT f(glb_approach_seq(D, f)(s(i_1))) = f(V2(i_1))")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1
                                                               -4)
                                                              (("2"
                                                                (case
                                                                 "NOT f(V2(i_1)) <
                          glb({t: real | EXISTS (v_1: (D)): f(v_1) = t}) + 1 / (1 + i_1)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5
                                                                   -6)
                                                                  (("2"
                                                                    (case
                                                                     "  glb({t: real | EXISTS (v: (D)): f(v) = t}) <=f(V2(i_1))")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "abs"
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "NOT f(V2(i_1)) - glb({t: real | EXISTS (v: (D)): f(v) = t}) <= 1 / (1 + i_1)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "1 / (1 + i_1) <epsilon")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   -6
                                                                                   -7
                                                                                   2
                                                                                   3)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "ceiling(1 / epsilon)")
                                                                                    (("2"
                                                                                      (cross-mult
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (div-by
                                                                                           -1
                                                                                           "ceiling(1 / epsilon)")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (case
                                                                                               " NOT 1/i_1 <= 1/ceiling(1 / epsilon)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (cross-mult
                                                                                                   1)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "NOT 1 / (1 + i_1) < 1/i_1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (cross-mult
                                                                                                       1)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -)
                                                                      (("2"
                                                                        (typepred
                                                                         "glb({t: real | EXISTS (v: (D)): f(v) = t})")
                                                                        (("2"
                                                                          (expand
                                                                           "greatest_lower_bound?"
                                                                           -1)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "lower_bound?"
                                                                               -1)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "f(V2(i_1))")
                                                                                (("2"
                                                                                  (inst
                                                                                   1
                                                                                   "V2(i_1)")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide
                                                                   -)
                                                                  (("3"
                                                                    (lemma
                                                                     "nonempty_bounded")
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "D"
                                                                       "f")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (lemma "nonempty_bounded")
                            (("2" (inst -1 "D" "f") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "D")
                    (("2" (expand "norm_1_closed?" -1)
                      (("2" (inst -1 "V2" "L")
                        (("1" (assert) nil nil)
                         ("2" (skeep)
                          (("2" (typepred "V2")
                            (("2" (expand "subsequence?")
                              (("2"
                                (expand "subsequence?")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst -1 "i")
                                    (("2"
                                      (typepred
                                       "glb_approach_seq(D, f)(s(i))")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (expand "norm_1_bounded?" -1)
                (("2" (skeep)
                  (("2" (inst 1 "M")
                    (("2" (skeep)
                      (("2" (inst -1 "glb_approach_seq(D, f)(i)") nil
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (norm_1_bounded? const-decl "bool" norm_1_defs nil)
    (norm_1_closed? const-decl "bool" norm_1_defs nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" norm_1_extreme_value_theorem nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (B_W formula-decl nil norm_1_bolzano_weierstrass nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (L skolem-const-decl "VectorN(n)" norm_1_extreme_value_theorem nil)
    (unique_limit formula-decl nil convergence_sequences "analysis/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_sequences "analysis/")
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nonempty_bounded formula-decl nil norm_1_extreme_value_theorem
     nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (i_1 skolem-const-decl "nat" norm_1_extreme_value_theorem nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (increase_seq_fact formula-decl nil subsequences nil)
    (sequential_2 formula-decl nil norm_1_sequential_criterian nil)
    (subsequence? const-decl "bool" subsequences nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (V2 skolem-const-decl "(subsequence?(glb_approach_seq(D, f)))"
     norm_1_extreme_value_theorem nil)
    (sequence type-eq-decl nil sequences nil)
    (subsequence? const-decl "bool" subsequences nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms nil)
    (norm_1 const-decl "(norm?(m))" norms nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (norm_1_contD? const-decl "bool" norm_1_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (glb_approach_seq const-decl
     "{v: (D) | f(v) < glb({t: real | EXISTS (v: (D)): f(v) = t}) + 1 / (i + 1)}"
     norm_1_extreme_value_theorem nil)
    (D skolem-const-decl
     "{DD: (norm_1_closed?) | norm_1_bounded?(DD) AND nonempty?(DD)}"
     norm_1_extreme_value_theorem nil)
    (f skolem-const-decl "{ff: vec2real_f | norm_1_contD?(D)(ff)}"
     norm_1_extreme_value_theorem nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   nil)
  (greatest_lb_subseq-1 nil 3742198727
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "bounded?" -2)
        (("" (skeep)
          (("" (hide -1 -3)
            (("" (lemma "B_W")
              (("" (inst -1 "glb_approach_seq(D, f)")
                (("1" (skeep)
                  (("1" (inst 1 "V2")
                    (("1" (inst 1 "L")
                      (("1" (assert)
                        (("1" (lemma "unique_limit")
                          (("1"
                            (inst -1 "f(L)"
                             "glb({t: real | EXISTS (v: (D)): f(v) = t})"
                             "Lambda(i:nat): f(V2(i))")
                            (("1" (assert)
                              (("1"
                                (split)
                                (("1"
                                  (lemma "sequential_2")
                                  (("1"
                                    (inst -1 "D" "f")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (inst -1 "V2" "L")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (typepred "V2(i)")
                                              (("2"
                                                (typepred "V2")
                                                (("2"
                                                  (expand
                                                   "subsequence?"
                                                   -1)
                                                  (("2"
                                                    (expand
                                                     "subsequence?"
                                                     -1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst -1 "i")
                                                        (("2"
                                                          (typepred
                                                           "glb_approach_seq(D, f)(s(i))")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "f")
                                          (("2"
                                            (expand "contD?")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "convergence" 1)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst 1 "ceiling(1/epsilon)")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (typepred "V2")
                                          (("2"
                                            (expand "subsequence?" -1)
                                            (("2"
                                              (expand
                                               "subsequence?"
                                               -1)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -1 "i_1")
                                                  (("2"
                                                    (lemma
                                                     "increase_seq_fact")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "s"
                                                       "i_1")
                                                      (("2"
                                                        (typepred
                                                         "glb_approach_seq(D, f)(s(i_1))")
                                                        (("2"
                                                          (hide -1 -2)
                                                          (("2"
                                                            (case
                                                             "NOT  1 / (1 + s(i_1)) <= 1/(1+i_1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (cross-mult
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "NOT f(glb_approach_seq(D, f)(s(i_1))) = f(V2(i_1))")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1
                                                                   -4)
                                                                  (("2"
                                                                    (case
                                                                     "NOT f(V2(i_1)) <
       glb({t: real | EXISTS (v_1: (D)): f(v_1) = t}) + 1 / (1 + i_1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -2
                                                                       -3
                                                                       -4
                                                                       -5
                                                                       -6)
                                                                      (("2"
                                                                        (case
                                                                         "  glb({t: real | EXISTS (v: (D)): f(v) = t}) <=f(V2(i_1))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "abs"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "NOT f(V2(i_1)) - glb({t: real | EXISTS (v: (D)): f(v) = t}) <= 1 / (1 + i_1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "1 / (1 + i_1) <epsilon")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1
                                                                                       -2
                                                                                       -3
                                                                                       -4
                                                                                       -6
                                                                                       -7
                                                                                       2
                                                                                       3)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "ceiling(1 / epsilon)")
                                                                                        (("2"
                                                                                          (cross-mult
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (div-by
                                                                                               -1
                                                                                               "ceiling(1 / epsilon)")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   " NOT 1/i_1 <= 1/ceiling(1 / epsilon)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (cross-mult
                                                                                                       1)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "NOT 1 / (1 + i_1) < 1/i_1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (cross-mult
                                                                                                           1)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -)
                                                                          (("2"
                                                                            (typepred
                                                                             "glb({t: real | EXISTS (v: (D)): f(v) = t})")
                                                                            (("2"
                                                                              (expand
                                                                               "greatest_lower_bound?"
                                                                               -1)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "lower_bound?"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "f(V2(i_1))")
                                                                                    (("2"
                                                                                      (inst
                                                                                       1
                                                                                       "V2(i_1)")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide
                                                                       -)
                                                                      (("3"
                                                                        (lemma
                                                                         "nonempty_bounded")
                                                                        (("3"
                                                                          (inst
                                                                           -1
                                                                           "D"
                                                                           "f")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (lemma "nonempty_bounded")
                                (("2" (inst -1 "D" "f") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "D")
                        (("2" (expand "closed?" -1)
                          (("2" (inst -1 "V2" "L")
                            (("1" (assert) nil nil)
                             ("2" (skeep)
                              (("2"
                                (typepred "V2")
                                (("2"
                                  (expand "subsequence?")
                                  (("2"
                                    (expand "subsequence?")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst -1 "i")
                                        (("2"
                                          (typepred
                                           "glb_approach_seq(D, f)(s(i))")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (inst 1 "M")
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (inst -1 "glb_approach_seq(D, f)(i)") nil
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (unique_limit formula-decl nil convergence_sequences "analysis/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_sequences "analysis/")
    (nonneg_ceiling_is_nat application-judgement "nat" floor_ceil nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sequence type-eq-decl nil sequences nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bounded_below? const-decl "bool" bounded_real_defs nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil))
   shostak))
 (min_on_closed_bounded 0
  (min_on_closed_bounded-2 nil 3742654152
   ("" (lemma "greatest_lb_subseq")
    (("" (skeep)
      (("" (inst -1 "D" "f")
        (("" (skeep)
          (("" (skeep)
            ((""
              (inst 1 "L" "glb({t: real | EXISTS (v: (D)): f(v) = t})")
              (("1" (split)
                (("1" (expand "is_glob_minimizer?")
                  (("1" (assert)
                    (("1" (typepred "L")
                      (("1" (assert)
                        (("1" (skeep)
                          (("1"
                            (typepred
                             "glb({t: real | EXISTS (v: (D)): f(v) = t})")
                            (("1" (expand "greatest_lower_bound?")
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "lower_bound?")
                                  (("1"
                                    (inst -1 "f(v2)")
                                    (("1" (assert) nil nil)
                                     ("2" (inst 1 "v2") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "nonempty_bounded")
                              (("2" (inst -1 "D" "f") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "is_glob_min?")
                  (("2" (inst 1 "L")
                    (("2" (assert)
                      (("2" (skeep)
                        (("2"
                          (typepred
                           "glb({t: real | EXISTS (v: (D)): f(v) = t})")
                          (("1" (expand "greatest_lower_bound?")
                            (("1" (flatten)
                              (("1"
                                (expand "lower_bound?")
                                (("1"
                                  (inst -1 "f(v2)")
                                  (("1" (inst 1 "v2") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "nonempty_bounded")
                            (("2" (inst -1 "D" "f") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil))
                nil)
               ("2" (lemma "nonempty_bounded")
                (("2" (inst -1 "D" "f") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_below? const-decl "bool" bounded_real_defs nil)
    (glb const-decl "{x | greatest_lower_bound?(x, SB)}"
     bounded_real_defs nil)
    (greatest_lower_bound? const-decl "bool" bounded_real_defs nil)
    (is_glob_min? const-decl "bool" unconstrained_global_extrema nil)
    (v2 skolem-const-decl "(D)" norm_1_extreme_value_theorem nil)
    (is_glob_minimizer? const-decl "bool" unconstrained_global_extrema
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty_bounded formula-decl nil norm_1_extreme_value_theorem
     nil)
    (lower_bound? const-decl "bool" bounded_real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (v2 skolem-const-decl "(D)" norm_1_extreme_value_theorem nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" norm_1_extreme_value_theorem nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (domain type-eq-decl nil domain_vec2real_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (norm_1_contD? const-decl "bool" norm_1_defs nil)
    (norm_1_closed? const-decl "bool" norm_1_defs nil)
    (norm_1_bounded? const-decl "bool" norm_1_defs nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (D skolem-const-decl
     "{DD: (norm_1_closed?) | norm_1_bounded?(DD) AND nonempty?(DD)}"
     norm_1_extreme_value_theorem nil)
    (f skolem-const-decl "vec2real_f[n]" norm_1_extreme_value_theorem
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (greatest_lb_subseq formula-decl nil norm_1_extreme_value_theorem
     nil))
   nil)
  (min_on_closed_bounded-1 nil 3742654143 ("" (postpone) nil nil) nil
   shostak))
 (max_on_closed_bounded 0
  (max_on_closed_bounded-1 nil 3742203351
   ("" (lemma "min_on_closed_bounded")
    (("" (skeep)
      (("" (inst -1 "D" "LAMBDA(v:VectorN(n)): -f(v)")
        (("" (split)
          (("1" (skeep)
            (("1" (inst 1 "p" "-c")
              (("1" (assert)
                (("1" (split)
                  (("1" (expand "is_glob_maximizer?")
                    (("1" (expand "is_glob_minimizer?")
                      (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (expand "is_glob_max?" 1)
                    (("2" (expand "is_glob_min?")
                      (("2" (skeep)
                        (("2" (inst 1 "v_1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (assert)
              (("2" (lemma "abs_mult")
                (("2" (expand "norm_1_contD?")
                  (("2" (skeep)
                    (("2" (inst -2 "p")
                      (("2" (expand "norm_1_contp?")
                        (("2" (skeep)
                          (("2" (inst -2 "eps")
                            (("2" (skeep)
                              (("2"
                                (inst 1 "delta")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -3 "x")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "abs_mult")
                                            (("2"
                                              (inst
                                               -2
                                               "-1"
                                               "f(x) - f(p)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "abs" -2 2)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_glob_minimizer? const-decl "bool" unconstrained_global_extrema
     nil)
    (is_glob_maximizer? const-decl "bool" unconstrained_global_extrema
     nil)
    (is_glob_min? const-decl "bool" unconstrained_global_extrema nil)
    (is_glob_max? const-decl "bool" unconstrained_global_extrema nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (norm_1_contD? const-decl "bool" norm_1_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (norm_1_contp? const-decl "bool" norm_1_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (abs_mult formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (norm_1_bounded? const-decl "bool" norm_1_defs nil)
    (norm_1_closed? const-decl "bool" norm_1_defs nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" norm_1_extreme_value_theorem nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (min_on_closed_bounded formula-decl nil
     norm_1_extreme_value_theorem nil))
   shostak)))