(topology_Rn
 (OpenD?_TCC1 0
  (OpenD?_TCC1-1 nil 3741008796
   ("" (skeep)
    (("" (typepred "p-v")
      (("" (assert)
        (("" (typepred "p" "v") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" topology_Rn nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (VectorN type-eq-decl nil matrices "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (OpenD_equiv 0
  (OpenD_equiv-1 nil 3742897403
   ("" (skeep)
    (("" (split)
      (("1" (lemma "equiv_norm[n]")
        (("1" (flatten)
          (("1" (skeep)
            (("1" (expand "OpenD?")
              (("1" (skeep)
                (("1" (inst -1 "nn" "nn!1")
                  (("1" (expand "equiv?")
                    (("1" (skeep)
                      (("1" (skeep)
                        (("1" (inst -2 "p")
                          (("1" (skeep)
                            (("1" (inst 1 "eps*c1")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -2 "v")
                                  (("1"
                                    (inst -1 "p-v")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (div-by -1 "c1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (div-by -3 "c1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "p-v" "p" "v")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "max" -)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "OpenD?")
          (("2" (inst -1 "norm_inf(n)")
            (("2" (inst 1 "norm_inf(n)") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((OpenD? const-decl "bool" topology_Rn nil)
    (OpenD? const-decl "bool" topology_Rn nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (v skolem-const-decl "VectorN(n)" topology_Rn nil)
    (p skolem-const-decl "(D)" topology_Rn nil)
    (D skolem-const-decl "domain[n]" topology_Rn nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (equiv? const-decl "bool" norms_equiv nil)
    (equiv_norm formula-decl nil norms_equiv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" topology_Rn nil)
    (norm_inf const-decl "(norm?(m))" norms nil))
   shostak))
 (Union_open 0
  (Union_open-1 nil 3741009511
   ("" (skeep)
    (("" (expand "OpenD?")
      (("" (skeep)
        (("" (skeep)
          (("" (typepred "p")
            (("" (expand "extend")
              (("" (expand "Union" -3)
                (("" (skeep)
                  (("" (typepred "a")
                    (("" (assert)
                      (("" (expand "OpenD?" -2)
                        (("" (inst -2 "nn")
                          (("" (inst -2 "p")
                            (("" (skeep)
                              ((""
                                (inst 1 "eps")
                                ((""
                                  (skeep)
                                  ((""
                                    (inst -2 "v")
                                    ((""
                                      (assert)
                                      ((""
                                        (expand "Union" 1)
                                        (("" (inst 1 "a") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((OpenD? const-decl "bool" topology_Rn nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" topology_Rn nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (set type-eq-decl nil sets nil) (Union const-decl "set" sets nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (open_domain type-eq-decl nil topology_Rn nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil))
   shostak))
 (convex_domain?_TCC1 0
  (convex_domain?_TCC1-1 nil 3741013182
   ("" (skeep)
    ((""
      (typepred "t * x1 + (1 - t) * x2" "t * x1" "(1 - t) * x2" "x1"
       "x2")
      (("" (expand "max" -) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" topology_Rn nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (* const-decl "VectorN(length(v2))" matrices "matrices/")
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (VectorN type-eq-decl nil matrices "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (convex_implies_pc 0
  (convex_implies_pc-1 nil 3741338564
   ("" (skeep)
    (("" (expand "convex_domain?")
      (("" (expand "path_connected_domain?")
        (("" (skeep)
          ((""
            (inst 1
             "LAMBDA(t: {r: real | 0 <= r AND r <= 1}): t*v2 + (1-t)*v1")
            (("1" (split)
              (("1" (lemma "one_idx")
                (("1" (lemma "add_commute")
                  (("1" (lemma "mult_zero")
                    (("1" (assert)
                      (("1" (inst -1 "v2")
                        (("1" (typepred "v1" "v2")
                          (("1" (hide -1 -4)
                            (("1" (replace -3 -5)
                              (("1"
                                (replace -5 1)
                                (("1"
                                  (inst -7 "v1")
                                  (("1"
                                    (replace -7 1)
                                    (("1"
                                      (lemma "zero_id")
                                      (("1"
                                        (inst -1 "v1")
                                        (("1"
                                          (replace -2 -1)
                                          (("1"
                                            (inst
                                             -7
                                             "zero_vec(n)"
                                             "v1")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (typepred "v1")
                                              (("2" (assert) nil nil))
                                              nil)
                                             ("3"
                                              (typepred "zero_vec(n)")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "v1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "v2") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (lemma "zero_id")
                  (("2" (lemma "mult_zero")
                    (("2" (lemma "add_commute")
                      (("2" (inst -2 "v1")
                        (("1" (lemma "one_idx")
                          (("1" (inst -1 "v2")
                            (("1" (replace -1 1)
                              (("1"
                                (typepred "v1" "v2")
                                (("1"
                                  (replace -2 -9)
                                  (("1"
                                    (replace -9 1)
                                    (("1"
                                      (inst -10 "v2")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "v2")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (typepred "v1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (case "v1 = zero_vec(n)")
                (("1" (expand "cont?")
                  (("1" (skeep)
                    (("1" (skeep)
                      (("1" (replace -1 1)
                        (("1" (case "v2 = zero_vec(n)")
                          (("1" (replace -1 1)
                            (("1" (lemma "scal_zero")
                              (("1"
                                (inst 1 "1")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst-cp -1 "t_1" "n")
                                    (("1"
                                      (inst -1 "1-t_1" "n")
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (replace -2 1)
                                          (("1"
                                            (lemma "scal_zero")
                                            (("1"
                                              (inst -1 "t2" "n")
                                              (("1"
                                                (lemma "scal_zero")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "(1-t2)"
                                                   "n")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (replace -2 1)
                                                      (("1"
                                                        (lemma
                                                         "zero_id")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "zero_vec(n)")
                                                          (("1"
                                                            (typepred
                                                             "zero_vec(n)")
                                                            (("1"
                                                              (replace
                                                               -2
                                                               -3)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 1)
                                                                (("1"
                                                                  (lemma
                                                                   "sub_zero")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "zero_vec(n)")
                                                                    (("1"
                                                                      (replace
                                                                       -3
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (typepred
                                                                           "norm_inf(n)")
                                                                          (("1"
                                                                            (expand
                                                                             "norm?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 -4)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "zero_vec(n)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "zero_vec(n)")
                                                                      (("2"
                                                                        (typepred
                                                                         "zero_vec(n)")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst 2 "eps/norm_inf(n)(v2)")
                            (("1" (skeep)
                              (("1"
                                (lemma "scal_zero")
                                (("1"
                                  (inst -1 "(1 - t_1)" "n")
                                  (("1"
                                    (replace -1 2)
                                    (("1"
                                      (lemma "scal_zero")
                                      (("1"
                                        (inst -1 "(1 - t2)" "n")
                                        (("1"
                                          (replace -1 2)
                                          (("1"
                                            (lemma "zero_id")
                                            (("1"
                                              (inst-cp -1 "t_1 * v2")
                                              (("1"
                                                (inst -1 "t2 * v2")
                                                (("1"
                                                  (typepred
                                                   "t2 * v2"
                                                   "t_1 * v2"
                                                   "v2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -6 -4)
                                                      (("1"
                                                        (replace -6 -2)
                                                        (("1"
                                                          (hide
                                                           -1
                                                           -3
                                                           -5)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -5)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               -6)
                                                              (("1"
                                                                (replace
                                                                 -5
                                                                 2)
                                                                (("1"
                                                                  (replace
                                                                   -6
                                                                   2)
                                                                  (("1"
                                                                    (lemma
                                                                     "dist_scalar_sub")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "t_1"
                                                                       "t2"
                                                                       "v2")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         2
                                                                         rl)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (typepred
                                                                             "norm_inf(n)")
                                                                            (("1"
                                                                              (expand
                                                                               "norm?")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (inst
                                                                                   -2
                                                                                   "v2"
                                                                                   "(t_1 - t2)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     2)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1
                                                                                         -2
                                                                                         -3
                                                                                         -4
                                                                                         -5
                                                                                         -6
                                                                                         -7
                                                                                         -8
                                                                                         -9
                                                                                         -10)
                                                                                        (("1"
                                                                                          (mult-by
                                                                                           -4
                                                                                           "norm_inf(n)(v2)")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (split)
                              (("1"
                                (typepred "eps")
                                (("1"
                                  (typepred "norm_inf(n)(v2)")
                                  (("1"
                                    (mult-by 1 "norm_inf(n)(v2)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (typepred "norm_inf(n)")
                                      (("2"
                                        (expand "norm?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst -3 "v2")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (mult-by 1 "norm_inf(n)(v2)")
                                (("2" (assert) nil nil))
                                nil))
                              nil)
                             ("3" (typepred " norm_inf(n)")
                              (("3"
                                (expand "norm?")
                                (("3"
                                  (flatten)
                                  (("3"
                                    (inst -3 "v2")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (typepred "v2")
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "v2= zero_vec(n)")
                  (("1" (replace -1 2)
                    (("1" (expand "cont?")
                      (("1" (skeep)
                        (("1" (skeep)
                          (("1" (inst 2 "eps/norm_inf(n)(v1)")
                            (("1" (skeep)
                              (("1"
                                (lemma "scal_zero")
                                (("1"
                                  (inst-cp -1 "t_1" "n")
                                  (("1"
                                    (inst -1 "t2" "n")
                                    (("1"
                                      (replace -1 2)
                                      (("1"
                                        (replace -2 2)
                                        (("1"
                                          (lemma "zero_id")
                                          (("1"
                                            (lemma "add_commute")
                                            (("1"
                                              (inst-cp
                                               -1
                                               "zero_vec(n)"
                                               "(1 - t_1) * v1")
                                              (("1"
                                                (inst
                                                 -1
                                                 "zero_vec(n)"
                                                 "(1 - t2) * v1")
                                                (("1"
                                                  (replace -1 2)
                                                  (("1"
                                                    (replace -2 2)
                                                    (("1"
                                                      (inst-cp
                                                       -3
                                                       "(1 - t_1) * v1")
                                                      (("1"
                                                        (inst
                                                         -3
                                                         "(1 - t2) * v1")
                                                        (("1"
                                                          (typepred
                                                           "(1 - t2) * v1"
                                                           "v1"
                                                           "(1 - t_1) * v1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -3
                                                               -6)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   -4)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -7)
                                                                    (("1"
                                                                      (replace
                                                                       -4
                                                                       -8)
                                                                      (("1"
                                                                        (replace
                                                                         -7
                                                                         2)
                                                                        (("1"
                                                                          (replace
                                                                           -8
                                                                           2)
                                                                          (("1"
                                                                            (lemma
                                                                             "dist_scalar_sub")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "(1 - t_1)"
                                                                               "(1 - t2)"
                                                                               "v1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   2
                                                                                   rl)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1
                                                                                     -2
                                                                                     -3
                                                                                     -4
                                                                                     -5
                                                                                     -6
                                                                                     -7
                                                                                     -8
                                                                                     -9
                                                                                     -10
                                                                                     -11)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "norm_inf(n)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "norm?")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -2
                                                                                             "v1"
                                                                                             "(t2 - t_1)")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2
                                                                                               2)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "NOT abs((t2 - t_1)) = abs(t_1 - t2)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (mult-by
                                                                                                         -7
                                                                                                         "norm_inf(n)(v1)")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred
                                                     "(1 - t2) * v1"
                                                     "v1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (typepred
                                                   "zero_vec(n)")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "(1 - t_1) * v1"
                                                 "v1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3"
                                                (typepred
                                                 "zero_vec(n)")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (split)
                              (("1"
                                (mult-by 1 "norm_inf(n)(v1)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (typepred "norm_inf(n)")
                                  (("2"
                                    (expand "norm?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (inst -3 "v1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (mult-by 1 "norm_inf(n)(v1)")
                                (("2" (assert) nil nil))
                                nil))
                              nil)
                             ("3" (typepred "norm_inf(n)(v1)")
                              (("3"
                                (typepred "norm_inf(n)")
                                (("3"
                                  (expand "norm?")
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (inst -3 "v1")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (typepred "v1")
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "cont?")
                    (("2" (skeep)
                      (("2" (skeep)
                        (("2"
                          (inst 3
                           "eps/(2*max(norm_inf(n)(v1), norm_inf(n)(v2)))")
                          (("1" (skeep)
                            (("1"
                              (case "NOT t_1 * v2 + (1 - t_1) * v1 - (t2 * v2 + (1 - t2) * v1)  = (t_1-t2)*v2+(t2-t_1)*v1")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "sub_dist")
                                  (("1"
                                    (inst
                                     -1
                                     " t_1 * v2 + (1 - t_1) * v1"
                                     "t2 * v2"
                                     "(1 - t2) * v1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred
                                         "t_1 * v2 + (1 - t_1) * v1"
                                         "t_1 * v2"
                                         "(1 - t_1) * v1")
                                        (("1"
                                          (typepred "v1" "v2")
                                          (("1"
                                            (expand "max" -8)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide
                                                   -1
                                                   -2
                                                   -3
                                                   -4
                                                   -5
                                                   -6
                                                   -7
                                                   -8
                                                   -9
                                                   -10
                                                   -11)
                                                  (("1"
                                                    (replace -2 1)
                                                    (("1"
                                                      (lemma "sub_idx")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "t_1 * v2 + (1 - t_1) * v1"
                                                         "t2 * v2")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (lemma
                                                                 "sub_idx")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "t_1 * v2 + (1 - t_1) * v1 + (-1 * (t2 * v2))"
                                                                   "(1 - t2) * v1")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "asso_v")
                                                                        (("1"
                                                                          (inst-cp
                                                                           -1
                                                                           "-1"
                                                                           "t2"
                                                                           "v2")
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "-1"
                                                                               "(1-t2)"
                                                                               "v1")
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "add_commute")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "t_1 * v2"
                                                                                     "(1 - t_1) * v1")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "asso_add")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "(1 - t_1) * v1"
                                                                                           "t_1 * v2"
                                                                                           "(-1 * t2) * v2")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "dist_scalar")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "t_1"
                                                                                                   "(-1*t2)"
                                                                                                   "v2")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       1
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1
                                                                                                           -2
                                                                                                           -3
                                                                                                           -4)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "add_commute")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "(1 - t_1) * v1"
                                                                                                               "(t_1 - t2) * v2")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "asso_add")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     " (t_1 - t2) * v2"
                                                                                                                     "(1 - t_1) * v1"
                                                                                                                     "(t2 - 1) * v1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "dist_scalar")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "(1-t_1)"
                                                                                                                             "t2-1"
                                                                                                                             "v1")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred
                                       "t_1 * v2 + (1 - t_1) * v1"
                                       "t_1 * v2"
                                       "(1 - t_1) * v1"
                                       "v1"
                                       "v2")
                                      (("2"
                                        (expand "max" -)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1 3)
                                (("2"
                                  (typepred "norm_inf(n)")
                                  (("2"
                                    (expand "norm?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (inst
                                         -4
                                         "(t_1 - t2) * v2"
                                         "(t2 - t_1) * v1")
                                        (("1"
                                          (hide -1 -3)
                                          (("1"
                                            (inst-cp
                                             -1
                                             "v2"
                                             "(t_1 - t2)")
                                            (("1"
                                              (inst
                                               -1
                                               "v1"
                                               "(t2 - t_1)")
                                              (("1"
                                                (case
                                                 "NOT abs((t2 - t_1)) = abs((t_1 - t2))")
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1 -2 lr)
                                                  (("2"
                                                    (replace -2 -4)
                                                    (("2"
                                                      (replace -3 -4)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (mult-by
                                                           -6
                                                           "max(norm_inf(n)(v1), norm_inf(n)(v2))")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "NOT eps / (2 * max(norm_inf(n)(v1), norm_inf(n)(v2))) *
        max(norm_inf(n)(v1), norm_inf(n)(v2)) = eps/2")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1
                                                                 -7)
                                                                (("2"
                                                                  (typepred
                                                                   "max(norm_inf(n)(v1), norm_inf(n)(v2))")
                                                                  (("2"
                                                                    (mult-by
                                                                     -2
                                                                     "abs(t_1 - t2)")
                                                                    (("2"
                                                                      (mult-by
                                                                       -3
                                                                       " abs(t_1 - t2)")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred
                                           "(t2 - t_1) * v1"
                                           "v1")
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (typepred
                                           "(t_1 - t2) * v2"
                                           "v2")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (split)
                            (("1"
                              (mult-by 1
                               "(2 * max(norm_inf(n)(v1), norm_inf(n)(v2)))")
                              (("1" (assert) nil nil)
                               ("2"
                                (div-by 1 "2")
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "norm_inf(n)")
                                    (("2"
                                      (expand "norm?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst-cp -3 "v1")
                                          (("2"
                                            (inst -3 "v2")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (mult-by 1
                               "(2 * max(norm_inf(n)(v1), norm_inf(n)(v2)))")
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (assert)
                            (("3"
                              (case "(2 * max(norm_inf(n)(v1), norm_inf(n)(v2)))=0")
                              (("1"
                                (div-by -1 "2")
                                (("1"
                                  (assert)
                                  (("1"
                                    (typepred "norm_inf(n)")
                                    (("1"
                                      (expand "norm?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -1 -2 -4)
                                          (("1"
                                            (inst-cp -1 "v2")
                                            (("1"
                                              (inst-cp -1 "v1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("4" (typepred "v2")
                            (("4" (assert) nil nil)) nil)
                           ("5" (typepred "v1")
                            (("5" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2"
                (typepred "t * v2 + (1 - t) * v1" "t * v2"
                 "(1 - t) * v1" "v2" "v1")
                (("2" (split)
                  (("1" (assert)
                    (("1" (expand "max") (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (inst -13 "v2" "v1")
                    (("2" (inst -13 "t") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convex_domain? const-decl "bool" topology_Rn nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (add_commute formula-decl nil vector_arithmetic nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (one_idx formula-decl nil vector_arithmetic nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (t_1 skolem-const-decl "{r: real | 0 <= r AND r <= 1}" topology_Rn
     nil)
    (t2 skolem-const-decl "{r: real | 0 <= r AND r <= 1}" topology_Rn
     nil)
    (eps skolem-const-decl "posreal" topology_Rn nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (eps skolem-const-decl "posreal" topology_Rn nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (sub_dist formula-decl nil vector_arithmetic nil)
    (sub_idx formula-decl nil vector_arithmetic nil)
    (t2 skolem-const-decl "{r: real | 0 <= r AND r <= 1}" topology_Rn
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dist_scalar formula-decl nil vector_arithmetic nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (asso_v formula-decl nil vector_arithmetic nil)
    (t_1 skolem-const-decl "{r: real | 0 <= r AND r <= 1}" topology_Rn
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (cont? const-decl "bool" continuity_multivar nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (sub_zero formula-decl nil vector_arithmetic nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (dist_scalar_sub formula-decl nil vector_arithmetic nil)
    (eps skolem-const-decl "posreal" topology_Rn nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (* const-decl "VectorN(length(v2))" matrices "matrices/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" topology_Rn nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (D skolem-const-decl "domain[n]" topology_Rn nil)
    (v2 skolem-const-decl "(D)" topology_Rn nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (v1 skolem-const-decl "(D)" topology_Rn nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (path_connected_domain? const-decl "bool" topology_Rn nil))
   shostak)))