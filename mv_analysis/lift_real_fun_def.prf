(lift_real_fun_def
 (lift_rd_TCC1 0
  (lift_rd_TCC1-1 nil 3798362353 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices))
   nil
   (lift_rd subtype "lift_real_fun_def.x" "(list_adt[real].cons?)")))
 (dd_lift_dd 0
  (dd_lift_dd-1 nil 3798362724
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (lemma "dd_norm_equiv[1]")
          (("1" (inst -1 "lift_rd(d)")
            (("1" (assert)
              (("1" (hide 2)
                (("1" (inst 1 "norm_inf(1)")
                  (("1" (expand "deriv_domain?")
                    (("1" (skeep)
                      (("1" (inst -1 "e" "car(p)")
                        (("1" (skeep)
                          (("1" (inst 1 "(: y :)")
                            (("1" (grind) nil nil)
                             ("2" (typepred "y")
                              (("2"
                                (split 1)
                                (("1"
                                  (expand "zero_vec" 1)
                                  (("1"
                                    (expand "zero_vec" -)
                                    (("1"
                                      (decompose-equality -1)
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "lift_rd" 1)
                                    (("2"
                                      (expand "+" 1)
                                      (("2"
                                        (expand "add" 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "p")
                          (("2" (expand "lift_rd" -3)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "deriv_domain?")
          (("2" (inst -1 "norm_inf(1)")
            (("2" (skeep)
              (("2" (inst -1 "e" "(: x :)")
                (("1" (skeep)
                  (("1" (inst 1 "car(v)")
                    (("1" (expand "norm_inf" -1)
                      (("1" (expand "norm_inf")
                        (("1" (expand "max")
                          (("1" (expand "length")
                            (("1" (typepred "v")
                              (("1"
                                (hide -1)
                                (("1"
                                  (lift-if -4)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (split -3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lift-if -2)
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" -2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lift-if -1)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "abs"
                                                         -2)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "abs"
                                                         1
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "v")
                      (("2" (split 1)
                        (("1" (grind)
                          (("1" (decompose-equality 1) nil nil)) nil)
                         ("2" (expand "lift_rd" -4)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "lift_rd" 1) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd_norm_equiv formula-decl nil derivative_domain_multi nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (max def-decl "real" norms nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (y skolem-const-decl "{u: nzreal | d(u + car(p))}"
     lift_real_fun_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (p skolem-const-decl "(lift_rd(d))" lift_real_fun_def nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (d skolem-const-decl "real_dom" lift_real_fun_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def nil)
    (real_dom type-eq-decl nil lift_real_fun_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (v skolem-const-decl
     "{vv: VectorN(1) | vv /= zero_vec(1) AND lift_rd(d)((: x :) + vv)}"
     lift_real_fun_def nil)
    (x skolem-const-decl "(d)" lift_real_fun_def nil))
   shostak))
 (lift_re_TCC1 0
  (lift_re_TCC1-1 nil 3798362353 ("" (subtype-tcc) nil nil)
   ((length_singleton formula-decl nil more_list_props structures)) nil
   (lift_re subtype
    "(: lift_real_fun_def.f(list_adt[real].car(lift_real_fun_def.v)) :)"
    "matrices.VectorN(1)")))
 (lift_re_TCC2 0
  (lift_re_TCC2-1 nil 3798362353 ("" (subtype-tcc) nil nil)
   ((length_singleton formula-decl nil more_list_props structures)) nil
   (lift_re subtype "(: 0 :)" "matrices.VectorN(1)")))
 (lift_diff_TCC1 0
  (lift_diff_TCC1-1 nil 3798362353 ("" (assuming-tcc) nil nil) nil nil
   (lift_diff assuming
    "analysis@derivatives_def[(lift_real_fun_def.d)].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (lift_diff_TCC2 0
  (lift_diff_TCC2-1 nil 3798362353
   ("" (skeep)
    (("" (expand "not_one_element?" 1)
      (("" (skeep)
        (("" (typepred "d")
          (("" (expand "deriv_domain?" -1)
            (("" (inst -1 "1" "x!1")
              (("" (skeep)
                (("" (typepred "y")
                  (("" (inst 1 "y+x!1") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_dom type-eq-decl nil lift_real_fun_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (lift_diff assuming
    "analysis@derivatives_def[(lift_real_fun_def.d)].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (lift_diff_TCC3 0
  (lift_diff_TCC3-1 nil 3798362353
   ("" (skeep)
    (("" (lemma "dd_lift_dd")
      (("" (inst -1 "d") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((dd_lift_dd formula-decl nil lift_real_fun_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_dom type-eq-decl nil lift_real_fun_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (lift_diff subtype "lift_real_fun_def.lift_rd(lift_real_fun_def.d)"
    "(derivative_domain_multi[1].deriv_domain?)")))
 (lift_diff_TCC4 0
  (lift_diff_TCC4-1 nil 3798362353 ("" (subtype-tcc) nil nil)
   ((length_singleton formula-decl nil more_list_props structures)
    (lift_rd const-decl "domain[1]" lift_real_fun_def nil))
   nil
   (lift_diff subtype "(: lift_real_fun_def.x :)"
    "(lift_real_fun_def.lift_rd(lift_real_fun_def.d))")))
 (lift_diff 0
  (lift_diff-1 nil 3798363979
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "differentiable?" 1)
          (("1" (expand "derivable?")
            (("1" (inst 1 "(: (: deriv(f,x) :) :)")
              (("1" (typepred "deriv(f,x)")
                (("1" (hide -1)
                  (("1" (expand "convergence_zero?" 1)
                    (("1" (skeep)
                      (("1" (expand "deriv" 1)
                        (("1" (typepred "lim(NQ(f, x),0)")
                          (("1" (expand "convergence" -1)
                            (("1" (expand "convergence" -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (inst -2 "epsilon")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 1 "delta")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst -2 "car(x_1)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -2)
                                              (("1"
                                                (expand "NQ")
                                                (("1"
                                                  (name
                                                   "lm"
                                                   " lim(LAMBDA (h: (A(x))) -> real: (f(h + x) - f(x)) / h, 0)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (expand
                                                       "norm_inf"
                                                       1
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "norm_inf"
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "max"
                                                           1
                                                           1)
                                                          (("1"
                                                            (lift-if 1)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "abs"
                                                                   1
                                                                   2)
                                                                  (("1"
                                                                    (lift-if
                                                                     1)
                                                                    (("1"
                                                                      (case
                                                                       "abs(car(lift_re(d, f)((: x :) + x_1) - lift_re(d, f)((: x :)) -
                   (: (: lm :) :) * x_1))
           / norm_inf(1)(x_1) =  abs(abs(car(lift_re(d, f)((: x :) + x_1) - lift_re(d, f)((: x :)) -
                   (: (: lm :) :) * x_1))
           / norm_inf(1)(x_1))")
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           1
                                                                           rl)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1
                                                                             rl)
                                                                            (("1"
                                                                              (expand
                                                                               "lift_re"
                                                                               1
                                                                               1)
                                                                              (("1"
                                                                                (hide
                                                                                 -3)
                                                                                (("1"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "+"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "add"
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "lift_re"
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "-"
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sub"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "add"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "scal")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "*"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "matvec")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "rows")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "length")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "length")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "*"
                                                                                                                     1
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "dot "
                                                                                                                       1
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "dot"
                                                                                                                         1
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "norm_inf"
                                                                                                                           1
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "norm_inf"
                                                                                                                             1
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "abs"
                                                                                                                               1
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "max"
                                                                                                                                 1
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "length"
                                                                                                                                   1
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "abs_div")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "car(x_1)"
                                                                                                                                       "(f(car(x_1) + x) - f(x) - lm * car(x_1))")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1
                                                                                                                                           1
                                                                                                                                           rl)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "x")
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "x_1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "NQ")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "lift_rd"
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "abs"
                                                                           1
                                                                           2)
                                                                          (("2"
                                                                            (lift-if
                                                                             1)
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (mult-by
                                                                                     -1
                                                                                     "norm_inf(1)(x_1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "x_1")
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "norm_inf(1)")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "norm?"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -3
                                                                                               "x_1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (typepred "h")
                                                        (("2"
                                                          (expand
                                                           "A"
                                                           -2)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "x_1")
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (expand
                                                     "fullset"
                                                     1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (hide -1 -2)
                                                  (("3"
                                                    (expand
                                                     "zero_vec"
                                                     -1)
                                                    (("3"
                                                      (expand
                                                       "zero_vec"
                                                       -1)
                                                      (("3"
                                                        (expand "-" -1)
                                                        (("3"
                                                          (expand
                                                           "sub"
                                                           -1)
                                                          (("3"
                                                            (expand
                                                             "scal"
                                                             -1)
                                                            (("3"
                                                              (expand
                                                               "scal"
                                                               -1)
                                                              (("3"
                                                                (expand
                                                                 "add"
                                                                 -1)
                                                                (("3"
                                                                  (expand
                                                                   "add"
                                                                   -1)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (typepred
                                                                       "x_1")
                                                                      (("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "x_1")
                                            (("2"
                                              (split 1)
                                              (("1"
                                                (hide -1)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (expand "A")
                                                (("2"
                                                  (expand "NQ" -3)
                                                  (("2"
                                                    (expand
                                                     "lift_rd"
                                                     -3)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide
                                                         -4
                                                         -5
                                                         -6
                                                         -7)
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (typepred "i")
                  (("2" (expand "length" -1)
                    (("2" (expand "length" -1)
                      (("2" (expand "nth" 1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "derivable?") (("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "derivable?")
          (("2" (expand "differentiable?")
            (("2" (expand "convergent?")
              (("2" (skeep)
                (("2" (inst 1 "car(car(T))")
                  (("1" (expand "convergence")
                    (("1" (expand "convergence_zero?")
                      (("1" (expand "convergence" 1 1)
                        (("1" (split 1)
                          (("1" (expand "adh" 1)
                            (("1" (skeep)
                              (("1"
                                (typepred "x")
                                (("1"
                                  (typepred "d")
                                  (("1"
                                    (expand "deriv_domain?" -1)
                                    (("1"
                                      (inst -1 "e" "x")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "y")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "fullset" 1)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "A" 1)
                                            (("2"
                                              (typepred "y")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (inst -1 "epsilon")
                              (("2"
                                (skeep)
                                (("2"
                                  (inst 1 "delta")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst -3 "(: x2 :)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -3)
                                          (("1"
                                            (expand "NQ")
                                            (("1"
                                              (typepred "x2")
                                              (("1"
                                                (lift-if -3)
                                                (("1"
                                                  (split -3)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       "norm_inf(1)
                  (lift_re(d, f)((: x :) + (: x2 :)) -
                    lift_re(d, f)((: x :))
                    - T * (: x2 :))
           / norm_inf(1)((: x2 :)) = abs(norm_inf(1)
                  (lift_re(d, f)((: x :) + (: x2 :)) -
                    lift_re(d, f)((: x :))
                    - T * (: x2 :))
           / norm_inf(1)((: x2 :)))")
                                                      (("1"
                                                        (replace
                                                         -1
                                                         -2
                                                         rl)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (expand
                                                             "lift_re")
                                                            (("1"
                                                              (expand
                                                               "+"
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "add"
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "A"
                                                                   -2)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "-"
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "sub"
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "scal"
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "*"
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "matvec"
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "rows")
                                                                                (("1"
                                                                                  (typepred
                                                                                   "T")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "matvec"
                                                                                     -4)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "scal"
                                                                                       -4)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "add"
                                                                                         -4)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "add"
                                                                                           -4)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "norm_inf"
                                                                                             -4)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "norm_inf"
                                                                                               -4)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "abs"
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "max"
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       -4)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "*"
                                                                                                           -4)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "dot"
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -3
                                                                                                               "0")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "nth"
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "dot"
                                                                                                                     -4)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "abs_div")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "x2"
                                                                                                                         "f(x2 + x) - f(x) - car(car(T)) * x2")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           -5
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2 3 4)
                                                        (("2"
                                                          (expand
                                                           "abs"
                                                           1
                                                           1)
                                                          (("2"
                                                            (lift-if 1)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (mult-by
                                                                   -1
                                                                   "norm_inf(1)((: x2 :))")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -1
                                                                     -2)
                                                                    (("2"
                                                                      (typepred
                                                                       "x2")
                                                                      (("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "zero_vec"
                                                       -1)
                                                      (("2"
                                                        (decompose-equality
                                                         -1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (expand "-" 1)
                                              (("2"
                                                (expand "zero_vec")
                                                (("2"
                                                  (expand "zero_vec")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (split 1)
                                        (("1"
                                          (expand "lift_rd" 1 1)
                                          (("1"
                                            (expand "NQ" 1)
                                            (("1"
                                              (typepred "x2")
                                              (("1"
                                                (expand "A")
                                                (("1"
                                                  (expand "+" 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "x2")
                                          (("2"
                                            (expand "zero_vec")
                                            (("2"
                                              (expand "zero_vec")
                                              (("2"
                                                (decompose-equality)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (hide -1)
                      (("2" (typepred "T")
                        (("2" (inst -3 "0")
                          (("2" (expand "nth" -3)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (typepred "T") (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((differentiable? const-decl "bool" convergence_vec2vec nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (x skolem-const-decl "(d)" lift_real_fun_def nil)
    (f skolem-const-decl "[(d) -> real]" lift_real_fun_def nil)
    (d skolem-const-decl "{dd: real_dom | deriv_domain?[(dd)]}"
       lift_real_fun_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_dom type-eq-decl nil lift_real_fun_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (deriv const-decl "real" derivatives_def analysis)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (Matrix type-eq-decl nil matrices matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (lim const-decl "{l: real | convergence(f, x0, l)}"
     lim_of_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (lift_rd const-decl "domain[1]" lift_real_fun_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (x_1 skolem-const-decl
     "{xx: (NQ(lift_rd(d), (: x :))) | xx /= zero_vec(1)}"
     lift_real_fun_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (max def-decl "real" norms nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (lift_re const-decl "vec2vec[1](1)" lift_real_fun_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (norm? const-decl "bool" norms nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (matvec def-decl "VectorN(m)" mat_vec_mult nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (dot def-decl "real" matrices matrices)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs_div formula-decl nil real_props nil)
    (* const-decl "real" matrices matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_cancel2 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (fullset const-decl "set" sets nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (T skolem-const-decl "MatrixMN(1, 1)" lift_real_fun_def nil)
    (y skolem-const-decl "{u: nzreal | d(u + x)}" lift_real_fun_def
     nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (x2 skolem-const-decl "(A(x))" lift_real_fun_def nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   shostak))
 (lift_der_TCC1 0
  (lift_der_TCC1-1 nil 3853369483
   ("" (skeep)
    (("" (lemma "lift_diff") (("" (inst?) (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((lift_diff formula-decl nil lift_real_fun_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_dom type-eq-decl nil lift_real_fun_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (lift_der subtype
    "lift_real_fun_def.lift_re(lift_real_fun_def.d, lift_real_fun_def.f)"
    "{ff: domain_vec2real_def[1].vec2vec(1) | convergence_vec2vec[1].differentiable?(1, lift_real_fun_def.lift_rd(lift_real_fun_def.d), ff, (: lift_real_fun_def.x :))}")))
 (lift_der 0
  (lift_der-1 nil 3853369530
   ("" (expand "der_f" 1)
    (("" (lemma "convergence_vec2vec[1].der_f_unique")
      (("" (skeep)
        ((""
          (inst -1 "1" "lift_rd(d)" "lift_re(d,f)" "(: x :)"
           "(: (: deriv(f, x) :) :)")
          (("" (split 1)
            (("1" (skeep)
              (("1" (typepred "i")
                (("1" (expand "length" -1)
                  (("1" (expand "length" -1)
                    (("1" (expand "nth" 1) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (hide -2)
                (("2" (name "lm" "deriv[(d)](f,x)")
                  (("2" (replace -1)
                    (("2" (expand "deriv")
                      (("2" (typepred "lim(NQ(f, x), 0)")
                        (("2" (replace -2)
                          (("2" (hide -2)
                            (("2" (expand "convergence_zero?" 1)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand "convergence" -1)
                                  (("2"
                                    (expand "convergence" -1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (inst -2 "epsilon")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst 1 "delta")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -2 "car(x_1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -2)
                                                    (("1"
                                                      (expand "NQ")
                                                      (("1"
                                                        (expand
                                                         "norm_inf"
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "norm_inf"
                                                           1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "max"
                                                             1
                                                             1)
                                                            (("1"
                                                              (lift-if
                                                               1)
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "abs"
                                                                     1
                                                                     2)
                                                                    (("1"
                                                                      (lift-if
                                                                       1)
                                                                      (("1"
                                                                        (case
                                                                         "abs(car(lift_re(d, f)((: x :) + x_1) - lift_re(d, f)((: x :)) -
                                        (: (: lm :) :) * x_1))
                                / norm_inf(1)(x_1) =  abs(abs(car(lift_re(d, f)((: x :) + x_1) - lift_re(d, f)((: x :)) -
                                        (: (: lm :) :) * x_1))
                                / norm_inf(1)(x_1))")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           1)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1
                                                                             rl)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1
                                                                               rl)
                                                                              (("1"
                                                                                (expand
                                                                                 "lift_re"
                                                                                 1
                                                                                 1)
                                                                                (("1"
                                                                                  (hide
                                                                                   -4)
                                                                                  (("1"
                                                                                    (lift-if
                                                                                     1)
                                                                                    (("1"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "+"
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "add"
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "lift_re"
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "-"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "sub"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "add"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "scal")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "*"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "matvec")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "rows")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "length")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "length")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "*"
                                                                                                                       1
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "dot "
                                                                                                                         1
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "dot"
                                                                                                                           1
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "norm_inf"
                                                                                                                             1
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "norm_inf"
                                                                                                                               1
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "abs"
                                                                                                                                 1
                                                                                                                                 2)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "max"
                                                                                                                                   1
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "length"
                                                                                                                                     1
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "abs_div")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "car(x_1)"
                                                                                                                                         "(f(car(x_1) + x) - f(x) - lm * car(x_1))")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1
                                                                                                                                             1
                                                                                                                                             rl)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "x")
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "x_1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "NQ")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "lift_rd"
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "abs"
                                                                             1
                                                                             2)
                                                                            (("2"
                                                                              (lift-if
                                                                               1)
                                                                              (("2"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (mult-by
                                                                                       -1
                                                                                       "norm_inf(1)(x_1)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "x_1")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "norm_inf(1)")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "norm?"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -3
                                                                                                 "x_1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (typepred
                                                         "x_1")
                                                        (("2"
                                                          (expand
                                                           "fullset"
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide 2)
                                                      (("3"
                                                        (hide -1)
                                                        (("3"
                                                          (expand
                                                           "zero_vec"
                                                           -1)
                                                          (("3"
                                                            (expand
                                                             "zero_vec"
                                                             -1)
                                                            (("3"
                                                              (expand
                                                               "-"
                                                               -1)
                                                              (("3"
                                                                (expand
                                                                 "sub"
                                                                 -1)
                                                                (("3"
                                                                  (expand
                                                                   "scal"
                                                                   -1)
                                                                  (("3"
                                                                    (expand
                                                                     "scal"
                                                                     -1)
                                                                    (("3"
                                                                      (expand
                                                                       "add"
                                                                       -1)
                                                                      (("3"
                                                                        (expand
                                                                         "add"
                                                                         -1)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (typepred
                                                                             "x_1")
                                                                            (("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "x_1")
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "A")
                                                      (("2"
                                                        (expand
                                                         "NQ"
                                                         -3)
                                                        (("2"
                                                          (expand
                                                           "lift_rd"
                                                           -3)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide
                                                               -4
                                                               -5
                                                               -6
                                                               -7)
                                                              (("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((der_f_unique formula-decl nil convergence_vec2vec nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (d skolem-const-decl "{dd: real_dom | deriv_domain?[(dd)]}"
       lift_real_fun_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (lift_rd const-decl "domain[1]" lift_real_fun_def nil)
    (real_dom type-eq-decl nil lift_real_fun_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (lift_re const-decl "vec2vec[1](1)" lift_real_fun_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Matrix type-eq-decl nil matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "bool" differentiable_def nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (x skolem-const-decl "(d)" lift_real_fun_def nil)
    (f skolem-const-decl "[(d) -> real]" lift_real_fun_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (l!1 skolem-const-decl "real" lift_real_fun_def nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (* const-decl "real" matrices matrices)
    (abs_div formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dot def-decl "real" matrices matrices)
    (real_times_real_is_real application-judgement "real" reals nil)
    (matvec def-decl "VectorN(m)" mat_vec_mult nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm? const-decl "bool" norms nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (max def-decl "real" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (x_1 skolem-const-decl
     "{xx: (NQ[1](lift_rd(d), (: x :))) | xx /= zero_vec(1)}"
     lift_real_fun_def nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (lim const-decl "{l: real | convergence(f, x0, l)}"
     lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil))
   shostak))
 (liftr_TCC1 0
  (liftr_TCC1-1 nil 3852134310 ("" (subtype-tcc) nil nil)
   ((length_singleton formula-decl nil more_list_props structures)) nil
   (liftr subtype "(: lift_real_fun_def.f(lift_real_fun_def.v) :)"
    "matrices.VectorN(1)")))
 (lift_diff_right 0
  (lift_diff_right-1 nil 3853341998
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "differentiable?")
          (("1" (skeep)
            (("1" (inst 1 "(: g :)")
              (("1" (expand "convergence_zero?")
                (("1" (skeep)
                  (("1" (inst -1 "epsilon")
                    (("1" (skeep -1)
                      (("1" (inst 1 "delta")
                        (("1" (skeep)
                          (("1" (inst -1 "x")
                            (("1" (typepred "x")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "NQ" -5)
                                  (("1"
                                    (expand "NQ" 1)
                                    (("1"
                                      (expand "liftr" 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "NQ" -3)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "NOT (: f(p + x) :) - (: f(p) :) - (: g :) * x  = (: f(p + x) - f(p) - g * x :)")
                                              (("1"
                                                (hide -)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (replace -1 1)
                                                  (("2"
                                                    (expand
                                                     "norm_inf"
                                                     1)
                                                    (("2"
                                                      (expand
                                                       "norm_inf"
                                                       1)
                                                      (("2"
                                                        (case
                                                         "length( (: f(p + x) - f(p) - g * x :) ) = 1")
                                                        (("1"
                                                          (expand
                                                           "abs"
                                                           1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "max"
                                                               1
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "norm_inf"
                                                                   -7)
                                                                  (("1"
                                                                    (expand
                                                                     "norm_inf"
                                                                     -7)
                                                                    (("1"
                                                                      (lemma
                                                                       "abs_abs")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "max(abs(x)) = abs(max(abs(x)))")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "abs_div")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   " max(abs(x))"
                                                                                   "f(p + x) - f(p) - g * x")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     1
                                                                                     rl)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "abs_abs")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "(f(p + x) - f(p) - g * x) / max(abs(x))")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           1
                                                                                           lr)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "norm_inf(k)(x)")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "norm_inf(k)")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "norm?"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -3
                                                                                             "x")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "norm_inf"
                                                                                               -3)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "norm_inf"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "norm_inf(k)(x)")
                                                                                (("2"
                                                                                  (expand
                                                                                   "norm_inf"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "norm_inf"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "abs"
                                                                                       1
                                                                                       2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (typepred "i")
                  (("2" (expand "length" -1)
                    (("2" (expand "length" -1)
                      (("2" (expand "nth" 1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "differentiable?")
          (("2" (skeep)
            (("2" (inst 1 "car(T)")
              (("1" (expand "convergence_zero?")
                (("1" (skeep)
                  (("1" (inst -1 "epsilon")
                    (("1" (skeep)
                      (("1" (inst 1 "delta")
                        (("1" (skeep)
                          (("1" (inst -1 "x")
                            (("1" (assert)
                              (("1"
                                (expand "NQ")
                                (("1"
                                  (expand "liftr" -1)
                                  (("1"
                                    (typepred "x")
                                    (("1"
                                      (expand "NQ" -3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "NOT (norm_inf(1)((: f(p + x) :) - (: f(p) :) - T * x)) = abs((f(p + x) - f(p) - car(T) * x))")
                                            (("1"
                                              (hide 3 -1 -4 -5)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (grind 1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1)
                                              (("2"
                                                (case
                                                 "abs(abs((f(p + x) - f(p) - car(T) * x)) / norm_inf(k)(x)) =  abs((f(p + x) - f(p) - car(T) * x) / norm_inf(k)(x))")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide 2 3)
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (lemma "abs_div")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (lemma
                                                               "abs_div")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 " norm_inf(k)(x)"
                                                                 "(f(p + x) - f(p) - car(T) * x)")
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("2"
                                                                    (lemma
                                                                     "abs_abs")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "T")
                (("2" (inst -3 "0")
                  (("2" (expand "nth" -3) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (assert)
                (("3" (typepred "T")
                  (("3" (expand "length" -2) (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((differentiable? const-decl "bool" convergence_vec2vec nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (g skolem-const-decl "VectorN(k)" lift_real_fun_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (k skolem-const-decl "posnat" lift_real_fun_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (Matrix type-eq-decl nil matrices matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NQ const-decl "real" differentiable_def nil)
    (liftr const-decl "vec2vec[k](1)" lift_real_fun_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" matrices matrices)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (matvec def-decl "VectorN(m)" mat_vec_mult nil)
    (dot def-decl "real" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (max def-decl "real" norms nil)
    (abs_abs formula-decl nil real_props nil)
    (D skolem-const-decl "(deriv_domain?[k])" lift_real_fun_def nil)
    (p skolem-const-decl "(D)" lift_real_fun_def nil)
    (x skolem-const-decl "{xx: (NQ(D, p)) | xx /= zero_vec(k)}"
     lift_real_fun_def nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (norm? const-decl "bool" norms nil)
    (abs_div formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (T skolem-const-decl "MatrixMN(1, k)" lift_real_fun_def nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (lift_der_right_TCC1 0
  (lift_der_right_TCC1-1 nil 3853367722
   ("" (skeep) (("" (rewrite "dd_e_partial_implies_dd[k]") nil nil))
    nil)
   ((dd_e_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (lift_der_right subtype "lift_real_fun_def.D"
    "(derivative_domain_multi[lift_real_fun_def.k].deriv_domain?)")))
 (lift_der_right_TCC2 0
  (lift_der_right_TCC2-1 nil 3853367722
   ("" (skeep)
    (("" (lemma "lift_diff_right")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((lift_diff_right formula-decl nil lift_real_fun_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (lift_der_right subtype
    "lift_real_fun_def.liftr(lift_real_fun_def.k, lift_real_fun_def.D, lift_real_fun_def.f)"
    "{ff: domain_vec2real_def[lift_real_fun_def.k].vec2vec(1) | convergence_vec2vec[lift_real_fun_def.k].differentiable?(1, lift_real_fun_def.D, ff, lift_real_fun_def.p)}")))
 (lift_der_right 0
  (lift_der_right-1 nil 3853368253
   ("" (skeep)
    (("" (expand "der_f" 1)
      (("" (lemma "convergence_vec2vec[k].der_f_unique")
        (("" (inst?)
          (("" (assert)
            (("" (split 1)
              (("1" (expand "every" 1)
                (("1" (typepred "der_f[k](D, p)(f)")
                  (("1" (assert)
                    (("1" (expand "every" -1)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "every" 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep)
                  (("2" (typepred "i")
                    (("2" (expand "length" -1)
                      (("2" (expand "length" -1)
                        (("2" (expand "nth" 1) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (hide -1)
                  (("3" (typepred "der_f[k](D, p)(f)")
                    (("3" (hide -1 -2)
                      (("3" (expand "convergence_zero?")
                        (("3" (skeep)
                          (("3" (inst -1 "epsilon")
                            (("3" (skeep -1)
                              (("3"
                                (inst 1 "delta")
                                (("3"
                                  (skeep)
                                  (("3"
                                    (inst -1 "x")
                                    (("3"
                                      (typepred "x")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "NQ" -5)
                                          (("3"
                                            (expand "NQ" 1)
                                            (("3"
                                              (expand "liftr" 1)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (expand "NQ" -3)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (case
                                                       "NOT (: f(p + x) :) - (: f(p) :) - (: der_f[k](D, p)(f) :) * x  = (: f(p + x) - f(p) -   der_f[k](D, p)(f)  * x :)")
                                                      (("1"
                                                        (hide -)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "norm_inf"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "norm_inf"
                                                               1)
                                                              (("2"
                                                                (case
                                                                 "length( (: f(p + x) - f(p) - der_f[k](D, p)(f) * x :) ) = 1")
                                                                (("1"
                                                                  (expand
                                                                   "abs"
                                                                   1
                                                                   2)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "max"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "norm_inf"
                                                                           -7)
                                                                          (("1"
                                                                            (expand
                                                                             "norm_inf"
                                                                             -7)
                                                                            (("1"
                                                                              (lemma
                                                                               "abs_abs")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "max(abs(x)) = abs(max(abs(x)))")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "abs_div")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           " max(abs(x))"
                                                                                           "f(p + x) - f(p) - der_f[k](D, p)(f) * x")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             1
                                                                                             rl)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "abs_abs")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "(f(p + x) - f(p) - der_f[k](D, p)(f) * x) / max(abs(x))")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1
                                                                                                   lr)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "norm_inf(k)(x)")
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "norm_inf(k)")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "norm?"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -3
                                                                                                     "x")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "norm_inf"
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "norm_inf"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "norm_inf(k)(x)")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "norm_inf"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "norm_inf"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "abs"
                                                                                               1
                                                                                               2)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "length"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (length_singleton formula-decl nil more_list_props structures)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (liftr const-decl "vec2vec[k](1)" lift_real_fun_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (Matrix type-eq-decl nil matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "bool" differentiable_def nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (NQ const-decl "real" differentiable_def nil)
    (der_f const-decl
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     differentiable_def nil)
    (f skolem-const-decl "vec2real_f[k]" lift_real_fun_def nil)
    (p skolem-const-decl "(D)" lift_real_fun_def nil)
    (D skolem-const-decl "(deriv_domain_e_partial?[k])"
     lift_real_fun_def nil)
    (k skolem-const-decl "posnat" lift_real_fun_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" matrices matrices)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (matvec def-decl "VectorN(m)" mat_vec_mult nil)
    (dot def-decl "real" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (max def-decl "real" norms nil)
    (abs_abs formula-decl nil real_props nil)
    (x skolem-const-decl "{xx: (NQ[k](D, p)) | xx /= zero_vec(k)}"
     lift_real_fun_def nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (norm? const-decl "bool" norms nil)
    (abs_div formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (der_f_unique formula-decl nil convergence_vec2vec nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (same_on_D_same_diff 0
  (same_on_D_same_diff-1 nil 3852134320
   ("" (skeep)
    (("" (expand "differentiable?")
      (("" (skeep)
        (("" (inst 1 "T")
          (("" (expand "convergence_zero?")
            (("" (skeep 1)
              (("" (inst -2 "epsilon")
                (("" (skeep)
                  (("" (inst 1 "delta")
                    (("" (skeep)
                      (("" (inst -2 "x")
                        (("" (assert)
                          (("" (expand "NQ")
                            (("" (inst-cp -1 "p")
                              ((""
                                (inst -1 "p+x")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (typepred "x")
                                  (("2"
                                    (expand "NQ" -3)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((differentiable? const-decl "bool" convergence_vec2vec nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "{xx: (NQ(D, p)) | xx /= zero_vec(k)}"
     lift_real_fun_def nil)
    (p skolem-const-decl "(D)" lift_real_fun_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (D skolem-const-decl "(deriv_domain?[k])" lift_real_fun_def nil)
    (k skolem-const-decl "posnat" lift_real_fun_def nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (same_on_D_same_der_TCC1 0
  (same_on_D_same_der_TCC1-1 nil 3853880836
   ("" (skeep)
    (("" (lemma "same_on_D_same_diff")
      (("" (inst -1 "k" "D" "p" "f" "g") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((same_on_D_same_diff formula-decl nil lift_real_fun_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (same_on_D_same_der subtype "lift_real_fun_def.g"
    "{ff: domain_vec2real_def[lift_real_fun_def.k].vec2vec(1) | convergence_vec2vec[lift_real_fun_def.k].differentiable?(1, lift_real_fun_def.D, ff, lift_real_fun_def.p)}")))
 (same_on_D_same_der 0
  (same_on_D_same_der-1 nil 3853881202
   ("" (skeep)
    (("" (lemma "convergence_vec2vec[k].der_f_unique")
      (("" (inst -1 "1" "D" "f" "p" "der_f[k](1,D,p)(g)")
        (("1" (assert)
          (("1" (expand "der_f") (("1" (assert) nil nil)) nil)) nil)
         ("2" (hide 2)
          (("2" (typepred "der_f[k](1,D,p)(g)")
            (("2" (assert)
              (("2" (hide -1)
                (("2" (hide -5)
                  (("2" (expand "convergence_zero?")
                    (("2" (skeep)
                      (("2" (inst -3 "epsilon")
                        (("2" (skeep)
                          (("2" (inst 1 "delta")
                            (("2" (skeep)
                              (("2"
                                (inst -3 "x")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "NQ")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst-cp -5 "p")
                                        (("2"
                                          (inst-cp -5 "p+x")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (typepred "p")
                                              (("2"
                                                (typepred "x")
                                                (("2"
                                                  (expand "NQ" -3)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (der_f_unique formula-decl nil convergence_vec2vec nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (x skolem-const-decl "{xx: (NQ[k](D, p)) | xx /= zero_vec(k)}"
     lift_real_fun_def nil)
    (/= const-decl "boolean" notequal nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (k skolem-const-decl "posnat" lift_real_fun_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "bool" differentiable_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (D skolem-const-decl "(deriv_domain_e_partial?[k])"
     lift_real_fun_def nil)
    (p skolem-const-decl "(D)" lift_real_fun_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (Matrix type-eq-decl nil matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (NQ const-decl "real" convergence_vec2vec nil)
    (f skolem-const-decl "vec2vec[k](1)" lift_real_fun_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (g skolem-const-decl "vec2vec[k](1)" lift_real_fun_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak)))