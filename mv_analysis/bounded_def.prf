(bounded_def
 (ua_u 0
  (ua_u-1 nil 3737888030
   ("" (skeep)
    (("" (expand "unbounded_above?")
      (("" (expand "unbounded?")
        (("" (skeep)
          (("" (inst -1 "M")
            (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unbounded_above? const-decl "bool" bounded_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (unbounded? const-decl "bool" bounded_def nil))
   shostak))
 (ub_u 0
  (ub_u-1 nil 3737888322
   ("" (skeep)
    (("" (expand "unbounded?")
      (("" (expand "unbounded_below?")
        (("" (skeep)
          (("" (inst?)
            (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unbounded? const-decl "bool" bounded_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (unbounded_below? const-decl "bool" bounded_def nil))
   shostak))
 (u_uaob 0
  (u_uaob-1 nil 3737888351
   ("" (skeep)
    (("" (expand "unbounded?")
      (("" (expand "unbounded_below?")
        (("" (expand "unbounded_above?")
          (("" (skeep)
            (("" (skeep)
              (("" (inst -1 "max(M, M!1)")
                (("" (skeep)
                  (("" (inst?)
                    (("" (inst?)
                      (("" (assert)
                        (("" (expand "max")
                          (("" (assert)
                            (("" (lift-if)
                              ((""
                                (split)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unbounded? const-decl "bool" bounded_def nil)
    (unbounded_above? const-decl "bool" bounded_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (unbounded_below? const-decl "bool" bounded_def nil))
   shostak))
 (ua_u_op 0
  (ua_u_op-1 nil 3737888424
   ("" (skeep)
    (("" (expand "unbounded_op_above?")
      (("" (expand "unbounded_op?")
        (("" (skeep)
          (("" (inst?)
            (("" (assert)
              (("" (lemma "ua_u")
                (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unbounded_op_above? const-decl "bool" bounded_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (sequence type-eq-decl nil sequences nil)
    (ua_u formula-decl nil bounded_def nil)
    (feasible? const-decl "bool" fundamentals_constrained_optimization
     nil)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" bounded_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (unbounded_op? const-decl "bool" bounded_def nil))
   shostak))
 (ub_u_op 0
  (ub_u_op-1 nil 3737888512
   ("" (skeep)
    (("" (expand "unbounded_op?")
      (("" (expand "unbounded_op_above?")
        (("" (skeep)
          (("" (inst?)
            (("" (expand "unbounded_above?")
              (("" (expand "unbounded?")
                (("" (skeep)
                  (("" (inst -1 "M")
                    (("" (skeep)
                      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unbounded_op? const-decl "bool" bounded_def nil)
    (unbounded_above? const-decl "bool" bounded_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (unbounded? const-decl "bool" bounded_def nil)
    (feasible? const-decl "bool" fundamentals_constrained_optimization
     nil)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" bounded_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (unbounded_op_above? const-decl "bool" bounded_def nil))
   shostak))
 (u_uaob_op 0
  (u_uaob_op-1 nil 3737888544
   ("" (skeep)
    (("" (expand "unbounded_op?")
      (("" (expand "unbounded_op_below?")
        (("" (expand "unbounded_op_above?")
          (("" (skeep)
            (("" (inst?)
              (("" (inst?)
                (("" (lemma "u_uaob")
                  (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unbounded_op? const-decl "bool" bounded_def nil)
    (unbounded_op_above? const-decl "bool" bounded_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" bounded_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (feasible? const-decl "bool" fundamentals_constrained_optimization
     nil)
    (u_uaob formula-decl nil bounded_def nil)
    (sequence type-eq-decl nil sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (unbounded_op_below? const-decl "bool" bounded_def nil))
   shostak))
 (unbounded_below_no_glob_minimizer 0
  (unbounded_below_no_glob_minimizer-1 nil 3737888592
   ("" (skeep)
    (("" (skeep)
      (("" (expand "unbounded_op_below?")
        (("" (expand "is_glob_minimizer?")
          (("" (assert)
            (("" (skeep)
              (("" (expand "unbounded_below?")
                (("" (inst -1 "max(0, -floor(f(v)))")
                  (("1" (skeep)
                    (("1" (inst?)
                      (("1" (typepred "zk")
                        (("1" (inst -1 "N") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (is_glob_minimizer? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (v skolem-const-decl "VectorN(n)" bounded_def nil)
    (f skolem-const-decl "vec2real_f[n]" bounded_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" bounded_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (feasible? const-decl "bool" fundamentals_constrained_optimization
     nil)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (unbounded_below? const-decl "bool" bounded_def nil)
    (unbounded_op_below? const-decl "bool" bounded_def nil))
   shostak))
 (unbounded_above_no_glob_maximizer 0
  (unbounded_above_no_glob_maximizer-1 nil 3737888697
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (expand "unbounded_op_above?")
          (("" (expand "is_glob_maximizer?")
            (("" (assert)
              (("" (skeep)
                (("" (expand "unbounded_above?")
                  (("" (inst -1 "max(0, ceiling(f(v)))")
                    (("1" (skeep)
                      (("1" (inst -4 "zk(N)")
                        (("1" (assert)
                          (("1" (typepred "zk")
                            (("1" (inst -1 "N") nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (unbounded_op_above? const-decl "bool" bounded_def nil)
    (unbounded_above? const-decl "bool" bounded_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (feasible? const-decl "bool" fundamentals_constrained_optimization
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" bounded_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (f skolem-const-decl "vec2real_f[n]" bounded_def nil)
    (v skolem-const-decl "VectorN(n)" bounded_def nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (is_glob_maximizer? const-decl "bool"
     fundamentals_constrained_optimization nil))
   shostak))
 (unbounded_no_glob_minimizer_maximizer 0
  (no "no" 3737889549
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (expand "unbounded_op?")
          (("" (expand "is_glob_minimizer?")
            (("" (expand "is_glob_maximizer?")
              (("" (assert)
                (("" (skeep)
                  (("" (expand "unbounded?" -1)
                    ((""
                      (inst -1
                       "max(max(-floor(f(v)),ceiling(f(v!1))),0)")
                      (("1" (skeep)
                        (("1" (inst -7 "zk(N)")
                          (("1" (assert)
                            (("1" (inst -4 "zk(N)")
                              (("1"
                                (typepred "zk")
                                (("1"
                                  (inst -1 "N")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "max" -3)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred
                                                     "ceiling(f(v!1))")
                                                    (("1"
                                                      (typepred
                                                       "-floor(f(v))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide
                                                           -7
                                                           -9
                                                           -12)
                                                          (("1"
                                                            (expand
                                                             "abs"
                                                             -5)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide
                                                               -3
                                                               -5
                                                               -8)
                                                              (("2"
                                                                (typepred
                                                                 "floor(f(v))")
                                                                (("2"
                                                                  (typepred
                                                                   "ceiling(f(v!1))")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (unbounded_op? const-decl "bool" bounded_def nil)
    (is_glob_maximizer? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (v!1 skolem-const-decl "VectorN(n)" bounded_def nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (v skolem-const-decl "VectorN(n)" bounded_def nil)
    (f skolem-const-decl "vec2real_f[n]" bounded_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" bounded_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (feasible? const-decl "bool" fundamentals_constrained_optimization
     nil)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (unbounded? const-decl "bool" bounded_def nil)
    (is_glob_minimizer? const-decl "bool"
     fundamentals_constrained_optimization nil))
   shostak)
  (unbounded_no_glob_minimizer_maximizer-1 nil 3737889177
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (expand "unbounded_op?")
          (("" (expand "is_glob_minimizer?")
            (("" (expand "is_glob_maximizer?")
              (("" (assert)
                (("" (skeep)
                  (("" (expand "unbounded?")
                    (("" (assert)
                      ((""
                        (inst -1
                         "max(max(floor(f(v)), ceiling(f(v!1))), 0)")
                        (("1" (skeep)
                          (("1" (inst -4 "zk(N)")
                            (("1" (inst -7 "zk(N)")
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "zk")
                                  (("1"
                                    (inst -1 "N")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))