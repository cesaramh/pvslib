(linear_programming
 (lp_1_TCC1 0
  (lp_1_TCC1-1 nil 3738050346 ("" (subtype-tcc) nil nil) nil nil))
 (lp_1_TCC2 0
  (lp_1_TCC2-1 nil 3738050346
   ("" (flatten)
    (("" (skeep) (("" (assert) (("" (grind) nil nil)) nil)) nil)) nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     "matrices/")
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     "matrices/")
    (scal def-decl "VectorN(length(v2))" matrices "matrices/")
    (mult def-decl "Vector" matrix_vector_multiplication nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" linear_programming nil)
    (dot def-decl "real" matrices "matrices/"))
   nil))
 (lp_1_TCC3 0
  (lp_1_TCC3-1 nil 3738050346 ("" (subtype-tcc) nil nil) nil nil))
 (lp_1 0
  (lp_1-1 nil 3738050515
   ("" (flatten)
    (("" (expand "linear_program?")
      (("" (assert)
        (("" (inst 1 "(: 1 , 2 :)")
          (("1" (split)
            (("1" (skeep) nil nil)
             ("2" (decompose-equality)
              (("2" (replace -1 1) (("2" (assert) nil nil)) nil)) nil)
             ("3" (inst 1 "(: (: 1, 1 :), (: 1, 1 :) :)" "(: 2, 3 :)")
              (("1" (assert)
                (("1" (decompose-equality 1)
                  (("1" (replace -1 1) (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (grind) nil nil)
               ("3" (split)
                (("1" (grind) nil nil)
                 ("2" (skeep)
                  (("2" (replace -1 1)
                    (("2" (grind)
                      (("2" (expand "nth" 1)
                        (("2" (lift-if)
                          (("2" (split)
                            (("1" (grind) nil nil)
                             ("2" (grind)
                              (("2"
                                (expand "nth" 2)
                                (("2"
                                  (grind)
                                  (("2"
                                    (expand "nth" 3)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (split)
                                        (("1"
                                          (grind)
                                          (("1"
                                            (grind)
                                            (("1"
                                              (typepred "i")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (grind)
                                            (("2"
                                              (expand "nth" 2)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (grind)
                                                  (("1"
                                                    (expand "length" 2)
                                                    (("1"
                                                      (typepred "i")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "length" 3)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (grind)
                                                          (("1"
                                                            (typepred
                                                             "i")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "i")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace -1 1)
            (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((linear_program? const-decl "bool" linear_programming nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (n formal-const-decl "posnat" linear_programming nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (MatrixMN type-eq-decl nil matrices "matrices/")
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (mult def-decl "Vector" matrix_vector_multiplication nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil))
   shostak)))