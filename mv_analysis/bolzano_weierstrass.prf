(bolzano_weierstrass
 (bolzano_weier_m_TCC1 0
  (bolzano_weier_m_TCC1-1 nil 3742806993 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (* const-decl "VectorN(length(v2))" matrices "matrices/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (bolzano_weier_m 0
  (bolzano_weier_m-1 nil 3742807032
   ("" (lemma "B_W_m")
    (("" (skeep)
      (("" (inst -1 "m" "V")
        (("1" (skeep)
          (("1" (inst 1 "V2" "L")
            (("1" (lemma "convergence_equiv_m")
              (("1" (inst -1 "m" "V2" "L")
                (("1" (flatten)
                  (("1" (hide -2)
                    (("1" (split)
                      (("1" (propax) nil nil)
                       ("2" (expand "norm_1_convergence?")
                        (("2" (expand "convergence?")
                          (("2" (inst 1 "norm_1(m)") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "V")
          (("2" (lemma "equiv_norm_m")
            (("2" (inst -1 "m" "norm_1(m)" "nn")
              (("2" (expand "equiv_m?")
                (("2" (skeep)
                  (("2" (skeep)
                    (("2" (inst 1 "M/c1")
                      (("2" (skeep)
                        (("2" (inst -1 "V(i)")
                          (("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (mult-by 1 "c1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -3 "i")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (equiv_m? const-decl "bool" norms_equiv nil)
    (equiv_norm_m formula-decl nil norms_equiv_general nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (convergence_equiv_m formula-decl nil vector_sequences nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (norm_1_convergence? const-decl "bool" norm_1_defs nil)
    (subsequence? const-decl "bool" subsequences nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms nil)
    (norm_1 const-decl "(norm?(m))" norms nil)
    (m skolem-const-decl "posnat" bolzano_weierstrass nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (nn skolem-const-decl "(norm?(m))" bolzano_weierstrass nil)
    (V skolem-const-decl
     "{VV: vec_seq(m) | EXISTS (M: posreal): FORALL (i: nat): nn(VV(i)) < M}"
     bolzano_weierstrass nil)
    (B_W_m formula-decl nil norm_1_bolzano_weierstrass nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" bolzano_weierstrass nil))
   shostak))
 (bolzano_weier_TCC1 0
  (bolzano_weier_TCC1-1 nil 3742806993 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (n formal-const-decl "posnat" bolzano_weierstrass nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (* const-decl "VectorN(length(v2))" matrices "matrices/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (bolzano_weier 0
  (bolzano_weier-1 nil 3742807341
   ("" (lemma "bolzano_weier_m")
    (("" (skeep)
      (("" (inst -1 "n" "nn" "V")
        (("" (skeep)
          (("" (inst 1 "V2" "L")
            (("1" (expand "convergence?" 1) (("1" (propax) nil nil))
              nil)
             ("2" (typepred "V2")
              (("2" (expand "subsequence?") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (subsequence? const-decl "bool" subsequences nil)
    (nn skolem-const-decl "(norm?(n))" bolzano_weierstrass nil)
    (V skolem-const-decl
     "{VV: vec_seq(n) | EXISTS (M: posreal): FORALL (i: nat): nn(VV(i)) < M}"
     bolzano_weierstrass nil)
    (subsequence? const-decl "bool" subsequences nil)
    (V2 skolem-const-decl "(subsequence?(n)(V))" bolzano_weierstrass
     nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (n formal-const-decl "posnat" bolzano_weierstrass nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bolzano_weier_m formula-decl nil bolzano_weierstrass nil))
   shostak))
 (bolzano_weier_le_m 0
  (bolzano_weier_le_m-2 nil 3742807458
   ("" (lemma "B_W_m_le")
    (("" (skeep)
      (("" (inst -1 "m" "V")
        (("1" (skeep)
          (("1" (inst 1 "V2" "L")
            (("1" (expand "norm_1_convergence?")
              (("1" (lemma "convergence_equiv_m")
                (("1" (inst -1 "m" "V2" "L")
                  (("1" (flatten)
                    (("1" (hide -2)
                      (("1" (split)
                        (("1" (propax) nil nil)
                         ("2" (inst 1 "norm_1(m)")
                          (("2" (expand "convergence?")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "V")
          (("2" (lemma "equiv_norm_m")
            (("2" (inst -1 "m" "norm_1(m)" "nn")
              (("2" (expand "equiv_m?")
                (("2" (skeep)
                  (("2" (skeep)
                    (("2" (inst 1 "M/c1")
                      (("2" (skeep)
                        (("2" (inst -2 "i")
                          (("2" (inst -1 "V(i)")
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (mult-by 1 "c1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (equiv_m? const-decl "bool" norms_equiv nil)
    (equiv_norm_m formula-decl nil norms_equiv_general nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (norm_1_convergence? const-decl "bool" norm_1_defs nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (convergence_equiv_m formula-decl nil vector_sequences nil)
    (subsequence? const-decl "bool" subsequences nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms nil)
    (norm_1 const-decl "(norm?(m))" norms nil)
    (m skolem-const-decl "posnat" bolzano_weierstrass nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (nn skolem-const-decl "(norm?(m))" bolzano_weierstrass nil)
    (V skolem-const-decl
     "{VV: vec_seq(m) | EXISTS (M: posreal): FORALL (i: nat): nn(VV(i)) <= M}"
     bolzano_weierstrass nil)
    (B_W_m_le formula-decl nil norm_1_bolzano_weierstrass nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" bolzano_weierstrass nil))
   nil)
  (bolzano_weier_le_m-1 nil 3742807447 ("" (postpone) nil nil) nil
   shostak))
 (bolzano_weier_le 0
  (bolzano_weier_le-1 nil 3742807617
   ("" (lemma "bolzano_weier_le_m")
    (("" (skeep)
      (("" (inst -1 "n" "nn" "V")
        (("" (skeep)
          (("" (inst 1 "V2" "L")
            (("1" (expand "convergence?" 1) (("1" (propax) nil nil))
              nil)
             ("2" (typepred "V2")
              (("2" (expand "subsequence?" 1 1)
                (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (subsequence? const-decl "bool" subsequences nil)
    (nn skolem-const-decl "(norm?(n))" bolzano_weierstrass nil)
    (V skolem-const-decl
     "{VV: vec_seq(n) | EXISTS (M: posreal): FORALL (i: nat): nn(VV(i)) <= M}"
     bolzano_weierstrass nil)
    (subsequence? const-decl "bool" subsequences nil)
    (V2 skolem-const-decl "(subsequence?(n)(V))" bolzano_weierstrass
     nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (n formal-const-decl "posnat" bolzano_weierstrass nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bolzano_weier_le_m formula-decl nil bolzano_weierstrass nil))
   shostak)))