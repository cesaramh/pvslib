(chain_rule_multi
 (pre_chain_addzero_triag_TCC1 0
  (pre_chain_addzero_triag_TCC3-1 nil 3797677418
   ("" (skeep)
    (("" (typepred "p+hh" "p" "hh")
      (("" (hide -1 -3 -7) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((NQ const-decl "bool" differentiable_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_chain_addzero_triag subtype
    "(matrices.+)(chain_rule_multi.p, chain_rule_multi.hh)"
    "matrices.VectorN(chain_rule_multi.n)")))
 (pre_chain_addzero_triag_TCC2 0
  (pre_chain_addzero_triag_TCC1-1 nil 3797677418
   ("" (skeep) (("" (typepred "p") (("" (propax) nil nil)) nil)) nil)
   ((vec2vec type-eq-decl nil domain_vec2real_def nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_chain_addzero_triag subtype
    "chain_rule_multi.g(chain_rule_multi.p)" "(chain_rule_multi.Df)")))
 (pre_chain_addzero_triag_TCC3 0
  (pre_chain_addzero_triag_TCC2-1 nil 3797677418
   ("" (skeep)
    (("" (typepred "p+h" "p" "h")
      (("" (hide -10 -11)
        (("" (replace -4)
          (("" (replace -8)
            (("" (expand "max" -2) (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((NQ const-decl "bool" differentiable_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_chain_addzero_triag subtype
    "(matrices.+)(chain_rule_multi.p, chain_rule_multi.h)"
    "matrices.VectorN(chain_rule_multi.n)")))
 (pre_chain_addzero_triag_TCC4 0
  (pre_chain_addzero_triag_TCC9-1 nil 3797677418
   ("" (skeep)
    (("" (lemma "columns_mult")
      ((""
        (inst -1 "der_f[m1](m2, Df, g(p))(f)" "der_f[n](m1, Dg, p)(g)")
        (("" (assert)
          (("" (split -1)
            (("1" (replace -1 1)
              (("1" (typepred "h")
                (("1" (typepred "der_f[n](m1, Dg, p)(g)")
                  (("1" (hide -1)
                    (("1" (lemma "full_matrix_columns")
                      (("1" (inst -1 "der_f[n](m1, Dg, p)(g)")
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length" -3)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2"
                                (assert)
                                (("2"
                                  (inst -3 "0")
                                  (("2"
                                    (expand "nth" -3)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (lemma "MN_full")
                            (("2" (assert)
                              (("2"
                                (inst
                                 -1
                                 "m1"
                                 "n"
                                 "der_f[n](m1, Dg, p)(g)")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (lemma "full_matrix_columns")
                (("2" (lemma "columns_mult")
                  (("2" (typepred "der_f[m1](m2, Df, g(p))(f)")
                    (("2" (assert)
                      (("2" (expand "length" -2)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((columns_mult formula-decl nil matrices matrices)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (full_matrix_columns formula-decl nil matrices matrices)
    (MN_full judgement-tcc nil mat_vec_mult nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (p skolem-const-decl "{p: (Dg) | Df(g(p))}" chain_rule_multi nil)
    (g skolem-const-decl "vec2vec[n](m1)" chain_rule_multi nil)
    (Df skolem-const-decl "(deriv_domain?[m1])" chain_rule_multi nil)
    (Dg skolem-const-decl "(deriv_domain?[n])" chain_rule_multi nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_chain_addzero_triag subtype "chain_rule_multi.h"
    "matrices.VectorN(matrices.columns((matrices.*(convergence_vec2vec[chain_rule_multi.m1].der_f(chain_rule_multi.m2, chain_rule_multi.Df, chain_rule_multi.g(chain_rule_multi.p))(chain_rule_multi.f), convergence_vec2vec[chain_rule_multi.n].der_f(chain_rule_multi.m1, chain_rule_multi.Dg, chain_rule_multi.p)(chain_rule_multi.g)))))")))
 (pre_chain_addzero_triag_TCC5 0
  (pre_chain_addzero_triag_TCC4-1 nil 3797677418
   ("" (skeep)
    ((""
      (typepred " comp(f, g)(p + h) - comp(f, g)(p) -
              (der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g))*h "
       "comp(f, g)(p + h) " " comp(f, g)(p)"
       " (der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g))*h")
      (("" (hide -3 -5 -7)
        (("" (replace -5)
          (("" (typepred "comp(f, g)(p + h) - comp(f, g)(p)")
            (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
       matrices)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (* const-decl "real" matrices matrices)
    (entry const-decl "real" matrices matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (NQ const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (comp const-decl "vec2vec[n](m2)" chain_rule_multi nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_chain_addzero_triag subtype
    "(matrices.-)((matrices.-)(chain_rule_multi.comp(chain_rule_multi.f, chain_rule_multi.g)((matrices.+)(chain_rule_multi.p, chain_rule_multi.h)), chain_rule_multi.comp(chain_rule_multi.f, chain_rule_multi.g)(chain_rule_multi.p)), (mat_vec_mult.*((matrices.*(convergence_vec2vec[chain_rule_multi.m1].der_f(chain_rule_multi.m2, chain_rule_multi.Df, chain_rule_multi.g(chain_rule_multi.p))(chain_rule_multi.f), convergence_vec2vec[chain_rule_multi.n].der_f(chain_rule_multi.m1, chain_rule_multi.Dg, chain_rule_multi.p)(chain_rule_multi.g))), chain_rule_multi.h)))"
    "(list_adt[real].cons?)")))
 (pre_chain_addzero_triag_TCC6 0
  (pre_chain_addzero_triag_TCC6-1 nil 3797677418
   ("" (skeep)
    (("" (lemma "MN_full")
      (("" (inst -1 "m2" "m1" "der_f[m1](m2, Df, g(p))(f)")
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((MN_full judgement-tcc nil mat_vec_mult nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices matrices)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_chain_addzero_triag subtype
    "convergence_vec2vec[chain_rule_multi.m1].der_f(chain_rule_multi.m2, chain_rule_multi.Df, chain_rule_multi.g(chain_rule_multi.p))(chain_rule_multi.f)"
    "FullMatrix")))
 (pre_chain_addzero_triag_TCC7 0
  (pre_chain_addzero_triag_TCC7-1 nil 3797677418
   ("" (skeep)
    (("" (typepred "(g(p + h) - g(p))" "g(p+h)" "g(p)")
      (("" (hide -1 -3 -5)
        (("" (replace -2)
          (("" (replace -3)
            (("" (expand "max" -1)
              (("" (assert)
                (("" (replace -1 1)
                  (("" (lemma "MN_rc")
                    ((""
                      (inst -1 "m2" "m1" "der_f[m1](m2, Df, g(p))(f)")
                      (("" (assert)
                        (("" (flatten)
                          (("" (assert)
                            (("" (expand "rows")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NQ const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (Matrix type-eq-decl nil matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (rows const-decl "nat" matrices matrices)
    (MN_rc formula-decl nil mat_vec_mult nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_chain_addzero_triag subtype
    "((matrices.-)(chain_rule_multi.g((matrices.+)(chain_rule_multi.p, chain_rule_multi.h)), chain_rule_multi.g(chain_rule_multi.p)))"
    "matrices.VectorN(matrices.columns(convergence_vec2vec[chain_rule_multi.m1].der_f(chain_rule_multi.m2, chain_rule_multi.Df, chain_rule_multi.g(chain_rule_multi.p))(chain_rule_multi.f)))")))
 (pre_chain_addzero_triag_TCC8 0
  (pre_chain_addzero_triag_TCC12-1 nil 3797887638
   ("" (skeep)
    ((""
      (typepred "comp(f, g)(p + h) - comp(f, g)(p) -
            der_f[m1](m2, Df, g(p))(f) * (g(p + h) - g(p))"
       "(g(p + h) - g(p))" "comp(f, g)(p + h) - comp(f, g)(p)"
       "der_f[m1](m2, Df, g(p))(f) * (g(p + h) - g(p))"
       "der_f[m1](m2, Df, g(p))(f)")
      (("" (hide -1 -3 -5 -7 -9)
        (("" (replace -4)
          (("" (typepred "g(p+h)" "g(p)")
            (("" (hide -1 -3)
              (("" (replace -1)
                (("" (replace -2)
                  (("" (expand "max" -4)
                    (("" (typepred "comp(f, g)(p + h)" "comp(f, g)(p)")
                      (("" (hide -1 -3)
                        (("" (replace -1)
                          (("" (replace -2)
                            (("" (expand "max" -7)
                              ((""
                                (replace -7)
                                ((""
                                  (expand "rows" -5)
                                  ((""
                                    (expand "rows")
                                    ((""
                                      (replace -9)
                                      ((""
                                        (expand "max" -5)
                                        (("" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (NQ const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (comp const-decl "vec2vec[n](m2)" chain_rule_multi nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_chain_addzero_triag subtype
    "(matrices.-)((matrices.-)(chain_rule_multi.comp(chain_rule_multi.f, chain_rule_multi.g)((matrices.+)(chain_rule_multi.p, chain_rule_multi.h)), chain_rule_multi.comp(chain_rule_multi.f, chain_rule_multi.g)(chain_rule_multi.p)), mat_vec_mult.*(convergence_vec2vec[chain_rule_multi.m1].der_f(chain_rule_multi.m2, chain_rule_multi.Df, chain_rule_multi.g(chain_rule_multi.p))(chain_rule_multi.f), ((matrices.-)(chain_rule_multi.g((matrices.+)(chain_rule_multi.p, chain_rule_multi.h)), chain_rule_multi.g(chain_rule_multi.p)))))"
    "(list_adt[real].cons?)")))
 (pre_chain_addzero_triag_TCC9 0
  (pre_chain_addzero_triag_TCC10-1 nil 3797678415
   ("" (skeep)
    (("" (lemma "MN_full")
      (("" (inst -1 "m1" "n" "der_f[n](m1, Dg, p)(g)")
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((MN_full judgement-tcc nil mat_vec_mult nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices matrices)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_chain_addzero_triag subtype
    "convergence_vec2vec[chain_rule_multi.n].der_f(chain_rule_multi.m1, chain_rule_multi.Dg, chain_rule_multi.p)(chain_rule_multi.g)"
    "FullMatrix")))
 (pre_chain_addzero_triag_TCC10 0
  (pre_chain_addzero_triag_TCC10-1 nil 3797887638
   ("" (skeep)
    (("" (typepred "p" "der_f[n](m1, Dg, p)(g)")
      (("" (hide -1)
        (("" (hide -7)
          (("" (hide -6)
            (("" (lemma "full_matrix_columns")
              (("" (assert)
                (("" (inst -1 "der_f[n](m1, Dg, p)(g)")
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (typepred "der_f[n](m1, Dg, p)(g)")
                            (("1" (expand "length" -2)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (reveal -)
                        (("2" (inst -2 "0")
                          (("2" (assert)
                            (("2" (expand "nth" -)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "MN_full")
                    (("2" (inst -1 "m1" "n" "der_f[n](m1, Dg, p)(g)")
                      nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (full_matrix_columns formula-decl nil matrices matrices)
    (p skolem-const-decl "{p: (Dg) | Df(g(p))}" chain_rule_multi nil)
    (g skolem-const-decl "vec2vec[n](m1)" chain_rule_multi nil)
    (Df skolem-const-decl "(deriv_domain?[m1])" chain_rule_multi nil)
    (Dg skolem-const-decl "(deriv_domain?[n])" chain_rule_multi nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (MN_full judgement-tcc nil mat_vec_mult nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_chain_addzero_triag subtype "chain_rule_multi.h"
    "matrices.VectorN(matrices.columns(convergence_vec2vec[chain_rule_multi.n].der_f(chain_rule_multi.m1, chain_rule_multi.Dg, chain_rule_multi.p)(chain_rule_multi.g)))")))
 (pre_chain_addzero_triag_TCC11 0
  (pre_chain_addzero_triag_TCC8-1 nil 3797677418
   ("" (skeep)
    ((""
      (typepred "g(p + h) - g(p)" "der_f[n](m1, Dg, p)(g) * h"
       "g(p + h)" "g(p)" "der_f[n](m1, Dg, p)(g)")
      (("" (hide -1 -3 -5 -7 -9)
        (("" (assert)
          (("" (replace -3)
            (("" (replace -4)
              (("" (expand "max" -1)
                (("" (expand "rows")
                  ((""
                    (typepred
                     "(g(p + h) - g(p) - der_f[n](m1, Dg, p)(g) * h)")
                    (("" (hide -1)
                      (("" (replace -2)
                        (("" (replace -3)
                          (("" (replace -6)
                            (("" (expand "max" -1)
                              ((""
                                (lemma "full_matrix_columns")
                                ((""
                                  (inst
                                   -1
                                   "der_f[m1](m2, Df, g(p))(f)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (typepred
                                           "der_f[m1](m2, Df, g(p))(f)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "length" -2)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst -8 "0")
                                        (("2"
                                          (expand "nth" -)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -1 1)
                                              (("2"
                                                (typepred
                                                 "der_f[m1](m2, Df, g(p))(f)")
                                                (("2"
                                                  (inst -3 "0")
                                                  (("2"
                                                    (expand "nth" -3)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "MN_full")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst
                                         -1
                                         "m2"
                                         "m1"
                                         "der_f[m1](m2, Df, g(p))(f)")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (NQ const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (Df skolem-const-decl "(deriv_domain?[m1])" chain_rule_multi nil)
    (g skolem-const-decl "vec2vec[n](m1)" chain_rule_multi nil)
    (Dg skolem-const-decl "(deriv_domain?[n])" chain_rule_multi nil)
    (p skolem-const-decl "{p: (Dg) | Df(g(p))}" chain_rule_multi nil)
    (f skolem-const-decl "vec2vec[m1](m2)" chain_rule_multi nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (MN_full judgement-tcc nil mat_vec_mult nil)
    (full_matrix_columns formula-decl nil matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_chain_addzero_triag subtype
    "((matrices.-)((matrices.-)(chain_rule_multi.g((matrices.+)(chain_rule_multi.p, chain_rule_multi.h)), chain_rule_multi.g(chain_rule_multi.p)), mat_vec_mult.*(convergence_vec2vec[chain_rule_multi.n].der_f(chain_rule_multi.m1, chain_rule_multi.Dg, chain_rule_multi.p)(chain_rule_multi.g), chain_rule_multi.h)))"
    "matrices.VectorN(matrices.columns(convergence_vec2vec[chain_rule_multi.m1].der_f(chain_rule_multi.m2, chain_rule_multi.Df, chain_rule_multi.g(chain_rule_multi.p))(chain_rule_multi.f)))")))
 (pre_chain_addzero_triag_TCC12 0
  (pre_chain_addzero_triag_TCC11-1 nil 3797887638
   ("" (skeep)
    ((""
      (typepred "der_f[m1](m2, Df, g(p))(f) *
            (g(p + h) - g(p) - der_f[n](m1, Dg, p)(g) * h)")
      (("" (hide -1)
        (("" (expand "rows" -1)
          (("" (typepred "der_f[m1](m2, Df, g(p))(f)")
            (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_chain_addzero_triag subtype
    "mat_vec_mult.*(convergence_vec2vec[chain_rule_multi.m1].der_f(chain_rule_multi.m2, chain_rule_multi.Df, chain_rule_multi.g(chain_rule_multi.p))(chain_rule_multi.f), ((matrices.-)((matrices.-)(chain_rule_multi.g((matrices.+)(chain_rule_multi.p, chain_rule_multi.h)), chain_rule_multi.g(chain_rule_multi.p)), mat_vec_mult.*(convergence_vec2vec[chain_rule_multi.n].der_f(chain_rule_multi.m1, chain_rule_multi.Dg, chain_rule_multi.p)(chain_rule_multi.g), chain_rule_multi.h))))"
    "(list_adt[real].cons?)")))
 (pre_chain_addzero_triag 0
  (pre_chain_addzero_triag-1 nil 3797705890
   ("" (skeep)
    (("" (lemma "matv_add_zero")
      ((""
        (inst -1 "der_f[m1](m2, Df, g(p))(f)" "der_f[n](m1, Dg, p)(g)"
         "(comp(f, g)(p + h) - comp(f, g)(p))" "h" "g(p + h) - g(p)")
        (("1" (assert)
          (("1" (replace -1 1)
            (("1" (typepred "norm_inf(m2)")
              (("1" (expand "norm?" -1)
                (("1" (flatten)
                  (("1"
                    (inst -4 "(comp(f, g)(p + h) - comp(f, g)(p)) -
                    (der_f[m1](m2, Df, g(p))(f) * (g(p + h) - g(p)))"
                     " der_f[m1](m2, Df, g(p))(f) *
                     (g(p + h) - g(p) - der_f[n](m1, Dg, p)(g) * h)")
                    (("1" (assert) nil nil)
                     ("2"
                      (typepred "der_f[m1](m2, Df, g(p))(f) *
            (g(p + h) - g(p) - der_f[n](m1, Dg, p)(g) * h)")
                      (("2" (assert)
                        (("2" (expand "rows" -2)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (assert)
                      (("3" (hide -)
                        (("3" (hide 2)
                          (("3"
                            (typepred
                             "(comp(f, g)(p + h) - comp(f, g)(p)) -
            (der_f[m1](m2, Df, g(p))(f) * (g(p + h) - g(p)))"
                             "comp(f, g)(p + h) - comp(f, g)(p)"
                             "(der_f[m1](m2, Df, g(p))(f) * (g(p + h) - g(p)))"
                             "comp(f, g)(p + h)" "comp(f, g)(p)"
                             "der_f[m1](m2, Df, g(p))(f)")
                            (("3" (hide -1 -3 -5 -7 -9 -11)
                              (("3"
                                (replace -4)
                                (("3"
                                  (replace -5)
                                  (("3"
                                    (expand "rows" -)
                                    (("3"
                                      (replace -6)
                                      (("3"
                                        (expand "max" -2)
                                        (("3"
                                          (replace -2)
                                          (("3"
                                            (replace -3)
                                            (("3"
                                              (expand "max" -1)
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (hide 2)
            (("2" (expand "rows")
              (("2"
                (typepred "comp(f, g)(p + h) - comp(f, g)(p)"
                 "comp(f, g)(p + h)" "comp(f, g)(p)"
                 "der_f[m1](m2, Df, g(p))(f)")
                (("2" (hide -1 -3 -5 -7)
                  (("2" (replace -2)
                    (("2" (replace -3)
                      (("2" (replace -4)
                        (("2" (expand "max" -1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (assert)
          (("3" (hide 2)
            (("3" (lemma "MN_rc")
              (("3" (inst-cp -1 "m2" "m1" "der_f[m1](m2, Df, g(p))(f)")
                (("3" (inst -1 "m1" "n" "der_f[n](m1, Dg, p)(g)")
                  (("3" (assert)
                    (("3" (split -1)
                      (("1" (split -2)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (expand "rows")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "rows") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (hide 2)
          (("4" (lemma "MN_rc")
            (("4" (inst -1 "m2" "m1" "der_f[m1](m2, Df, g(p))(f)")
              (("4" (assert)
                (("4" (split -1)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (expand "rows") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((matv_add_zero formula-decl nil mat_vec_mult nil)
    (MN_rc formula-decl nil mat_vec_mult nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (comp const-decl "vec2vec[n](m2)" chain_rule_multi nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (h skolem-const-decl "{hh: (NQ(Dg, p)) | Df(g(p + hh))}"
     chain_rule_multi nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "bool" differentiable_def nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (Df skolem-const-decl "(deriv_domain?[m1])" chain_rule_multi nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (g skolem-const-decl "vec2vec[n](m1)" chain_rule_multi nil)
    (Dg skolem-const-decl "(deriv_domain?[n])" chain_rule_multi nil)
    (p skolem-const-decl "{p: (Dg) | Df(g(p))}" chain_rule_multi nil)
    (f skolem-const-decl "vec2vec[m1](m2)" chain_rule_multi nil)
    (rows const-decl "nat" matrices matrices)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (pre_chain_bound_TCC1 0
  (pre_chain_bound_TCC1-1 nil 3798152155 ("" (subtype-tcc) nil nil) nil
   nil
   (pre_chain_bound subtype "chain_rule_multi.g(chain_rule_multi.p)"
    "(chain_rule_multi.Df)")))
 (pre_chain_bound_TCC2 0
  (pre_chain_bound_TCC9-1 nil 3798071167
   ("" (skeep*)
    ((""
      (typepred "(g(p + h) - g(p) - der_f[n](m1, Dg, p)(g) * h)"
       "g(p + h) - g(p)" "der_f[n](m1, Dg, p)(g) * h" "g(p+h)" "g(p)"
       "der_f[n](m1, Dg, p)(g) ")
      (("" (hide -1 -3 -5 -7 -9 -11)
        (("" (replace -4)
          (("" (replace -5)
            (("" (expand "max" -2)
              (("" (replace -2)
                (("" (expand "rows")
                  (("" (replace -3)
                    (("" (replace -6)
                      (("" (expand "max" -1) (("" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (NQ const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_chain_bound subtype
    "((matrices.-)((matrices.-)(chain_rule_multi.g((matrices.+)(chain_rule_multi.p, chain_rule_multi.h)), chain_rule_multi.g(chain_rule_multi.p)), mat_vec_mult.*(convergence_vec2vec[chain_rule_multi.n].der_f(chain_rule_multi.m1, chain_rule_multi.Dg, chain_rule_multi.p)(chain_rule_multi.g), chain_rule_multi.h)))"
    "(list_adt[real].cons?)")))
 (pre_chain_bound 0
  (pre_chain_bound-1 nil 3798108199
   ("" (skeep*)
    (("" (lemma "pre_chain_addzero_triag")
      ((""
        (inst 1 "(columns(der_f[m1](m2, Df, g(p))(f)) *
                max_a(der_f[m1](m2, Df, g(p))(f))+1)")
        (("1" (skeep*)
          (("1" (inst?)
            (("1" (assert)
              (("1" (lemma "matv_norm_inf")
                (("1"
                  (inst -1 "der_f[m1](m2, Df, g(p))(f)"
                   "(g(p + h) - g(p) - der_f[n](m1, Dg, p)(g) * h)")
                  (("1" (assert)
                    (("1" (hide -3 -4)
                      (("1" (expand "norm_inf")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (hide -)
                      (("2" (lemma "MN_rc")
                        (("2"
                          (inst -1 "m2" "m1"
                           "der_f[m1](m2, Df, g(p))(f)")
                          (("2" (assert)
                            (("2" (expand "rows" -1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "MN_full")
          (("2" (inst -1 "m2" "m1" "(der_f[m1](m2, Df, g(p))(f))") nil
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pre_chain_addzero_triag formula-decl nil chain_rule_multi nil)
    (MN_full judgement-tcc nil mat_vec_mult nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (MN_rc formula-decl nil mat_vec_mult nil)
    (matv_norm_inf formula-decl nil mat_vec_mult nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (max_a def-decl "nnreal" mat_vec_mult nil)
    (nnreal type-eq-decl nil real_types nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (<= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Matrix type-eq-decl nil matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "bool" differentiable_def nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (Df skolem-const-decl "(deriv_domain?[m1])" chain_rule_multi nil)
    (f skolem-const-decl "vec2vec[m1](m2)" chain_rule_multi nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (g skolem-const-decl "vec2vec[n](m1)" chain_rule_multi nil)
    (Dg skolem-const-decl "(deriv_domain?[n])" chain_rule_multi nil)
    (p skolem-const-decl "{p: (Dg) | Df(g(p))}" chain_rule_multi nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (g_diff_Meps2_bound_TCC1 0
  (g_diff_Meps2_bound_TCC1-1 nil 3798109628 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (NQ const-decl "bool" differentiable_def nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (Matrix type-eq-decl nil matrices matrices)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (g_diff_Meps2_bound subtype "chain_rule_multi.h"
    "(list_adt[real].cons?)")))
 (g_diff_Meps2_bound_TCC2 0
  (g_diff_Meps2_bound_TCC2-1 nil 3798109628
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "p+h" "p" "h")
        (("" (replace -4)
          (("" (replace -7)
            (("" (expand "max" -2) (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (NQ const-decl "bool" differentiable_def nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_diff_Meps2_bound subtype
    "(matrices.+)(chain_rule_multi.p, chain_rule_multi.h)"
    "matrices.VectorN(chain_rule_multi.n)")))
 (g_diff_Meps2_bound_TCC3 0
  (g_diff_Meps2_bound_TCC3-1 nil 3798109628
   ("" (skeep)
    (("" (lemma "MN_full")
      (("" (inst -1 "m1" "n" "der_f[n](m1, Dg, p)(g)")
        (("" (assert) (("" (skeep) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((MN_full judgement-tcc nil mat_vec_mult nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (Dg skolem-const-decl "(deriv_domain?[n])" chain_rule_multi nil)
    (g skolem-const-decl "vec2vec[n](m1)" chain_rule_multi nil)
    (p skolem-const-decl "(Dg)" chain_rule_multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_diff_Meps2_bound subtype
    "convergence_vec2vec[chain_rule_multi.n].der_f(chain_rule_multi.m1, chain_rule_multi.Dg, chain_rule_multi.p)(chain_rule_multi.g)"
    "FullMatrix")))
 (g_diff_Meps2_bound_TCC4 0
  (g_diff_Meps2_bound_TCC4-1 nil 3798109628
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (lemma "MN_rc")
          (("" (inst -1 "m1" "n" "der_f[n](m1, Dg, p)(g)")
            (("" (assert)
              (("" (flatten)
                (("" (expand "rows") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((MN_rc formula-decl nil mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices matrices)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_diff_Meps2_bound subtype "chain_rule_multi.h"
    "matrices.VectorN(matrices.columns(convergence_vec2vec[chain_rule_multi.n].der_f(chain_rule_multi.m1, chain_rule_multi.Dg, chain_rule_multi.p)(chain_rule_multi.g)))")))
 (g_diff_Meps2_bound_TCC5 0
  (g_diff_Meps2_bound_TCC5-1 nil 3798109628
   ("" (skeep)
    (("" (skeep)
      ((""
        (typepred "g(p + h) - g(p) - der_f[n](m1, Dg, p)(g) * h"
         "g(p + h) - g(p)" "der_f[n](m1, Dg, p)(g) * h"
         "der_f[n](m1, Dg, p)(g) " "g(p+h)" "g(p)")
        (("" (hide -1 -3 -5 -7)
          (("" (replace -8)
            (("" (replace -10)
              (("" (expand "max" -2)
                (("" (replace -2)
                  (("" (replace -3)
                    (("" (expand "rows")
                      (("" (replace -4)
                        (("" (expand "max" -1) (("" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (NQ const-decl "bool" differentiable_def nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (Matrix type-eq-decl nil matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_diff_Meps2_bound subtype
    "((matrices.-)((matrices.-)(chain_rule_multi.g((matrices.+)(chain_rule_multi.p, chain_rule_multi.h)), chain_rule_multi.g(chain_rule_multi.p)), mat_vec_mult.*(convergence_vec2vec[chain_rule_multi.n].der_f(chain_rule_multi.m1, chain_rule_multi.Dg, chain_rule_multi.p)(chain_rule_multi.g), chain_rule_multi.h)))"
    "(list_adt[real].cons?)")))
 (g_diff_Meps2_bound_TCC6 0
  (g_diff_Meps2_bound_TCC6-1 nil 3798110088
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "h")
        (("" (typepred "norm_inf(n)")
          (("" (expand "norm?" -1)
            (("" (flatten)
              (("" (inst -3 "h") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (g_diff_Meps2_bound subtype
    "norms.norm_inf(chain_rule_multi.n)(chain_rule_multi.h)" "nznum")))
 (g_diff_Meps2_bound 0
  (g_diff_Meps2_bound-1 nil 3798109942
   ("" (skeep*)
    (("" (typepred " der_f[n](m1, Dg, p)(g)")
      (("1" (hide -1)
        (("1" (expand "convergence_zero?" -3)
          (("1" (inst -3 "epsilon/(2*M)")
            (("1" (skeep)
              (("1" (inst 1 "delta")
                (("1" (skeep)
                  (("1" (inst -3 "h")
                    (("1" (assert)
                      (("1" (expand "NQ" -3)
                        (("1" (typepred "h")
                          (("1" (split -7)
                            (("1" (hide -2)
                              (("1"
                                (case
                                 "abs(norm_inf(m1)(g(p + h) - g(p) - der_f[n](m1, Dg, p)(g) * h) /
                      norm_inf(n)(h)) = norm_inf(m1)(g(p + h) - g(p) - der_f[n](m1, Dg, p)(g) * h) /
                      norm_inf(n)(h)")
                                (("1"
                                  (replace -1 -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (mult-by -2 "M")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand "abs" 1 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lift-if 1)
                                        (("2"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (mult-by
                                                 -1
                                                 "norm_inf(n)(h)")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (typepred
                                                   "norm_inf(n)")
                                                  (("2"
                                                    (expand "norm?" -1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst -3 "h")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (lemma "sub_zero")
                                (("2"
                                  (inst -1 "h")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (propax) nil nil))
      nil))
    nil)
   ((m1 formal-const-decl "posnat" chain_rule_multi nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub_zero formula-decl nil vector_arithmetic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Dg skolem-const-decl "(deriv_domain?[n])" chain_rule_multi nil)
    (p skolem-const-decl "(Dg)" chain_rule_multi nil)
    (h skolem-const-decl "{hh: (NQ(Dg, p)) | hh /= zero_vec(n)}"
     chain_rule_multi nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (f_diff_Meps2_bound 0
  (f_diff_Meps2_bound-1 nil 3798112744
   ("" (skeep)
    (("" (skeep)
      (("" (typepred " der_f[m1](m2, Df, g(p))(f)")
        (("1" (expand "convergence_zero?" -4)
          (("1" (lemma "pre_diff_cont[n]")
            (("1" (inst -1 "m1" "Dg" "p" "g")
              (("1" (skeep)
                (("1" (inst -5 "epsilon/(2*M)")
                  (("1" (skeep)
                    (("1" (expand "NQ" -5)
                      (("1" (inst 1 "min(del,delta/M)")
                        (("1" (skeep)
                          (("1" (typepred "h")
                            (("1" (inst -6 "h")
                              (("1"
                                (inst -10 "g(p + h) - g(p)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -10)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "abs(norm_inf(m2)
                                 (f(g(p) + (g(p + h) - g(p))) - f(g(p)) -
                                   der_f[m1](m2, Df, g(p))(f) * (g(p + h) - g(p)))
                          / norm_inf(m1)(g(p + h) - g(p))) = norm_inf(m2)
                                 (f(g(p) + (g(p + h) - g(p))) - f(g(p)) -
                                   der_f[m1](m2, Df, g(p))(f) * (g(p + h) - g(p)))
                          / norm_inf(m1)(g(p + h) - g(p))")
                                        (("1"
                                          (replace -1 -2)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (typepred "h")
                                              (("1"
                                                (mult-by
                                                 -6
                                                 "norm_inf(m1)(g(p + h) - g(p))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "comp" 1)
                                                    (("1"
                                                      (case
                                                       "g(p) + (g(p + h) - g(p)) = g(p+h)")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (mult-by
                                                             1
                                                             "norm_inf(n)(h)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "epsilon / (2 * M) * norm_inf(m1)(g(p + h) - g(p)) < epsilon / 2 * norm_inf(n)(h)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (mult-by
                                                                     1
                                                                     "2")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "NOT  2 * (norm_inf(n)(h) * (epsilon / 2)) = norm_inf(n)(h) * (epsilon)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (case
                                                                             "NOT  2 * (norm_inf(m1)(g(p + h) - g(p)) * (epsilon / (2 * M))) =  (norm_inf(m1)(g(p + h) - g(p)) * (epsilon /  M))")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (mult-by
                                                                                   1
                                                                                   "M")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "NOT (norm_inf(m1)(g(p + h) - g(p)) * (epsilon / M)) * M = norm_inf(m1)(g(p + h) - g(p)) * (epsilon )")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (div-by
                                                                                           1
                                                                                           "epsilon")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -)
                                                        (("2"
                                                          (lemma
                                                           "sub_sandwich")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "g(p)"
                                                             "g(p+h)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 " (g(p) + g(p + h) - g(p)) =  g(p) + (g(p + h) - g(p))")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (lemma
                                                                       "asso_add")
                                                                      (("2"
                                                                        (expand
                                                                         "-"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "sub"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "+"
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "+"
                                                                               1)
                                                                              (("2"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "scal(-1,g(p))"
                                                                                     "g(p)")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (typepred
                                                                                   "g(add(p, h))")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -1)
                                                  (("2"
                                                    (hide -)
                                                    (("2"
                                                      (typepred
                                                       "norm_inf(m1)")
                                                      (("2"
                                                        (expand
                                                         "norm?"
                                                         -1)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "g(p + h) - g(p)")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -4)
                                                                  (("1"
                                                                    (lemma
                                                                     "diff_zero")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "m1"
                                                                       "g(p+h)"
                                                                       "g(p)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "comp"
                                                                           2)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             2)
                                                                            (("1"
                                                                              (lemma
                                                                               "sub_self")
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -1
                                                                                 "f(g(p))")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   "g(p)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "matv_zerovec")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "der_f[m1](m2, Df, g(p))(f)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "MN_rc")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "m2"
                                                                                                 "m1"
                                                                                                 "der_f[m1](m2, Df, g(p))(f)")
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "g(p)")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -5)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "sub_zero")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "zero_vec(length(f(g(p))))")
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "f(g(p))")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -2)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "zero_vec(m2)")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -5)
                                                                                                                            (("1"
                                                                                                                              (typepred
                                                                                                                               "norm_inf(m2)")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "norm?"
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -3
                                                                                                                                     "zero_vec(m2)")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "rows"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "g(p + h) - g(p)"
                                                                 "g(p+h)"
                                                                 "g(p)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -4)
                                                                    (("2"
                                                                      (replace
                                                                       -6)
                                                                      (("2"
                                                                        (expand
                                                                         "max"
                                                                         -2)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (hide -)
                                            (("2"
                                              (expand "abs" 1 1)
                                              (("2"
                                                (lift-if 1)
                                                (("2"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (mult-by
                                                         -1
                                                         "norm_inf(m1)(g(p + h) - g(p))")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (reveal +)
                                                            (("2"
                                                              (hide 1)
                                                              (("2"
                                                                (expand
                                                                 "comp")
                                                                (("2"
                                                                  (typepred
                                                                   "norm_inf(m1)")
                                                                  (("2"
                                                                    (expand
                                                                     "norm?"
                                                                     -1)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (inst
                                                                         -3
                                                                         "g(p + h) - g(p)")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               -1
                                                                               -2
                                                                               -4)
                                                                              (("1"
                                                                                (lemma
                                                                                 "diff_zero")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "m1"
                                                                                   "g(p+h)"
                                                                                   "g(p)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "sub_self")
                                                                                          (("1"
                                                                                            (inst-cp
                                                                                             -1
                                                                                             "f(g(p))")
                                                                                            (("1"
                                                                                              (inst-cp
                                                                                               -1
                                                                                               "g(p)")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "matv_zerovec")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "der_f[m1](m2, Df, g(p))(f)")
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "MN_rc")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "m2"
                                                                                                             "m1"
                                                                                                             "der_f[m1](m2, Df, g(p))(f)")
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "g(p)")
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -5)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "sub_zero")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "zero_vec(length(f(g(p))))")
                                                                                                                              (("1"
                                                                                                                                (typepred
                                                                                                                                 "f(g(p))")
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (typepred
                                                                                                                                     "zero_vec(m2)")
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -5)
                                                                                                                                        (("1"
                                                                                                                                          (typepred
                                                                                                                                           "norm_inf(m2)")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "norm?"
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -3
                                                                                                                                                 "zero_vec(m2)")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "rows"
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "g(p + h) - g(p)"
                                                                             "g(p+h)"
                                                                             "g(p)")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -4)
                                                                                (("2"
                                                                                  (replace
                                                                                   -6)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "max"
                                                                                     -2)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (case
                                         "g(p + h) - g(p) - zero_vec(m1) = g(p+h)-g(p)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (expand "min" -13)
                                              (("1"
                                                (lift-if -13)
                                                (("1"
                                                  (split -13)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (mult-by
                                                         -1
                                                         "M")
                                                        (("1"
                                                          (mult-by
                                                           -2
                                                           "M")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (mult-by 1 "M")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (flip-ineq
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (mult-by
                                                                 -2
                                                                 "M")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "sub_zero")
                                          (("2"
                                            (inst -1 "g(p+h)-g(p)")
                                            (("2"
                                              (case
                                               "length(g(p + h) - g(p))=m1")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (typepred
                                                 "g(p+h)-g(p)"
                                                 "g(p+h)"
                                                 "g(p)")
                                                (("2"
                                                  (replace -4)
                                                  (("2"
                                                    (replace -6)
                                                    (("2"
                                                      (hide -5 -8)
                                                      (("2"
                                                        (expand
                                                         "max"
                                                         -2)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (typepred
                                       "g(p+h)-g(p)"
                                       "g(p+h)"
                                       "g(p)")
                                      (("2"
                                        (hide -7)
                                        (("2"
                                          (hide -5)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -4)
                                              (("2"
                                                (replace -5)
                                                (("2"
                                                  (expand "max" -)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "NQ" 1 1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred
                                                           "h")
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (expand
                                                               "NQ"
                                                               -11)
                                                              (("2"
                                                                (reveal
                                                                 -)
                                                                (("2"
                                                                  (hide
                                                                   -3)
                                                                  (("2"
                                                                    (hide
                                                                     -3)
                                                                    (("2"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("2"
                                                                        (typepred
                                                                         "p")
                                                                        (("2"
                                                                          (case
                                                                           "g(p) + (g(p + h) - g(p)) = g(p+h)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "diff_zero")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "m1"
                                                                                 "g(p+h)"
                                                                                 "g(p)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -8
                                                                                     -9
                                                                                     -10
                                                                                     -11
                                                                                     -12
                                                                                     -13
                                                                                     -14
                                                                                     -15
                                                                                     -16
                                                                                     -17
                                                                                     -18
                                                                                     -19
                                                                                     -20
                                                                                     -21
                                                                                     -22
                                                                                     -23
                                                                                     -24
                                                                                     -25
                                                                                     -26
                                                                                     -27)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "sub_self")
                                                                                        (("1"
                                                                                          (inst-cp
                                                                                           -1
                                                                                           "f(g(p))")
                                                                                          (("1"
                                                                                            (inst-cp
                                                                                             -1
                                                                                             "g(p)")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "comp"
                                                                                                 3)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "matv_zerovec")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "der_f[m1](m2, Df, g(p))(f)")
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "MN_rc")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "m2"
                                                                                                                 "m1"
                                                                                                                 "der_f[m1](m2, Df, g(p))(f)")
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "g(p)")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -5)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "sub_zero")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "zero_vec(length(f(g(p))))")
                                                                                                                                  (("1"
                                                                                                                                    (typepred
                                                                                                                                     "f(g(p))")
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (typepred
                                                                                                                                         "zero_vec(m2)")
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -2)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -5)
                                                                                                                                            (("1"
                                                                                                                                              (typepred
                                                                                                                                               "norm_inf(m2)")
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "norm?"
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -3
                                                                                                                                                     "zero_vec(m2)")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "rows"
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "f(g(p))")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -)
                                                                            (("2"
                                                                              (lemma
                                                                               "sub_sandwich")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "g(p)"
                                                                                 "g(p+h)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (case
                                                                                     " (g(p) + g(p + h) - g(p)) =  g(p) + (g(p + h) - g(p))")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "asso_add")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "-"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "sub"
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "+"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "+"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "scal(-1,g(p))"
                                                                                                         "g(p)")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (typepred
                                                                                                       "g(add(p, h))")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (propax) nil nil))
        nil))
      nil))
    nil)
   ((Dg skolem-const-decl "(deriv_domain?[n])" chain_rule_multi nil)
    (g skolem-const-decl "vec2vec[n](m1)" chain_rule_multi nil)
    (Df skolem-const-decl "(deriv_domain?[m1])" chain_rule_multi nil)
    (p skolem-const-decl "{p: (Dg) | Df(g(p))}" chain_rule_multi nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (h skolem-const-decl
     "{hh: (NQ(Dg, p)) | Df(g(p + hh)) AND hh /= zero_vec(n)}"
     chain_rule_multi nil)
    (del skolem-const-decl "posreal" chain_rule_multi nil)
    (f skolem-const-decl "vec2vec[m1](m2)" chain_rule_multi nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (sub_self formula-decl nil vector_arithmetic nil)
    (MN_rc formula-decl nil mat_vec_mult nil)
    (sub_zero formula-decl nil vector_arithmetic nil)
    (matv_zerovec formula-decl nil mat_vec_mult nil)
    (diff_zero formula-decl nil vector_arithmetic nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (sub_sandwich formula-decl nil vector_arithmetic nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (comp const-decl "vec2vec[n](m2)" chain_rule_multi nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (pre_diff_cont formula-decl nil convergence_vec2vec nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (Matrix type-eq-decl nil matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "bool" differentiable_def nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (chain_rule_multi_TCC1 0
  (chain_rule_multi_TCC1-1 nil 3798153230
   ("" (skeep)
    (("" (typepred "p")
      (("" (expand "comp_dom" 1) (("" (propax) nil nil)) nil)) nil))
    nil)
   ((vec2vec type-eq-decl nil domain_vec2real_def nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (comp_dom const-decl "[VectorN(n) -> bool]" chain_rule_multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (chain_rule_multi subtype "chain_rule_multi.p"
    "(chain_rule_multi.comp_dom(chain_rule_multi.Df, chain_rule_multi.Dg, chain_rule_multi.g))")))
 (chain_rule_multi 0
  (chain_rule_multi-1 nil 3798151862
   ("" (skeep)
    (("" (lemma "pre_chain_bound")
      (("" (expand "differentiable?" 1 1)
        ((""
          (inst 1 "(der_f[m1](m2,Df,g(p))(f) * der_f[n](m1,Dg,p)(g))")
          (("1" (expand "convergence_zero?" 1)
            (("1" (skeep)
              (("1" (expand "NQ" 1)
                (("1" (lemma "g_diff_Meps2_bound")
                  (("1" (lemma "f_diff_Meps2_bound")
                    (("1" (inst -3 "Df" "Dg" "f" "g" "p")
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (inst -2 "Dg" "g" "p")
                            (("1" (assert)
                              (("1"
                                (inst -2 "epsilon" "M")
                                (("1"
                                  (inst -1 "Df" "Dg" "g" "f" "p")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst -1 "epsilon")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst
                                             1
                                             "min(delta,delta!1)")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst -1 "x")
                                                (("1"
                                                  (inst -2 "x")
                                                  (("1"
                                                    (inst -3 "x")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (case
                                                             "abs(norm_inf(m2)
                                                        (comp(f, g)(p + x) - comp(f, g)(p) -
                                                          (der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g)) *
                                                           x)
                                                 / norm_inf(n)(x)) = norm_inf(m2)
                                                        (comp(f, g)(p + x) - comp(f, g)(p) -
                                                          (der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g)) *
                                                           x)
                                                 / norm_inf(n)(x)")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "NOT norm_inf(n)(x)=0")
                                                                    (("1"
                                                                      (div-by
                                                                       -3
                                                                       "norm_inf(n)(x)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "x")
                                                                      (("2"
                                                                        (typepred
                                                                         "norm_inf(n)")
                                                                        (("2"
                                                                          (expand
                                                                           "norm?"
                                                                           -1)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst
                                                                               -3
                                                                               "x")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "abs"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (lift-if
                                                                   1)
                                                                  (("2"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (mult-by
                                                                         -1
                                                                         "norm_inf(n)(x)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -)
                                                                          (("2"
                                                                            (typepred
                                                                             "x")
                                                                            (("2"
                                                                              (typepred
                                                                               "norm_inf(n)")
                                                                              (("2"
                                                                                (expand
                                                                                 "norm?"
                                                                                 -1)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -3
                                                                                     "x")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "sub_zero")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x")
                                                              (("2"
                                                                (typepred
                                                                 "x")
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "sub_zero")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x")
                                                              (("2"
                                                                (typepred
                                                                 "x")
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "x")
                                                      (("2"
                                                        (expand
                                                         "NQ"
                                                         -3)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (reveal -)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide
                                                                 -8)
                                                                (("2"
                                                                  (hide
                                                                   -7)
                                                                  (("2"
                                                                    (hide
                                                                     -6)
                                                                    (("2"
                                                                      (hide
                                                                       -5)
                                                                      (("2"
                                                                        (hide
                                                                         -4)
                                                                        (("2"
                                                                          (hide
                                                                           -3)
                                                                          (("2"
                                                                            (hide
                                                                             -2)
                                                                            (("2"
                                                                              (hide
                                                                               -1)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "comp_dom"
                                                                                   -2)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "NQ"
                                                                                         2)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "NQ" 1 1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (typepred
                                                             "x")
                                                            (("2"
                                                              (expand
                                                               "NQ"
                                                               -3)
                                                              (("2"
                                                                (expand
                                                                 "comp_dom"
                                                                 -3)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -)
                                                    (("2"
                                                      (typepred "x")
                                                      (("2"
                                                        (expand "NQ")
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2"
              (typepred
               "(der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g))")
              (("2" (hide -6)
                (("2" (expand "rows" -2)
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (inst -3 "i")
                        (("2" (assert)
                          (("2" (lemma "MN_rc")
                            (("2"
                              (inst -1 "m1" "n"
                               "der_f[n](m1, Dg, p)(g)")
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "rows" -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pre_chain_bound formula-decl nil chain_rule_multi nil)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (p skolem-const-decl "{p: (Dg) | Df(g(p))}" chain_rule_multi nil)
    (Dg skolem-const-decl "(deriv_domain?[n])" chain_rule_multi nil)
    (g skolem-const-decl "vec2vec[n](m1)" chain_rule_multi nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (f skolem-const-decl "vec2vec[m1](m2)" chain_rule_multi nil)
    (Df skolem-const-decl "(deriv_domain?[m1])" chain_rule_multi nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
       matrices)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (* const-decl "real" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (entry const-decl "real" matrices matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (rows const-decl "nat" matrices matrices)
    (Matrix type-eq-decl nil matrices matrices)
    (g_diff_Meps2_bound formula-decl nil chain_rule_multi nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (comp const-decl "vec2vec[n](m2)" chain_rule_multi nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sub_zero formula-decl nil vector_arithmetic nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (x skolem-const-decl
     "{xx: (NQ(comp_dom(Df, Dg, g), p)) | xx /= zero_vec(n)}"
     chain_rule_multi nil)
    (/= const-decl "boolean" notequal nil)
    (comp_dom const-decl "[VectorN(n) -> bool]" chain_rule_multi nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (f_diff_Meps2_bound formula-decl nil chain_rule_multi nil)
    (MN_rc formula-decl nil mat_vec_mult nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (chain_rule_multi_subdom_TCC1 0
  (chain_rule_multi_subdom_TCC1-1 nil 3853964812
   ("" (skeep)
    (("" (typepred "p")
      (("" (typepred "D")
        (("" (expand "deriv_domain_sub?")
          (("" (flatten)
            (("" (inst -2 "p")
              (("" (assert)
                (("" (expand "comp_dom") (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((comp_dom const-decl "[VectorN(n) -> bool]" chain_rule_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (deriv_domain_sub? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (chain_rule_multi_subdom subtype
    "chain_rule_multi.g(chain_rule_multi.p)" "(chain_rule_multi.Df)")))
 (chain_rule_multi_subdom_TCC2 0
  (chain_rule_multi_subdom_TCC2-1 nil 3853964812
   ("" (skeep)
    (("" (typepred "p" "D")
      (("" (expand "deriv_domain_sub?")
        (("" (flatten)
          (("" (inst -5 "p")
            (("" (assert)
              (("" (expand "comp_dom") (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((comp_dom const-decl "[VectorN(n) -> bool]" chain_rule_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (deriv_domain_sub? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (chain_rule_multi_subdom subtype "chain_rule_multi.p"
    "(chain_rule_multi.Dg)")))
 (chain_rule_multi_subdom_TCC3 0
  (chain_rule_multi_subdom_TCC3-1 nil 3853964812
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "deriv_domain_sub?" -1) (("" (flatten) nil nil))
        nil))
      nil))
    nil)
   ((comp_dom const-decl "[VectorN(n) -> bool]" chain_rule_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (deriv_domain_sub? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (chain_rule_multi_subdom subtype "chain_rule_multi.D"
    "(derivative_domain_multi[chain_rule_multi.n].deriv_domain?)")))
 (chain_rule_multi_subdom 0
  (chain_rule_multi_subdom-1 nil 3853964915
   ("" (skeep)
    (("" (lemma "pre_chain_bound")
      (("" (expand "differentiable?" 1 1)
        ((""
          (inst 1 "(der_f[m1](m2,Df,g(p))(f) * der_f[n](m1,Dg,p)(g))")
          (("1" (expand "convergence_zero?" 1)
            (("1" (skeep)
              (("1" (expand "NQ" 1)
                (("1" (lemma "g_diff_Meps2_bound")
                  (("1" (lemma "f_diff_Meps2_bound")
                    (("1" (inst -3 "Df" "Dg" "f" "g" "p")
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (inst -2 "Dg" "g" "p")
                            (("1" (assert)
                              (("1"
                                (inst -2 "epsilon" "M")
                                (("1"
                                  (inst -1 "Df" "Dg" "g" "f" "p")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst -1 "epsilon")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst
                                             1
                                             "min(delta,delta!1)")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst -1 "x")
                                                (("1"
                                                  (inst -2 "x")
                                                  (("1"
                                                    (inst -3 "x")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (case
                                                             "abs(norm_inf(m2)
                                                                           (comp(f, g)(p + x) - comp(f, g)(p) -
                                                                             (der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g)) *
                                                                              x)
                                                                    / norm_inf(n)(x)) = norm_inf(m2)
                                                                           (comp(f, g)(p + x) - comp(f, g)(p) -
                                                                             (der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g)) *
                                                                              x)
                                                                    / norm_inf(n)(x)")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "NOT norm_inf(n)(x)=0")
                                                                    (("1"
                                                                      (div-by
                                                                       -3
                                                                       "norm_inf(n)(x)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "x")
                                                                      (("2"
                                                                        (typepred
                                                                         "norm_inf(n)")
                                                                        (("2"
                                                                          (expand
                                                                           "norm?"
                                                                           -1)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst
                                                                               -3
                                                                               "x")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "abs"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (lift-if
                                                                   1)
                                                                  (("2"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (mult-by
                                                                         -1
                                                                         "norm_inf(n)(x)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -)
                                                                          (("2"
                                                                            (typepred
                                                                             "x")
                                                                            (("2"
                                                                              (typepred
                                                                               "norm_inf(n)")
                                                                              (("2"
                                                                                (expand
                                                                                 "norm?"
                                                                                 -1)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -3
                                                                                     "x")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "sub_zero")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x")
                                                              (("2"
                                                                (typepred
                                                                 "x")
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "sub_zero")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x")
                                                              (("2"
                                                                (typepred
                                                                 "x")
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -)
                                                      (("2"
                                                        (typepred "x")
                                                        (("2"
                                                          (typepred
                                                           "D")
                                                          (("2"
                                                            (expand
                                                             "NQ")
                                                            (("2"
                                                              (expand
                                                               "deriv_domain_sub?"
                                                               -1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -2
                                                                   "p+x")
                                                                  (("2"
                                                                    (expand
                                                                     "comp_dom"
                                                                     -2)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -)
                                                    (("2"
                                                      (typepred "D")
                                                      (("2"
                                                        (typepred "x")
                                                        (("2"
                                                          (expand
                                                           "deriv_domain_sub?")
                                                          (("2"
                                                            (expand
                                                             "NQ")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -5
                                                                 "p+x")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "comp_dom"
                                                                     -5)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -2)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (typepred "x")
                                                      (("2"
                                                        (expand "NQ")
                                                        (("2"
                                                          (typepred
                                                           "D")
                                                          (("2"
                                                            (expand
                                                             "deriv_domain_sub?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "p+x")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "comp_dom")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (hide -)
                                      (("2"
                                        (typepred "p")
                                        (("2"
                                          (typepred "D")
                                          (("2"
                                            (expand
                                             "deriv_domain_sub?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -2 "p")
                                                (("2"
                                                  (expand "comp_dom")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (hide -2)
                          (("2" (hide -)
                            (("2" (typepred "p" "D")
                              (("2"
                                (expand "deriv_domain_sub?" -4)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (inst -5 "p")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "comp_dom")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2"
              (typepred
               "(der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g))")
              (("2" (hide -6)
                (("2" (expand "rows" -2)
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (inst -3 "i")
                        (("2" (assert)
                          (("2" (lemma "MN_rc")
                            (("2"
                              (inst -1 "m1" "n"
                               "der_f[n](m1, Dg, p)(g)")
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "rows" -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pre_chain_bound formula-decl nil chain_rule_multi nil)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (p skolem-const-decl "(D)" chain_rule_multi nil)
    (D skolem-const-decl "(deriv_domain_sub?(comp_dom(Df, Dg, g)))"
     chain_rule_multi nil)
    (Dg skolem-const-decl "(deriv_domain?[n])" chain_rule_multi nil)
    (comp_dom const-decl "[VectorN(n) -> bool]" chain_rule_multi nil)
    (deriv_domain_sub? const-decl "bool" derivative_domain_multi nil)
    (g skolem-const-decl "vec2vec[n](m1)" chain_rule_multi nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (f skolem-const-decl "vec2vec[m1](m2)" chain_rule_multi nil)
    (Df skolem-const-decl "(deriv_domain?[m1])" chain_rule_multi nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
       matrices)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (* const-decl "real" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (entry const-decl "real" matrices matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (rows const-decl "nat" matrices matrices)
    (Matrix type-eq-decl nil matrices matrices)
    (g_diff_Meps2_bound formula-decl nil chain_rule_multi nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (comp const-decl "vec2vec[n](m2)" chain_rule_multi nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sub_zero formula-decl nil vector_arithmetic nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (x skolem-const-decl "{xx: (NQ(D, p)) | xx /= zero_vec(n)}"
     chain_rule_multi nil)
    (/= const-decl "boolean" notequal nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (f_diff_Meps2_bound formula-decl nil chain_rule_multi nil)
    (MN_rc formula-decl nil mat_vec_mult nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (chain_rule_multi_der_TCC1 0
  (chain_rule_multi_der_TCC1-1 nil 3798297035
   ("" (skeep)
    (("" (assert)
      (("" (split 1)
        (("1" (assert)
          (("1"
            (typepred
             "der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g)")
            (("1" (hide -1)
              (("1" (expand "rows" -) (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2"
            (typepred
             "(der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g))")
            (("2" (hide -1)
              (("2" (inst -2 "i")
                (("2" (assert)
                  (("2" (hide -1 -3 -4)
                    (("2" (replace -1)
                      (("2" (lemma "MN_rc")
                        (("2"
                          (inst -1 "m1" "n" "der_f[n](m1, Dg, p)(g)")
                          (("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (expand "rows" -1)
                                (("2"
                                  (typepred "der_f[n](m1, Dg, p)(g)")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mult_full application-judgement "FullMatrix" matrices matrices)
    (MN_rc formula-decl nil mat_vec_mult nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (rows const-decl "nat" matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil) (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (entry const-decl "real" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (* const-decl "real" matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
       matrices)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "bool" differentiable_def nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (chain_rule_multi_der subtype
    "matrices.*(convergence_vec2vec[chain_rule_multi.m1].der_f(chain_rule_multi.m2, chain_rule_multi.Df, chain_rule_multi.g(chain_rule_multi.p))(chain_rule_multi.f), convergence_vec2vec[chain_rule_multi.n].der_f(chain_rule_multi.m1, chain_rule_multi.Dg, chain_rule_multi.p)(chain_rule_multi.g))"
    "matrices.MatrixMN(chain_rule_multi.m2, chain_rule_multi.n)")))
 (chain_rule_multi_der_TCC2 0
  (chain_rule_multi_der_TCC1-1 nil 3798153843
   ("" (skeep)
    (("" (lemma "chain_rule_multi")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((chain_rule_multi formula-decl nil chain_rule_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (chain_rule_multi_der subtype
    "chain_rule_multi.comp(chain_rule_multi.f, chain_rule_multi.g)"
    "{ff: domain_vec2real_def[chain_rule_multi.n].vec2vec(chain_rule_multi.m2) | convergence_vec2vec[chain_rule_multi.n].differentiable?(chain_rule_multi.m2, chain_rule_multi.comp_dom(chain_rule_multi.Df, chain_rule_multi.Dg, chain_rule_multi.g), ff, chain_rule_multi.p)}")))
 (chain_rule_multi_der 0
  (chain_rule_multi_der-1 nil 3798153914
   ("" (skeep)
    (("" (lemma "pre_chain_bound")
      (("" (expand "der_p?" 1)
        (("" (expand "convergence_zero?" 1)
          (("" (skeep)
            (("" (expand "NQ" 1)
              (("" (lemma "g_diff_Meps2_bound")
                (("" (lemma "f_diff_Meps2_bound")
                  (("" (inst -3 "Df" "Dg" "f" "g" "p")
                    (("" (assert)
                      (("" (skeep)
                        (("" (inst -2 "Dg" "g" "p")
                          (("" (assert)
                            (("" (inst -2 "epsilon" "M")
                              ((""
                                (inst -1 "Df" "Dg" "g" "f" "p")
                                ((""
                                  (assert)
                                  ((""
                                    (inst -1 "epsilon")
                                    ((""
                                      (skeep)
                                      ((""
                                        (skeep)
                                        ((""
                                          (inst 1 "min(delta,delta!1)")
                                          ((""
                                            (skeep)
                                            ((""
                                              (inst -1 "x")
                                              (("1"
                                                (inst -2 "x")
                                                (("1"
                                                  (inst -3 "x")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (case
                                                           "abs(norm_inf(m2)
                                                                         (comp(f, g)(p + x) - comp(f, g)(p) -
                                                                           (der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g)) *
                                                                            x)
                                                                  / norm_inf(n)(x)) = norm_inf(m2)
                                                                         (comp(f, g)(p + x) - comp(f, g)(p) -
                                                                           (der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g)) *
                                                                            x)
                                                                  / norm_inf(n)(x)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "NOT norm_inf(n)(x)=0")
                                                                  (("1"
                                                                    (div-by
                                                                     -3
                                                                     "norm_inf(n)(x)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "x")
                                                                    (("2"
                                                                      (typepred
                                                                       "norm_inf(n)")
                                                                      (("2"
                                                                        (expand
                                                                         "norm?"
                                                                         -1)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (inst
                                                                             -3
                                                                             "x")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "abs"
                                                               1
                                                               1)
                                                              (("2"
                                                                (lift-if
                                                                 1)
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (mult-by
                                                                       -1
                                                                       "norm_inf(n)(x)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -)
                                                                        (("2"
                                                                          (typepred
                                                                           "x")
                                                                          (("2"
                                                                            (typepred
                                                                             "norm_inf(n)")
                                                                            (("2"
                                                                              (expand
                                                                               "norm?"
                                                                               -1)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (inst
                                                                                   -3
                                                                                   "x")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "sub_zero")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "x")
                                                            (("2"
                                                              (typepred
                                                               "x")
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "sub_zero")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "x")
                                                            (("2"
                                                              (typepred
                                                               "x")
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "x")
                                                    (("2"
                                                      (expand "NQ" -3)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (reveal -)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide -8)
                                                              (("2"
                                                                (hide
                                                                 -7)
                                                                (("2"
                                                                  (hide
                                                                   -6)
                                                                  (("2"
                                                                    (hide
                                                                     -5)
                                                                    (("2"
                                                                      (hide
                                                                       -4)
                                                                      (("2"
                                                                        (hide
                                                                         -3)
                                                                        (("2"
                                                                          (hide
                                                                           -2)
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (hide
                                                                               -1)
                                                                              (("2"
                                                                                (expand
                                                                                 "comp_dom"
                                                                                 -2)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "NQ"
                                                                                       2)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "NQ" 1 1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (typepred
                                                           "x")
                                                          (("2"
                                                            (expand
                                                             "NQ"
                                                             -3)
                                                            (("2"
                                                              (typepred
                                                               "x")
                                                              (("2"
                                                                (expand
                                                                 "NQ"
                                                                 -3)
                                                                (("2"
                                                                  (expand
                                                                   "comp_dom"
                                                                   -3)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (hide -)
                                                  (("2"
                                                    (typepred "x")
                                                    (("2"
                                                      (expand "NQ")
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pre_chain_bound formula-decl nil chain_rule_multi nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (f_diff_Meps2_bound formula-decl nil chain_rule_multi nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (NQ const-decl "bool" differentiable_def nil)
    (Dg skolem-const-decl "(deriv_domain?[n])" chain_rule_multi nil)
    (Df skolem-const-decl "(deriv_domain?[m1])" chain_rule_multi nil)
    (g skolem-const-decl "vec2vec[n](m1)" chain_rule_multi nil)
    (p skolem-const-decl "{p: (Dg) | Df(g(p))}" chain_rule_multi nil)
    (comp_dom const-decl "[VectorN(n) -> bool]" chain_rule_multi nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (x skolem-const-decl
     "{xx: (NQ(comp_dom(Df, Dg, g), p)) | xx /= zero_vec(n)}"
     chain_rule_multi nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub_zero formula-decl nil vector_arithmetic nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
       matrices)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (* const-decl "real" matrices matrices)
    (entry const-decl "real" matrices matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (comp const-decl "vec2vec[n](m2)" chain_rule_multi nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (g_diff_Meps2_bound formula-decl nil chain_rule_multi nil)
    (der_p? const-decl "bool" convergence_vec2vec nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (chain_rule_multi_der_subdom_TCC1 0
  (chain_rule_multi_der_subdom_TCC1-1 nil 3853965500
   ("" (skeep)
    (("" (assert)
      (("" (split 1)
        (("1" (assert)
          (("1"
            (typepred
             "der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g)")
            (("1" (expand "rows" -) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (skeep)
          (("2"
            (typepred
             "der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g)")
            (("2" (inst -3 "i")
              (("2" (assert)
                (("2" (replace -3 1)
                  (("2" (hide -)
                    (("2" (lemma "columns_mn")
                      (("2" (inst -1 "m1" "n" "der_f[n](m1, Dg, p)(g)")
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mult_full application-judgement "FullMatrix" matrices matrices)
    (columns_mn formula-decl nil matrices matrices)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (rows const-decl "nat" matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil) (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (entry const-decl "real" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (* const-decl "real" matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
       matrices)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "bool" differentiable_def nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (deriv_domain_sub? const-decl "bool" derivative_domain_multi nil)
    (comp_dom const-decl "[VectorN(n) -> bool]" chain_rule_multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (chain_rule_multi_der_subdom subtype
    "matrices.*(convergence_vec2vec[chain_rule_multi.m1].der_f(chain_rule_multi.m2, chain_rule_multi.Df, chain_rule_multi.g(chain_rule_multi.p))(chain_rule_multi.f), convergence_vec2vec[chain_rule_multi.n].der_f(chain_rule_multi.m1, chain_rule_multi.Dg, chain_rule_multi.p)(chain_rule_multi.g))"
    "matrices.MatrixMN(chain_rule_multi.m2, chain_rule_multi.n)")))
 (chain_rule_multi_der_subdom_TCC2 0
  (chain_rule_multi_der_subdom_TCC2-1 nil 3853965500
   ("" (skeep)
    (("" (lemma "chain_rule_multi_subdom")
      (("" (inst -1 "Df" "Dg" "f" "g" "D" "p") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((chain_rule_multi_subdom formula-decl nil chain_rule_multi nil)
    (comp_dom const-decl "[VectorN(n) -> bool]" chain_rule_multi nil)
    (deriv_domain_sub? const-decl "bool" derivative_domain_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (chain_rule_multi_der_subdom subtype
    "chain_rule_multi.comp(chain_rule_multi.f, chain_rule_multi.g)"
    "{ff: domain_vec2real_def[chain_rule_multi.n].vec2vec(chain_rule_multi.m2) | convergence_vec2vec[chain_rule_multi.n].differentiable?(chain_rule_multi.m2, chain_rule_multi.D, ff, chain_rule_multi.p)}")))
 (chain_rule_multi_der_subdom 0
  (chain_rule_multi_der_subdom-1 nil 3853965715
   ("" (skeep)
    (("" (lemma "pre_chain_bound")
      (("" (expand "der_p?" 1)
        (("" (expand "convergence_zero?" 1)
          (("" (skeep)
            (("" (expand "NQ" 1)
              (("" (lemma "g_diff_Meps2_bound")
                (("" (lemma "f_diff_Meps2_bound")
                  (("" (inst -3 "Df" "Dg" "f" "g" "p")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (inst -2 "Dg" "g" "p")
                          (("1" (assert)
                            (("1" (inst -2 "epsilon" "M")
                              (("1"
                                (inst -1 "Df" "Dg" "g" "f" "p")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -1 "epsilon")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "min(delta,delta!1)")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst -1 "x")
                                              (("1"
                                                (inst -2 "x")
                                                (("1"
                                                  (inst -3 "x")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (case
                                                           "abs(norm_inf(m2)
                                                                                          (comp(f, g)(p + x) - comp(f, g)(p) -
                                                                                            (der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g)) *
                                                                                             x)
                                                                                   / norm_inf(n)(x)) = norm_inf(m2)
                                                                                          (comp(f, g)(p + x) - comp(f, g)(p) -
                                                                                            (der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g)) *
                                                                                             x)
                                                                                   / norm_inf(n)(x)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "NOT norm_inf(n)(x)=0")
                                                                  (("1"
                                                                    (div-by
                                                                     -3
                                                                     "norm_inf(n)(x)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "x")
                                                                    (("2"
                                                                      (typepred
                                                                       "norm_inf(n)")
                                                                      (("2"
                                                                        (expand
                                                                         "norm?"
                                                                         -1)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (inst
                                                                             -3
                                                                             "x")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "abs"
                                                               1
                                                               1)
                                                              (("2"
                                                                (lift-if
                                                                 1)
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (mult-by
                                                                       -1
                                                                       "norm_inf(n)(x)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -)
                                                                        (("2"
                                                                          (typepred
                                                                           "x")
                                                                          (("2"
                                                                            (typepred
                                                                             "norm_inf(n)")
                                                                            (("2"
                                                                              (expand
                                                                               "norm?"
                                                                               -1)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (inst
                                                                                   -3
                                                                                   "x")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "sub_zero")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "x")
                                                            (("2"
                                                              (typepred
                                                               "x")
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "sub_zero")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "x")
                                                            (("2"
                                                              (typepred
                                                               "x")
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "x")
                                                    (("2"
                                                      (hide -)
                                                      (("2"
                                                        (typepred
                                                         "x"
                                                         "D")
                                                        (("2"
                                                          (expand
                                                           "deriv_domain_sub?")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "NQ")
                                                              (("2"
                                                                (inst
                                                                 -5
                                                                 "p+x")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "comp_dom"
                                                                     -5)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -)
                                                  (("2"
                                                    (typepred "x" "D")
                                                    (("2"
                                                      (expand
                                                       "deriv_domain_sub?")
                                                      (("2"
                                                        (expand "NQ")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -5
                                                             "p+x")
                                                            (("2"
                                                              (expand
                                                               "comp_dom"
                                                               -5)
                                                              (("2"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (hide -)
                                                  (("2"
                                                    (typepred "x")
                                                    (("2"
                                                      (expand "NQ")
                                                      (("2"
                                                        (typepred "D")
                                                        (("2"
                                                          (expand
                                                           "deriv_domain_sub?"
                                                           -1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (inst
                                                               -2
                                                               "p+x")
                                                              (("2"
                                                                (expand
                                                                 "comp_dom"
                                                                 -2)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (hide -)
                                    (("2"
                                      (typepred "p")
                                      (("2"
                                        (typepred "D")
                                        (("2"
                                          (expand
                                           "deriv_domain_sub?"
                                           -1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst -2 "p")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "comp_dom"
                                                   -2)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -)
                      (("2" (typepred "p")
                        (("2" (typepred "D")
                          (("2" (expand "deriv_domain_sub?" -1)
                            (("2" (flatten)
                              (("2"
                                (inst -2 "p")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "comp_dom")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pre_chain_bound formula-decl nil chain_rule_multi nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (f_diff_Meps2_bound formula-decl nil chain_rule_multi nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (NQ const-decl "bool" differentiable_def nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (x skolem-const-decl "{xx: (NQ(D, p)) | xx /= zero_vec(n)}"
     chain_rule_multi nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub_zero formula-decl nil vector_arithmetic nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
       matrices)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (* const-decl "real" matrices matrices)
    (entry const-decl "real" matrices matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (comp const-decl "vec2vec[n](m2)" chain_rule_multi nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (Df skolem-const-decl "(deriv_domain?[m1])" chain_rule_multi nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (g skolem-const-decl "vec2vec[n](m1)" chain_rule_multi nil)
    (deriv_domain_sub? const-decl "bool" derivative_domain_multi nil)
    (comp_dom const-decl "[VectorN(n) -> bool]" chain_rule_multi nil)
    (Dg skolem-const-decl "(deriv_domain?[n])" chain_rule_multi nil)
    (D skolem-const-decl "(deriv_domain_sub?(comp_dom(Df, Dg, g)))"
     chain_rule_multi nil)
    (p skolem-const-decl "(D)" chain_rule_multi nil)
    (g_diff_Meps2_bound formula-decl nil chain_rule_multi nil)
    (der_p? const-decl "bool" convergence_vec2vec nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (chain_rule_multi_der_is_TCC1 0
  (chain_rule_multi_der_is_TCC1-1 nil 3853865152
   ("" (skeep)
    (("" (lemma "chain_rule_multi")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "dd_e_partial_implies_dd[n]")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((chain_rule_multi formula-decl nil chain_rule_multi nil)
    (comp_dom const-decl "[VectorN(n) -> bool]" chain_rule_multi nil)
    (dd_e_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (n formal-const-decl "posnat" chain_rule_multi nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (chain_rule_multi_der_is subtype
    "chain_rule_multi.comp(chain_rule_multi.f, chain_rule_multi.g)"
    "{ff: domain_vec2real_def[chain_rule_multi.n].vec2vec(chain_rule_multi.m2) | convergence_vec2vec[chain_rule_multi.n].differentiable?(chain_rule_multi.m2, chain_rule_multi.comp_dom(chain_rule_multi.Df, chain_rule_multi.Dg, chain_rule_multi.g), ff, chain_rule_multi.p)}")))
 (chain_rule_multi_der_is_TCC2 0
  (chain_rule_multi_der_is_TCC2-1 nil 3853865152
   ("" (skeep)
    (("" (lemma "dd_e_partial_implies_dd[n]")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((n formal-const-decl "posnat" chain_rule_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_e_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (comp_dom const-decl "[VectorN(n) -> bool]" chain_rule_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (chain_rule_multi_der_is subtype
    "chain_rule_multi.comp_dom(chain_rule_multi.Df, chain_rule_multi.Dg, chain_rule_multi.g)"
    "(derivative_domain_multi[chain_rule_multi.n].deriv_domain?)")))
 (chain_rule_multi_der_is_TCC3 0
  (chain_rule_multi_der_is_TCC3-1 nil 3853865152
   ("" (subtype-tcc) nil nil)
   ((norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (comp_dom const-decl "[VectorN(n) -> bool]" chain_rule_multi nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (chain_rule_multi_der_is subtype "chain_rule_multi.p"
    "(chain_rule_multi.comp_dom(chain_rule_multi.Df, chain_rule_multi.Dg, chain_rule_multi.g))")))
 (chain_rule_multi_der_is 0
  (chain_rule_multi_der_is-1 nil 3853864624
   ("" (lemma "convergence_vec2vec[n].der_f_unique")
    (("" (skeep)
      (("" (expand "der_f" 1 1)
        ((""
          (inst -1 "m2" "comp_dom(Df,Dg,g)" "comp(f,g)" "p"
           " der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g)")
          (("1" (assert) nil nil)
           ("2" (assert)
            (("2" (split 1)
              (("1" (assert)
                (("1"
                  (typepred
                   "der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g)")
                  (("1" (expand "rows") (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2"
                (typepred
                 "der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g)")
                (("2" (skeep 1)
                  (("2" (inst -3 "i")
                    (("2" (assert)
                      (("2" (lemma "columns_mn")
                        (("2" (typepred "der_f[n](m1,Dg,p)(g)")
                          (("2" (lemma "columns_mn")
                            (("2"
                              (inst -1 "m1" "n" "der_f[n](m1,Dg,p)(g)")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (lemma "chain_rule_multi_der")
                (("3" (inst?)
                  (("3" (assert)
                    (("3" (expand "der_p?" -1)
                      (("3" (lemma "dd_e_partial_implies_dd[n]")
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (g skolem-const-decl "vec2vec[n](m1)" chain_rule_multi nil)
    (Dg skolem-const-decl "(deriv_domain?[n])" chain_rule_multi nil)
    (Df skolem-const-decl "(deriv_domain?[m1])" chain_rule_multi nil)
    (comp_dom const-decl "[VectorN(n) -> bool]" chain_rule_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (comp const-decl "vec2vec[n](m2)" chain_rule_multi nil)
    (f skolem-const-decl "vec2vec[m1](m2)" chain_rule_multi nil)
    (p skolem-const-decl "{p: (Dg) | Df(g(p))}" chain_rule_multi nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
       matrices)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (* const-decl "real" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (entry const-decl "real" matrices matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (rows const-decl "nat" matrices matrices)
    (Matrix type-eq-decl nil matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (columns_mn formula-decl nil matrices matrices)
    (der_p? const-decl "bool" convergence_vec2vec nil)
    (dd_e_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (chain_rule_multi_der formula-decl nil chain_rule_multi nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (der_f_unique formula-decl nil convergence_vec2vec nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" chain_rule_multi nil))
   shostak))
 (chain_rule_multi_der_is_subdom 0
  (chain_rule_multi_der_is_subdom-1 nil 3853967034
   ("" (lemma "convergence_vec2vec[n].der_f_unique")
    (("" (skeep)
      (("" (expand "der_f" 1 1)
        ((""
          (inst -1 "m2" "D" "comp(f,g)" "p"
           " der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g)")
          (("1" (assert) nil nil)
           ("2" (assert)
            (("2" (split 1)
              (("1" (assert)
                (("1"
                  (typepred
                   "der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g)")
                  (("1" (expand "rows") (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2"
                (typepred
                 "der_f[m1](m2, Df, g(p))(f) * der_f[n](m1, Dg, p)(g)")
                (("2" (skeep 1)
                  (("2" (inst -3 "i")
                    (("2" (assert)
                      (("2" (lemma "columns_mn")
                        (("2" (typepred "der_f[n](m1,Dg,p)(g)")
                          (("2" (lemma "columns_mn")
                            (("2"
                              (inst -1 "m1" "n" "der_f[n](m1,Dg,p)(g)")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (lemma "chain_rule_multi_der_subdom")
                (("3" (inst?)
                  (("3" (assert)
                    (("3" (expand "der_p?" -1) (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (D skolem-const-decl "(deriv_domain_sub?(comp_dom(Df, Dg, g)))"
     chain_rule_multi nil)
    (g skolem-const-decl "vec2vec[n](m1)" chain_rule_multi nil)
    (Dg skolem-const-decl "(deriv_domain?[n])" chain_rule_multi nil)
    (Df skolem-const-decl "(deriv_domain?[m1])" chain_rule_multi nil)
    (comp_dom const-decl "[VectorN(n) -> bool]" chain_rule_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (m1 formal-const-decl "posnat" chain_rule_multi nil)
    (deriv_domain_sub? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (comp const-decl "vec2vec[n](m2)" chain_rule_multi nil)
    (f skolem-const-decl "vec2vec[m1](m2)" chain_rule_multi nil)
    (p skolem-const-decl "(D)" chain_rule_multi nil)
    (m2 formal-const-decl "posnat" chain_rule_multi nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
       matrices)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (* const-decl "real" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (entry const-decl "real" matrices matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (rows const-decl "nat" matrices matrices)
    (Matrix type-eq-decl nil matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (columns_mn formula-decl nil matrices matrices)
    (der_p? const-decl "bool" convergence_vec2vec nil)
    (chain_rule_multi_der_subdom formula-decl nil chain_rule_multi nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (der_f_unique formula-decl nil convergence_vec2vec nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" chain_rule_multi nil))
   shostak)))