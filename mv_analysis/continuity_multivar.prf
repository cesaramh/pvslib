(continuity_multivar
 (contp?_TCC1 0
  (contp?_TCC1-1 nil 3740297400
   ("" (skeep)
    (("" (typepred "x-p")
      (("" (expand "max" -2)
        (("" (assert) (("" (typepred "x") (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (contp? subtype
    "(matrices.-)(continuity_multivar.x, continuity_multivar.p)"
    "(list_adt[real].cons?)")))
 (cont?_TCC1 0
  (cont?_TCC1-1 nil 3741013112
   ("" (skeep)
    (("" (typepred "f(t)-f(t2)" "f(t)" "f(t2)") (("" (assert) nil nil))
      nil))
    nil)
   ((domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (cont? subtype
    "(matrices.-)(continuity_multivar.f(continuity_multivar.t), continuity_multivar.f(continuity_multivar.t2))"
    "(list_adt[real].cons?)")))
 (cont_pos_neigh_TCC1 0
  (cont_pos_neigh_TCC1-1 nil 3742815616
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "p + delta * v" "p" "delta * v" "v")
          (("" (expand "max" -) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (open_neigh_domain? const-decl "bool" closed_bounded_domain nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (cont_pos_neigh subtype
    "(matrices.+)(continuity_multivar.p, matrices.*(continuity_multivar.delta, continuity_multivar.v))"
    "matrices.VectorN(continuity_multivar.n)")))
 (cont_pos_neigh 0
  (cont_pos_neigh-1 nil 3741939487
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "D")
          (("" (expand "open_neigh_domain?")
            (("" (expand "contD?")
              (("" (inst -1 "p")
                (("" (inst -1 "v")
                  (("" (skeep)
                    (("" (inst -2 "p")
                      (("" (expand "contp?")
                        (("" (inst -2 "norm_inf(n)")
                          (("" (inst -2 "f(p)")
                            (("1" (skeep)
                              (("1"
                                (case "v=zero_vec(n)")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (lemma "scal_zero")
                                    (("1"
                                      (inst -1 "delta" "n")
                                      (("1"
                                        (lemma "zero_id")
                                        (("1"
                                          (inst -1 "p")
                                          (("1"
                                            (inst 1 "epsilon")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (lemma "scal_zero")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "delta!1"
                                                   "n")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (lemma "zero_id")
                                                      (("1"
                                                        (typepred "p")
                                                        (("1"
                                                          (replace
                                                           -2
                                                           -6)
                                                          (("1"
                                                            (replace
                                                             -6
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "norm_inf(n)(v) = 0")
                                  (("1"
                                    (typepred "norm_inf(n)")
                                    (("1"
                                      (expand "norm?" -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst -3 "v")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst
                                     3
                                     "min(epsilon, delta/norm_inf(n)(v))")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (typepred "delta_1")
                                        (("1"
                                          (inst -4 "delta_1")
                                          (("1"
                                            (inst -5 "p+delta_1*v")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "NOT delta_1 < delta/norm_inf(n)(v)")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (mult-by
                                                   -1
                                                   "norm_inf(n)(v)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "p + delta_1 * v - p = delta_1*v")
                                                      (("1"
                                                        (replace -1 -7)
                                                        (("1"
                                                          (typepred
                                                           "norm_inf(n)")
                                                          (("1"
                                                            (expand
                                                             "norm?"
                                                             -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "v"
                                                                 "delta_1")
                                                                (("1"
                                                                  (hide
                                                                   -1
                                                                   -3
                                                                   -4)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -8)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "abs"
                                                                         -8
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "sub_idx")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "p + delta_1 * v"
                                                           "p")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("1"
                                                              (lemma
                                                               "add_commute")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p + delta_1 * v"
                                                                 "(-1 * p)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (lemma
                                                                     "asso_add")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "(-1 * p)"
                                                                       "p"
                                                                       " delta_1 * v")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           1
                                                                           rl)
                                                                          (("1"
                                                                            (lemma
                                                                             "one_idx")
                                                                            (("1"
                                                                              (lemma
                                                                               "dist_scalar")
                                                                              (("1"
                                                                                (replace
                                                                                 -3
                                                                                 1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -3
                                                                                   1
                                                                                   rl)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "p")
                                                                                    (("1"
                                                                                      (case
                                                                                       "NOT (-1 * p) + p + delta_1 * v = (-1 * p) + 1*p + delta_1 * v")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -1
                                                                                         1)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -2
                                                                                           "-1"
                                                                                           "1"
                                                                                           "p")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -2
                                                                                             1
                                                                                             rl)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "mult_zero")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "p")
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "p")
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       -4)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -4
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "add_commute")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "zero_vec(n)"
                                                                                                             "delta_1*v")
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "zero_id")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "delta_1*v")
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "delta_1*v"
                                                                                                                     "v")
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -4
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -2
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "-1*p"
                                                                         "p")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (typepred
                                                                   "p+delta_1*v"
                                                                   "p"
                                                                   "delta_1*v"
                                                                   "v")
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "p + delta_1 * v"
                                                             "p"
                                                             "delta_1*v"
                                                             "v")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (split)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "min" 1)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (mult-by
                                                   1
                                                   "norm_inf(n)(v)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "min" 1)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (split)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (mult-by
                                                 1
                                                 "norm_inf(n)(v)")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (assert) nil nil))
                                    nil)
                                   ("3"
                                    (assert)
                                    (("3"
                                      (typepred "v")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (open_neigh_domain? const-decl "bool" closed_bounded_domain nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (delta_1 skolem-const-decl
     "{dd: posreal | abs(dd) < min(epsilon, delta / norm_inf(n)(v))}"
     continuity_multivar nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (add_commute formula-decl nil vector_arithmetic nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (dist_scalar formula-decl nil vector_arithmetic nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (one_idx formula-decl nil vector_arithmetic nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (sub_idx formula-decl nil vector_arithmetic nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (delta skolem-const-decl "posreal" continuity_multivar nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (epsilon skolem-const-decl "posreal" continuity_multivar nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (v skolem-const-decl "VectorN(n)" continuity_multivar nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_min application-judgement "{z: nzreal | z <= x AND z <= y}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (p skolem-const-decl "(D)" continuity_multivar nil)
    (f skolem-const-decl "[(D) -> real]" continuity_multivar nil)
    (D skolem-const-decl "(open_neigh_domain?)" continuity_multivar
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (cont_neg_neigh_TCC1 0
  (cont_neg_neigh_TCC1-1 nil 3742815616
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "p + delta * v" "p" "delta*v" "v")
          (("" (expand "max" -) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (open_neigh_domain? const-decl "bool" closed_bounded_domain nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (cont_neg_neigh subtype
    "(matrices.+)(continuity_multivar.p, matrices.*(continuity_multivar.delta, continuity_multivar.v))"
    "matrices.VectorN(continuity_multivar.n)")))
 (cont_neg_neigh 0
  (cont_neg_neigh-1 nil 3741963756
   ("" (lemma "cont_pos_neigh")
    (("" (skeep)
      (("" (skeep)
        (("" (inst -1 "D" "LAMBDA(v:(D)): -1*f(v)")
          (("" (assert)
            (("" (split)
              (("1" (inst -1 "p")
                (("1" (skeep)
                  (("1" (assert)
                    (("1" (inst -1 "v")
                      (("1" (skeep)
                        (("1" (inst 1 "epsilon")
                          (("1" (skeep)
                            (("1" (inst -1 "delta")
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "contD?")
                  (("2" (skeep)
                    (("2" (inst -1 "p!1")
                      (("2" (expand "contp?")
                        (("2" (skeep)
                          (("2" (inst -1 "nn")
                            (("2" (skeep)
                              (("2"
                                (inst -1 "eps")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst 1 "delta")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst -2 "x")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma "abs_mult")
                                              (("2"
                                                (inst
                                                 -1
                                                 "f(x) - f(p!1)"
                                                 "-1")
                                                (("2"
                                                  (expand "abs" -1 3)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (open_neigh_domain? const-decl "bool" closed_bounded_domain nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (< const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (cont_pos_neigh formula-decl nil continuity_multivar nil))
   shostak))
 (contp?_TCC2 0
  (contp?_TCC2-1 nil 3740403965
   ("" (skeep)
    (("" (typepred "(f(x) - f(p))")
      (("" (typepred "f(x)")
        (("" (typepred "f(p)")
          (("" (expand "max" -6)
            (("" (assert)
              (("" (expand "length" -2)
                (("" (grind) (("" (postpone) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (contp? subtype
    "(matrices.-)(continuity_multivar.f(continuity_multivar.x), continuity_multivar.f(continuity_multivar.p))"
    "(list_adt[real].cons?)")))
 (cont_inner_prod 0
  (cont_inner_prod-3 nil 3742803643
   ("" (skeep)
    (("" (skeep)
      (("" (expand "contD?")
        (("" (expand "contD?" -1)
          (("" (skeep)
            (("" (typepred "p_1")
              (("" (inst -4 "p_1")
                (("" (assert)
                  (("" (expand "contp?")
                    (("" (skeep)
                      (("" (inst -4 "nn" "_")
                        (("" (lemma "dot_dist")
                          (("" (inst -5 "norm_2(n)")
                            (("" (skeep)
                              ((""
                                (case "p=zero_vec(n)")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (lemma "dot_zero")
                                    (("1"
                                      (inst 1 "1")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst -1 "f(x)" "n")
                                          (("1"
                                            (lemma "dot_commutes")
                                            (("1"
                                              (inst
                                               -1
                                               "f(x)"
                                               "zero_vec(n)")
                                              (("1"
                                                (replace -1 1 rl)
                                                (("1"
                                                  (replace -2 1)
                                                  (("1"
                                                    (lemma "dot_zero")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "f(p_1)"
                                                       "n")
                                                      (("1"
                                                        (lemma
                                                         "dot_commutes")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "zero_vec(n)"
                                                           "f(p_1)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "f(p_1)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (typepred "f(x)")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -5 "eps/sqrt(p*p)")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 2 "delta")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (lemma "dot_dist_sub")
                                            (("1"
                                              (lemma "dot_dist_sub")
                                              (("1"
                                                (inst
                                                 -1
                                                 "p"
                                                 "f(x)"
                                                 "f(p_1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1 2 rl)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "cauchy_schwarz[n]")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "p"
                                                           "(f(x) - f(p_1))")
                                                          (("1"
                                                            (expand
                                                             "norm_2"
                                                             -8)
                                                            (("1"
                                                              (expand
                                                               "norm_2sq"
                                                               -8)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5)
                                                                  (("1"
                                                                    (inst
                                                                     -4
                                                                     "x")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (mult-by
                                                                         -4
                                                                         "sqrt(p*p)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "dot_non_neg[n]")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "f(x) - f(p_1)")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "f(x) - f(p_1)"
                                                                                 "f(x)"
                                                                                 "f(p_1)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (lemma
                                                                           "dot_non_neg[n]")
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             "p")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "f(x) - f(p_1)"
                                                               "f(x)"
                                                               "f(p_1)")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "max"
                                                                   -)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "f(p_1)")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (typepred "f(x)")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (split)
                                      (("1"
                                        (mult-by 1 "sqrt(p*p)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (mult-by 2 "sqrt(p*p)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "norm_2(n)")
                                              (("2"
                                                (expand "norm?" -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst -3 "p")
                                                    (("2"
                                                      (hide -1 -2 -4)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (case
                                                           "NOT sqrt(p*p) = norm_2(n)(p)")
                                                          (("1"
                                                            (expand
                                                             "norm_2"
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "norm_2sq"
                                                               1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (lemma "dot_non_neg[n]")
                                          (("3" (inst -1 "p") nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (mult-by 1 "sqrt(p*p)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (lemma "dot_non_neg[n]")
                                            (("2"
                                              (inst -1 "p")
                                              nil
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma "dot_non_neg[n]")
                                            (("3"
                                              (inst -1 "p")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (assert)
                                      (("3"
                                        (case
                                         "NOT sqrt(p * p) = norm_2(n)(p)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "norm_2")
                                            (("1"
                                              (expand "norm_2sq")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "norm_2(n)")
                                          (("2"
                                            (expand "norm?" -1)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -3 "p")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (assert)
                                      (("4"
                                        (lemma "dot_non_neg[n]")
                                        (("4" (inst -1 "p") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dot_dist formula-decl nil vector_arithmetic nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_2sq const-decl "nonneg_real" norms nil)
    (dot_non_neg formula-decl nil cauchy_schwarz nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cauchy_schwarz formula-decl nil cauchy_schwarz nil)
    (x skolem-const-decl "(D)" continuity_multivar nil)
    (dot_dist_sub formula-decl nil vector_arithmetic nil)
    (eps skolem-const-decl "posreal" continuity_multivar nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (p skolem-const-decl "VectorN(n)" continuity_multivar nil)
    (* const-decl "real" matrices matrices)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D skolem-const-decl "domain[n]" continuity_multivar nil)
    (f skolem-const-decl "[(D) -> VectorN(n)]" continuity_multivar nil)
    (x skolem-const-decl "(D)" continuity_multivar nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_times_real_is_real application-judgement "real" reals nil)
    (p_1 skolem-const-decl "(D)" continuity_multivar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (abs_0 formula-decl nil abs_lems reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dot_commutes formula-decl nil matrices matrices)
    (dot_zero formula-decl nil vector_arithmetic nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (norm_2 const-decl "(norm?(m))" norms nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (contD? const-decl "bool" continuity_multivar nil))
   nil)
  (cont_inner_prod-2 nil 3741958386
   ("" (skeep)
    (("" (skeep)
      (("" (expand "contD?")
        (("" (expand "contD?" -1)
          (("" (skeep)
            (("" (typepred "p_1")
              (("" (inst -4 "p_1")
                (("" (assert)
                  (("" (expand "contp?")
                    (("" (skeep)
                      (("" (inst -4 "nn" "_")
                        (("" (lemma "cauchy_schwarz")
                          (("" (lemma "dot_dist")
                            (("" (inst -6 "norm_2(n)")
                              ((""
                                (skeep)
                                ((""
                                  (case "p=zero_vec(n)")
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (lemma "dot_zero")
                                      (("1"
                                        (inst 1 "1")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst -1 "f(x)" "n")
                                            (("1"
                                              (lemma "dot_commutes")
                                              (("1"
                                                (inst
                                                 -1
                                                 "f(x)"
                                                 "zero_vec(n)")
                                                (("1"
                                                  (replace -1 1 rl)
                                                  (("1"
                                                    (replace -2 1)
                                                    (("1"
                                                      (lemma
                                                       "dot_zero")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "f(p_1)"
                                                         "n")
                                                        (("1"
                                                          (lemma
                                                           "dot_commutes")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "zero_vec(n)"
                                                             "f(p_1)")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "abs"
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "f(p_1)")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "f(x)")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst -6 "eps/sqrt(p*p)")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 2 "delta")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (lemma "dot_dist_sub")
                                              (("1"
                                                (lemma "dot_dist_sub")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "p"
                                                   "f(x)"
                                                   "f(p_1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1 2 rl)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "p"
                                                           "(f(x) - f(p_1))")
                                                          (("1"
                                                            (expand
                                                             "norm_2"
                                                             -8)
                                                            (("1"
                                                              (expand
                                                               "norm_2sq"
                                                               -8)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -3
                                                                   -5)
                                                                  (("1"
                                                                    (inst
                                                                     -4
                                                                     "x")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (mult-by
                                                                         -4
                                                                         "sqrt(p*p)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "dot_non_neg")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "f(x) - f(p_1)")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "f(x) - f(p_1)"
                                                                                 "f(x)"
                                                                                 "f(p_1)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (lemma
                                                                           "dot_non_neg")
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             "p")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "f(x) - f(p_1)"
                                                               "f(x)"
                                                               "f(p_1)")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "max"
                                                                   -)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "f(p_1)")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (typepred "f(x)")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (split)
                                        (("1"
                                          (mult-by 1 "sqrt(p*p)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (mult-by 2 "sqrt(p*p)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (typepred "norm_2(n)")
                                                (("2"
                                                  (expand "norm?" -1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst -3 "p")
                                                      (("2"
                                                        (hide -1 -2 -4)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (case
                                                             "NOT sqrt(p*p) = norm_2(n)(p)")
                                                            (("1"
                                                              (expand
                                                               "norm_2"
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "norm_2sq"
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma "dot_non_neg")
                                            (("3"
                                              (inst -1 "p")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (mult-by 1 "sqrt(p*p)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (lemma "dot_non_neg")
                                              (("2"
                                                (inst -1 "p")
                                                nil
                                                nil))
                                              nil)
                                             ("3"
                                              (lemma "dot_non_neg")
                                              (("3"
                                                (inst -1 "p")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (assert)
                                        (("3"
                                          (case
                                           "NOT sqrt(p * p) = norm_2(n)(p)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "norm_2")
                                              (("1"
                                                (expand "norm_2sq")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "norm_2(n)")
                                            (("2"
                                              (expand "norm?" -1)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (inst -3 "p")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (assert)
                                        (("4"
                                          (lemma "dot_non_neg")
                                          (("4" (inst -1 "p") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cauchy_schwarz formula-decl nil cauchy_schwarz nil)
    (norm_2 const-decl "(norm?(m))" norms nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (dot_zero formula-decl nil vector_arithmetic nil)
    (dot_commutes formula-decl nil matrices matrices)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs_nat formula-decl nil abs_lems reals)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "real" matrices matrices)
    (/= const-decl "boolean" notequal nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (dot_dist_sub formula-decl nil vector_arithmetic nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_2sq const-decl "nonneg_real" norms nil)
    (dot_non_neg formula-decl nil cauchy_schwarz nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (dot_dist formula-decl nil vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (cont_inner_prod-1 nil 3741942787
   ("" (skeep)
    (("" (skeep)
      (("" (expand "contD?")
        (("" (expand "contD?" -1)
          (("" (skeep)
            (("" (typepred "p_1")
              (("" (inst -4 "p_1")
                (("" (assert)
                  (("" (expand "contp?")
                    (("" (skeep)
                      (("" (inst -4 "nn" "_")
                        (("" (lemma "cauchy_schwarz")
                          (("" (lemma "dot_dist")
                            (("" (inst -6 "norm_2(n)")
                              ((""
                                (skeep)
                                ((""
                                  (case "p=zero_vec(n)")
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (lemma "dot_zero")
                                      (("1"
                                        (inst 1 "1")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst -1 "f(x)" "n")
                                            (("1"
                                              (lemma "dot_commutes")
                                              (("1"
                                                (inst
                                                 -1
                                                 "f(x)"
                                                 "zero_vec(n)")
                                                (("1"
                                                  (replace -1 1 rl)
                                                  (("1"
                                                    (replace -2 1)
                                                    (("1"
                                                      (lemma
                                                       "dot_zero")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "f(p_1)"
                                                         "n")
                                                        (("1"
                                                          (lemma
                                                           "dot_commutes")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "zero_vec(n)"
                                                             "f(p_1)")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "abs"
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "f(p_1)")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "f(x)")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst -6 "eps/(p*p)")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 2 "delta")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (lemma "dot_dist_sub")
                                              (("1"
                                                (lemma "dot_dist_sub")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "p"
                                                   "f(x)"
                                                   "f(p_1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1 2 rl)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "p"
                                                           "(f(x) - f(p_1))")
                                                          (("1"
                                                            (expand
                                                             "norm_2"
                                                             -8)
                                                            (("1"
                                                              (expand
                                                               "norm_2sq"
                                                               -8)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -3
                                                                   -5)
                                                                  (("1"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (postpone)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil)
                                       ("3" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (contp_norm_v2r 0
  (contp_norm_v2r-1 nil 3740406888
   ("" (skeep)
    (("" (split)
      (("1" (lemma "equiv_norm")
        (("1" (assert)
          (("1" (flatten)
            (("1" (skeep)
              (("1" (expand "contp?")
                (("1" (skeep)
                  (("1" (inst -1 "nn" "nn!1")
                    (("1" (expand "equiv?")
                      (("1" (skeep)
                        (("1" (skeep)
                          (("1" (inst -2 "eps")
                            (("1" (skeep)
                              (("1"
                                (inst 1 "delta*c1")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -1 "x-p")
                                    (("1"
                                      (inst -2 "x")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (div-by -1 "c1")
                                          (("1"
                                            (div-by -4 "c1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "x-p")
                                      (("2"
                                        (expand "max" -2)
                                        (("2"
                                          (typepred "x")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "contp?" -1)
          (("2" (inst -1 "norm_inf(n)")
            (("2" (assert)
              (("2" (inst 1 "norm_inf(n)")
                (("2" (expand "contp?") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equiv? const-decl "bool" norms_equiv nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (p skolem-const-decl "(D)" continuity_multivar nil)
    (x skolem-const-decl "(D)" continuity_multivar nil)
    (D skolem-const-decl "domain[n]" continuity_multivar nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (equiv_norm formula-decl nil norms_equiv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (contp_norms_v2v 0
  (contp_norms_v2v-4 nil 3742804702
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "contp?")
            (("1" (skeep)
              (("1" (skeep)
                (("1" (lemma "equiv_norm_m")
                  (("1" (inst-cp -1 "n" "n1" "n1!1")
                    (("1" (inst -1 "m" "n2" "n2!1")
                      (("1" (expand "equiv_m?")
                        (("1" (skeep)
                          (("1" (skeep)
                            (("1" (inst -3 "eps/c2")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 1 "delta*c1!1")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -3 "x")
                                      (("1"
                                        (inst -1 "f(x)-f(p)")
                                        (("1"
                                          (inst -2 "x-p")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (div-by -4 "c1!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (mult-by
                                                         -1
                                                         "c2")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (mult-by
                                                           -5
                                                           "c1!1")
                                                          (("2"
                                                            (div-by
                                                             -5
                                                             "c1!1")
                                                            (("2"
                                                              (div-by
                                                               -3
                                                               "c1!1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "x-p" "x" "p")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "max" -)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred
                                           "f(x)-f(p)"
                                           "f(x)"
                                           "f(p)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "max" -)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "contp?")
        (("2" (flatten)
          (("2" (inst -1 "norm_inf(n)" "norm_inf(m)")
            (("2" (inst 1 "norm_inf(n)" "norm_inf(m)") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((equiv_norm_m formula-decl nil norms_equiv_general nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (p skolem-const-decl "(D)" continuity_multivar nil)
    (x skolem-const-decl "(D)" continuity_multivar nil)
    (f skolem-const-decl "[(D) -> VectorN(m)]" continuity_multivar nil)
    (m skolem-const-decl "posnat" continuity_multivar nil)
    (D skolem-const-decl "domain[n]" continuity_multivar nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (equiv_m? const-decl "bool" norms_equiv nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil)
  (contp_norms_v2v-3 nil 3742804614
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "contp?")
            (("1" (skeep)
              (("1" (skeep)
                (("1" (lemma "equiv_norm_m")
                  (("1" (inst-cp -1 "n" "n1" "n1!1")
                    (("1" (inst -1 "m" "n2" "n2!1")
                      (("1" (expand "equiv_m?")
                        (("1" (skeep)
                          (("1" (skeep)
                            (("1" (inst -3 "eps/c2")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 1 "delta*c2!1")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -3 "x")
                                      (("1"
                                        (inst -1 "f(x)-f(p)")
                                        (("1"
                                          (inst -2 "x-p")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (div-by -4 "c1!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (mult-by
                                                         -1
                                                         "c2")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (mult-by
                                                           -5
                                                           "c1!1")
                                                          (("2"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (postpone) nil nil))
                                          nil)
                                         ("2" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "contp?")
        (("2" (flatten)
          (("2" (inst -1 "norm_inf(n)" "norm_inf(m)")
            (("2" (inst 1 "norm_inf(n)" "norm_inf(m)") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (contp_norms_v2v-2 nil 3740409926
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "contp?")
            (("1" (skeep)
              (("1" (skeep)
                (("1" (lemma "equiv_norm_m")
                  (("1" (inst-cp -1 "n" "n1" "n1!1")
                    (("1" (inst -1 "m" "n2" "n2!1")
                      (("1" (expand "equiv_m?")
                        (("1" (skeep)
                          (("1" (skeep)
                            (("1" (inst -3 "eps/c2")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 1 "delta*c2!1")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -3 "x")
                                      (("1"
                                        (inst -1 "f(x)-f(p)")
                                        (("1"
                                          (inst -2 "x-p")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (div-by -4 "c2!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (mult-by
                                                         -1
                                                         "c2")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (postpone) nil nil))
                                          nil)
                                         ("2" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "contp?")
        (("2" (flatten)
          (("2" (inst -1 "norm_inf(n)" "norm_inf(m)")
            (("2" (inst 1 "norm_inf(n)" "norm_inf(m)") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" continuity_multivar nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil)
  (contp_norms_v2v-1 nil 3740408429
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "contp?")
            (("1" (lemma "equiv_norm_m")
              (("1" (lemma "equiv_norm")
                (("1" (skeep)
                  (("1" (inst -1 "n1" "n1!1")
                    (("1" (inst -2 "m" "n2" "n2!1")
                      (("1" (expand "equiv?")
                        (("1" (skeep)
                          (("1" (skeep)
                            (("1" (skeep)
                              (("1"
                                (inst -3 "eps/c2!1")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 1 "delta*c1")
                                    (("1"
                                      (skeep)
                                      (("1" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "contp?")
          (("2" (inst -1 "norm_inf(n)" "norm_inf(m)")
            (("2" (inst 1 "norm_inf(n)" "norm_inf(m)") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (contp_norm_v2v 0
  (contp_norm_v2v-1 nil 3740410141
   ("" (lemma "contp_norms_v2v")
    (("" (expand "contp?" 1)
      (("" (assert)
        (("" (skeep)
          (("" (inst?)
            (("" (assert)
              (("" (flatten)
                (("" (split)
                  (("1" (assert)
                    (("1" (skeep)
                      (("1" (inst 1 "n1")
                        (("1" (lemma "equiv_norm")
                          (("1" (inst -1 "n1" "n2")
                            (("1" (expand "equiv?" -1)
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "contp?")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -3 "eps*c1")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "delta")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst -3 "x")
                                              (("1"
                                                (inst -1 "f(x)-f(p)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (div-by -4 "c1")
                                                      (("1"
                                                        (div-by
                                                         -1
                                                         "c1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred
                                                   "f(x) - f(p)")
                                                  (("2"
                                                    (typepred "f(x)")
                                                    (("2"
                                                      (typepred "f(p)")
                                                      (("2"
                                                        (expand
                                                         "max"
                                                         -6)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split)
                    (("1" (propax) nil nil)
                     ("2" (split)
                      (("1" (flatten)
                        (("1" (skeep)
                          (("1" (lemma "contp_norms_v2v")
                            (("1" (inst? -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2" (inst 1 "nn" "nn") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((contp? const-decl "bool" continuity_multivar nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (equiv_norm formula-decl nil norms_equiv nil)
    (equiv? const-decl "bool" norms_equiv nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (p skolem-const-decl "(D)" continuity_multivar nil)
    (x skolem-const-decl "(D)" continuity_multivar nil)
    (f skolem-const-decl "[(D) -> VectorN(n)]" continuity_multivar nil)
    (D skolem-const-decl "domain[n]" continuity_multivar nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (contp_norms_v2v formula-decl nil continuity_multivar nil))
   shostak))
 (contD_norm_v2r 0
  (contD_norm_v2r-1 nil 3740411849
   ("" (skeep)
    (("" (lemma "contp_norms_v2v")
      (("" (inst -1 "D" "1" "LAMBDA(vv:(D)): (: f(vv) :)" "_")
        (("" (split 1)
          (("1" (flatten)
            (("1" (skeep -1)
              (("1" (expand "contD?" -1)
                (("1" (expand "contD?" 1)
                  (("1" (skeep 1)
                    (("1" (inst -1 "p")
                      (("1" (inst -2 "p")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1"
                                (expand "contp?" -1)
                                (("1"
                                  (expand "contp?" 1)
                                  (("1"
                                    (skeep 1)
                                    (("1"
                                      (skeep 1)
                                      (("1"
                                        (inst -1 "nn!1" "norm_inf(1)")
                                        (("1"
                                          (inst -1 "eps")
                                          (("1"
                                            (skeep -1)
                                            (("1"
                                              (inst 1 "delta")
                                              (("1"
                                                (skeep 1)
                                                (("1"
                                                  (inst -1 "x")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst 1 "nn" "norm_inf(1)")
                                (("2"
                                  (hide -2 2)
                                  (("2"
                                    (expand "contp?")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst -1 "eps")
                                        (("2"
                                          (skeep -1)
                                          (("2"
                                            (inst 1 "delta")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -2 "x")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (flatten)
              (("2" (expand "contD?" -1)
                (("2" (inst 1 "norm_inf(n)")
                  (("2" (expand "contD?" 1)
                    (("2" (skeep 1)
                      (("2" (inst -1 "p")
                        (("2" (expand "contp?" -1)
                          (("2" (inst -1 "norm_inf(n)")
                            (("2" (expand "contp?" 1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((contp_norms_v2v formula-decl nil continuity_multivar nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (max def-decl "real" norms nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (length_singleton formula-decl nil more_list_props structures))
   shostak))
 (contD_norms_v2v 0
  (contD_norms_v2v-1 nil 3740412242
   ("" (lemma "contp_norms_v2v")
    (("" (skeep)
      (("" (inst?)
        (("" (split)
          (("1" (expand "contD?")
            (("1" (flatten)
              (("1" (skeep)
                (("1" (inst -2 "m" "f" "p")
                  (("1" (assert)
                    (("1" (skeep)
                      (("1" (inst 2 "n1" "n2")
                        (("1" (inst -1 "p") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "contD?" -1)
              (("2" (inst 1 "norm_inf(n)" "norm_inf(m)")
                (("2" (assert)
                  (("2" (expand "contD?")
                    (("2" (skeep)
                      (("2" (inst -1 "p")
                        (("2" (expand "contp?" -1)
                          (("2" (expand "contp?")
                            (("2" (inst -1 "norm_inf(n)" "norm_inf(m)")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (contp_norms_v2v formula-decl nil continuity_multivar nil))
   shostak))
 (contD_norm_v2v 0
  (contD_norm_v2v-1 nil 3740412610
   ("" (lemma "contD_norms_v2v")
    (("" (skeep)
      (("" (expand "contD?" 1)
        (("" (inst?)
          (("" (flatten)
            (("" (split)
              (("1" (assert)
                (("1" (lemma "equiv_norm")
                  (("1" (skeep)
                    (("1" (inst -1 "n1" "n2")
                      (("1" (expand "equiv?")
                        (("1" (skeep)
                          (("1" (inst 1 "n1")
                            (("1" (assert)
                              (("1"
                                (expand "contD?")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -2 "p!1")
                                    (("1"
                                      (expand "contp?")
                                      (("1"
                                        (inst -2 "n1" "n1")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (split)
                  (("1" (propax) nil nil)
                   ("2" (split)
                    (("1" (flatten)
                      (("1" (skeep) (("1" (inst 3 "nn" "nn") nil nil))
                        nil))
                      nil)
                     ("2" (flatten) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (equiv_norm formula-decl nil norms_equiv nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (equiv? const-decl "bool" norms_equiv nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (contD_norms_v2v formula-decl nil continuity_multivar nil))
   shostak))
 (norm_cont_v2v_TCC1 0
  (norm_cont_v2v_TCC1-1 nil 3788011937 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (norm_cont_v2v subtype "continuity_multivar.v"
    "(list_adt[real].cons?)")))
 (norm_cont_v2v 0
  (norm_cont_v2v-1 nil 3788012320
   ("" (lemma "contD_norm_v2r")
    (("" (skeep)
      (("" (expand "contD?" 1)
        (("" (skeep 1)
          (("" (inst -1 "D" "LAMBDA (v: (D)): nn(v)")
            (("1" (assert)
              (("1" (expand "contD?" -1 2)
                (("1" (flatten)
                  (("1" (split -1)
                    (("1" (inst -1 "p") nil nil)
                     ("2" (inst 1 "nn")
                      (("2" (hide -1)
                        (("2" (hide 2)
                          (("2" (expand "contD?" 1)
                            (("2" (skeep)
                              (("2"
                                (expand "contp?" 1)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (lemma "reverse_triag")
                                    (("2"
                                      (inst 1 "eps")
                                      (("2"
                                        (skeep 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst
                                             -1
                                             "n"
                                             "x"
                                             "p!1"
                                             "nn")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep 1)
              (("2" (typepred "v")
                (("2" (typepred "n")
                  (("2" (expand "length" -3) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (reverse_triag formula-decl nil norms nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (D skolem-const-decl "domain[n]" continuity_multivar nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (contD_norm_v2r formula-decl nil continuity_multivar nil))
   shostak))
 (cont_sum 0
  (cont_sum-1 nil 3788283491
   ("" (skeep)
    (("" (expand "contD?")
      (("" (skeep)
        (("" (inst -1 "p")
          (("" (inst -2 "p")
            (("" (expand "contp?")
              (("" (skeep 1)
                (("" (inst -1 "nn")
                  (("" (inst -2 "nn")
                    (("" (skeep 1)
                      (("" (inst -1 "eps/2")
                        (("" (inst -2 "eps/2")
                          (("" (skeep -2)
                            (("" (skeep -1)
                              ((""
                                (inst 1 "min(delta!1,delta)")
                                ((""
                                  (skeep 1)
                                  ((""
                                    (inst -1 "x")
                                    ((""
                                      (inst -2 "x")
                                      ((""
                                        (assert)
                                        ((""
                                          (expand "+")
                                          ((""
                                            (assert)
                                            ((""
                                              (case
                                               "f(x)+g(x) - f(p) - g(p) = f(x)-f(p) + (g(x) - g(p))")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (lemma "triangle")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "f(x)-f(p)"
                                                     "g(x)-g(p)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (lemma "quad_move")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((contD? const-decl "bool" continuity_multivar nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (triangle formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (quad_move formula-decl nil vector_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (cont_const 0
  (cont_const-1 nil 3788799256
   ("" (skeep)
    (("" (expand "contD?")
      (("" (skeep)
        (("" (inst -1 "p")
          (("" (expand "contp?")
            (("" (skeep)
              (("" (inst -1 "nn")
                (("" (skeep)
                  (("" (case "C=0")
                    (("1" (inst 1 "1")
                      (("1" (skeep 1) (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (inst -1 "eps/abs(C)")
                      (("1" (skeep)
                        (("1" (inst 2 "delta")
                          (("1" (skeep)
                            (("1" (inst -1 "x")
                              (("1"
                                (expand "*")
                                (("1"
                                  (case
                                   "C * f(x) - C * f(p) = C* (f(x)-f(p))")
                                  (("1"
                                    (replace -1 2)
                                    (("1"
                                      (lemma "abs_mult")
                                      (("1"
                                        (inst -1 "C" "(f(x)-f(p))")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (div-by 2 "abs(C)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (split 1)
                        (("1" (mult-by 1 "abs(C)")
                          (("1" (assert) nil nil)) nil)
                         ("2" (mult-by 1 "abs(C)")
                          (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((contD? const-decl "bool" continuity_multivar nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (C skolem-const-decl "real" continuity_multivar nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (eps skolem-const-decl "posreal" continuity_multivar nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (abs_mult formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (abs_nat formula-decl nil abs_lems reals)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (cont_lift_TCC1 0
  (cont_lift_TCC1-1 nil 3789389411 ("" (subtype-tcc) nil nil)
   ((VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (cont_lift subtype "continuity_multivar.vv"
    "(list_adt[real].cons?)")))
 (cont_lift_TCC2 0
  (cont_lift_TCC2-1 nil 3789389411 ("" (subtype-tcc) nil nil)
   ((length_singleton formula-decl nil more_list_props structures)) nil
   (cont_lift subtype
    "(: continuity_multivar.f(list_adt[real].car(continuity_multivar.v)) :)"
    "matrices.VectorN(1)")))
 (cont_lift_TCC3 0
  (cont_lift_TCC3-1 nil 3789389411 ("" (subtype-tcc) nil nil) nil nil
   (cont_lift subtype
    "LAMBDA (v: matrices.VectorN(1)): continuity_multivar.d(list_adt[real].car(v))"
    "domain[n]")))
 (cont_lift 0
  (cont_lift-1 nil 3789389431
   ("" (skeep 1)
    (("" (split 1)
      (("1" (flatten)
        (("1" (lemma "contD_norms_v2v")
          (("1"
            (inst -1 "LAMBDA (v: VectorN(1)): d(car(v))" "1"
             "(LAMBDA (v: {vv: VectorN(1) | d(car(vv))}): (: f(car(v)) :))")
            (("1" (assert)
              (("1" (hide 2)
                (("1" (inst 1 "norm_inf(1)" "norm_inf(1)")
                  (("1" (expand "contD?" 1)
                    (("1" (expand "continuous?" -1)
                      (("1" (skeep 1)
                        (("1" (inst -1 "car(p)")
                          (("1" (expand "contp?" 1)
                            (("1" (expand "continuous?" -1)
                              (("1"
                                (skeep 1)
                                (("1"
                                  (inst -1 "eps")
                                  (("1"
                                    (skeep -1)
                                    (("1"
                                      (inst 1 "delta")
                                      (("1"
                                        (skeep 1)
                                        (("1"
                                          (inst -2 "car(x)")
                                          (("1"
                                            (split -2)
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (expand "norm_inf" -1)
                                                (("2"
                                                  (expand
                                                   "norm_inf"
                                                   -1)
                                                  (("2"
                                                    (expand "max" -1)
                                                    (("2"
                                                      (expand "abs" -1)
                                                      (("2"
                                                        (typepred
                                                         "x-p"
                                                         "x"
                                                         "p")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -4)
                                                            (("2"
                                                              (replace
                                                               -7)
                                                              (("2"
                                                                (expand
                                                                 "max"
                                                                 -2)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "-"
                                                                     -9)
                                                                    (("2"
                                                                      (expand
                                                                       "sub"
                                                                       -9)
                                                                      (("2"
                                                                        (expand
                                                                         "scal"
                                                                         -9)
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           -7)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -7)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lift-if
                                                                                 -7)
                                                                                (("2"
                                                                                  (split
                                                                                   -7)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "scal"
                                                                                       -9)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "add"
                                                                                         -9)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -2 1) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skeep 1)
              (("2" (typepred "v") (("2" (grind) nil nil)) nil)) nil)
             ("3" (skeep 1) (("3" (grind) nil nil)) nil)
             ("4" (skeep 1)
              (("4" (typepred "v") (("4" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "contD?" -1)
          (("2" (expand "continuous?" 1)
            (("2" (skeep 1)
              (("2" (inst -1 "(: x0 :)")
                (("2" (expand "contp?" -1)
                  (("2" (expand "continuous?" 1 1)
                    (("2" (skeep 1)
                      (("2" (inst -1 "norm_inf(1)" "norm_inf(1)")
                        (("1" (inst -1 "epsilon")
                          (("1" (skeep -1)
                            (("1" (inst 1 "delta")
                              (("1"
                                (skeep 1)
                                (("1"
                                  (inst -1 "(: x :)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -1)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace -1 1) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((contD_norms_v2v formula-decl nil continuity_multivar nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max def-decl "real" norms nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (length_singleton formula-decl nil more_list_props structures)
    (d skolem-const-decl "[real -> bool]" continuity_multivar nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" continuity_multivar nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak)))