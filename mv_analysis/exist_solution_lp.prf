(exist_solution_lp
 (norm_program?_TCC1 0
  (norm_program?_TCC1-1 nil 3742914685 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" exist_solution_lp nil)
    (VectorN type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (norm_program? subtype "exist_solution_lp.x"
    "(list_adt[real].cons?)")))
 (convergence_in_solution_set_TCC1 0
  (convergence_in_solution_set_TCC1-1 nil 3742825394
   ("" (skeep)
    (("" (typepred "mult[n](m, n, A, VV(i)) - b")
      (("" (typepred "b" "mult[n](m, n, A, VV(i))")
        (("" (expand "max" -)
          (("" (assert) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((vec_seq type-eq-decl nil domain_vec2real_def nil)
    (mult const-decl "VectorN(m)" matrix_vector_multiplication nil)
    (n formal-const-decl "posnat" exist_solution_lp nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (Matrix type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (convergence_in_solution_set subtype
    "(matrices.-)(matrix_vector_multiplication[exist_solution_lp.n].mult(exist_solution_lp.m, exist_solution_lp.n, exist_solution_lp.A, exist_solution_lp.VV(exist_solution_lp.i)), exist_solution_lp.b)"
    "(list_adt[real].cons?)")))
 (convergence_in_solution_set_TCC2 0
  (convergence_in_solution_set_TCC2-1 nil 3742825394
   ("" (skeep)
    (("" (typepred "mult[n](m, n, A, L) - b" "b" "mult[n](m, n, A, L)")
      (("" (expand "max" -) (("" (assert) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((mult const-decl "VectorN(m)" matrix_vector_multiplication nil)
    (n formal-const-decl "posnat" exist_solution_lp nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (Matrix type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (convergence_in_solution_set subtype
    "(matrices.-)(matrix_vector_multiplication[exist_solution_lp.n].mult(exist_solution_lp.m, exist_solution_lp.n, exist_solution_lp.A, exist_solution_lp.L), exist_solution_lp.b)"
    "(list_adt[real].cons?)")))
 (convergence_in_solution_set 0
  (convergence_in_solution_set-1 nil 3742826095
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (lemma "sequential_criterian1")
          ((""
            (inst -1 "LAMBDA(v:VectorN(n)): TRUE"
             "LAMBDA(v:VectorN(n)): norm_inf(m)(mult(m, n, A, v) - b)")
            (("1" (split)
              (("1" (inst -1 "V" "L")
                (("1" (assert)
                  (("1" (typepred "V")
                    (("1"
                      (case "NOT (LAMBDA (i: nat): norm_inf(m)(mult(m, n, A, V(i)) - b)) = LAMBDA(i:nat): 0")
                      (("1" (decompose-equality 1)
                        (("1" (skeep)
                          (("1"
                            (typepred "mult[n](m, n, A, V(i)) - b" "b"
                             "mult[n](m, n, A, V(i))")
                            (("1" (expand "max" -)
                              (("1"
                                (assert)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (replace -1 -3)
                          (("2" (expand "convergence")
                            (("2"
                              (inst -3
                               "norm_inf(m)(mult(m, n, A, L) - b)")
                              (("2"
                                (skeep)
                                (("2"
                                  (inst -3 "n_1+1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma "abs_mult")
                                      (("2"
                                        (inst
                                         -1
                                         "-1"
                                         "norm_inf(m)(mult(m, n, A, L) - b)")
                                        (("2"
                                          (expand "abs" -1 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skeep)
                        (("3"
                          (typepred "mult[n](m, n, A, V(i)) - b" "b"
                           "mult[n](m, n, A, V(i))")
                          (("3" (expand "max" -)
                            (("3" (assert) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2 -1)
                (("2" (expand "contD?")
                  (("2" (skeep)
                    (("2" (lemma "contD_norm_v2r")
                      (("2"
                        (inst -1 "LAMBDA (v: VectorN(n)): TRUE"
                         "LAMBDA (v: VectorN(n)): norm_inf(m)(mult(m, n, A, v) - b)")
                        (("1" (flatten)
                          (("1" (split -1)
                            (("1" (expand "contD?" -1)
                              (("1"
                                (inst -1 "p")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (expand "contp?")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide -1)
                                (("2"
                                  (inst 1 "norm_2(n)")
                                  (("2"
                                    (expand "contD?")
                                    (("2"
                                      (skeep 1)
                                      (("2"
                                        (typepred "p!1")
                                        (("2"
                                          (case "max_row_2(m,n, A)=0")
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (expand "contp?" 1)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst 1 "1")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (lemma
                                                       "reverse_triag")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "m"
                                                         "mult(m, n, A, x) - b"
                                                         "mult(m, n, A, p!1) - b"
                                                         "norm_inf(m)")
                                                        (("1"
                                                          (lemma
                                                           "quad_cancel")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "mult(m, n, A, x)"
                                                             "b"
                                                             "mult(m, n, A, p!1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -2)
                                                                (("1"
                                                                  (lemma
                                                                   "mmult_sub_dist")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "m"
                                                                     "n"
                                                                     "A"
                                                                     "x"
                                                                     "p!1")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -3
                                                                       rl)
                                                                      (("1"
                                                                        (lemma
                                                                         "mmult_inf_bound")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "m"
                                                                           "n"
                                                                           "A"
                                                                           "x-p!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "mult[n](m, n, A, p!1)")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (typepred
                                                               "mult[n](m, n, A, x)")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "mult[n](m, n, A, p!1) - b"
                                                           "mult[n](m, n, A, p!1)"
                                                           "b")
                                                          (("2"
                                                            (expand
                                                             "max"
                                                             -)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (typepred
                                                           "mult[n](m, n, A, x) - b"
                                                           "mult[n](m, n, A, x)"
                                                           "b")
                                                          (("3"
                                                            (expand
                                                             "max"
                                                             -)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -1)
                                            (("2"
                                              (hide 3)
                                              (("2"
                                                (expand "contp?" 2)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst
                                                     2
                                                     "eps/max_row_2(m,n,A)")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (mult-by
                                                         -2
                                                         "max_row_2(m, n, A)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "reverse_triag")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "m"
                                                               "mult(m, n, A, x) - b"
                                                               "mult(m, n, A, p!1) - b"
                                                               "norm_inf(m)")
                                                              (("1"
                                                                (lemma
                                                                 "quad_cancel")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "mult(m, n, A, x)"
                                                                   "b"
                                                                   "mult(m, n, A, p!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         -2)
                                                                        (("1"
                                                                          (lemma
                                                                           "mmult_sub_dist")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "m"
                                                                             "n"
                                                                             "A"
                                                                             "x"
                                                                             "p!1")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               -3
                                                                               rl)
                                                                              (("1"
                                                                                (lemma
                                                                                 "mmult_inf_bound")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "m"
                                                                                   "n"
                                                                                   "A"
                                                                                   "x-p!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "mult[n](m, n, A, p!1) - b"
                                                                 "mult[n](m, n, A, p!1)"
                                                                 "b")
                                                                (("2"
                                                                  (expand
                                                                   "max"
                                                                   -)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (typepred
                                                                 "mult[n](m, n, A, x) - b"
                                                                 "b"
                                                                 "mult[n](m, n, A, x)")
                                                                (("3"
                                                                  (expand
                                                                   "max"
                                                                   -)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (split)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (mult-by
                                                           1
                                                           "max_row_2[n](m, n, A)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (mult-by
                                                         1
                                                         "max_row_2[n](m, n, A)")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2"
                            (typepred "mult[n](m, n, A, v) - b"
                             "mult[n](m, n, A, v)" "b")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2"
                (typepred "mult[n](m, n, A, v) - b"
                 "mult[n](m, n, A, v)" "b")
                (("2" (expand "max" -)
                  (("2" (assert) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" exist_solution_lp nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sequential_criterian1 formula-decl nil sequential_criterian nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (V skolem-const-decl "{VV: vec_seq(n) |
   FORALL (i: nat): norm_inf(m)(mult(m, n, A, VV(i)) - b) = 0}"
     exist_solution_lp nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (abs_mult formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (convergence const-decl "bool" convergence_sequences analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (contD_norm_v2r formula-decl nil continuity_multivar nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (norm_2 const-decl "(norm?(m))" norms nil)
    (<= const-decl "bool" reals nil)
    (row const-decl "Vector" matrices matrices)
    (max_row_2 const-decl "{c: nonneg_real |
   (FORALL (j: below(m)): norm_2(n)(row(A)(j)) <= c) AND
    EXISTS (i: below(m)): c = norm_2(n)(row(A)(i))}"
     matrix_vector_multiplication nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (reverse_triag formula-decl nil norms nil)
    (quad_cancel formula-decl nil vector_arithmetic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mmult_sub_dist formula-decl nil matrix_vector_multiplication nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (mmult_inf_bound formula-decl nil matrix_vector_multiplication nil)
    (p!1 skolem-const-decl "VectorN(n)" exist_solution_lp nil)
    (x skolem-const-decl "VectorN(n)" exist_solution_lp nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (x skolem-const-decl "VectorN(n)" exist_solution_lp nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (eps skolem-const-decl "posreal" exist_solution_lp nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (TRUE const-decl "bool" booleans nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (Matrix type-eq-decl nil matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (mult const-decl "VectorN(m)" matrix_vector_multiplication nil)
    (m skolem-const-decl "posnat" exist_solution_lp nil)
    (A skolem-const-decl "MatrixMN(m, n)" exist_solution_lp nil)
    (b skolem-const-decl "VectorN(m)" exist_solution_lp nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (existance_np_1 0
  (existance_np_1-3 nil 3742915214
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "extreme_value")
        (("" (expand "norm_program?")
          (("" (skeep)
            ((""
              (inst -1
               "{vv:VectorN(n)| (sat_eq_constraint?(m, eq_constraints)(vv) AND nn(vv)<=nn(v)) AND sat_ineq_constraint?(n,ineq_constraints)(vv)}"
               "LAMBDA( u:VectorN(n)): nn(u)")
              (("1" (assert)
                (("1" (split)
                  (("1" (flatten)
                    (("1" (hide -2)
                      (("1" (skeep)
                        (("1" (hide -2)
                          (("1" (inst 1 "pmin")
                            (("1" (expand "is_glob_minimizer?")
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "pmin")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "feasible?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst -6 "v2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst-cp -8 "pmin")
                                              (("1"
                                                (inst-cp -8 "v2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (inst-cp -7 "pmin")
                                              (("2"
                                                (inst -7 "v2")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (assert)
                      (("2" (expand "contD?")
                        (("2" (skeep)
                          (("2" (lemma "contp_norm_v2r")
                            (("2"
                              (inst -1 "LAMBDA (u: VectorN(n)): nn(u)"
                               "{vv: VectorN(n) |
                      (sat_eq_constraint?(m, eq_constraints)(vv) AND
                        nn(vv) <= nn(v))
                       AND sat_ineq_constraint?(n, ineq_constraints)(vv)}"
                               "p")
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide -2)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (expand "contp?")
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (expand "contp?")
                                          (("2"
                                            (inst 1 "nn")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (lemma "reverse_triag")
                                                (("2"
                                                  (inst 1 "eps/2")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "n"
                                                       "x"
                                                       "p"
                                                       "nn")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep)
                  (("2" (typepred "v") (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("3" (skeep)
                (("3" (assert)
                  (("3" (split)
                    (("1" (expand "closed_domain?")
                      (("1" (skeep)
                        (("1" (assert)
                          (("1" (split)
                            (("1" (expand "sat_eq_constraint?")
                              (("1"
                                (replace -4 1)
                                (("1"
                                  (lemma "zero_vec0")
                                  (("1"
                                    (inst -1 "m" "mult(A, L) - b")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (typepred "norm_inf(m)")
                                              (("2"
                                                (expand "norm?" -1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst
                                                     -3
                                                     "mult(A, L) - b")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide -1 -2 -3)
                                                        (("1"
                                                          (lemma
                                                           "convergence_in_solution_set")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "m"
                                                             "A"
                                                             "b"
                                                             "L")
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (expand
                                                                 "mult"
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 1
                                                                 "V")
                                                                (("2"
                                                                  (typepred
                                                                   "V")
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "i")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "sat_eq_constraint?")
                                                                          (("2"
                                                                            (lemma
                                                                             "zero_vec0")
                                                                            (("2"
                                                                              (replace
                                                                               -8
                                                                               -2)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "m"
                                                                                   "mult(A, V(i)) - b")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("1"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "norm_inf(m)")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "norm?")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -3
                                                                                                   "mult(A, V(i)) - b")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "mult"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (typepred
                                                                                                     "mult[n](A, V(i)) - b"
                                                                                                     "mult[n](A, V(i))"
                                                                                                     "b")
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -1
                                                                                                       -3
                                                                                                       -4)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "mult[n](m, n, A, V(i)) - b"
                                                                                     "mult[n](m, n, A, V(i))"
                                                                                     "b")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "mult"
                                                                                         -4)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "mult"
                                                                                           -2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "max"
                                                                                             -)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred
                                                       "mult[n](m,n,A, L) - b"
                                                       "mult[n](m,n,A, L)"
                                                       "b")
                                                      (("2"
                                                        (expand
                                                         "max"
                                                         -)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "mult"
                                                             -2)
                                                            (("2"
                                                              (expand
                                                               "mult"
                                                               -4)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred
                                       "mult[n](m,n,A, L) - b"
                                       "mult[n](m,n,A, L)"
                                       "b")
                                      (("2"
                                        (expand "max" -)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "mult" -2)
                                            (("2"
                                              (expand "mult" -4)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (expand "convergence?")
                                (("2"
                                  (expand "convergence?")
                                  (("2"
                                    (hide -2 -3 -4 -5 2)
                                    (("2"
                                      (inst -1 "nn")
                                      (("2"
                                        (inst -1 "nn(L)-nn(v)")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (typepred "V")
                                            (("2"
                                              (inst -2 "N+1")
                                              (("2"
                                                (inst -1 "N+1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (lemma
                                                       "reverse_triag")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "n"
                                                         "V(1+N)"
                                                         "L"
                                                         "nn")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "sat_ineq_constraint?")
                              (("3"
                                (replace -3 1)
                                (("3"
                                  (assert)
                                  (("3"
                                    (typepred "v")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand "convergence?")
                                        (("3"
                                          (hide -1 -2 -4 -5 -6 -7 -8)
                                          (("3"
                                            (hide 2)
                                            (("3"
                                              (typepred "V")
                                              (("3"
                                                (expand
                                                 "sat_eq_constraint?")
                                                (("3"
                                                  (expand
                                                   "sat_ineq_constraint?")
                                                  (("3"
                                                    (expand
                                                     "convergence?")
                                                    (("3"
                                                      (inst
                                                       -2
                                                       "norm_inf(n)")
                                                      (("3"
                                                        (skeep)
                                                        (("3"
                                                          (inst
                                                           -2
                                                           "- nth(L, i)")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "N+1")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "N+1")
                                                                (("1"
                                                                  (reveal
                                                                   -8)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "norm_inf_nth_m")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "n"
                                                                             "V(1 + N) - L")
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (lemma
                                                                                 "norm_inf_nth_ineq_m")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "n"
                                                                                   "V(1 + N) - L"
                                                                                   "i")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "NOT abs(nth(V(1 + N) - L, i))<-nth(L, i)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case
                                                                                         "nth(V(1 + N) - L, i) = nth(V(1+N),i) - nth(L,i)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           -2)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -8
                                                                                             "i")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "abs"
                                                                                               -2)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "nth_sum")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "V(1 + N)"
                                                                                               "-1*L")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "i")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "nth_dist")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "L"
                                                                                                           "-1"
                                                                                                           "i")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "sub_idx")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "V(1 + N)"
                                                                                                                   "L")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (typepred
                                                                                                     "V(1 + N)"
                                                                                                     "-1*L"
                                                                                                     "L")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (typepred
                                                                                                 "-1*L"
                                                                                                 "L")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "V(1 + N) - L"
                                                                                     "V(1+N)"
                                                                                     "L")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "max"
                                                                                       -)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "V(1 + N) - L"
                                                                               "L"
                                                                               "V(1+N)")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "max"
                                                                                   -)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "bounded_equiv")
                      (("2"
                        (inst -1 "{vv: VectorN(n) |
                    (sat_eq_constraint?[n](m, eq_constraints)(vv) AND
                      nn(vv) <= nn(v))
                     AND sat_ineq_constraint?[n](n, ineq_constraints)(vv)}")
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (hide -1)
                              (("2"
                                (hide 2)
                                (("2"
                                  (inst 1 "nn")
                                  (("2"
                                    (expand "bounded_domain?")
                                    (("2"
                                      (inst 1 "nn(v)+1")
                                      (("2"
                                        (skeep)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (typepred "v")
                      (("3" (assert)
                        (("3" (typepred "v")
                          (("3" (expand "nonempty?" 1)
                            (("3" (expand "empty?")
                              (("3"
                                (inst -5 "v")
                                (("3"
                                  (expand "member")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (assert) nil nil) ("5" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (norm_program? const-decl "bool" exist_solution_lp nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (eq_constraints skolem-const-decl "constraints[n](m)"
     exist_solution_lp nil)
    (m skolem-const-decl "posnat" exist_solution_lp nil)
    (sat_eq_constraint? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (v skolem-const-decl "VectorN(n)" exist_solution_lp nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain nil)
    (ineq_constraints skolem-const-decl "constraints[n](n)"
     exist_solution_lp nil)
    (sat_ineq_constraint? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (nn skolem-const-decl "(norm?(n))" exist_solution_lp nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (closed_domain? const-decl "bool" closed_bounded_domain nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (is_glob_minimizer? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (is_glob_minimizer? const-decl "bool" unconstrained_global_extrema
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (feasible? const-decl "bool" fundamentals_constrained_optimization
     nil)
    (v2 skolem-const-decl "VectorN(n)" exist_solution_lp nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reverse_triag formula-decl nil norms nil)
    (contp_norm_v2r formula-decl nil continuity_multivar nil)
    (contD? const-decl "bool" continuity_multivar nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (bounded_equiv formula-decl nil closed_bounded_domain nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "below(n)" exist_solution_lp nil)
    (norm_inf_nth_m formula-decl nil norms nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sub_idx formula-decl nil vector_arithmetic nil)
    (nth_dist formula-decl nil vector_arithmetic nil)
    (nth_sum formula-decl nil vector_arithmetic nil)
    (norm_inf_nth_ineq_m formula-decl nil norms nil)
    (N skolem-const-decl "posnat" exist_solution_lp nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (above nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (convergence? const-decl "bool" vector_sequences nil)
    (zero_vec0 formula-decl nil vector_arithmetic nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (convergence_in_solution_set formula-decl nil exist_solution_lp
     nil)
    (mult const-decl "VectorN(m)" matrix_vector_multiplication nil)
    (i skolem-const-decl "nat" exist_solution_lp nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (V skolem-const-decl "{VV: vec_seq[n](n) |
   FORALL (i: nat):
     (sat_eq_constraint?[n](m, eq_constraints)(VV(i)) AND
       nn(VV(i)) <= nn(v))
      AND sat_ineq_constraint?[n](n, ineq_constraints)(VV(i))}"
     exist_solution_lp nil)
    (vec_seq type-eq-decl nil domain_vec2real_def nil)
    (b skolem-const-decl "VectorN(m)" exist_solution_lp nil)
    (L skolem-const-decl "VectorN(n)" exist_solution_lp nil)
    (A skolem-const-decl "MatrixMN(m, n)" exist_solution_lp nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (mult def-decl "Vector" matrix_vector_multiplication nil)
    (Matrix type-eq-decl nil matrices matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (extreme_value formula-decl nil extreme_value_theorem nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" exist_solution_lp nil))
   nil)
  (existance_np_1-2 nil 3742915083
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "extreme_value")
        (("" (expand "norm_program?")
          (("" (skeep)
            ((""
              (inst -1
               "{vv:VectorN(n)| (sat_eq_constraint?(m, eq_constraints)(vv) AND nn(vv)<=nn(v)) AND sat_ineq_constraint?(m,ineq_constraints)(vv)}"
               "LAMBDA( u:VectorN(n)): nn(u)")
              (("1" (assert)
                (("1" (split)
                  (("1" (flatten)
                    (("1" (hide -2)
                      (("1" (skeep)
                        (("1" (hide -2)
                          (("1" (inst 1 "pmin")
                            (("1" (expand "is_glob_minimizer?")
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "pmin")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "feasible?")
                                      (("1" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil)
               ("2" (postpone) nil nil) ("3" (postpone) nil nil)
               ("4" (postpone) nil nil) ("5" (postpone) nil nil)
               ("6" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (existance_np_1-1 nil 3742914693
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "extreme_value")
        (("" (expand "norm_program?")
          (("" (skeep)
            ((""
              (inst -1
               "{vv:VectorN(n)| sat_eq_constraint?(m, eq_constraints)(vv) AND nn(vv)<=nn(v)}"
               "LAMBDA( u:VectorN(n)): nn(u)")
              (("1" (assert)
                (("1" (split)
                  (("1" (flatten)
                    (("1" (hide -2)
                      (("1" (skeep)
                        (("1" (hide -2)
                          (("1" (inst 1 "pmin")
                            (("1" (expand "is_glob_minimizer?")
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "pmin")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "feasible?")
                                      (("1"
                                        (expand "sat_ineq_constraint?")
                                        (("1" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil)
               ("2" (postpone) nil nil) ("3" (postpone) nil nil)
               ("4" (postpone) nil nil) ("5" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))