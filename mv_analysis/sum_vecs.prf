(sum_vecs
 (Sigmaa_TCC1 0
  (Sigmaa_TCC1-1 nil 3740822373 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" sum_vecs nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (Sigmaa subtype "sum_vecs.f" "(list_adt[real].cons?)")))
 (Sigmaa_TCC2 0
  (Sigmaa_TCC2-1 nil 3740822373 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" sum_vecs nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (Sigmaa subtype "sum_vecs.A" "(list_adt[list[real]].cons?)")))
 (Sigmaa_TCC3 0
  (Sigmaa_TCC3-1 nil 3740822373
   ("" (skeep)
    (("" (typepred "A")
      (("" (hide -1 -3)
        (("" (typepred "m")
          (("" (case "m=0")
            (("1" (expand "length" -3) (("1" (assert) nil nil)) nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((MatrixMN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" sum_vecs nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil (Sigmaa subtype "(number_fields.-)(sum_vecs.m, 1)" "nat")))
 (Sigmaa_TCC4 0
  (Sigmaa_TCC4-1 nil 3740822373
   ("" (skeep)
    (("" (typepred "A")
      (("" (split)
        (("1" (hide -1 -3)
          (("1" (expand "length" -1) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (inst -3 "i+1")
            (("1" (expand "nth" -3) (("1" (propax) nil nil)) nil)
             ("2" (assert)
              (("2" (typepred "i")
                (("2" (assert)
                  (("2" (expand "length" 1) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((MatrixMN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" sum_vecs nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (m skolem-const-decl "nat" sum_vecs nil)
    (A skolem-const-decl "MatrixMN(m, n)" sum_vecs nil)
    (i skolem-const-decl "below(length(cdr(A)))" sum_vecs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (Sigmaa subtype "list_adt[list[real]].cdr(sum_vecs.A)"
    "matrices.MatrixMN((number_fields.-)(sum_vecs.m, 1), sum_vecs.n)")))
 (Sigmaa_TCC5 0
  (Sigmaa_TCC5-1 nil 3740822373 ("" (termination-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" sum_vecs nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (Sigmaa termination
    "sum_vecs.Sigmaa((number_fields.-)(sum_vecs.m, 1), list_adt[list[real]].cdr(sum_vecs.A), list_adt[real].cdr(sum_vecs.f))"
    "nil")))
 (Sigma_TCC1 0
  (Sigma_TCC1-1 nil 3739541628 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (Sigma subtype "sum_vecs.ll" "(list_adt[real].cons?)")))
 (Sigma_TCC2 0
  (Sigma_TCC2-1 nil 3739541628
   ("" (skeep)
    (("" (assert)
      (("" (lemma "card_remove[Vector]")
        ((""
          (inst -1 "V"
           "finite_enumeration[Vector](V)(card[Vector](V) - 1)")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil (Sigma subtype "sum_vecs.A" "(list_adt[list[real]].cons?)")))
 (Sigma_TCC3 0
  (Sigma_TCC3-1 nil 3739549420
   ("" (skeep)
    (("" (case "m=0")
      (("1" (typepred "A")
        (("1" (hide -3 -1)
          (("1" (expand "length" -1) (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil (Sigma subtype "(number_fields.-)(sum_vecs.m, 1)" "nat")))
 (Sigma_TCC4 0
  (Sigma_TCC4-1 nil 3739549420
   ("" (skeep)
    (("" (assert)
      (("" (typepred "A")
        (("" (split)
          (("1" (hide -1 -3)
            (("1" (expand "length" -1) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (hide -1 -2)
            (("2" (skeep)
              (("2" (inst -1 "i+1")
                (("1" (expand "nth" -1) (("1" (propax) nil nil)) nil)
                 ("2" (assert)
                  (("2" (typepred "i")
                    (("2" (expand "length" -1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (m skolem-const-decl "nat" sum_vecs nil)
    (n!1 skolem-const-decl "nat" sum_vecs nil)
    (A skolem-const-decl "MatrixMN(m, n!1)" sum_vecs nil)
    (i skolem-const-decl "below(length(cdr(A)))" sum_vecs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (Sigma subtype "list_adt[list[real]].cdr(sum_vecs.A)"
    "matrices.MatrixMN((number_fields.-)(sum_vecs.m, 1), sum_vecs.n)")))
 (Sigma_TCC5 0
  (Sigma_TCC5-1 nil 3739549420
   ("" (skeep) (("" (expand "<<" 3) (("" (assert) nil nil)) nil)) nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (Sigma termination
    "sum_vecs.Sigma((number_fields.-)(sum_vecs.m, 1), sum_vecs.n, list_adt[list[real]].cdr(sum_vecs.A), sum_vecs.ll)"
    "nil")))
 (Standard_sum_TCC1 0
  (Standard_sum_TCC1-1 nil 3740745134
   ("" (skeep) (("" (skeep) (("" (assert) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil (Standard_sum subtype "sum_vecs.j" "below[length[real](v)]")))
 (Standard_sum_TCC2 0
  (Standard_sum_TCC2-1 nil 3740745134
   ("" (skeep)
    (("" (skeep) (("" (typepred "j") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil (Standard_sum subtype "sum_vecs.j" "below[length[real](vv)]")))
 (Standard_sum_TCC3 0
  (Standard_sum_TCC3-1 nil 3740745134
   ("" (skeep) (("" (skeep) (("" (assert) nil nil)) nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil (Standard_sum subtype "sum_vecs.j" "below[length[real](vv)]")))
 (Standard_sum_TCC4 0
  (Standard_sum_TCC4-1 nil 3740745134
   ("" (skeep)
    (("" (split)
      (("1"
        (typepred "nth[real](v, 0) * e(length[real](v), 0)"
         "e(length[real](v), 0)")
        (("1" (assert) nil nil)) nil)
       ("2" (skeep)
        (("2" (typepred "j")
          (("2" (case "NOT j=0")
            (("1" (assert) nil nil)
             ("2" (replace -1 1) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((e def-decl "VectorN(m)" vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil matrices matrices)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil (Standard_sum subtype "0" "below[length[real](v)]")))
 (Standard_sum_TCC5 0
  (Standard_sum_TCC5-1 nil 3740745134
   ("" (skeep)
    (("" (split)
      (("1" (typepred "v")
        (("1" (typepred "nth[real](v, 0) * e(length[real](v), 0)")
          (("1" (typepred "e(length[real](v), 0)")
            (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (lemma "nth_dist")
          (("2" (inst -1 "e(length[real](v), 0)" "nth[real](v, 0)" "j")
            (("1" (assert)
              (("1" (replace -1 1)
                (("1" (lemma "nth_e")
                  (("1" (typepred "v")
                    (("1" (inst -3 "length[real](v)" "0" "j")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil)
             ("3" (assert)
              (("3" (typepred "e(length[real](v), 0)")
                (("3" (typepred "v") (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (assert)
        (("3" (skeep)
          (("3" (lemma "nth_dist")
            (("3"
              (inst -1 "e(length[real](v), 0)" "nth[real](v, 0)" "j")
              (("1" (typepred "j")
                (("1" (replace -3 1)
                  (("1" (lemma "nth_e")
                    (("1" (inst -1 "length[real](v)" "0" "j")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil)
               ("3" (assert) (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((e def-decl "VectorN(m)" vector_arithmetic nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil matrices matrices)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth_dist formula-decl nil vector_arithmetic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nth_e formula-decl nil vector_arithmetic nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(length[real](v))" sum_vecs nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (j skolem-const-decl "upto(i)" sum_vecs nil)
    (v skolem-const-decl "(cons?[real])" sum_vecs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (j skolem-const-decl "subrange(1 + i, length(v) - 1)" sum_vecs nil)
    (subrange type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (Standard_sum subtype
    "matrices.*(list_props[real].nth(sum_vecs.v, 0), vector_arithmetic.e(list_props[real].length(sum_vecs.v), 0))"
    "{vv: list_adt[real].list | booleans.AND((booleans.AND(list_props[real].length(vv) = list_props[real].length(sum_vecs.v), FORALL (j: naturalnumbers.upto(sum_vecs.i)): list_props[real].nth(sum_vecs.v, j) = list_props[real].nth(vv, j))), FORALL (j: integers.subrange((number_fields.+)(sum_vecs.i, 1), (number_fields.-)(list_props[real].length(sum_vecs.v), 1))): 0 = list_props[real].nth(vv, j))}")))
 (Standard_sum_TCC6 0
  (Standard_sum_TCC6-1 nil 3740745134
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (Standard_sum subtype "(number_fields.-)(sum_vecs.i, 1)"
    "naturalnumbers.below(list_props[real].length(sum_vecs.v))")))
 (Standard_sum_TCC7 0
  (Standard_sum_TCC7-1 nil 3740745134 ("" (assert) nil nil) nil nil
   (Standard_sum termination
    "sum_vecs.Standard_sum(sum_vecs.v, (number_fields.-)(sum_vecs.i, 1))"
    "nil")))
 (Standard_sum_TCC8 0
  (Standard_sum_TCC8-1 nil 3740817975
   ("" (skeep)
    (("" (split)
      (("1"
        (typepred
         "nth[real](v, i) * e(length[real](v), i) + v1(v, i - 1)"
         "nth[real](v, i) * e(length[real](v), i)" "v1(v, i - 1)")
        (("1" (typepred "e(length[real](v), i)")
          (("1" (expand "max") (("1" (assert) nil nil)) nil)) nil)
         ("2" (assert) nil nil))
        nil)
       ("2" (skeep)
        (("2" (lemma "nth_sum")
          (("2"
            (inst -1 "nth[real](v, i) * e(length[real](v), i)"
             "v1(v, i - 1)")
            (("1"
              (typepred "v1(v, i - 1)"
               "nth[real](v, i) * e(length[real](v), i)"
               "e(length[real](v), i)")
              (("1" (assert)
                (("1" (inst -9 "j")
                  (("1" (replace -9 1)
                    (("1" (hide -)
                      (("1" (lemma "nth_dist")
                        (("1"
                          (inst -1 "e(length[real](v), i)"
                           "nth[real](v, i)" "j")
                          (("1" (replace -1 1)
                            (("1" (lemma "nth_e")
                              (("1"
                                (inst -1 "length[real](v)" "i" "j")
                                (("1"
                                  (typepred "j")
                                  (("1"
                                    (case "j=i")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -3 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred
                                                 "v1(v, i - 1)")
                                                (("1"
                                                  (inst -4 "i")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (replace -2 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred "v1(v, i - 1)")
                                            (("2"
                                              (inst -3 "j")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil)
             ("2" (assert)
              (("2" (typepred "v1(v, i - 1)") (("2" (assert) nil nil))
                nil))
              nil)
             ("3" (assert) nil nil)
             ("4" (assert)
              (("4"
                (typepred "nth[real](v, i) * e(length[real](v), i)"
                 "e(length[real](v), i)")
                (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (lemma "nth_sum")
          (("3"
            (inst -1 "nth[real](v, i) * e(length[real](v), i)"
             "v1(v, i - 1)")
            (("1" (assert)
              (("1" (inst -1 "j")
                (("1" (replace -1 1)
                  (("1" (lemma "nth_dist")
                    (("1"
                      (inst -1 "e(length[real](v), i)"
                       "nth[real](v, i)" "j")
                      (("1" (replace -1 1)
                        (("1" (lemma "nth_e")
                          (("1" (inst -1 "length[real](v)" "i" "j")
                            (("1" (typepred "j")
                              (("1"
                                (case "j=i")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (replace -3 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "v1(v, i - 1)")
                                        (("2" (inst -4 "j") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (typepred "v1(v, i - 1)") (("2" (assert) nil nil))
                nil))
              nil)
             ("3" (assert) nil nil)
             ("4"
              (typepred "nth[real](v, i) * e(length[real](v), i)"
               "e(length[real](v), i)")
              (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (nth_sum formula-decl nil vector_arithmetic nil)
    (nth_e formula-decl nil vector_arithmetic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth_dist formula-decl nil vector_arithmetic nil)
    (v1 skolem-const-decl
     "[d1: {z: [v: (cons?), below(length(v))] | z`2 < i} ->
   {vv: list |
      (length(vv) = length(d1`1) AND
        FORALL (j: upto(d1`2)): nth(d1`1, j) = nth(vv, j))
       AND
       FORALL (j: subrange(1 + d1`2, length(d1`1) - 1)): 0 = nth(vv, j)}]"
     sum_vecs nil)
    (v skolem-const-decl "(cons?[real])" sum_vecs nil)
    (i skolem-const-decl "below(length[real](v))" sum_vecs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (Standard_sum subtype
    "(matrices.+)(matrices.*(list_props[real].nth(sum_vecs.v, sum_vecs.i), vector_arithmetic.e(list_props[real].length(sum_vecs.v), sum_vecs.i)), sum_vecs.Standard_sum(sum_vecs.v, (number_fields.-)(sum_vecs.i, 1)))"
    "{vv: list_adt[real].list | booleans.AND((booleans.AND(list_props[real].length(vv) = list_props[real].length(sum_vecs.v), FORALL (j: naturalnumbers.upto(sum_vecs.i)): list_props[real].nth(sum_vecs.v, j) = list_props[real].nth(vv, j))), FORALL (j: integers.subrange((number_fields.+)(sum_vecs.i, 1), (number_fields.-)(list_props[real].length(sum_vecs.v), 1))): 0 = list_props[real].nth(vv, j))}")))
 (Standard_test_TCC1 0
  (Standard_test_TCC1-1 nil 3740819132 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (Standard_test subtype "2"
    "naturalnumbers.below(list_props[real].length((: 1, 3, 5 :)))")))
 (Standard_test 0
  (Standard_test-1 nil 3740819135 ("" (grind) nil nil)
   ((nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (Standard_sum def-decl "{vv: list |
   (length(vv) = length(v) AND FORALL (j: upto(i)): nth(v, j) = nth(vv, j))
    AND FORALL (j: subrange(i + 1, length(v) - 1)): 0 = nth(vv, j)}"
     sum_vecs nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (Standard_id_TCC1 0
  (Standard_id_TCC1-1 nil 3740819158 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (Standard_id subtype "sum_vecs.v" "(list_adt[real].cons?)")))
 (Standard_id_TCC2 0
  (Standard_id_TCC2-1 nil 3740819158
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (Standard_id subtype "(number_fields.-)(sum_vecs.m, 1)"
    "naturalnumbers.below(list_props[real].length(sum_vecs.v))")))
 (Standard_id 0
  (Standard_id-1 nil 3740819159
   ("" (lemma "listn_ext")
    (("" (skeep)
      (("" (inst -1 "m" "v" "Standard_sum(v, m - 1)")
        (("1" (assert)
          (("1" (induct "i")
            (("1" (assert)
              (("1" (expand "nth" 1)
                (("1" (typepred "Standard_sum(v, m - 1)")
                  (("1" (inst -3 "0")
                    (("1" (expand "nth" -3) (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (typepred "Standard_sum(v, m - 1)")
                (("2" (inst -3 "jb+1") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "Standard_sum(v, m - 1)")
          (("2" (typepred "v") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (jb skolem-const-decl "below(m)" sum_vecs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (pred type-eq-decl nil defined_types nil)
    (listn type-eq-decl nil listn structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (Standard_sum def-decl "{vv: list |
   (length(vv) = length(v) AND FORALL (j: upto(i)): nth(v, j) = nth(vv, j))
    AND FORALL (j: subrange(i + 1, length(v) - 1)): 0 = nth(vv, j)}"
     sum_vecs nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (m skolem-const-decl "posnat" sum_vecs nil)
    (VectorN type-eq-decl nil matrices matrices)
    (v skolem-const-decl "VectorN(m)" sum_vecs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_ext formula-decl nil listn structures)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (Li?_TCC1 0
  (Li?_TCC1-1 nil 3739632978
   ("" (skeep)
    (("" (typepred "A")
      (("" (hide -1 -3)
        (("" (typepred "m")
          (("" (assert)
            (("" (expand "length" -2) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((MatrixMN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" sum_vecs nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil (Li? subtype "sum_vecs.A" "(list_adt[list[real]].cons?)")))
 (Li_test 0
  (Li_test-1 nil 3739632226
   ("" (assert)
    (("" (flatten)
      (("" (expand "Li?" -2)
        (("" (inst -2 "2" "(: (: 1 :), (: 1 :) :)")
          (("1" (assert)
            (("1" (inst -2 "(: 1, -1:)")
              (("1" (assert)
                (("1" (split)
                  (("1" (assert)
                    (("1" (grind)
                      (("1" (decompose-equality -1) nil nil)) nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil)
           ("2" (grind)
            (("2" (grind)
              (("2" (grind)
                (("2" (case "i!1=0")
                  (("1" (grind) nil nil)
                   ("2" (case "i!1=1")
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (n formal-const-decl "posnat" sum_vecs nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (Sigmaa def-decl "Vector" sum_vecs nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (length_singleton formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Li? const-decl "bool" sum_vecs nil))
   shostak)))