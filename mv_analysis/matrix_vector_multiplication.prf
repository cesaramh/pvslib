(matrix_vector_multiplication
 (mult_TCC1 0
  (mult_TCC1-1 nil 3737707200
   ("" (skeep)
    (("" (assert)
      (("" (typepred "A")
        (("" (typepred "v")
          (("" (hide -1 -3 -5) (("" (postpone) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (mult_TCC2 0
  (mult_TCC2-1 nil 3737707200
   ("" (skeep)
    (("" (assert)
      (("" (typepred "A")
        (("" (hide -1)
          (("" (typepred "length[list[real]](A)")
            (("" (typepred " length[list[real]](cdr[list[real]](A))")
              (("" (expand "length" 3 2) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (mult_length 0
  (mult_length-1 nil 3737893594
   ("" (induct "m")
    (("1" (assert)
      (("1" (skeep)
        (("1" (expand "mult" 1) (("1" (grind) nil nil)) nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "mult" 1)
          (("2" (lift-if)
            (("2" (split)
              (("1" (assert)
                (("1" (typepred "j")
                  (("1" (expand "length" -4) (("1" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (inst -1 "cdr(A)" "v")
                    (("2" (assert)
                      (("2" (expand "length" 3)
                        (("2" (expand "length" -2)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_null formula-decl nil more_list_props "structures/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (mult def-decl "Vector" matrix_vector_multiplication nil)
    (> const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (Matrix type-eq-decl nil matrices "matrices/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (mult_TCC3 0
  (mult_TCC3-1 nil 3737795293
   ("" (lemma "mult_length")
    (("" (skeep)
      (("" (inst -1 "A" "v" "m") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (Vector type-eq-decl nil matrices "matrices/")
    (MatrixMN type-eq-decl nil matrices "matrices/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (mult_length formula-decl nil matrix_vector_multiplication nil))
   nil))
 (mmult_nth_TCC1 0
  (mmult_nth_TCC1-1 nil 3742823621
   ("" (skeep)
    (("" (typepred "mult(m, n!1, A, v)") (("" (assert) nil nil)) nil))
    nil)
   ((mult const-decl "VectorN(m)" matrix_vector_multiplication nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (MatrixMN type-eq-decl nil matrices "matrices/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (mmult_nth 0
  (mmult_nth-2 nil 3742823632
   ("" (induct "m")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (assert)
        (("3" (case "j=0")
          (("1" (replace -1 1)
            (("1" (skeep)
              (("1" (skeep)
                (("1" (case "NOT i=0")
                  (("1" (typepred "i") (("1" (assert) nil nil)) nil)
                   ("2" (replace -1 1)
                    (("2" (hide -)
                      (("2" (expand "row" 1)
                        (("2" (expand "nth" 1)
                          (("2" (expand "mult" 1)
                            (("2" (expand "mult" 1)
                              (("2"
                                (assert)
                                (("2"
                                  (typepred "A")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "length" -2)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -2)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "*" 2)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (skeep)
              (("2" (inst -1 "n!1" "cdr(A)" "v")
                (("1" (skeep)
                  (("1" (case "i=0")
                    (("1" (replace -1 2)
                      (("1" (expand "row" 2)
                        (("1" (expand "mult" 2)
                          (("1" (expand "mult" 2 1)
                            (("1" (assert)
                              (("1"
                                (typepred "A")
                                (("1"
                                  (expand "length" -2 1)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split -2)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "nth" 3)
                                            (("2"
                                              (expand "*" 3 1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (inst -1 "i-1")
                        (("2" (expand "row" 3)
                          (("2" (expand "nth" 3 2)
                            (("2" (expand "row" -1)
                              (("2"
                                (assert)
                                (("2"
                                  (typepred "A")
                                  (("2"
                                    (expand "length" -2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (split -2)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "mult" 4 1)
                                                (("2"
                                                  (expand "mult" -4)
                                                  (("2"
                                                    (expand "mult" 4)
                                                    (("2"
                                                      (expand
                                                       "nth"
                                                       4
                                                       1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "v")
                  (("2" (assert)
                    (("2" (split)
                      (("1" (typepred "A")
                        (("1" (expand "length" -2)
                          (("1" (assert)
                            (("1" (lift-if)
                              (("1"
                                (split -2)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "A")
                        (("2" (skeep)
                          (("2" (inst -3 "i+1")
                            (("1" (expand "nth" -3)
                              (("1" (propax) nil nil)) nil)
                             ("2" (assert)
                              (("2"
                                (typepred "A")
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "i")
                                    (("2"
                                      (expand "length" 1)
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (split 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "length" -2)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred "A")
                  (("3" (assert)
                    (("3" (expand "length" -2) (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (hide 2)
        (("4" (skeep)
          (("4" (typepred "i") (("4" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult def-decl "Vector" matrix_vector_multiplication nil)
    (i skolem-const-decl "below(length(cdr(A)))"
       matrix_vector_multiplication nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (A skolem-const-decl "MatrixMN(1 + j, n!1)"
     matrix_vector_multiplication nil)
    (n!1 skolem-const-decl "posnat" matrix_vector_multiplication nil)
    (j skolem-const-decl "nat" matrix_vector_multiplication nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (row const-decl "Vector" matrices "matrices/")
    (* const-decl "real" matrices "matrices/")
    (Vector type-eq-decl nil matrices "matrices/")
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices "matrices/")
    (VectorN type-eq-decl nil matrices "matrices/")
    (mult const-decl "VectorN(m)" matrix_vector_multiplication nil))
   nil)
  (mmult_nth-1 nil 3742823623 ("" (postpone) nil nil) nil shostak))
 (max_row_2_TCC1 0
  (max_row_2_TCC1-1 nil 3742830741 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices "matrices/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (row const-decl "Vector" matrices "matrices/"))
   nil))
 (max_row_2_TCC2 0
  (max_row_2_TCC2-1 nil 3742830843 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices "matrices/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (row const-decl "Vector" matrices "matrices/"))
   nil))
 (max_row_2 0
  (max_row_2-1 nil 3742830742
   ("" (induct "m")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert)
      (("3" (skeep)
        (("3" (assert)
          (("3" (case "j_1=0")
            (("1" (skeep)
              (("1" (inst 1 "0")
                (("1" (skeep)
                  (("1" (typepred "j")
                    (("1" (case "NOT j=0")
                      (("1" (assert) nil nil)
                       ("2" (replace -1 1)
                        (("2" (expand "row" 1) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (skeep)
                (("2" (inst -1 "n!1" "cdr(A)")
                  (("1" (skeep)
                    (("1"
                      (case "norm_2(n!1)(row(A)(0)) >= norm_2(n!1)(row(cdr(A))(i))")
                      (("1" (assert)
                        (("1" (inst 2 "0")
                          (("1" (skeep)
                            (("1" (case "j=0")
                              (("1"
                                (replace -1 2)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (inst -2 "j-1")
                                (("1"
                                  (expand "row" 3 1)
                                  (("1"
                                    (expand "nth" 3 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "row" -2 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (typepred "A")
                                              (("1"
                                                (typepred "j")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -3)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split -3)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (inst 3 "i+1")
                          (("2" (skeep)
                            (("2" (case "j=0")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "row" 3 2)
                                  (("1"
                                    (expand "nth" 3 1)
                                    (("1"
                                      (expand "row" 1 2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "i")
                                          (("1"
                                            (typepred "A")
                                            (("1"
                                              (expand "length" -2)
                                              (("1"
                                                (lift-if -2)
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (inst -1 "j-1")
                                  (("2"
                                    (expand "row" 4)
                                    (("2"
                                      (expand "nth" 4)
                                      (("2"
                                        (expand "row" -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred "A")
                                            (("2"
                                              (typepred "j")
                                              (("2"
                                                (expand "length" -3)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lift-if -3)
                                                    (("2"
                                                      (split -3)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (typepred "row(cdr[list[real]](A))(i)")
                        (("3" (assert)
                          (("3" (typepred "A")
                            (("3" (typepred "i")
                              (("3"
                                (inst -4 "i+1")
                                (("3"
                                  (expand "nth" -4)
                                  (("3"
                                    (expand "row" 1)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand "length" -3)
                                        (("3"
                                          (lift-if -3)
                                          (("3"
                                            (split -3)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (assert)
                        (("4" (typepred "A")
                          (("4" (expand "length" -2)
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("5" (typepred "A")
                        (("5" (inst -3 "0")
                          (("5" (expand "nth" -3)
                            (("5" (expand "row" 1)
                              (("5"
                                (expand "nth " 1)
                                (("5" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split)
                    (("1" (assert)
                      (("1" (typepred "A")
                        (("1" (expand "length" -2)
                          (("1" (assert)
                            (("1" (lift-if -2)
                              (("1"
                                (split -2)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (typepred "A")
                        (("2" (inst -3 "i+1")
                          (("1" (expand "nth" -3)
                            (("1" (propax) nil nil)) nil)
                           ("2" (assert)
                            (("2" (expand "length" -2)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split -2)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (typepred "A")
                    (("3" (expand "length" -2) (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (assert)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "A")
            (("4" (inst -3 "i")
              (("4" (expand "row" 1) (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (typepred "A")
          (("5" (inst -3 "j")
            (("5" (expand "row" 1) (("5" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((j_1 skolem-const-decl "nat" matrix_vector_multiplication nil)
    (n!1 skolem-const-decl "posnat" matrix_vector_multiplication nil)
    (A skolem-const-decl "MatrixMN(1 + j_1, n!1)"
     matrix_vector_multiplication nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (j skolem-const-decl "below(1 + j_1)" matrix_vector_multiplication
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (i skolem-const-decl "below(length(cdr(A)))"
       matrix_vector_multiplication nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (norm_2 const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices "matrices/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (row const-decl "Vector" matrices "matrices/"))
   shostak))
 (max_row_2_TCC3 0
  (max_row_2_TCC3-1 nil 3742831781 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices "matrices/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (row const-decl "Vector" matrices "matrices/"))
   nil))
 (max_row_2_TCC4 0
  (max_row_2_TCC4-1 nil 3742831781
   ("" (skeep)
    (("" (lemma "max_row_2")
      (("" (inst -1 "m" "n!1" "A")
        (("" (skeep)
          (("" (expand "nonempty?")
            (("" (expand "empty?")
              (("" (inst -2 "norm_2(n!1)(row(A)(i))")
                (("1" (expand "member")
                  (("1" (split)
                    (("1" (propax) nil nil) ("2" (inst 1 "i") nil nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (typepred "A")
                    (("2" (inst -3 "i")
                      (("2" (expand "row" 1)
                        (("2" (expand "length" -3)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_row_2 formula-decl nil matrix_vector_multiplication nil)
    (empty? const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (norm_2 const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (row const-decl "Vector" matrices "matrices/")
    (m skolem-const-decl "posnat" matrix_vector_multiplication nil)
    (n!1 skolem-const-decl "posnat" matrix_vector_multiplication nil)
    (A skolem-const-decl "MatrixMN(m, n!1)"
     matrix_vector_multiplication nil)
    (i skolem-const-decl "below(m)" matrix_vector_multiplication nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (nonempty? const-decl "bool" sets nil)
    (MatrixMN type-eq-decl nil matrices "matrices/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (mmult_inf_bound_TCC1 0
  (mmult_inf_bound_TCC1-1 nil 3742832028
   ("" (skeep)
    (("" (typepred "mult(m, n!1, A, v)") (("" (assert) nil nil)) nil))
    nil)
   ((mult const-decl "VectorN(m)" matrix_vector_multiplication nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (MatrixMN type-eq-decl nil matrices "matrices/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (mmult_inf_bound_TCC2 0
  (mmult_inf_bound_TCC2-1 nil 3742832028 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices "matrices/")
    (VectorN type-eq-decl nil matrices "matrices/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (mmult_inf_bound 0
  (mmult_inf_bound-1 nil 3742832093
   ("" (skeep)
    (("" (lemma "norm_inf_nth_m")
      (("" (inst -1 "m" "mult(m, n!1, A, v)")
        (("" (skeep)
          (("" (replace -1 1)
            (("" (lemma "mmult_nth")
              (("" (inst -1 "m" "n!1" "A" "v" "i")
                (("" (replace -1 1)
                  (("" (lemma "cauchy_schwarz[n!1]")
                    (("" (inst -1 "row(A)(i)" "v")
                      (("1" (case "NOT norm_2(n!1)(v) = sqrt(v * v)")
                        (("1" (expand "norm_2" 1)
                          (("1" (expand "norm_2sq" 1)
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (replace -1 -2 rl)
                          (("2"
                            (case "NOT sqrt(row(A)(i) * row(A)(i)) = norm_2(n!1)(row(A)(i))")
                            (("1" (expand "norm_2" 1)
                              (("1"
                                (expand "norm_2sq" 1)
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (replace -1 -3 lr)
                              (("2"
                                (typepred "max_row_2(m, n!1, A)")
                                (("2"
                                  (inst -2 "i")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (mult-by -2 "norm_2(n!1)(v)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (assert)
                              (("3"
                                (typepred "A")
                                (("3"
                                  (expand "row" 1)
                                  (("3"
                                    (inst -3 "i")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (lemma "dot_non_neg[n!1]")
                              (("4"
                                (inst -1 "row(A)(i)")
                                (("4"
                                  (assert)
                                  (("4"
                                    (typepred "A")
                                    (("4"
                                      (expand "row" 1)
                                      (("4"
                                        (inst -3 "i")
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (lemma "dot_non_neg[n!1]")
                          (("3" (inst -1 "v") nil nil)) nil))
                        nil)
                       ("2" (assert)
                        (("2" (typepred "A")
                          (("2" (expand "row" 1)
                            (("2" (inst -3 "i") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_inf_nth_m formula-decl nil norms nil)
    (mmult_nth formula-decl nil matrix_vector_multiplication nil)
    (i skolem-const-decl "below(m)" matrix_vector_multiplication nil)
    (A skolem-const-decl "MatrixMN(m, n!1)"
     matrix_vector_multiplication nil)
    (n!1 skolem-const-decl "posnat" matrix_vector_multiplication nil)
    (m skolem-const-decl "posnat" matrix_vector_multiplication nil)
    (row const-decl "Vector" matrices "matrices/")
    (Vector type-eq-decl nil matrices "matrices/")
    (dot_non_neg formula-decl nil cauchy_schwarz nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (max_row_2 const-decl "{c: nonneg_real |
         (FORALL (j: below(m)): norm_2(n)(row(A)(j)) <= c) AND
          (EXISTS (i: below(m)): c = norm_2(n)(row(A)(i)))}"
     matrix_vector_multiplication nil)
    (<= const-decl "bool" reals nil)
    (norm_2sq const-decl "nonneg_real" norms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "real" matrices "matrices/")
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm_2 const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cauchy_schwarz formula-decl nil cauchy_schwarz nil)
    (mult const-decl "VectorN(m)" matrix_vector_multiplication nil)
    (MatrixMN type-eq-decl nil matrices "matrices/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (mmult_dist_TCC1 0
  (mmult_dist_TCC1-1 nil 3742823717
   ("" (skeep)
    (("" (typepred "v1+v2" "v1" "v2")
      (("" (expand "max" -) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (VectorN type-eq-decl nil matrices "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (mmult_dist 0
  (mmult_dist-1 nil 3742823718
   ("" (induct "m")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert)
      (("3" (skeep)
        (("3" (assert)
          (("3" (typepred "j")
            (("3" (case "j=0")
              (("1" (skeep)
                (("1" (expand "mult" 1)
                  (("1" (expand "mult" 1)
                    (("1" (typepred "A")
                      (("1" (expand "length" -2)
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (split -2)
                              (("1" (assert) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "v1+v2" "v1" "v2")
                                      (("2"
                                        (expand "max" -)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide -1 -2 -3 -4 -5 -6)
                                            (("2"
                                              (replace -4 -1)
                                              (("2"
                                                (expand "length" -1)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "mult"
                                                         2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "+"
                                                             2
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "add"
                                                               2
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "add"
                                                                 2)
                                                                (("1"
                                                                  (decompose-equality
                                                                   2)
                                                                  (("1"
                                                                    (lemma
                                                                     "dot_dist")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "car(A)"
                                                                       "v1"
                                                                       "v2")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "*"
                                                                           -1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -3
                                                                           "0")
                                                                          (("2"
                                                                            (expand
                                                                             "nth"
                                                                             -3)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "n!1")
                                                                                (("2"
                                                                                  (expand
                                                                                   "length"
                                                                                   -4)
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (split
                                                                                       -4)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (skeep)
                  (("2" (expand "mult" 2)
                    (("2" (expand "mult" 2)
                      (("2" (typepred "A")
                        (("2" (expand "length" -2)
                          (("2" (lift-if)
                            (("2" (split -2)
                              (("1" (assert) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "v1+v2" "v1" "v2")
                                    (("2"
                                      (expand "max" -)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst
                                           -11
                                           "n!1"
                                           "cdr(A)"
                                           "v1"
                                           "v2")
                                          (("1"
                                            (expand "mult" -11)
                                            (("1"
                                              (expand "+" 3 3)
                                              (("1"
                                                (expand "add" 3)
                                                (("1"
                                                  (decompose-equality
                                                   3)
                                                  (("1"
                                                    (lemma "dot_dist")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "car(A)"
                                                       "v1"
                                                       "v2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "*"
                                                           -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred
                                                           "A")
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "0")
                                                            (("2"
                                                              (expand
                                                               "nth"
                                                               -3)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "+" -11 2)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (typepred "A")
                                                (("2"
                                                  (inst -3 "i+1")
                                                  (("2"
                                                    (expand "nth" -3)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (typepred "v1+v2" "v1" "v2")
          (("4" (expand "max" -) (("4" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     "matrices/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (dot def-decl "real" matrices "matrices/")
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (j skolem-const-decl "nat" matrix_vector_multiplication nil)
    (n!1 skolem-const-decl "posnat" matrix_vector_multiplication nil)
    (A skolem-const-decl "MatrixMN(1 + j, n!1)"
     matrix_vector_multiplication nil)
    (* const-decl "real" matrices "matrices/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dot_dist formula-decl nil vector_arithmetic nil)
    (mult def-decl "Vector" matrix_vector_multiplication nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (n!1 skolem-const-decl "posnat" matrix_vector_multiplication nil)
    (A skolem-const-decl "MatrixMN(1 + j, n!1)"
     matrix_vector_multiplication nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (mult const-decl "VectorN(m)" matrix_vector_multiplication nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices "matrices/")
    (VectorN type-eq-decl nil matrices "matrices/")
    (Vector type-eq-decl nil matrices "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/"))
   shostak))
 (mmult_scal_TCC1 0
  (mmult_scal_TCC1-1 nil 3742829809 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices "matrices/")
    (VectorN type-eq-decl nil matrices "matrices/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "VectorN(length(v2))" matrices "matrices/"))
   nil))
 (mmult_scal 0
  (mmult_scal-2 nil 3742830326
   ("" (induct "m")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert)
      (("3" (skeep)
        (("3" (assert)
          (("3" (case "j=0")
            (("1" (assert)
              (("1" (replace -1 1)
                (("1" (skeep)
                  (("1" (hide -)
                    (("1" (expand "mult" 1)
                      (("1" (expand "mult" 1)
                        (("1" (assert)
                          (("1" (typepred "c*v1" "v1")
                            (("1" (typepred "A")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length" -)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (split -2)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "j")
                                              (("2"
                                                (case "NOT j=0")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (replace -1 -3)
                                                  (("2"
                                                    (expand "mult" 2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -3)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (split -3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "*"
                                                                 2
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "scal"
                                                                   2
                                                                   1)
                                                                  (("1"
                                                                    (decompose-equality
                                                                     2)
                                                                    (("1"
                                                                      (lemma
                                                                       "dot_scalar1")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "car(A)"
                                                                         "v1"
                                                                         "c")
                                                                        (("1"
                                                                          (expand
                                                                           "*"
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "*"
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           -5
                                                                           "0")
                                                                          (("2"
                                                                            (expand
                                                                             "nth"
                                                                             -5)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "scal"
                                                                       1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (skeep)
                (("2" (expand "mult" 2)
                  (("2" (expand "mult" 2)
                    (("2" (case "NOT null?(A)")
                      (("1" (assert)
                        (("1" (case "NOT  null?(c * v1)")
                          (("1" (assert)
                            (("1" (expand "*" 4 1)
                              (("1"
                                (expand "scal" 4 1)
                                (("1"
                                  (decompose-equality 4)
                                  (("1"
                                    (lemma "dot_scalar1")
                                    (("1"
                                      (inst -1 "car(A)" "v1" "c")
                                      (("1"
                                        (expand "*" -1)
                                        (("1"
                                          (expand "*" 1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "A")
                                        (("2"
                                          (inst -3 "0")
                                          (("2"
                                            (expand "nth" -3)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "A")
                                    (("2"
                                      (inst -4 "n!1" "cdr(A)" "v1" "c")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "mult" -4)
                                          (("1"
                                            (expand "*" -4 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "v1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split)
                                            (("1"
                                              (expand "length" -4)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -5 "i+1")
                                                  (("1"
                                                    (expand "nth" -5)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred "i")
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (assert)
                          (("2" (typepred "A")
                            (("2" (expand "length" -2)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (typepred "c*v1" "v1") (("4" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (n!1 skolem-const-decl "posnat" matrix_vector_multiplication nil)
    (A skolem-const-decl "MatrixMN(1 + j, n!1)"
     matrix_vector_multiplication nil)
    (i skolem-const-decl "below(length(cdr(A)))"
       matrix_vector_multiplication nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (scal def-decl "VectorN(length(v2))" matrices "matrices/")
    (dot_scalar1 formula-decl nil vector_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "real" matrices "matrices/")
    (A skolem-const-decl "MatrixMN(1 + j, n!1)"
     matrix_vector_multiplication nil)
    (n!1 skolem-const-decl "posnat" matrix_vector_multiplication nil)
    (j skolem-const-decl "nat" matrix_vector_multiplication nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dot def-decl "real" matrices "matrices/")
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mult def-decl "Vector" matrix_vector_multiplication nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (mult const-decl "VectorN(m)" matrix_vector_multiplication nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices "matrices/")
    (VectorN type-eq-decl nil matrices "matrices/")
    (Vector type-eq-decl nil matrices "matrices/")
    (* const-decl "VectorN(length(v2))" matrices "matrices/"))
   nil)
  (mmult_scal-1 nil 3742829860
   ("" (induct "m")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert)
      (("3" (skeep)
        (("3" (assert)
          (("3" (case "j=0")
            (("1" (assert)
              (("1" (replace -1 1)
                (("1" (skeep)
                  (("1" (hide -)
                    (("1" (expand "mult" 1)
                      (("1" (expand "mult" 1)
                        (("1" (assert)
                          (("1" (typepred "c*v1" "v1")
                            (("1" (typepred "A")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length" -)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (split -2)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "j")
                                              (("2"
                                                (case "NOT j=0")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (replace -1 -3)
                                                  (("2"
                                                    (expand "mult" 2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -3)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (split -3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "*"
                                                                 2
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "scal"
                                                                   2
                                                                   1)
                                                                  (("1"
                                                                    (decompose-equality
                                                                     2)
                                                                    (("1"
                                                                      (lemma
                                                                       "dot_scalar1")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "car(A)"
                                                                         "v1"
                                                                         "c")
                                                                        (("1"
                                                                          (expand
                                                                           "*"
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "*"
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           -5
                                                                           "0")
                                                                          (("2"
                                                                            (expand
                                                                             "nth"
                                                                             -5)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "scal"
                                                                       1)
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (skeep)
                (("2" (expand "mult" 2)
                  (("2" (expand "mult" 2)
                    (("2" (case "NOT null?(A)")
                      (("1" (assert)
                        (("1" (case "NOT  null?(c * v1)")
                          (("1" (assert)
                            (("1" (expand "*" 4 1)
                              (("1"
                                (expand "scal" 4 1)
                                (("1"
                                  (decompose-equality 4)
                                  (("1"
                                    (lemma "dot_scalar1")
                                    (("1"
                                      (inst -1 "car(A)" "v1" "c")
                                      (("1"
                                        (expand "*" -1)
                                        (("1"
                                          (expand "*" 1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "A")
                                        (("2"
                                          (inst -3 "0")
                                          (("2"
                                            (expand "nth" -3)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "A")
                                    (("2"
                                      (inst -4 "n" "cdr(A)" "v1" "c")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "mult" -4)
                                          (("1"
                                            (expand "*" -4 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "v1")
                                        (("2"
                                          (assert)
                                          (("2" (postpone) nil nil))
                                          nil))
                                        nil)
                                       ("3" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (postpone) nil nil))
    nil)
   nil shostak))
 (mmult_sub_dist_TCC1 0
  (mmult_sub_dist_TCC1-1 nil 3742829809
   ("" (skeep)
    (("" (typepred "v1-v2" "v2" "v1")
      (("" (expand "max") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (VectorN type-eq-decl nil matrices "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (mmult_sub_dist 0
  (mmult_sub_dist-1 nil 3742830414
   ("" (skeep)
    (("" (lemma "sub_idx")
      (("" (inst-cp -1 "mult(m, n!1, A, v1)" "mult(m, n!1, A, v2)")
        (("1" (inst -1 "v1" "v2")
          (("1" (replace -1 1)
            (("1" (replace -2 1)
              (("1" (lemma "mmult_scal")
                (("1" (inst -1 "m" "n!1" "A" "v2" "-1")
                  (("1" (replace -1 1)
                    (("1" (lemma "mmult_dist")
                      (("1" (inst -1 "m" "n!1" "A" "v1" "-1*v2") nil
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) (("2" (assert) nil nil)) nil)
         ("3" (typepred "mult(m, n!1, A, v2)")
          (("3" (assert)
            (("3" (expand "length" -2) (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sub_idx formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (mmult_dist formula-decl nil matrix_vector_multiplication nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (* const-decl "VectorN(length(v2))" matrices "matrices/")
    (mmult_scal formula-decl nil matrix_vector_multiplication nil)
    (v2 skolem-const-decl "VectorN(n!1)" matrix_vector_multiplication
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices "matrices/")
    (VectorN type-eq-decl nil matrices "matrices/")
    (mult const-decl "VectorN(m)" matrix_vector_multiplication nil)
    (m skolem-const-decl "posnat" matrix_vector_multiplication nil)
    (n!1 skolem-const-decl "posnat" matrix_vector_multiplication nil)
    (A skolem-const-decl "MatrixMN(m, n!1)"
     matrix_vector_multiplication nil)
    (v1 skolem-const-decl "VectorN(n!1)" matrix_vector_multiplication
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (eye_TCC1 0
  (eye_TCC1-1 nil 3737712978
   ("" (skeep)
    (("" (split)
      (("1" (split)
        (("1" (expand "length" 1) (("1" (assert) nil nil)) nil)
         ("2" (skeep)
          (("2" (typepred "n!1")
            (("2" (typepred "null[list[real]]")
              (("2" (postpone) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (eye_TCC2 0
  (no "no" 3737714387 ("" (skeep) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak)
  (eye_TCC2-1 nil 3737712978 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (eye_TCC3 0
  (eye_TCC3-1 nil 3737712978 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (eye_TCC4 0
  (eye_TCC4-1 nil 3737712978 ("" (skeep) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (eye_TCC5 0
  (eye_TCC5-1 nil 3737712978
   ("" (skeep)
    (("" (typepred "m")
      (("" (typepred "n")
        (("" (assert)
          (("" (flip-ineq 1)
            (("" (flip-ineq 3)
              (("" (case "NOT m=n!1")
                (("1" (assert) nil nil)
                 ("2" (assert)
                  (("2" (typepred "n") (("2" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" matrix_vector_multiplication nil))
   nil))
 (mult_1 0
  (mult_1-1 nil 3737711033 ("" (eval-formula 1) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (eye_1 0
  (eye_1-1 nil 3737794082 ("" (eval-formula 1) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (eye_2 0
  (eye_2-1 nil 3737893921
   ("" (eval-expr "eye(3,3)")
    (("" (replace -1 1)
      (("" (skeep)
        (("" (hide -1)
          (("" (grind)
            (("" (decompose-equality)
              (("1" (expand "dot")
                (("1" (grind)
                  (("1" (typepred "v")
                    (("1" (expand "dot") (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (grind)
                (("2" (decompose-equality)
                  (("1" (expand "dot")
                    (("1" (grind)
                      (("1" (grind)
                        (("1" (typepred "v") (("1" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (typepred "v")
                        (("2" (expand "dot") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "v")
                    (("2" (decompose-equality)
                      (("1" (expand "dot")
                        (("1" (assert)
                          (("1" (hide -1)
                            (("1" (expand "dot" 1)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "v")
                        (("2" (hide -1 -3) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (grind)
                    (("3" (decompose-equality 2)
                      (("3" (typepred "v") (("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (v skolem-const-decl "VectorN(3)" matrix_vector_multiplication nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dot def-decl "real" matrices "matrices/")
    (mult def-decl "Vector" matrix_vector_multiplication nil)
    (* const-decl "Vector" matrix_vector_multiplication nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (eye def-decl "Matrix" matrix_vector_multiplication nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (eye_3 0
  (eye_3-1 nil 3737794569
   ("" (eval-expr "Id(3)")
    (("" (replace -1 1)
      (("" (hide -1)
        (("" (skeep)
          (("" (grind)
            (("" (decompose-equality)
              (("1" (typepred "v")
                (("1" (expand "dot" 1)
                  (("1" (assert)
                    (("1" (hide -1)
                      (("1" (typepred "v")
                        (("1" (expand "dot") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (decompose-equality)
                (("1" (typepred "v")
                  (("1" (expand "dot")
                    (("1" (assert)
                      (("1" (expand "dot") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (decompose-equality)
                  (("1" (typepred "v")
                    (("1" (expand "dot")
                      (("1" (assert)
                        (("1" (expand "dot" 1) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "v") (("2" (grind) nil nil)) nil)
                   ("3" (typepred "v") (("3" (grind) nil nil)) nil))
                  nil)
                 ("3" (decompose-equality 2)
                  (("3" (grind)
                    (("3" (typepred "v") (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (v skolem-const-decl "VectorN(3)" matrix_vector_multiplication nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dot def-decl "real" matrices "matrices/")
    (mult def-decl "Vector" matrix_vector_multiplication nil)
    (* const-decl "Vector" matrix_vector_multiplication nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices "matrices/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices "matrices/")
    (rows const-decl "nat" matrices "matrices/")
    (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
         (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
          (null?(M) AND c = 0 OR
            (EXISTS (i: below(length(M))): length(nth(M, i)) = c))}"
     matrices "matrices/")
    (PosFullMatrix type-eq-decl nil matrices "matrices/")
    (Square type-eq-decl nil matrices "matrices/")
    (SquareMatrix type-eq-decl nil matrices "matrices/")
    (entry const-decl "real" matrices "matrices/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (MatrixMN type-eq-decl nil matrices "matrices/")
    (Vector type-eq-decl nil matrices "matrices/")
    (* const-decl "real" matrices "matrices/")
    (row const-decl "Vector" matrices "matrices/")
    (VectorN type-eq-decl nil matrices "matrices/")
    (col def-decl "VectorN(rows(M))" matrices "matrices/")
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
         FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}"
       matrices "matrices/")
    (Id const-decl "{M: SquareMatrix(pm) |
         (FORALL (i, j):
            entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF)
          AND
          (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND
           (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}"
     matrices "matrices/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (mult_3 0
  (mult_3-1 nil 3737792935 ("" (eval-formula 1) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)))