(fundamentals_constrained_optimization
 (nth_TCC1 0
  (nth_TCC1-1 nil 3738049606 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (nth subtype "fundamentals_constrained_optimization.i"
        "below[length[real](c(v))]")))
 (car_TCC1 0
  (car_TCC1-1 nil 3738049606
   ("" (skeep)
    (("" (assert)
      (("" (typepred "c(v)")
        (("" (assert)
          (("" (typepred "v")
            (("" (typepred "m") (("" (postpone) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak
   (car subtype
        "fundamentals_constrained_optimization.c(fundamentals_constrained_optimization.v)"
        "(list_adt[real].cons?)")))
 (car_v_TCC1 0
  (car_v_TCC1-1 nil 3739619403 ("" (skeep) (("" (assert) nil nil)) nil)
   ((length_singleton formula-decl nil more_list_props "structures/")
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak
   (car_v subtype
    "(: list_adt[real].car(fundamentals_constrained_optimization.c(fundamentals_constrained_optimization.v)) :)"
    "matrices.VectorN(1)")))
 (cdr_TCC1 0
  (cdr_TCC1-1 nil 3738049606 ("" (subtype-tcc) nil nil) nil shostak
   (cdr subtype
        "(number_fields.-)(fundamentals_constrained_optimization.m, 1)"
        "nat")))
 (cdr_TCC2 0
  (cdr_TCC2-1 nil 3738049606
   ("" (skeep)
    (("" (typepred "c(v)")
      (("" (expand "length" -2) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((constraints type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak
   (cdr subtype
        "list_adt[real].cdr(fundamentals_constrained_optimization.c(fundamentals_constrained_optimization.v))"
        "matrices.VectorN((number_fields.-)(fundamentals_constrained_optimization.m, 1))")))
 (append_TCC1 0
  (append_TCC1-1 nil 3740124066
   ("" (induct "m1")
    (("1" (skeep)
      (("1" (expand "append" 1)
        (("1" (lift-if)
          (("1" (assert)
            (("1" (split)
              (("1" (flatten)
                (("1" (typepred "c2(v)") (("1" (propax) nil nil)) nil))
                nil)
               ("2" (flatten)
                (("2" (typepred "c1(v)")
                  (("2" (expand "length" -2) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (expand "append" 1)
        (("2" (assert)
          (("2" (skeep)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (typepred "c1(v)")
                  (("2" (assert)
                    (("2" (expand "length" 1)
                      (("2" (inst -3 "m2" "cdr(j+1,c1)" "c2" "v")
                        (("2" (expand "cdr" -3)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cdr const-decl "constraints(m - 1)"
         fundamentals_constrained_optimization nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (append subtype
           "list_props[real].append(fundamentals_constrained_optimization.c1(fundamentals_constrained_optimization.v), fundamentals_constrained_optimization.c2(fundamentals_constrained_optimization.v))"
           "matrices.VectorN((number_fields.+)(fundamentals_constrained_optimization.m1, fundamentals_constrained_optimization.m2))")))
 (constraint2vector_TCC1 0
  (constraint2vector_TCC1-1 nil 3738049606
   ("" (subtype-tcc)
    (("" (expand "length" 1) (("" (propax) nil nil)) nil)) nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil))
   shostak
   (constraint2vector subtype "list_adt[vec2real_f[n]].null"
    "listn[vec2real_f[n]].listn(fundamentals_constrained_optimization.m)")))
 (constraint2vector_TCC2 0
  (constraint2vector_TCC2-1 nil 3738049606 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (constraint2vector subtype "fundamentals_constrained_optimization.m"
    "posnat")))
 (constraint2vector_TCC3 0
  (constraint2vector_TCC3-1 nil 3738049606 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (constraint2vector subtype
    "(number_fields.-)(fundamentals_constrained_optimization.m, 1)"
    "nat")))
 (constraint2vector_TCC4 0
  (constraint2vector_TCC4-1 nil 3738049606
   ("" (termination-tcc) nil nil) nil shostak
   (constraint2vector termination
    "fundamentals_constrained_optimization.constraint2vector((number_fields.-)(fundamentals_constrained_optimization.m, 1), fundamentals_constrained_optimization.cdr(fundamentals_constrained_optimization.m, fundamentals_constrained_optimization.c))"
    "nil")))
 (constraint2vector_TCC5 0
  (constraint2vector_TCC5-1 nil 3738049606
   ("" (skeep)
    (("" (typepred "v(m - 1, cdr(m, c))")
      (("1" (expand "length" 2) (("1" (assert) nil nil)) nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((cdr const-decl "constraints(m - 1)"
         fundamentals_constrained_optimization nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (listn type-eq-decl nil listn "structures/")
    (< const-decl "bool" reals nil)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (constraint2vector subtype
    "list_adt[vec2real_f[n]].cons(fundamentals_constrained_optimization.car(fundamentals_constrained_optimization.m, fundamentals_constrained_optimization.c), fundamentals_constrained_optimization.constraint2vector((number_fields.-)(fundamentals_constrained_optimization.m, 1), fundamentals_constrained_optimization.cdr(fundamentals_constrained_optimization.m, fundamentals_constrained_optimization.c)))"
    "listn[vec2real_f[n]].listn(fundamentals_constrained_optimization.m)")))
 (cons_f_TCC1 0
  (cons_f_TCC1-1 nil 3739875416
   ("" (skeep)
    (("" (typepred "c(v)")
      (("" (hide -1)
        (("" (expand "length" 1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((constraints type-eq-decl nil domain_vec2real_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (cons_f subtype
    "list_adt[real].cons(fundamentals_constrained_optimization.f(fundamentals_constrained_optimization.v), fundamentals_constrained_optimization.c(fundamentals_constrained_optimization.v))"
    "matrices.VectorN(fundamentals_constrained_optimization.m)")))
 (listfuns2fun_TCC1 0
  (listfuns2fun_TCC1-1 nil 3739611422 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (VectorN type-eq-decl nil matrices "matrices/"))
   shostak
   (listfuns2fun subtype "fundamentals_constrained_optimization.v"
    "(list_adt[vec2real_f[n]].cons?)")))
 (listfuns2fun_TCC2 0
  (listfuns2fun_TCC2-1 nil 3739611422 ("" (termination-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   shostak
   (listfuns2fun termination
    "fundamentals_constrained_optimization.listfuns2fun(list_adt[vec2real_f[n]].cdr(fundamentals_constrained_optimization.v))"
    "nil")))
 (listfuns_length 0
  (listfuns_length-1 nil 3740152548
   ("" (induct "v")
    (("1" (assert) (("1" (skeep) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "listfuns2fun" 1)
          (("2" (expand "length" 1) (("2" (inst -1 "x") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (listfuns2fun def-decl "list" fundamentals_constrained_optimization
     nil))
   shostak))
 (filter_fun_TCC1 0
  (filter_fun_TCC1-1 nil 3740128908
   ("" (induct "m")
    (("1" (skeep) (("1" (skeep) (("1" (grind) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (expand "filter" 1)
            (("2" (expand "constraint2vector" 1)
              (("2" (assert)
                (("2" (expand "filter" 1)
                  (("2" (lift-if)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "length" 1 2)
                            (("1" (expand "listfuns2fun" 1)
                              (("1"
                                (expand "length" 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "listfuns2fun" 1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "filter" -2 1)
                                            (("2"
                                              (inst
                                               -2
                                               "cdr(1+j,c)"
                                               "P")
                                              (("2"
                                                (inst -2 "x1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "filter"
                                                     -2
                                                     2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -2
                                                         2)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (inst -1 "cdr(1+j,c)" "P")
                          (("2" (inst -1 "x1")
                            (("2" (expand "filter" -1 1)
                              (("2"
                                (expand "filter" -1 2)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cdr const-decl "constraints(m - 1)"
         fundamentals_constrained_optimization nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (constraint2vector def-decl "listn[vec2real_f[n]](m)"
     fundamentals_constrained_optimization nil)
    (filter def-decl "list[T]" filters nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (filter const-decl "list[vec2real_f[n]]"
     fundamentals_constrained_optimization nil)
    (listfuns2fun def-decl "list" fundamentals_constrained_optimization
     nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (filter_fun subtype
    "fundamentals_constrained_optimization.listfuns2fun(fundamentals_constrained_optimization.filter(fundamentals_constrained_optimization.m, fundamentals_constrained_optimization.c, fundamentals_constrained_optimization.P))"
    "domain_vec2real_def[fundamentals_constrained_optimization.n].constraints(list_props[vec2real_f[n]].length(fundamentals_constrained_optimization.filter(fundamentals_constrained_optimization.m, fundamentals_constrained_optimization.c, fundamentals_constrained_optimization.P)))")))
 (filter_fun_filter 0
  (filter_fun_filter-1 nil 3740148939
   ("" (induct "m")
    (("1" (skeep)
      (("1" (skeep)
        (("1" (typepred "i")
          (("1" (expand "filter" -1)
            (("1" (expand "constraint2vector" -1)
              (("1" (expand "filter" -1)
                (("1" (expand "length" -1) (("1" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (expand "nth" 1 1)
            (("2" (typepred "i")
              (("2" (case "i=0")
                (("1" (replace -1 1)
                  (("1" (expand "nth" 1)
                    (("1" (expand "filter_fun" 1)
                      (("1" (expand "listfuns2fun" 1)
                        (("1" (assert)
                          (("1" (case "filter(1 + j, c, P) = null")
                            (("1" (assert)
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (decompose-equality 1)
                                  (("1"
                                    (replace -1 -3)
                                    (("1"
                                      (expand "length" -3)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (replace -1 -3)
                                      (("2"
                                        (expand "length" -3)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2" (decompose-equality 2) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (decompose-equality 2)
                  (("1" (expand "filter" 1)
                    (("1" (expand "filter" 1)
                      (("1" (assert)
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "filter_fun" 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "listfuns2fun" 1)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1 -3)
                                                (("1"
                                                  (expand "length" -3)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "filter" 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "filter" 1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "nth" 1 2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "filter_fun" 1)
                                          (("1"
                                            (expand "listfuns2fun" 1 1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1 -3)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -3)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand "nth" 2 1)
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "D"
                                                       "cdr(1+j,c)"
                                                       "P")
                                                      (("2"
                                                        (inst -3 "i-1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "filter"
                                                             -3
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "constraint2vector"
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "constraint2vector"
                                                                 2)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (typepred
                                                                             "j")
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               1)
                                                                              (("1"
                                                                                (replace
                                                                                 -2
                                                                                 3)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   2)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       -4)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "filter"
                                                                                           -4)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             -4)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "i")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -3
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "filter"
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "filter"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "constraint2vector")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "constraint2vector"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "filter"
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "nth"
                                                                           -3
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "filter_fun"
                                                                               -3)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "constraint2vector"
                                                                                   -3)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "filter"
                                                                                       2
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "filter"
                                                                                         2
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "filter"
                                                                                           -3
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "cdr"
                                                                                             -3
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "constraint2vector"
                                                                                                 2
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "cdr"
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "cdr"
                                                                                                       -3
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (decompose-equality
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "x!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "cdr"
                                                                                                               -1
                                                                                                               3)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "cdr"
                                                                                                                   -1
                                                                                                                   4)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (typepred
                                                                                                           "c(v!1)")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (typepred
                                                                                                           "i")
                                                                                                          (("3"
                                                                                                            (hide
                                                                                                             2
                                                                                                             3
                                                                                                             4
                                                                                                             5
                                                                                                             6)
                                                                                                            (("3"
                                                                                                              (hide
                                                                                                               -2
                                                                                                               -3
                                                                                                               -4
                                                                                                               -5
                                                                                                               -6)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "filter"
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "filter"
                                                                                                                   -1)
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     -1)
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "constraint2vector"
                                                                                                                       -1)
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "cdr"
                                                                                                                           -1)
                                                                                                                          (("3"
                                                                                                                            (assert)
                                                                                                                            (("3"
                                                                                                                              (typepred
                                                                                                                               "(listfuns2fun(filter[vec2real_f[n]]
                             (constraint2vector(j,
                                                LAMBDA
                                                (v: VectorN(n)):
                                                cdr[real](c(v))),
                              P))
                        (x!2))")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (hide
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "listfuns_length")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "filter[vec2real_f[n]]
                             (constraint2vector(j,
                                                LAMBDA
                                                (v: VectorN(n)):
                                                cdr[real](c(v))),
                              P)"
                                                                                                                                       "x!2")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (skeep)
                                                                                                                                        (("2"
                                                                                                                                          (typepred
                                                                                                                                           "c(v)")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "length"
                                                                                                                                             -2)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (skeep)
                                                                                                                                        (("3"
                                                                                                                                          (typepred
                                                                                                                                           "c(v)")
                                                                                                                                          (("3"
                                                                                                                                            (expand
                                                                                                                                             "length"
                                                                                                                                             -2)
                                                                                                                                            (("3"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (skeep)
                                                                                                                                (("2"
                                                                                                                                  (typepred
                                                                                                                                   "c(v)")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "length"
                                                                                                                                     -2)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (skeep)
                                                                                                                                (("3"
                                                                                                                                  (typepred
                                                                                                                                   "c(v)")
                                                                                                                                  (("3"
                                                                                                                                    (expand
                                                                                                                                     "length"
                                                                                                                                     -2)
                                                                                                                                    (("3"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("4"
                                                                                                          (typepred
                                                                                                           "c(v1!1)")
                                                                                                          (("4"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -2)
                                                                                                            (("4"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "filter"
                                                             -2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "filter"
                                                                 -2)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -2)
                                                                    (("2"
                                                                      (expand
                                                                       "constraint2vector"
                                                                       -2)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "filter"
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "filter_fun" 2)
                                    (("2"
                                      (expand "filter" 2 1)
                                      (("2"
                                        (expand "filter" 2 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand
                                               "constraint2vector"
                                               2
                                               2)
                                              (("2"
                                                (expand "nth" -2 1)
                                                (("2"
                                                  (expand
                                                   "filter"
                                                   -2
                                                   1)
                                                  (("2"
                                                    (inst
                                                     -2
                                                     "D"
                                                     "cdr(1+j,c)"
                                                     "P")
                                                    (("2"
                                                      (expand
                                                       "filter_fun"
                                                       -2
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "constraint2vector"
                                                         2
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "filter"
                                                           -2
                                                           1)
                                                          (("2"
                                                            (inst
                                                             -2
                                                             "i")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (decompose-equality
                                                                 -2)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x!1")
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "filter"
                                                                   -4)
                                                                  (("2"
                                                                    (expand
                                                                     "filter"
                                                                     -4)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "constraint2vector"
                                                                         -4)
                                                                        (("2"
                                                                          (lemma
                                                                           "listfuns_length")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "filter[vec2real_f[n]]
                             (constraint2vector(j, cdr(1 + j, c)), P)"
                                                                             "x!2")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "filter"
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "filter"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "constraint2vector"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "filter"
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (expand "filter" -1)
                      (("2" (expand "filter_fun" 1)
                        (("2" (expand "filter" 1)
                          (("2" (lemma "listfuns_length")
                            (("2"
                              (inst -1
                               "filter(constraint2vector(1 + j, c), P)"
                               "v")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j skolem-const-decl "nat" fundamentals_constrained_optimization
     nil)
    (c skolem-const-decl "constraints[n](1 + j)"
       fundamentals_constrained_optimization nil)
    (P skolem-const-decl "pred[vec2real_f[n]]"
     fundamentals_constrained_optimization nil)
    (i skolem-const-decl "below(length(filter(1 + j, c, P)))"
       fundamentals_constrained_optimization nil)
    (cdr const-decl "constraints(m - 1)"
         fundamentals_constrained_optimization nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listfuns_length formula-decl nil
     fundamentals_constrained_optimization nil)
    (listn type-eq-decl nil listn "structures/")
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car const-decl "vec2real_f" fundamentals_constrained_optimization
         nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (FALSE const-decl "bool" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listfuns2fun def-decl "list" fundamentals_constrained_optimization
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (constraint2vector def-decl "listn[vec2real_f[n]](m)"
     fundamentals_constrained_optimization nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (filter def-decl "list[T]" filters nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (filter_fun const-decl "constraints(length(filter(m, c, P)))"
     fundamentals_constrained_optimization nil)
    (nth const-decl "vec2real_f" fundamentals_constrained_optimization
         nil)
    (below type-eq-decl nil naturalnumbers nil)
    (filter const-decl "list[vec2real_f[n]]"
     fundamentals_constrained_optimization nil)
    (< const-decl "bool" reals nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (filter_nth 0
  (filter_nth-2 nil 3740143038
   (""
    (case "FORALL (n: nat, L: list[T], P: [T -> bool]):
               LET FL = filter(L, P) IN
                n=length(L) AND cons?(FL) IMPLIES
                  (FORALL (i: below(length(FL))):
                     EXISTS (j: below(length(L))): nth(FL, i) = nth(L, j))")
    (("1" (skeep)
      (("1" (ground) (("1" (inst -1 "length(L)" "L" "P") nil nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (assert)
            (("1" (flatten)
              (("1" (skeep :preds? T)
                (("1" (inst -2 "L" "P")
                  (("1" (assert) (("1" (inst -2 "i") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (assert)
            (("2" (skeep :preds? T)
              (("2" (expand "length" -2)
                (("2" (lift-if -2)
                  (("2" (split -2)
                    (("1" (expand "filter" -2) (("1" (assert) nil nil))
                      nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (case "j_1=0")
              (("1" (replace -1)
                (("1" (skeep :preds? T)
                  (("1" (expand "length" -4)
                    (("1" (lift-if -4)
                      (("1" (split -4)
                        (("1" (assert) nil nil)
                         ("2" (flatten)
                          (("2" (expand "filter" -2)
                            (("2" (lift-if -2)
                              (("2"
                                (split -2)
                                (("1" (flatten) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "length" -2)
                                    (("2"
                                      (lift-if -2)
                                      (("2"
                                        (split -2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "filter" -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (case "NOT i=0")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (replace -1 3)
                                                      (("2"
                                                        (inst 3 "0")
                                                        (("1"
                                                          (expand
                                                           "nth")
                                                          (("1"
                                                            (expand
                                                             "filter"
                                                             3)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "length")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep :preds? T)
                (("2" (case "P(car(L))")
                  (("1" (case "i=0")
                    (("1" (inst 2 "0")
                      (("1" (replace -1 2)
                        (("1" (expand "filter" 2)
                          (("1" (lift-if 2)
                            (("1" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "length" -6)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "nth" 2)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (inst -3 "cdr(L)" "P")
                      (("2" (expand "length" -4)
                        (("2" (assert)
                          (("2" (lift-if -4)
                            (("2" (split -4)
                              (("1" (assert) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "length" -3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "filter" -5)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "NOT 0 < length[T](cdr(filter(L, P)))")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (split -5)
                                                (("1"
                                                  (expand "filter " 4)
                                                  (("1"
                                                    (expand "nth" 4 1)
                                                    (("1"
                                                      (inst -1 "i-1")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst
                                                           4
                                                           "j+1")
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             4
                                                             2)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "j")
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "filter"
                                                           -4)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "filter" -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -2 "cdr(L)" "P")
                    (("2" (assert)
                      (("2" (expand "length" -3)
                        (("2" (lift-if -3)
                          (("2" (split -3)
                            (("1" (assert) nil nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -3)
                                    (("1"
                                      (expand "filter" 4)
                                      (("1"
                                        (inst -1 "i")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst 4 "j+1")
                                            (("1"
                                              (expand "nth" 4 2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "filter" -2)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "filter" -3)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (expand "length") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((filter def-decl "list[T]" filters nil)
    (pred type-eq-decl nil defined_types nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (T type-decl nil fundamentals_constrained_optimization nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (j skolem-const-decl "below(length(cdr(L)))"
     fundamentals_constrained_optimization nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "below(length(filter(L, P)))"
       fundamentals_constrained_optimization nil)
    (P skolem-const-decl "[T -> bool]"
     fundamentals_constrained_optimization nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (L skolem-const-decl "list[T]"
     fundamentals_constrained_optimization nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_singleton formula-decl nil more_list_props "structures/"))
   nil)
  (filter_nth-1 nil 3740138159
   ("" (skeep)
    (("" (induct "i")
      (("1" (flatten)
        (("1" (expand "nth" 1)
          (("1" (expand "nth" 1) (("1" (postpone) nil nil)) nil)) nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (filter_2nth 0
  (filter_2nth-3 nil 3740146967
   ("" (skeep)
    (("" (assert)
      (("" (case "cons?(filter(L,P))")
        (("1" (lemma "filter_nth")
          (("1" (assert)
            (("1" (inst -1 "L" "P") (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (typepred "i")
            (("2" (expand "length" -1) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (filter_nth formula-decl nil fundamentals_constrained_optimization
     nil)
    (T type-decl nil fundamentals_constrained_optimization nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (filter def-decl "list[T]" filters nil))
   nil)
  (filter_2nth-2 nil 3740146896
   (""
    (case "FORALL (n: nat, L: list[vec2real_f], P: [vec2real_f -> bool]):
                      LET FL = filter(L, P) IN
                       n=length(L) AND cons?(FL) IMPLIES
                         (FORALL (i: below(length(FL))):
                            EXISTS (j: below(length(L))): nth(FL, i) = nth(L, j))")
    (("1" (skeep) (("1" (ground) (("1" (postpone) nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (assert)
            (("1" (flatten)
              (("1" (skeep :preds? T)
                (("1" (inst -2 "L" "P")
                  (("1" (assert) (("1" (inst -2 "i") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (assert)
            (("2" (skeep :preds? T)
              (("2" (expand "length" -2)
                (("2" (lift-if -2)
                  (("2" (split -2)
                    (("1" (expand "filter" -2) (("1" (assert) nil nil))
                      nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (case "j_1=0")
              (("1" (replace -1)
                (("1" (skeep :preds? T)
                  (("1" (expand "length" -4)
                    (("1" (lift-if -4)
                      (("1" (split -4)
                        (("1" (assert) nil nil)
                         ("2" (flatten)
                          (("2" (expand "filter" -2)
                            (("2" (lift-if -2)
                              (("2"
                                (split -2)
                                (("1" (flatten) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "length" -2)
                                    (("2"
                                      (lift-if -2)
                                      (("2"
                                        (split -2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "filter" -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (case "NOT i=0")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (replace -1 3)
                                                      (("2"
                                                        (inst 3 "0")
                                                        (("1"
                                                          (expand
                                                           "nth")
                                                          (("1"
                                                            (expand
                                                             "filter"
                                                             3)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "length")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep :preds? T)
                (("2" (case "P(car(L))")
                  (("1" (case "i=0")
                    (("1" (inst 2 "0")
                      (("1" (replace -1 2)
                        (("1" (expand "filter" 2)
                          (("1" (lift-if 2)
                            (("1" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "length" -6)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "nth" 2)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (inst -3 "cdr(L)" "P")
                      (("2" (expand "length" -4)
                        (("2" (assert)
                          (("2" (lift-if -4)
                            (("2" (split -4)
                              (("1" (assert) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "length" -3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "filter" -5)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "NOT 0 < length[vec2real_f](cdr(filter(L, P)))")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (split -5)
                                                (("1"
                                                  (expand "filter " 4)
                                                  (("1"
                                                    (expand "nth" 4 1)
                                                    (("1"
                                                      (inst -1 "i-1")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst
                                                           4
                                                           "j+1")
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             4
                                                             2)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "j")
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "filter"
                                                           -4)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "filter" -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -2 "cdr(L)" "P")
                    (("2" (assert)
                      (("2" (expand "length" -3)
                        (("2" (lift-if -3)
                          (("2" (split -3)
                            (("1" (assert) nil nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -3)
                                    (("1"
                                      (expand "filter" 4)
                                      (("1"
                                        (inst -1 "i")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst 4 "j+1")
                                            (("1"
                                              (expand "nth" 4 2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "filter" -2)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "filter" -3)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (expand "length") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (filter_2nth-1 nil 3740146872 ("" (postpone) nil nil) nil shostak))
 (filter_nth2 0
  (filter_nth2-3 nil 3740145900
   (""
    (case "FORALL (n: nat, L: list[vec2real_f], P: [vec2real_f -> bool]):
                      LET FL = filter(L, P) IN
                       n=length(L) AND cons?(FL) IMPLIES
                         (FORALL (i: below(length(FL))):
                            EXISTS (j: below(length(L))): nth(FL, i) = nth(L, j))")
    (("1" (skeep)
      (("1" (ground) (("1" (inst -1 "length(L)" "L" "P") nil nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (assert)
            (("1" (flatten)
              (("1" (skeep :preds? T)
                (("1" (inst -2 "L" "P")
                  (("1" (assert) (("1" (inst -2 "i") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (assert)
            (("2" (skeep :preds? T)
              (("2" (expand "length" -2)
                (("2" (lift-if -2)
                  (("2" (split -2)
                    (("1" (expand "filter" -2) (("1" (assert) nil nil))
                      nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (case "j_1=0")
              (("1" (replace -1)
                (("1" (skeep :preds? T)
                  (("1" (expand "length" -4)
                    (("1" (lift-if -4)
                      (("1" (split -4)
                        (("1" (assert) nil nil)
                         ("2" (flatten)
                          (("2" (expand "filter" -2)
                            (("2" (lift-if -2)
                              (("2"
                                (split -2)
                                (("1" (flatten) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "length" -2)
                                    (("2"
                                      (lift-if -2)
                                      (("2"
                                        (split -2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "filter" -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (case "NOT i=0")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (replace -1 3)
                                                      (("2"
                                                        (inst 3 "0")
                                                        (("1"
                                                          (expand
                                                           "nth")
                                                          (("1"
                                                            (expand
                                                             "filter"
                                                             3)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "length")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep :preds? T)
                (("2" (case "P(car(L))")
                  (("1" (case "i=0")
                    (("1" (inst 2 "0")
                      (("1" (replace -1 2)
                        (("1" (expand "filter" 2)
                          (("1" (lift-if 2)
                            (("1" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "length" -6)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "nth" 2)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (inst -3 "cdr(L)" "P")
                      (("2" (expand "length" -4)
                        (("2" (assert)
                          (("2" (lift-if -4)
                            (("2" (split -4)
                              (("1" (assert) nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "length" -3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "filter" -5)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "NOT 0 < length[vec2real_f](cdr(filter(L, P)))")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (split -5)
                                                (("1"
                                                  (expand "filter " 4)
                                                  (("1"
                                                    (expand "nth" 4 1)
                                                    (("1"
                                                      (inst -1 "i-1")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst
                                                           4
                                                           "j+1")
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             4
                                                             2)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "j")
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "filter"
                                                           -4)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "filter" -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -2 "cdr(L)" "P")
                    (("2" (assert)
                      (("2" (expand "length" -3)
                        (("2" (lift-if -3)
                          (("2" (split -3)
                            (("1" (assert) nil nil)
                             ("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -3)
                                    (("1"
                                      (expand "filter" 4)
                                      (("1"
                                        (inst -1 "i")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst 4 "j+1")
                                            (("1"
                                              (expand "nth" 4 2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "filter" -2)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "filter" -3)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (expand "length") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((filter def-decl "list[T]" filters nil)
    (pred type-eq-decl nil defined_types nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (j skolem-const-decl "below(length(cdr(L)))"
     fundamentals_constrained_optimization nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "below(length(filter(L, P)))"
       fundamentals_constrained_optimization nil)
    (P skolem-const-decl "[vec2real_f[n] -> bool]"
     fundamentals_constrained_optimization nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (L skolem-const-decl "list[vec2real_f[n]]"
     fundamentals_constrained_optimization nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_singleton formula-decl nil more_list_props "structures/"))
   nil)
  (filter_nth2-2 nil 3740145501
   (""
    (case "FORALL (n: nat, L: list[T], P: [T -> bool]):
                      LET FL = filter(L, P) IN
                       n=length(L) AND cons?(FL) IMPLIES
                         (FORALL (i: below(length(FL))):
                            EXISTS (j: below(length(L))): nth(FL, i) = nth(L, j))")
    (("1" (skeep) (("1" (ground) (("1" (postpone) nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (assert)
            (("1" (flatten) (("1" (postpone) nil nil)) nil)) nil))
          nil)
         ("2" (postpone) nil nil) ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil nil)
  (filter_nth2-1 nil 3740143302
   ("" (lemma "filter_nth")
    (("" (expand "nth" 1)
      (("" (expand "filter_fun" 1)
        (("" (assert)
          (("" (expand "filter" 1)
            (("" (skeep) (("" (skeep) (("" (postpone) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (filter_2nth2 0
  (filter_2nth2-1 nil 3740147521
   ("" (skeep)
    (("" (assert)
      (("" (case "cons?(filter(L,P))")
        (("1" (lemma "filter_nth2")
          (("1" (assert)
            (("1" (inst -1 "L" "P") (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (typepred "i")
            (("2" (expand "length" -1) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (filter_nth2 formula-decl nil fundamentals_constrained_optimization
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (filter def-decl "list[T]" filters nil))
   nil))
 (c2v_nth_TCC1 0
  (c2v_nth_TCC1-1 nil 3740211764 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (c2v_nth subtype "fundamentals_constrained_optimization.i"
    "below[length[vec2real_f[n]](constraint2vector(m, c))]")))
 (c2v_nth 0
  (c2v_nth-1 nil 3740211765
   ("" (induct "m")
    (("1" (skeep) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "nth" 1)
          (("2" (assert)
            (("2" (lift-if)
              (("2" (case "i=0")
                (("1" (assert)
                  (("1" (replace -1 1)
                    (("1" (expand "nth" 1)
                      (("1" (expand "constraint2vector" 1)
                        (("1" (expand "car" 1 2)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "nth" 2 1)
                    (("2" (expand "constraint2vector" 2)
                      (("2" (expand "nth" -1 1)
                        (("2" (inst -1 "D" "cdr(1+j,c)" "i-1")
                          (("2" (assert)
                            (("2" (expand "cdr" -1 1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (typepred "i")
        (("3" (typepred "constraint2vector(m, c)")
          (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr const-decl "constraints(m - 1)"
         fundamentals_constrained_optimization nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (car const-decl "vec2real_f" fundamentals_constrained_optimization
         nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth const-decl "vec2real_f" fundamentals_constrained_optimization
         nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (listn type-eq-decl nil listn "structures/")
    (constraint2vector def-decl "listn[vec2real_f[n]](m)"
     fundamentals_constrained_optimization nil))
   shostak))
 (listfuns2fun_TCC3 0
  (listfuns2fun_TCC3-1 nil 3739611662
   ("" (induct "m")
    (("1" (assert)
      (("1" (skeep)
        (("1" (skeep)
          (("1" (expand "listfuns2fun")
            (("1" (typepred "v")
              (("1" (assert)
                (("1" (expand "length" -1)
                  (("1" (lift-if)
                    (("1" (split)
                      (("1" (assert) nil nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (skeep)
          (("2" (expand "listfuns2fun")
            (("2" (typepred "v")
              (("2" (expand "length" -1)
                (("2" (lift-if)
                  (("2" (split -1)
                    (("1" (assert) nil nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (expand "length" 2)
                          (("2" (inst -2 "cdr(v)")
                            (("2" (inst -2 "x1")
                              (("2"
                                (assert)
                                (("2"
                                  (case "cdr(v)=null")
                                  (("1"
                                    (expand "length" -2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1 2)
                                        (("1"
                                          (expand "listfuns2fun")
                                          (("1"
                                            (expand "length")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (expand "listfuns2fun" 3)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (listfuns2fun def-decl "list" fundamentals_constrained_optimization
     nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak
   (listfuns2fun subtype
    "fundamentals_constrained_optimization.listfuns2fun(fundamentals_constrained_optimization.v)"
    "[matrices.VectorN(fundamentals_constrained_optimization.n) -> matrices.VectorN(fundamentals_constrained_optimization.m)]")))
 (sat_eq_1 0
  (sat_eq_1-1 nil 3738050976
   ("" (induct "m")
    (("1" (skeep)
      (("1" (assert)
        (("1" (split)
          (("1" (expand "zero_vec")
            (("1" (typepred "eq_constraints(v)")
              (("1" (assert)
                (("1" (expand "length" -2) (("1" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "sat_eq_constraint?")
            (("2" (flatten) (("2" (skeep) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (split)
          (("1" (flatten)
            (("1" (expand "zero_vec" 1)
              (("1" (decompose-equality 1)
                (("1" (expand "sat_eq_constraint?" -1)
                  (("1" (inst -1 "0")
                    (("1" (assert)
                      (("1" (expand "nth" -1) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (inst -2
                   "LAMBDA(v: VectorN(n)): cdr(eq_constraints(v))" "v")
                  (("1" (assert)
                    (("1" (expand "sat_eq_constraint?")
                      (("1" (skeep)
                        (("1" (inst-cp -1 "i+1")
                          (("1" (expand "nth" -2)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (skeep)
                      (("2" (typepred "eq_constraints(v!1)")
                        (("2" (expand "length" -2)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep)
                    (("3" (assert)
                      (("3" (typepred "eq_constraints(v!1)")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "sat_eq_constraint?")
              (("2" (skeep)
                (("2" (lemma "zero_vec0")
                  (("2" (inst -1 "j+1" "eq_constraints(v)")
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (assert) (("2" (inst -1 "i") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nth def-decl "T" list_props nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (v skolem-const-decl "VectorN(n)"
     fundamentals_constrained_optimization nil)
    (eq_constraints skolem-const-decl "constraints[n](1 + j)"
     fundamentals_constrained_optimization nil)
    (j skolem-const-decl "nat" fundamentals_constrained_optimization
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (zero_vec0 formula-decl nil vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (sat_eq_constraint? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (sat_ineq_1_TCC1 0
  (sat_ineq_1_TCC1-1 nil 3738049606 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (sat_ineq_1 subtype
    "vector_arithmetic.zero_vec(fundamentals_constrained_optimization.m)"
    "(list_adt[real].cons?)")))
 (sat_ineq_1 0
  (sat_ineq_1-1 nil 3738050910
   ("" (induct "m")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (assert)
        (("3" (skeep)
          (("3" (split)
            (("1" (split)
              (("1" (flatten)
                (("1" (expand "greater_eq?" 1 1)
                  (("1" (assert)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (expand "zero_vec" 1)
                          (("1" (expand "sat_ineq_constraint?" -3)
                            (("1" (inst -3 "0")
                              (("1"
                                (expand "nth" -3)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split)
                          (("1" (split)
                            (("1" (split)
                              (("1"
                                (typepred "ineq_constraints(v)")
                                (("1"
                                  (typepred "zero_vec(1 + j)")
                                  (("1"
                                    (expand "length" -2)
                                    (("1"
                                      (expand "length" -4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1 -3)
                                          (("1"
                                            (expand "length" -2)
                                            (("1"
                                              (replace -2 1 rl)
                                              (("1"
                                                (simplify)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "sat_ineq_constraint?")
                                    (("1"
                                      (inst -1 "0")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "nth" -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "zero_vec" 1)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst
                                   -2
                                   "LAMBDA (v:VectorN(n)): cdr(ineq_constraints(v))"
                                   "v")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "zero_vec" 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "zero_vec" 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand
                                               "sat_ineq_constraint?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -1 "i+1")
                                                  (("2"
                                                    (expand "nth" -1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (typepred
                                         "ineq_constraints(v!1)")
                                        (("2"
                                          (expand "length" -2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (assert)
                                    (("3"
                                      (skeep)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (typepred
                                           "(ineq_constraints(v!1))")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (split)
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "zero_vec(1 + j)")
                                  (("1"
                                    (typepred "ineq_constraints(v)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -1 -3)
                                        (("1"
                                          (expand "length" -2)
                                          (("1"
                                            (expand "length" -1)
                                            (("1"
                                              (expand "length" -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2 -1 rl)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split)
                                  (("1"
                                    (expand "sat_ineq_constraint?" -1)
                                    (("1"
                                      (inst -1 "0")
                                      (("1"
                                        (expand "nth" -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "zero_vec" 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst
                                     -2
                                     "LAMBDA(v: VectorN(n)): cdr(ineq_constraints(v))"
                                     "v")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -3)
                                          (("1"
                                            (split)
                                            (("1"
                                              (expand "zero_vec" 1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand
                                                 "sat_ineq_constraint?")
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst -1 "i+1")
                                                    (("2"
                                                      (expand "nth" -1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (typepred
                                           "ineq_constraints(v!1)")
                                          (("2"
                                            (expand "length" -2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep)
                                      (("3"
                                        (typepred
                                         "ineq_constraints(v!1)")
                                        (("3"
                                          (expand "length" -2)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "sat_ineq_constraint?" 1)
                  (("2" (skeep)
                    (("2" (expand "nth" 1)
                      (("2" (lift-if)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (expand "greater_eq?" -2)
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "zero_vec" -3)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (split)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "zero_vec" -1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "zero_vec" -1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2"
                              (inst -2
                               "LAMBDA(v: VectorN(n)): cdr(ineq_constraints(v))"
                               "v")
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split)
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (typepred "ineq_constraints(v!1)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "length" -2)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (assert)
                                (("3"
                                  (skeep)
                                  (("3"
                                    (typepred "ineq_constraints(v!1)")
                                    (("3"
                                      (expand "length" -2)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (typepred "j")
                (("2" (case "NOT j=0")
                  (("1" (assert) nil nil)
                   ("2" (replace -1 2)
                    (("2" (assert)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (expand "greater_eq?")
                            (("1" (assert)
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "zero_vec" 1)
                                    (("1"
                                      (expand
                                       "sat_ineq_constraint?"
                                       -3)
                                      (("1"
                                        (inst -3 "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth" -3)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "zero_vec" 1)
                                          (("1"
                                            (expand "zero_vec" 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (typepred
                                             "ineq_constraints(v)")
                                            (("2"
                                              (replace -4 -2)
                                              (("2"
                                                (expand "length" -2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -2)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (typepred
                                         "ineq_constraints(v)")
                                        (("2"
                                          (expand "length" -2)
                                          (("2"
                                            (expand "length" -2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "sat_ineq_constraint?")
                            (("2" (skeep)
                              (("2"
                                (case "NOT i=0")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (replace -1 1)
                                  (("2"
                                    (expand "nth" 1)
                                    (("2"
                                      (expand "greater_eq?" -2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (assert)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "zero_vec(m)") (("4" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (typepred "ineq_constraints(v)") (("5" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (j skolem-const-decl "nat" fundamentals_constrained_optimization
     nil)
    (ineq_constraints skolem-const-decl "constraints[n](1 + j)"
     fundamentals_constrained_optimization nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (greater_eq? def-decl "bool" vector_arithmetic nil)
    (sat_ineq_constraint? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (trivial_eq 0
  (trivial_eq-1 nil 3738051717
   ("" (skeep)
    (("" (expand "sat_eq_constraint?") (("" (propax) nil nil)) nil))
    nil)
   ((sat_eq_constraint? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (x_square_TCC1 0
  (x_square_TCC1-1 nil 3738049606 ("" (subtype-tcc) nil nil) nil
   shostak (x_square subtype "0" "below[length[real](v)]")))
 (x_square_TCC2 0
  (x_square_TCC2-1 nil 3738049606 ("" (subtype-tcc) nil nil) nil
   shostak
   (x_square subtype "fundamentals_constrained_optimization.v"
    "matrices.VectorN(fundamentals_constrained_optimization.n)")))
 (x_square_TCC3 0
  (x_square_TCC3-1 nil 3738049606 ("" (subtype-tcc) nil nil) nil
   shostak
   (x_square subtype "fundamentals_constrained_optimization.v"
    "matrices.VectorN(fundamentals_constrained_optimization.n)")))
 (x_square_TCC4 0
  (x_square_TCC4-1 nil 3738049606 ("" (subtype-tcc) nil nil) nil
   shostak
   (x_square subtype "fundamentals_constrained_optimization.square_f"
    "vec2real_f[n]")))
 (x_square_TCC5 0
  (x_square_TCC5-1 nil 3738049606 ("" (subtype-tcc) nil nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak
   (x_square subtype
    "fundamentals_constrained_optimization.eq_constraints"
    "domain_vec2real_def[fundamentals_constrained_optimization.n].constraints(fundamentals_constrained_optimization.m1)")))
 (x_square_TCC6 0
  (x_square_TCC6-1 nil 3738049606 ("" (subtype-tcc) nil nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak
   (x_square subtype
    "fundamentals_constrained_optimization.ineq_constraints"
    "domain_vec2real_def[fundamentals_constrained_optimization.n].constraints(fundamentals_constrained_optimization.m2)")))
 (x_square 0
  (x_square-1 nil 3738051819
   ("" (flatten)
    (("" (skeep)
      (("" (expand "is_glob_minimizer?")
        (("" (split)
          (("1" (expand "feasible?" 1)
            (("1" (split)
              (("1" (expand "sat_eq_constraint?")
                (("1" (skeep)
                  (("1" (typepred "i") (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (expand "sat_ineq_constraint?")
                (("2" (skeep)
                  (("2" (typepred "i")
                    (("2" (case "NOT i=0")
                      (("1" (assert) nil nil)
                       ("2" (replace -1 1)
                        (("2" (expand "nth" 1)
                          (("2" (inst-cp -7 "v")
                            (("2" (flatten)
                              (("2"
                                (replace -9 1)
                                (("2"
                                  (replace -6 1)
                                  (("2" (eval-formula 1) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (replace -5 1)
              (("2" (inst-cp -6 "(: 2 :)")
                (("2" (inst-cp -6 "v2")
                  (("2" (flatten)
                    (("2" (replace -10 1)
                      (("2" (expand "nth" 1)
                        (("2" (replace -7 1)
                          (("2" (expand "nth" 1)
                            (("2" (hide -6 -7 -8 -9 -10 -11 -12)
                              (("2"
                                (expand "feasible?")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "sat_ineq_constraint?" -2)
                                    (("2"
                                      (inst -2 "0")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (reveal -4)
                                          (("1"
                                            (replace -1 -3)
                                            (("1"
                                              (expand "nth" -3)
                                              (("1"
                                                (isolate -3 l 1)
                                                (("1"
                                                  (simplify)
                                                  (("1"
                                                    (mult-ineq
                                                     -3
                                                     -3
                                                     (+ +))
                                                    (("1"
                                                      (simplify)
                                                      (("1"
                                                        (lemma
                                                         "abs_mult")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "car(v2)"
                                                           "car(v2)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -2
                                                             rl)
                                                            (("1"
                                                              (expand
                                                               "abs"
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (sat_eq_constraint? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (sat_ineq_constraint? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (feasible? const-decl "bool" fundamentals_constrained_optimization
     nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (m2 skolem-const-decl "nat" fundamentals_constrained_optimization
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (abs_mult formula-decl nil real_props nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (abs_nat formula-decl nil abs_lems "reals/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (is_glob_minimizer? const-decl "bool"
     fundamentals_constrained_optimization nil))
   shostak))
 (is_loc_minimizer?_TCC1 0
  (is_loc_minimizer?_TCC1-1 nil 3738049606
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "v-v2")
        (("" (assert)
          (("" (typepred "v")
            (("" (typepred "v2") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak
   (is_loc_minimizer? subtype
    "(matrices.-)(fundamentals_constrained_optimization.v, fundamentals_constrained_optimization.v2)"
    "(list_adt[real].cons?)")))
 (loc_minimizer_equiv 0
  (loc_minimizer_equiv-1 nil 3742895647
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "is_loc_minimizer?")
            (("1" (flatten)
              (("1" (assert)
                (("1" (skeep)
                  (("1" (lemma "equiv_norm[n]")
                    (("1" (inst -1 "nn" "nn!1")
                      (("1" (expand "equiv?" -1)
                        (("1" (skeep)
                          (("1" (skeep)
                            (("1" (inst 1 "epsilon*c1")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -4 "v2")
                                  (("1"
                                    (inst -1 "v-v2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (div-by -6 "c1")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (div-by -1 "c1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "v-v2" "v" "v2")
                                      (("2"
                                        (expand "max" -)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "is_loc_minimizer?")
          (("2" (inst 1 "norm_inf(n)")
            (("2" (flatten)
              (("2" (assert) (("2" (inst -3 "norm_inf(n)") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (v2 skolem-const-decl "VectorN(n)"
     fundamentals_constrained_optimization nil)
    (v skolem-const-decl "VectorN(n)"
     fundamentals_constrained_optimization nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (equiv? const-decl "bool" norms_equiv nil)
    (equiv_norm formula-decl nil norms_equiv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (is_loc_minimizer? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (is_loc_minimizer? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (loc_min_equiv 0
  (loc_min_equiv-2 nil 3742895868
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "is_loc_min?")
            (("1" (skeep)
              (("1" (lemma "equiv_norm[n]")
                (("1" (inst -1 "nn!1" "nn")
                  (("1" (expand "equiv?" -1)
                    (("1" (skeep)
                      (("1" (skeep)
                        (("1" (inst 1 "epsilon/c2" "v")
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (inst -5 "v2")
                                (("1"
                                  (inst -1 "v-v2")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (mult-by -9 "c2")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "v-v2" "v" "v2")
                                    (("2"
                                      (expand "max" -)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "is_loc_min?")
          (("2" (inst 1 "norm_inf(n)")
            (("2" (inst -1 "norm_inf(n)") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (Vector type-eq-decl nil matrices "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (v skolem-const-decl "VectorN(n)"
     fundamentals_constrained_optimization nil)
    (v2 skolem-const-decl "VectorN(n)"
     fundamentals_constrained_optimization nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (equiv? const-decl "bool" norms_equiv nil)
    (equiv_norm formula-decl nil norms_equiv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (is_loc_min? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (is_loc_min? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (norm_inf const-decl "(norm?(m))" norms nil))
   nil)
  (loc_min_equiv-1 nil 3742895766
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "is_loc_min?")
            (("1" (skeep)
              (("1" (lemma "equiv_norm[n]")
                (("1" (inst -1 "nn!1" "nn")
                  (("1" (expand "equiv?" -1)
                    (("1" (skeep)
                      (("1" (skeep)
                        (("1" (inst 1 "epsilon*c1" "v")
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (inst -5 "v2")
                                (("1"
                                  (inst -1 "v-v2")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (div-by -9 "c1")
                                      (("1" (postpone) nil nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (loc_maximizer_equiv 0
  (loc_maximizer_equiv-1 nil 3742895909
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "is_loc_maximizer?")
            (("1" (flatten)
              (("1" (assert)
                (("1" (skeep)
                  (("1" (lemma "equiv_norm[n]")
                    (("1" (inst -1 "nn!1" "nn")
                      (("1" (expand "equiv?" -1)
                        (("1" (skeep)
                          (("1" (skeep)
                            (("1" (inst 1 "epsilon/c2")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -4 "v2")
                                  (("1"
                                    (inst -1 "v-v2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (mult-by -7 "c2")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "v-v2" "v" "v2")
                                      (("2"
                                        (expand "max" -)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "is_loc_maximizer?")
          (("2" (inst 1 "norm_inf(n)")
            (("2" (flatten)
              (("2" (assert) (("2" (inst -3 "norm_inf(n)") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (v2 skolem-const-decl "VectorN(n)"
     fundamentals_constrained_optimization nil)
    (v skolem-const-decl "VectorN(n)"
     fundamentals_constrained_optimization nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (equiv? const-decl "bool" norms_equiv nil)
    (equiv_norm formula-decl nil norms_equiv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (is_loc_maximizer? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (is_loc_maximizer? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (loc_max_equiv 0
  (loc_max_equiv-1 nil 3742896023
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "is_loc_max?")
            (("1" (skeep)
              (("1" (lemma "equiv_norm[n]")
                (("1" (skeep)
                  (("1" (inst -1 "nn!1" "nn")
                    (("1" (expand "equiv?" -1)
                      (("1" (assert)
                        (("1" (skeep)
                          (("1" (inst 1 "epsilon/c2" "v")
                            (("1" (assert)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -5 "v2")
                                  (("1"
                                    (inst -1 "v-v2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (mult-by -8 "c2")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "v-v2" "v" "v2")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "max" -)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "is_loc_max?")
          (("2" (inst 1 "norm_inf(n)")
            (("2" (inst -1 "norm_inf(n)") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (equiv? const-decl "bool" norms_equiv nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (v2 skolem-const-decl "VectorN(n)"
     fundamentals_constrained_optimization nil)
    (v skolem-const-decl "VectorN(n)"
     fundamentals_constrained_optimization nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (VectorN type-eq-decl nil matrices "matrices/")
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (equiv_norm formula-decl nil norms_equiv nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (is_loc_max? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (is_loc_max? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (norm_inf const-decl "(norm?(m))" norms nil))
   shostak))
 (isolated_implies_strict 0
  (isolated_implies_strict-1 nil 3738052925
   ("" (skeep)
    (("" (expand "is_isolated_loc_minimizer?")
      (("" (expand "is_strict_loc_minimizer?")
        (("" (flatten)
          (("" (assert)
            (("" (skeep)
              (("" (inst 1 "epsilon/2")
                (("" (skeep)
                  (("" (inst-cp -3 "v2")
                    (("" (assert)
                      (("" (flatten)
                        (("" (expand "is_loc_minimizer?" 1)
                          (("" (inst 1 "epsilon/2")
                            (("" (skeep)
                              ((""
                                (inst -3 "v2_1")
                                ((""
                                  (split)
                                  (("1" (assert) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (propax) nil nil)
                                   ("4"
                                    (assert)
                                    (("4"
                                      (hide -1 -2 -3 -4 -5 -7 -8)
                                      (("4"
                                        (hide 2 3 4)
                                        (("4"
                                          (typepred "nn")
                                          (("4"
                                            (expand "norm?" -1)
                                            (("4"
                                              (flatten)
                                              (("4"
                                                (hide -1 -2 -3)
                                                (("4"
                                                  (inst
                                                   -1
                                                   "v-v2"
                                                   "v2-v2_1")
                                                  (("1"
                                                    (lemma
                                                     "add_zero_trick")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "v"
                                                       "v2"
                                                       "v2_1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred
                                                           "v2-v2_1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "max"
                                                               -2)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (typepred
                                                                   "v-v2")
                                                                  (("2"
                                                                    (expand
                                                                     "max"
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "v2_1")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (typepred "v2")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (typepred "v")
                                                        (("4"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred
                                                     "v2-v2_1"
                                                     "v2"
                                                     "v2_1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "max"
                                                         -)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (typepred
                                                     "v-v2"
                                                     "v"
                                                     "v2")
                                                    (("3"
                                                      (expand "max")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_isolated_loc_minimizer? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_loc_minimizer? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (Vector type-eq-decl nil matrices "matrices/")
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       "matrices/")
    (v skolem-const-decl "VectorN(n)"
     fundamentals_constrained_optimization nil)
    (v2 skolem-const-decl "VectorN(n)"
     fundamentals_constrained_optimization nil)
    (v2_1 skolem-const-decl "VectorN(n)"
     fundamentals_constrained_optimization nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (add_zero_trick formula-decl nil vector_arithmetic nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (is_strict_loc_minimizer? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (active_ineq?_TCC1 0
  (active_ineq?_TCC1-1 nil 3738049606 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (feasible? const-decl "bool" fundamentals_constrained_optimization
     nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sat_ineq_constraint? const-decl "bool"
     fundamentals_constrained_optimization nil)
    (sat_eq_constraint? const-decl "bool"
     fundamentals_constrained_optimization nil))
   shostak
   (active_ineq? subtype "fundamentals_constrained_optimization.i"
    "below[length[real](ineq_constraints(v))]")))
 (lst2real_TCC1 0
  (lst2real_TCC1-1 nil 3739892676
   ("" (lemma "listfuns_length")
    (("" (skeep)
      (("" (skeep)
        (("" (assert) (("" (inst -1 "l" "x1") nil nil)) nil)) nil))
      nil))
    nil)
   ((vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (listfuns_length formula-decl nil
     fundamentals_constrained_optimization nil))
   nil
   (lst2real subtype
    "fundamentals_constrained_optimization.listfuns2fun(fundamentals_constrained_optimization.l)"
    "domain_vec2real_def[fundamentals_constrained_optimization.n].constraints(list_props[vec2real_f[n]].length(fundamentals_constrained_optimization.l))")))
 (lst2real 0
  (lst2real-1 nil 3739893191
   ("" (induct "l")
    (("1" (assert)
      (("1" (skeep)
        (("1" (assert)
          (("1" (typepred "i")
            (("1" (expand "length" -1) (("1" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (assert)
        (("2" (skeep)
          (("2" (case "i=0")
            (("1" (replace -1 1)
              (("1" (hide -2)
                (("1" (expand "nth" 1)
                  (("1" (expand "nth" 1)
                    (("1" (expand "listfuns2fun" 1)
                      (("1" (decompose-equality 1) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -1 "i-1")
              (("1" (expand "nth" 2)
                (("1" (assert)
                  (("1" (expand "listfuns2fun" 2)
                    (("1" (expand "nth" 2 2)
                      (("1" (expand "nth" -1 2)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (assert)
                  (("2" (typepred "i")
                    (("2" (expand "length" -1) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "listfuns_length")
        (("3" (hide 2)
          (("3" (skeep) (("3" (inst -1 "l" "x1") nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((listfuns_length formula-decl nil
     fundamentals_constrained_optimization nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons1_var skolem-const-decl "vec2real_f[n]"
     fundamentals_constrained_optimization nil)
    (cons2_var skolem-const-decl "list[vec2real_f[n]]"
     fundamentals_constrained_optimization nil)
    (i skolem-const-decl "below(length(cons(cons1_var, cons2_var)))"
       fundamentals_constrained_optimization nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" fundamentals_constrained_optimization
     nil)
    (VectorN type-eq-decl nil matrices "matrices/")
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (nth const-decl "vec2real_f" fundamentals_constrained_optimization
         nil)
    (constraints type-eq-decl nil domain_vec2real_def nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (listfuns2fun def-decl "list" fundamentals_constrained_optimization
     nil))
   shostak))
 (countzeroidx_TCC1 0
  (countzeroidx_TCC1-1 nil 3739809646
   ("" (skeep)
    (("" (assert) (("" (expand "every") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((every adt-def-decl "boolean" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil (countzeroidx subtype "list_adt[real].null" "list[nat]")))
 (countzeroidx_TCC2 0
  (countzeroidx_TCC2-1 nil 3739809646
   ("" (skeep)
    (("" (assert) (("" (expand "every") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (countzeroidx subtype "fundamentals_constrained_optimization.l"
    "(list_adt[real].cons?)")))
 (countzeroidx_TCC3 0
  (countzeroidx_TCC3-1 nil 3739809646
   ("" (skeep)
    (("" (assert) (("" (expand "<<") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (countzeroidx termination
    "fundamentals_constrained_optimization.countzeroidx((number_fields.+)(fundamentals_constrained_optimization.n, 1), list_adt[real].cdr(fundamentals_constrained_optimization.l))"
    "nil")))
 (countzeroidx_TCC4 0
  (countzeroidx_TCC4-1 nil 3739809646
   ("" (skeep)
    (("" (assert)
      (("" (expand "every" 2)
        (("" (assert)
          (("" (typepred "v(1 + n!1, cdr[real](l))")
            (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (every adt-def-decl "boolean" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (countzeroidx subtype
    "list_adt[real].cons(fundamentals_constrained_optimization.n, fundamentals_constrained_optimization.countzeroidx((number_fields.+)(fundamentals_constrained_optimization.n, 1), list_adt[real].cdr(fundamentals_constrained_optimization.l)))"
    "list[nat]")))
 (countzeroidx_TCC5 0
  (countzeroidx_TCC5-1 nil 3778579462 ("" (termination-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil))
   nil
   (countzeroidx termination
    "fundamentals_constrained_optimization.countzeroidx((number_fields.+)(fundamentals_constrained_optimization.n, 1), list_adt[real].cdr(fundamentals_constrained_optimization.l))"
    "nil")))
 (ex_idx 0
  (ex_idx-1 nil 3739809816 ("" (eval-formula 1) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)))