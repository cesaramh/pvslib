(derivatives_subtype
 (IMP_derivatives_TCC1 0
  (IMP_derivatives_TCC1-1 nil 3794409500
   ("" (lemma "deriv_domain") (("" (propax) nil nil)) nil)
   ((deriv_domain formula-decl nil derivatives_subtype nil)) nil
   (IMP_derivatives assuming "derivatives[T].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (IMP_derivatives_TCC2 0
  (IMP_derivatives_TCC2-1 nil 3794409500
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil derivatives_subtype nil)) nil
   (IMP_derivatives assuming "derivatives[T].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (derivable_subtype_TCC1 0
  (derivable_subtype_TCC1-1 nil 3786709590 ("" (assuming-tcc) nil nil)
   ((fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (NQ const-decl "real" derivatives_def nil)
    (convergence const-decl "bool" convergence_functions nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (convergent? const-decl "bool" lim_of_functions nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_domain? const-decl "bool" deriv_domain_def nil)
    (/= const-decl "boolean" notequal nil)
    (not_one_element? const-decl "bool" deriv_domain_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (derivable_subtype assuming "derivatives[S].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (derivable_subtype_TCC2 0
  (derivable_subtype_TCC2-1 nil 3786709590 ("" (assuming-tcc) nil nil)
   ((fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (NQ const-decl "real" derivatives_def nil)
    (convergence const-decl "bool" convergence_functions nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (convergent? const-decl "bool" lim_of_functions nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_domain? const-decl "bool" deriv_domain_def nil)
    (/= const-decl "boolean" notequal nil)
    (not_one_element? const-decl "bool" deriv_domain_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (derivable_subtype assuming "derivatives[S].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (derivable_subtype 0
  (derivable_subtype-1 nil 3474730900
   ("" (skosimp*)
    (("" (expand "restrict")
      (("" (expand "derivable?")
        (("" (skosimp*)
          (("" (inst?)
            (("" (expand "derivable?")
              (("" (expand "convergent?")
                (("" (skosimp*)
                  (("" (inst + "l!1")
                    (("" (expand "convergence")
                      (("" (expand "fullset")
                        (("" (expand "convergence")
                          (("" (flatten)
                            (("" (assert)
                              ((""
                                (split +)
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (expand "adh")
                                      (("1"
                                        (expand "deriv_domain?")
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst - e!1 x!1)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (inst + "y!1")
                                                (("1"
                                                  (expand "A")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1)
                                  (("2"
                                    (skosimp*)
                                    (("2"
                                      (inst - "epsilon!1")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (inst + "delta!1")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "NQ")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (typepred "x!2")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "A")
                                                      (("2"
                                                        (flatten)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions nil)
    (x!2 skolem-const-decl "(A(x!1))" derivatives_subtype nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" derivatives_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (y!1 skolem-const-decl
     "{u: nzreal | T_pred(u + x!1) AND S_pred(u + x!1)}"
     derivatives_subtype nil)
    (x!1 skolem-const-decl "S" derivatives_subtype nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (deriv_domain? const-decl "bool" deriv_domain_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (fullset const-decl "set" sets nil)
    (convergent? const-decl "bool" lim_of_functions nil)
    (S formal-subtype-decl nil derivatives_subtype nil)
    (S_pred const-decl "[T -> boolean]" derivatives_subtype nil)
    (T formal-subtype-decl nil derivatives_subtype nil)
    (T_pred const-decl "[real -> boolean]" derivatives_subtype nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable? const-decl "bool" derivatives nil))
   shostak))
 (deriv_subtype_TCC1 0
  (deriv_subtype_TCC1-1 nil 3474730877
   ("" (skosimp*)
    (("" (lemma derivable_subtype)
      (("" (inst?)
        (("" (assert)
          (("" (lemma "del_neigh_all_lem[S]") (("" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_subtype formula-decl nil derivatives_subtype nil)
    (del_neigh_all_lem formula-decl nil deriv_domain_def nil)
    (S_pred const-decl "[T -> boolean]" derivatives_subtype nil)
    (S formal-subtype-decl nil derivatives_subtype nil)
    (T formal-subtype-decl nil derivatives_subtype nil)
    (T_pred const-decl "[real -> boolean]" derivatives_subtype nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (deriv_subtype subtype
    "restrict[T, S, real].restrict(derivatives_subtype.f)"
    "deriv_fun[S]")))
 (deriv_subtype_TCC2 0
  (deriv_subtype_TCC2-1 nil 3786709590
   ("" (skosimp*)
    (("" (lemma "del_neigh_all_lem[S]") (("" (assert) nil nil)) nil))
    nil)
   ((S formal-subtype-decl nil derivatives_subtype nil)
    (S_pred const-decl "[T -> boolean]" derivatives_subtype nil)
    (T formal-subtype-decl nil derivatives_subtype nil)
    (T_pred const-decl "[real -> boolean]" derivatives_subtype nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (del_neigh_all_lem formula-decl nil deriv_domain_def nil))
   nil
   (deriv_subtype assuming "derivatives[S].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (deriv_subtype_TCC3 0
  (deriv_subtype_TCC3-1 nil 3786709590 ("" (assuming-tcc) nil nil)
   ((fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (NQ const-decl "real" derivatives_def nil)
    (convergence const-decl "bool" convergence_functions nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (convergent? const-decl "bool" lim_of_functions nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (derivable? const-decl "bool" derivatives nil)
    (del_neigh_all? const-decl "bool" deriv_domain_def nil)
    (/= const-decl "boolean" notequal nil)
    (not_one_element? const-decl "bool" deriv_domain_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (deriv_subtype assuming "derivatives[S].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (deriv_subtype 0
  (deriv_subtype-3 "" 3786709826
   ("" (skosimp*)
    (("" (lemma "del_neigh_all_lem[S]")
      (("" (assert)
        (("" (lemma "derivable_subtype")
          (("" (inst?)
            (("" (assert)
              (("" (expand "restrict")
                (("" (expand "deriv" 1 1)
                  (("" (apply-extensionality 1 :hide? t)
                    (("1"
                      (name "L1"
                            "deriv[S](LAMBDA (s: S): f!1(s), x!1)")
                      (("1" (replace -1)
                        (("1" (name "L2" "deriv[T](f!1)(x!1)")
                          (("1" (replace -1)
                            (("1" (expand "derivable?")
                              (("1"
                                (inst?)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (expand "derivable?")
                                    (("1"
                                      (lemma
                                       "lim_e_del[(derivatives_def[S].A(x!1))]")
                                      (("1"
                                        (inst
                                         -
                                         "0"
                                         "NQ(LAMBDA (s: S): f!1(s), x!1)"
                                         "L1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "lim_e_del[(derivatives_def[T].A(x!1))]")
                                            (("1"
                                              (inst
                                               -
                                               "0"
                                               "NQ(f!1, x!1)"
                                               "L1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "deriv")
                                                  (("1"
                                                    (expand "deriv")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide
                                                         -2
                                                         -3
                                                         -4
                                                         -5)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "e!1")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (expand
                                                                 "del_neigh_all?")
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "x!1")
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "min(del!1,del!2)")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "NQ")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "x!2")
                                                                            (("2"
                                                                              (expand
                                                                               "A")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -4
                                                                                     "x!1+x!2")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (expand "derivable?" -1)
                        (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((S formal-subtype-decl nil derivatives_subtype nil)
    (S_pred const-decl "[T -> boolean]" derivatives_subtype nil)
    (T formal-subtype-decl nil derivatives_subtype nil)
    (T_pred const-decl "[real -> boolean]" derivatives_subtype nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (del_neigh_all_lem formula-decl nil deriv_domain_def nil)
    (derivable_subtype formula-decl nil derivatives_subtype nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_domain? const-decl "bool" deriv_domain_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (lim_e_del formula-decl nil lim_of_functions nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (x!1 skolem-const-decl "S" derivatives_subtype nil)
    (x!2 skolem-const-decl "(derivatives_def[T].A(x!1))"
     derivatives_subtype nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (del_neigh_all? const-decl "bool" deriv_domain_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NQ const-decl "real" derivatives_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (f!1 skolem-const-decl "[T -> real]" derivatives_subtype nil)
    (deriv const-decl "real" derivatives_def nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (restrict const-decl "R" restrict nil))
   shostak)
  (deriv_subtype-2 nil 3474735300
   ("" (skosimp*)
    (("" (lemma "del_neigh_all_lem[S]")
      (("" (assert)
        (("" (lemma "derivable_subtype")
          (("" (inst?)
            (("" (assert)
              (("" (expand "restrict")
                (("" (expand "deriv" 1 1)
                  (("" (apply-extensionality 1 :hide? t)
                    (("1"
                      (name "L1" "deriv(LAMBDA (s: S): f!1(s), x!1)")
                      (("1" (replace -1)
                        (("1" (name "L2" "deriv[T](f!1)(x!1)")
                          (("1" (replace -1)
                            (("1" (expand "derivable?")
                              (("1"
                                (inst?)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (expand "derivable?")
                                    (("1"
                                      (lemma
                                       "lim_e_del[(derivatives_def[S].A(x!1))]")
                                      (("1"
                                        (inst
                                         -
                                         "0"
                                         "NQ(LAMBDA (s: S): f!1(s), x!1)"
                                         "L1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "lim_e_del[(derivatives_def[T].A(x!1))]")
                                            (("1"
                                              (inst
                                               -
                                               "0"
                                               "NQ(f!1, x!1)"
                                               "L1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "deriv")
                                                  (("1"
                                                    (expand "deriv")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide
                                                         -2
                                                         -3
                                                         -4
                                                         -5)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "e!1")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (expand
                                                                 "del_neigh_all?")
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "x!1")
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "min(del!1,del!2)")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "NQ")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "x!2")
                                                                            (("2"
                                                                              (expand
                                                                               "A")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -4
                                                                                     "x!1+x!2")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "not_one_element")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma "deriv_domain")
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (expand "derivable?" -1)
                        (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_fun type-eq-decl nil derivatives nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv const-decl "real" derivatives_def nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (NQ const-decl "real" derivatives_def nil)
    (del_neigh_all? const-decl "bool" deriv_domain_def nil)
    (A const-decl "setof[nzreal]" derivatives_def nil)
    (lim_e_del formula-decl nil lim_of_functions nil)
    (not_one_element? const-decl "bool" deriv_domain_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (del_neigh_all_lem formula-decl nil deriv_domain_def nil))
   nil)
  (deriv_subtype-1 nil 3474730910
   ("" (skosimp*)
    (("" (lemma "derivable_subtype")
      (("" (inst?)
        (("" (assert)
          (("" (expand "restrict")
            (("" (expand "deriv" 1 1)
              (("" (apply-extensionality 1 :hide? t)
                (("1" (typepred "x!1")
                  (("1" (expand "deriv")
                    (("1" (expand "derivable?")
                      (("1" (inst - "x!1")
                        (("1" (inst - "x!1")
                          (("1" (expand "derivable?")
                            (("1" (expand "convergent?")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (lemma
                                   "lim_fun_def[(derivatives_def[T].A(x!1))]")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -5)
                                        (("1"
                                          (lemma
                                           "lim_fun_def[(derivatives_def[S].A(x!1))]")
                                          (("1"
                                            (inst
                                             -
                                             "NQ(LAMBDA (s: S): f!1(s), x!1)"
                                             "l!1"
                                             "0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (expand "deriv")
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (hide -1 -2)
                                                      (("1"
                                                        (reveal -4)
                                                        (("1"
                                                          (expand
                                                           "convergence")
                                                          (("1"
                                                            (lemma
                                                             "cv_unique[T]")
                                                            (("1"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil)
                                             ("3" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "convergent?")
                                      (("2" (inst + "l!2") nil nil))
                                      nil)
                                     ("3" (postpone) nil nil)
                                     ("4" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (expand "not_one?")
                    (("2" (inst -4 "x!2") nil nil)) nil))
                  nil)
                 ("3" (skosimp*)
                  (("3" (expand "deriv_domain?")
                    (("3" (inst - "e!1" "x!2") nil nil)) nil))
                  nil)
                 ("4" (skosimp*)
                  (("4" (expand "derivable?" -1)
                    (("4" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (deriv_subtype_dd_TCC1 0
  (deriv_subtype_dd_TCC1-1 nil 3790597108
   ("" (skeep)
    (("" (lemma "derivable_subtype")
      (("" (inst -1 "f") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((derivable_subtype formula-decl nil derivatives_subtype nil)
    (T formal-subtype-decl nil derivatives_subtype nil)
    (T_pred const-decl "[real -> boolean]" derivatives_subtype nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (deriv_subtype_dd subtype
    "restrict[T, S, real].restrict(derivatives_subtype.f)"
    "deriv_fun[S]")))
 (deriv_subtype_dd 0
  (deriv_subtype_dd-1 nil 3790597180
   ("" (skosimp*)
    (("" (lemma "derivable_subtype")
      (("" (inst?)
        (("" (assert)
          (("" (expand "restrict")
            (("" (expand "deriv" 1 1)
              (("" (apply-extensionality 1 :hide? t)
                (("1"
                  (name "L1" "deriv[S](LAMBDA (s: S): f!1(s), x!1)")
                  (("1" (lemma "deriv_def[S]")
                    (("1"
                      (inst -1 "LAMBDA (s: S): f!1(s)"
                       "deriv[T](f!1)(x!1)" "x!1")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (expand "derivable?" -3)
                            (("1" (inst -3 "x!1")
                              (("1"
                                (expand "derivable?" -3)
                                (("1"
                                  (expand "convergent?" -3)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (lemma "deriv_def[T]")
                                      (("1"
                                        (inst -1 "f!1" "l" "x!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "deriv" 1 1)
                                              (("1"
                                                (replace -2 1)
                                                (("1"
                                                  (hide -1 -2 -3 -4)
                                                  (("1"
                                                    (hide -2 3)
                                                    (("1"
                                                      (expand
                                                       "convergence")
                                                      (("1"
                                                        (expand
                                                         "convergence")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (expand
                                                               "adh"
                                                               1)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (expand
                                                                   "adh"
                                                                   -1)
                                                                  (("1"
                                                                    (reveal
                                                                     -)
                                                                    (("1"
                                                                      (hide
                                                                       -7
                                                                       -8
                                                                       -9
                                                                       -10)
                                                                      (("1"
                                                                        (expand
                                                                         "deriv_domain?"
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "e"
                                                                           "x!1")
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "y")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "fullset"
                                                                                   1
                                                                                   1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "A"
                                                                                 1
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "epsilon")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "delta")
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (inst
                                                                         -4
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "NQ")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "A"
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (typepred
                                                                               "x!1")
                                                                              (("2"
                                                                                (typepred
                                                                                 "x")
                                                                                (("2"
                                                                                  (expand
                                                                                   "A"
                                                                                   -2)
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (expand "derivable?" -1)
                    (("2" (inst -1 "x") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_subtype formula-decl nil derivatives_subtype nil)
    (deriv const-decl "[T -> real]" derivatives nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_domain? const-decl "bool" deriv_domain_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def nil)
    (convergent? const-decl "bool" lim_of_functions nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NQ const-decl "real" derivatives_def nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "(A(x!1))" derivatives_subtype nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def nil)
    (x!1 skolem-const-decl "S" derivatives_subtype nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (y skolem-const-decl
     "{u: nzreal | T_pred(u + x!1) AND S_pred(u + x!1)}"
     derivatives_subtype nil)
    (fullset const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv_def formula-decl nil derivatives_def nil)
    (f!1 skolem-const-decl "[T -> real]" derivatives_subtype nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (deriv const-decl "real" derivatives_def nil)
    (derivable? const-decl "bool" derivatives nil)
    (deriv_fun type-eq-decl nil derivatives nil)
    (S_pred const-decl "[T -> boolean]" derivatives_subtype nil)
    (S formal-subtype-decl nil derivatives_subtype nil)
    (restrict const-decl "R" restrict nil)
    (T formal-subtype-decl nil derivatives_subtype nil)
    (T_pred const-decl "[real -> boolean]" derivatives_subtype nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (deriv_subtype_eq 0
  (deriv_subtype_eq-1 nil 3794254913
   ("" (skeep)
    (("" (lemma "derivable_subtype")
      (("" (inst?)
        (("" (assert)
          (("" (expand "restrict" -1)
            (("" (assert)
              (("" (lemma "deriv_subtype_dd")
                (("" (inst?)
                  (("" (assert)
                    (("" (expand "restrict" -1) (("" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_subtype formula-decl nil derivatives_subtype nil)
    (deriv_subtype_dd formula-decl nil derivatives_subtype nil)
    (restrict const-decl "R" restrict nil)
    (T formal-subtype-decl nil derivatives_subtype nil)
    (T_pred const-decl "[real -> boolean]" derivatives_subtype nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (derivable_subtype_del_TCC1 0
  (derivable_subtype_del_TCC2-1 nil 3794308947
   ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives_subtype nil)
    (T formal-subtype-decl nil derivatives_subtype nil)
    (S_pred const-decl "[T -> boolean]" derivatives_subtype nil)
    (S formal-subtype-decl nil derivatives_subtype nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (fullset const-decl "set" sets nil)
    (deriv_domain? const-decl "bool" deriv_domain_def nil)
    (/= const-decl "boolean" notequal nil)
    (not_one_element? const-decl "bool" deriv_domain_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (derivable_subtype_del assuming "derivatives_def[S].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (derivable_subtype_del_TCC2 0
  (derivable_subtype_del_TCC3-1 nil 3794308947
   ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives_subtype nil)
    (T formal-subtype-decl nil derivatives_subtype nil)
    (S_pred const-decl "[T -> boolean]" derivatives_subtype nil)
    (S formal-subtype-decl nil derivatives_subtype nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (fullset const-decl "set" sets nil)
    (deriv_domain? const-decl "bool" deriv_domain_def nil)
    (/= const-decl "boolean" notequal nil)
    (not_one_element? const-decl "bool" deriv_domain_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (derivable_subtype_del assuming "derivatives_def[S].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (derivable_subtype_del 0
  (derivable_subtype_del-1 nil 3794312858
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (typepred "x")
          (("1" (skeep)
            (("1" (expand "derivable?")
              (("1" (hide -5 -6)
                (("1" (expand "convergent?")
                  (("1" (skeep)
                    (("1" (inst 1 "l")
                      (("1" (expand "convergence")
                        (("1" (expand "convergence")
                          (("1" (flatten)
                            (("1" (split 1)
                              (("1"
                                (expand "adh" 1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand "adh" -4)
                                    (("1"
                                      (inst -4 "min(e,del)")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "x2")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand "A")
                                            (("2"
                                              (typepred "x2")
                                              (("2"
                                                (expand "A" -2)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (inst -5 "epsilon")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst 1 "min(delta,del)")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst -7 "x2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "NQ")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (decompose-equality
                                                   -8)
                                                  (("1"
                                                    (inst-cp -1 "x")
                                                    (("1"
                                                      (inst-cp
                                                       -1
                                                       "x2+x")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "A")
                                            (("2"
                                              (typepred "x2")
                                              (("2"
                                                (expand "A" -2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst -7 "x2+x")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (split -6)
                                                          (("1"
                                                            (expand
                                                             "member"
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "extend"
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             -4
                                                             -5
                                                             -6
                                                             -7
                                                             -8)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (typepred "x")
          (("2" (expand "derivable?")
            (("2" (skeep)
              (("2" (expand "convergent?")
                (("2" (skeep)
                  (("2" (inst 1 "l")
                    (("2" (expand "convergence")
                      (("2" (expand "convergence")
                        (("2" (split 1)
                          (("1" (flatten)
                            (("1" (expand "adh" 1)
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "adh" -4)
                                  (("1"
                                    (inst -4 "min(e,del)")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "x2")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (expand "A")
                                          (("2"
                                            (typepred "x2")
                                            (("2"
                                              (expand "A" -2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst -5 "x2+x")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (split -4)
                                                        (("1"
                                                          (expand
                                                           "extend"
                                                           -1)
                                                          (("1"
                                                            (expand
                                                             "member"
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (skeep)
                              (("2"
                                (inst -5 "epsilon")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst 1 "min(delta,del)")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst -7 "x2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "NQ")
                                            (("1"
                                              (decompose-equality -10)
                                              (("1"
                                                (inst-cp -1 "x")
                                                (("1"
                                                  (inst -1 "x2+x")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "A" 1)
                                          (("2"
                                            (typepred "x2")
                                            (("2"
                                              (expand "A")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (S formal-subtype-decl nil derivatives_subtype nil)
    (S_pred const-decl "[T -> boolean]" derivatives_subtype nil)
    (T formal-subtype-decl nil derivatives_subtype nil)
    (T_pred const-decl "[real -> boolean]" derivatives_subtype nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (convergent? const-decl "bool" lim_of_functions nil)
    (convergence const-decl "bool" convergence_functions nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def nil)
    (x skolem-const-decl "{xx: S |
   EXISTS (del: posreal):
     FORALL (y: T):
       abs(xx - y) < del IMPLIES
        member[T](y, extend[T, S, bool, FALSE](fullset[S]))}"
     derivatives_subtype nil)
    (x2 skolem-const-decl "(A(x))" derivatives_subtype nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (x2 skolem-const-decl "(A(x))" derivatives_subtype nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" derivatives_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (not_one_element? const-decl "bool" deriv_domain_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def nil)
    (x2 skolem-const-decl "(A(x))" derivatives_subtype nil)
    (x2 skolem-const-decl "(A(x))" derivatives_subtype nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (deriv_subtype_del_TCC1 0
  (deriv_subtype_del_TCC1-1 nil 3794383922
   ("" (skeep)
    (("" (lemma "derivable_subtype_del")
      (("" (inst?) (("" (inst -1 "f") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((derivable_subtype_del formula-decl nil derivatives_subtype nil)
    (fullset const-decl "set" sets nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (S formal-subtype-decl nil derivatives_subtype nil)
    (S_pred const-decl "[T -> boolean]" derivatives_subtype nil)
    (T formal-subtype-decl nil derivatives_subtype nil)
    (T_pred const-decl "[real -> boolean]" derivatives_subtype nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (deriv_subtype_del subtype "derivatives_subtype.x"
    "{x | derivatives_def[S].derivable?(derivatives_subtype.g, x)}")))
 (deriv_subtype_del_TCC2 0
  (deriv_subtype_del_TCC3-1 nil 3794383922
   ("" (skeep)
    (("" (assert)
      (("" (lemma "derivable_subtype_del")
        (("" (inst?) (("" (inst -1 "f") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (T_pred const-decl "[real -> boolean]" derivatives_subtype nil)
    (T formal-subtype-decl nil derivatives_subtype nil)
    (S_pred const-decl "[T -> boolean]" derivatives_subtype nil)
    (S formal-subtype-decl nil derivatives_subtype nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (fullset const-decl "set" sets nil)
    (derivable_subtype_del formula-decl nil derivatives_subtype nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (deriv_subtype_del subtype "derivatives_subtype.x"
    "{x | derivatives_def[T].derivable?(derivatives_subtype.f, x)}")))
 (deriv_subtype_del 0
  (deriv_subtype_del-1 nil 3794384513
   ("" (skeep)
    (("" (lemma "deriv_def")
      (("" (lemma "derivable_subtype_del")
        (("" (inst -1 "f" "g" "x")
          (("" (assert)
            (("" (flatten)
              ((""
                (case "NOT (derivable?[S](g, x) AND derivable?[T](f, x))")
                (("1" (split 1)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
                 ("2" (hide -2 -3)
                  (("2" (hide -6)
                    (("2" (flatten)
                      (("2" (lemma "deriv_def[S]")
                        (("2" (expand "derivable?")
                          (("2" (expand "convergent?" -2)
                            (("2" (expand "convergent?" -3)
                              (("2"
                                (skeep*)
                                (("2"
                                  (inst -1 "g" "l" "x")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (inst
                                         -5
                                         "f"
                                         "deriv[S](g,x)"
                                         "x")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (replace -2)
                                              (("2"
                                                (hide -4)
                                                (("2"
                                                  (typepred "x")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (expand
                                                       "convergence")
                                                      (("2"
                                                        (expand
                                                         "convergence")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (expand
                                                               "adh"
                                                               1)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (expand
                                                                   "adh"
                                                                   -6)
                                                                  (("1"
                                                                    (hide
                                                                     -1
                                                                     -2)
                                                                    (("1"
                                                                      (inst
                                                                       -4
                                                                       "min(e,del)")
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           1
                                                                           "x2")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "A")
                                                                            (("2"
                                                                              (typepred
                                                                               "x2")
                                                                              (("2"
                                                                                (expand
                                                                                 "A"
                                                                                 -2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2)
                                                                (("2"
                                                                  (inst
                                                                   -5
                                                                   "epsilon")
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "min(delta,del)")
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (inst
                                                                           -7
                                                                           "x2")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "NQ")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (decompose-equality
                                                                                   -10)
                                                                                  (("1"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "x")
                                                                                    (("1"
                                                                                      (inst-cp
                                                                                       -1
                                                                                       "x2+x")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "A")
                                                                            (("2"
                                                                              (typepred
                                                                               "x2")
                                                                              (("2"
                                                                                (expand
                                                                                 "A"
                                                                                 -2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -5
                                                                                     "x2+x")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (split
                                                                                           -4)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "extend"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             -4
                                                                                             -5
                                                                                             -6
                                                                                             -7
                                                                                             -8)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-subtype-decl nil derivatives_subtype nil)
    (T_pred const-decl "[real -> boolean]" derivatives_subtype nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_def formula-decl nil derivatives_def nil)
    (S_pred const-decl "[T -> boolean]" derivatives_subtype nil)
    (S formal-subtype-decl nil derivatives_subtype nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (fullset const-decl "set" sets nil)
    (convergence const-decl "bool" lim_of_functions nil)
    (x2 skolem-const-decl "(A(x))" derivatives_subtype nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" derivatives_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (adh const-decl "setof[real]" convergence_functions nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def nil)
    (x skolem-const-decl "{xx: S |
   EXISTS (del: posreal):
     FORALL (y: T):
       abs(xx - y) < del IMPLIES
        member[T](y, extend[T, S, bool, FALSE](fullset[S]))}"
     derivatives_subtype nil)
    (x2 skolem-const-decl "(A(x))" derivatives_subtype nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions nil)
    (deriv const-decl "real" derivatives_def nil)
    (TRUE const-decl "bool" booleans nil)
    (convergent? const-decl "bool" lim_of_functions nil)
    (not_one_element? const-decl "bool" deriv_domain_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def nil)
    (derivable? const-decl "bool" derivatives_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (derivable_subtype_del formula-decl nil derivatives_subtype nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)))

